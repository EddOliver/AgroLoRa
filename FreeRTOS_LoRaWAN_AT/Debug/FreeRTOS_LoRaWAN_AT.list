
FreeRTOS_LoRaWAN_AT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020ad0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002874  08020c10  08020c10  00030c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023484  08023484  00040124  2**0
                  CONTENTS
  4 .ARM          00000008  08023484  08023484  00033484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802348c  0802348c  00040124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802348c  0802348c  0003348c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023490  08023490  00033490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08023494  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004790  20000124  080235b8  00040124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048b4  080235b8  000448b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00040124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e45c  00000000  00000000  0004014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b5ed  00000000  00000000  0008e5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003ad0  00000000  00000000  00099b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003658  00000000  00000000  0009d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be56  00000000  00000000  000a0cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000496c6  00000000  00000000  000ccb16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d723d  00000000  00000000  001161dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ed419  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f25c  00000000  00000000  001ed46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000124 	.word	0x20000124
 800015c:	00000000 	.word	0x00000000
 8000160:	08020bf8 	.word	0x08020bf8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000128 	.word	0x20000128
 800017c:	08020bf8 	.word	0x08020bf8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__gedf2>:
 8000508:	f04f 3cff 	mov.w	ip, #4294967295
 800050c:	e006      	b.n	800051c <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__ledf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	e002      	b.n	800051c <__cmpdf2+0x4>
 8000516:	bf00      	nop

08000518 <__cmpdf2>:
 8000518:	f04f 0c01 	mov.w	ip, #1
 800051c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000520:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000528:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800052c:	bf18      	it	ne
 800052e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000532:	d01b      	beq.n	800056c <__cmpdf2+0x54>
 8000534:	b001      	add	sp, #4
 8000536:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800053a:	bf0c      	ite	eq
 800053c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000540:	ea91 0f03 	teqne	r1, r3
 8000544:	bf02      	ittt	eq
 8000546:	ea90 0f02 	teqeq	r0, r2
 800054a:	2000      	moveq	r0, #0
 800054c:	4770      	bxeq	lr
 800054e:	f110 0f00 	cmn.w	r0, #0
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf58      	it	pl
 8000558:	4299      	cmppl	r1, r3
 800055a:	bf08      	it	eq
 800055c:	4290      	cmpeq	r0, r2
 800055e:	bf2c      	ite	cs
 8000560:	17d8      	asrcs	r0, r3, #31
 8000562:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000566:	f040 0001 	orr.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000570:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000574:	d102      	bne.n	800057c <__cmpdf2+0x64>
 8000576:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800057a:	d107      	bne.n	800058c <__cmpdf2+0x74>
 800057c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000580:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000584:	d1d6      	bne.n	8000534 <__cmpdf2+0x1c>
 8000586:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800058a:	d0d3      	beq.n	8000534 <__cmpdf2+0x1c>
 800058c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <__aeabi_cdrcmple>:
 8000594:	4684      	mov	ip, r0
 8000596:	4610      	mov	r0, r2
 8000598:	4662      	mov	r2, ip
 800059a:	468c      	mov	ip, r1
 800059c:	4619      	mov	r1, r3
 800059e:	4663      	mov	r3, ip
 80005a0:	e000      	b.n	80005a4 <__aeabi_cdcmpeq>
 80005a2:	bf00      	nop

080005a4 <__aeabi_cdcmpeq>:
 80005a4:	b501      	push	{r0, lr}
 80005a6:	f7ff ffb7 	bl	8000518 <__cmpdf2>
 80005aa:	2800      	cmp	r0, #0
 80005ac:	bf48      	it	mi
 80005ae:	f110 0f00 	cmnmi.w	r0, #0
 80005b2:	bd01      	pop	{r0, pc}

080005b4 <__aeabi_dcmpeq>:
 80005b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b8:	f7ff fff4 	bl	80005a4 <__aeabi_cdcmpeq>
 80005bc:	bf0c      	ite	eq
 80005be:	2001      	moveq	r0, #1
 80005c0:	2000      	movne	r0, #0
 80005c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005c6:	bf00      	nop

080005c8 <__aeabi_dcmplt>:
 80005c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005cc:	f7ff ffea 	bl	80005a4 <__aeabi_cdcmpeq>
 80005d0:	bf34      	ite	cc
 80005d2:	2001      	movcc	r0, #1
 80005d4:	2000      	movcs	r0, #0
 80005d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005da:	bf00      	nop

080005dc <__aeabi_dcmple>:
 80005dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005e0:	f7ff ffe0 	bl	80005a4 <__aeabi_cdcmpeq>
 80005e4:	bf94      	ite	ls
 80005e6:	2001      	movls	r0, #1
 80005e8:	2000      	movhi	r0, #0
 80005ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ee:	bf00      	nop

080005f0 <__aeabi_dcmpge>:
 80005f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f4:	f7ff ffce 	bl	8000594 <__aeabi_cdrcmple>
 80005f8:	bf94      	ite	ls
 80005fa:	2001      	movls	r0, #1
 80005fc:	2000      	movhi	r0, #0
 80005fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000602:	bf00      	nop

08000604 <__aeabi_dcmpgt>:
 8000604:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000608:	f7ff ffc4 	bl	8000594 <__aeabi_cdrcmple>
 800060c:	bf34      	ite	cc
 800060e:	2001      	movcc	r0, #1
 8000610:	2000      	movcs	r0, #0
 8000612:	f85d fb08 	ldr.w	pc, [sp], #8
 8000616:	bf00      	nop

08000618 <__aeabi_d2iz>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000620:	d215      	bcs.n	800064e <__aeabi_d2iz+0x36>
 8000622:	d511      	bpl.n	8000648 <__aeabi_d2iz+0x30>
 8000624:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000628:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800062c:	d912      	bls.n	8000654 <__aeabi_d2iz+0x3c>
 800062e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000636:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800063a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800063e:	fa23 f002 	lsr.w	r0, r3, r2
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	4770      	bx	lr
 8000648:	f04f 0000 	mov.w	r0, #0
 800064c:	4770      	bx	lr
 800064e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000652:	d105      	bne.n	8000660 <__aeabi_d2iz+0x48>
 8000654:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000658:	bf08      	it	eq
 800065a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065e:	4770      	bx	lr
 8000660:	f04f 0000 	mov.w	r0, #0
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop

08000668 <__aeabi_frsub>:
 8000668:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800066c:	e002      	b.n	8000674 <__addsf3>
 800066e:	bf00      	nop

08000670 <__aeabi_fsub>:
 8000670:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000674 <__addsf3>:
 8000674:	0042      	lsls	r2, r0, #1
 8000676:	bf1f      	itttt	ne
 8000678:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800067c:	ea92 0f03 	teqne	r2, r3
 8000680:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000684:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000688:	d06a      	beq.n	8000760 <__addsf3+0xec>
 800068a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800068e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000692:	bfc1      	itttt	gt
 8000694:	18d2      	addgt	r2, r2, r3
 8000696:	4041      	eorgt	r1, r0
 8000698:	4048      	eorgt	r0, r1
 800069a:	4041      	eorgt	r1, r0
 800069c:	bfb8      	it	lt
 800069e:	425b      	neglt	r3, r3
 80006a0:	2b19      	cmp	r3, #25
 80006a2:	bf88      	it	hi
 80006a4:	4770      	bxhi	lr
 80006a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006b2:	bf18      	it	ne
 80006b4:	4240      	negne	r0, r0
 80006b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006c2:	bf18      	it	ne
 80006c4:	4249      	negne	r1, r1
 80006c6:	ea92 0f03 	teq	r2, r3
 80006ca:	d03f      	beq.n	800074c <__addsf3+0xd8>
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	fa41 fc03 	asr.w	ip, r1, r3
 80006d4:	eb10 000c 	adds.w	r0, r0, ip
 80006d8:	f1c3 0320 	rsb	r3, r3, #32
 80006dc:	fa01 f103 	lsl.w	r1, r1, r3
 80006e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006e4:	d502      	bpl.n	80006ec <__addsf3+0x78>
 80006e6:	4249      	negs	r1, r1
 80006e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f0:	d313      	bcc.n	800071a <__addsf3+0xa6>
 80006f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006f6:	d306      	bcc.n	8000706 <__addsf3+0x92>
 80006f8:	0840      	lsrs	r0, r0, #1
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	f102 0201 	add.w	r2, r2, #1
 8000702:	2afe      	cmp	r2, #254	; 0xfe
 8000704:	d251      	bcs.n	80007aa <__addsf3+0x136>
 8000706:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800070a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800070e:	bf08      	it	eq
 8000710:	f020 0001 	biceq.w	r0, r0, #1
 8000714:	ea40 0003 	orr.w	r0, r0, r3
 8000718:	4770      	bx	lr
 800071a:	0049      	lsls	r1, r1, #1
 800071c:	eb40 0000 	adc.w	r0, r0, r0
 8000720:	3a01      	subs	r2, #1
 8000722:	bf28      	it	cs
 8000724:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000728:	d2ed      	bcs.n	8000706 <__addsf3+0x92>
 800072a:	fab0 fc80 	clz	ip, r0
 800072e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000732:	ebb2 020c 	subs.w	r2, r2, ip
 8000736:	fa00 f00c 	lsl.w	r0, r0, ip
 800073a:	bfaa      	itet	ge
 800073c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000740:	4252      	neglt	r2, r2
 8000742:	4318      	orrge	r0, r3
 8000744:	bfbc      	itt	lt
 8000746:	40d0      	lsrlt	r0, r2
 8000748:	4318      	orrlt	r0, r3
 800074a:	4770      	bx	lr
 800074c:	f092 0f00 	teq	r2, #0
 8000750:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000754:	bf06      	itte	eq
 8000756:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800075a:	3201      	addeq	r2, #1
 800075c:	3b01      	subne	r3, #1
 800075e:	e7b5      	b.n	80006cc <__addsf3+0x58>
 8000760:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000764:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000768:	bf18      	it	ne
 800076a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800076e:	d021      	beq.n	80007b4 <__addsf3+0x140>
 8000770:	ea92 0f03 	teq	r2, r3
 8000774:	d004      	beq.n	8000780 <__addsf3+0x10c>
 8000776:	f092 0f00 	teq	r2, #0
 800077a:	bf08      	it	eq
 800077c:	4608      	moveq	r0, r1
 800077e:	4770      	bx	lr
 8000780:	ea90 0f01 	teq	r0, r1
 8000784:	bf1c      	itt	ne
 8000786:	2000      	movne	r0, #0
 8000788:	4770      	bxne	lr
 800078a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800078e:	d104      	bne.n	800079a <__addsf3+0x126>
 8000790:	0040      	lsls	r0, r0, #1
 8000792:	bf28      	it	cs
 8000794:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000798:	4770      	bx	lr
 800079a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800079e:	bf3c      	itt	cc
 80007a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007a4:	4770      	bxcc	lr
 80007a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b2:	4770      	bx	lr
 80007b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b8:	bf16      	itet	ne
 80007ba:	4608      	movne	r0, r1
 80007bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c0:	4601      	movne	r1, r0
 80007c2:	0242      	lsls	r2, r0, #9
 80007c4:	bf06      	itte	eq
 80007c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007ca:	ea90 0f01 	teqeq	r0, r1
 80007ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ui2f>:
 80007d4:	f04f 0300 	mov.w	r3, #0
 80007d8:	e004      	b.n	80007e4 <__aeabi_i2f+0x8>
 80007da:	bf00      	nop

080007dc <__aeabi_i2f>:
 80007dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e0:	bf48      	it	mi
 80007e2:	4240      	negmi	r0, r0
 80007e4:	ea5f 0c00 	movs.w	ip, r0
 80007e8:	bf08      	it	eq
 80007ea:	4770      	bxeq	lr
 80007ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f0:	4601      	mov	r1, r0
 80007f2:	f04f 0000 	mov.w	r0, #0
 80007f6:	e01c      	b.n	8000832 <__aeabi_l2f+0x2a>

080007f8 <__aeabi_ul2f>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e00a      	b.n	800081c <__aeabi_l2f+0x14>
 8000806:	bf00      	nop

08000808 <__aeabi_l2f>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000814:	d502      	bpl.n	800081c <__aeabi_l2f+0x14>
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	ea5f 0c01 	movs.w	ip, r1
 8000820:	bf02      	ittt	eq
 8000822:	4684      	moveq	ip, r0
 8000824:	4601      	moveq	r1, r0
 8000826:	2000      	moveq	r0, #0
 8000828:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800082c:	bf08      	it	eq
 800082e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000832:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000836:	fabc f28c 	clz	r2, ip
 800083a:	3a08      	subs	r2, #8
 800083c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000840:	db10      	blt.n	8000864 <__aeabi_l2f+0x5c>
 8000842:	fa01 fc02 	lsl.w	ip, r1, r2
 8000846:	4463      	add	r3, ip
 8000848:	fa00 fc02 	lsl.w	ip, r0, r2
 800084c:	f1c2 0220 	rsb	r2, r2, #32
 8000850:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000854:	fa20 f202 	lsr.w	r2, r0, r2
 8000858:	eb43 0002 	adc.w	r0, r3, r2
 800085c:	bf08      	it	eq
 800085e:	f020 0001 	biceq.w	r0, r0, #1
 8000862:	4770      	bx	lr
 8000864:	f102 0220 	add.w	r2, r2, #32
 8000868:	fa01 fc02 	lsl.w	ip, r1, r2
 800086c:	f1c2 0220 	rsb	r2, r2, #32
 8000870:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000874:	fa21 f202 	lsr.w	r2, r1, r2
 8000878:	eb43 0002 	adc.w	r0, r3, r2
 800087c:	bf08      	it	eq
 800087e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000882:	4770      	bx	lr

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b974 	b.w	8000b84 <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9e08      	ldr	r6, [sp, #32]
 80008ba:	460d      	mov	r5, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	4688      	mov	r8, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14d      	bne.n	8000960 <__udivmoddi4+0xac>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4694      	mov	ip, r2
 80008c8:	d968      	bls.n	800099c <__udivmoddi4+0xe8>
 80008ca:	fab2 f282 	clz	r2, r2
 80008ce:	b152      	cbz	r2, 80008e6 <__udivmoddi4+0x32>
 80008d0:	fa01 f302 	lsl.w	r3, r1, r2
 80008d4:	f1c2 0120 	rsb	r1, r2, #32
 80008d8:	fa20 f101 	lsr.w	r1, r0, r1
 80008dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e0:	ea41 0803 	orr.w	r8, r1, r3
 80008e4:	4094      	lsls	r4, r2
 80008e6:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80008ea:	0c21      	lsrs	r1, r4, #16
 80008ec:	fbb8 fef5 	udiv	lr, r8, r5
 80008f0:	fa1f f78c 	uxth.w	r7, ip
 80008f4:	fb05 831e 	mls	r3, r5, lr, r8
 80008f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008fc:	fb0e f107 	mul.w	r1, lr, r7
 8000900:	4299      	cmp	r1, r3
 8000902:	d90b      	bls.n	800091c <__udivmoddi4+0x68>
 8000904:	eb1c 0303 	adds.w	r3, ip, r3
 8000908:	f10e 30ff 	add.w	r0, lr, #4294967295
 800090c:	f080 811e 	bcs.w	8000b4c <__udivmoddi4+0x298>
 8000910:	4299      	cmp	r1, r3
 8000912:	f240 811b 	bls.w	8000b4c <__udivmoddi4+0x298>
 8000916:	f1ae 0e02 	sub.w	lr, lr, #2
 800091a:	4463      	add	r3, ip
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f5 	udiv	r0, r3, r5
 8000924:	fb05 3310 	mls	r3, r5, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 f707 	mul.w	r7, r0, r7
 8000930:	42a7      	cmp	r7, r4
 8000932:	d90a      	bls.n	800094a <__udivmoddi4+0x96>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 33ff 	add.w	r3, r0, #4294967295
 800093c:	f080 8108 	bcs.w	8000b50 <__udivmoddi4+0x29c>
 8000940:	42a7      	cmp	r7, r4
 8000942:	f240 8105 	bls.w	8000b50 <__udivmoddi4+0x29c>
 8000946:	4464      	add	r4, ip
 8000948:	3802      	subs	r0, #2
 800094a:	1be4      	subs	r4, r4, r7
 800094c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000950:	2100      	movs	r1, #0
 8000952:	b11e      	cbz	r6, 800095c <__udivmoddi4+0xa8>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c6 4300 	strd	r4, r3, [r6]
 800095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000960:	428b      	cmp	r3, r1
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0xc2>
 8000964:	2e00      	cmp	r6, #0
 8000966:	f000 80ee 	beq.w	8000b46 <__udivmoddi4+0x292>
 800096a:	2100      	movs	r1, #0
 800096c:	e9c6 0500 	strd	r0, r5, [r6]
 8000970:	4608      	mov	r0, r1
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d14a      	bne.n	8000a14 <__udivmoddi4+0x160>
 800097e:	42ab      	cmp	r3, r5
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xd4>
 8000982:	4282      	cmp	r2, r0
 8000984:	f200 80f9 	bhi.w	8000b7a <__udivmoddi4+0x2c6>
 8000988:	1a84      	subs	r4, r0, r2
 800098a:	eb65 0303 	sbc.w	r3, r5, r3
 800098e:	2001      	movs	r0, #1
 8000990:	4698      	mov	r8, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d0e2      	beq.n	800095c <__udivmoddi4+0xa8>
 8000996:	e9c6 4800 	strd	r4, r8, [r6]
 800099a:	e7df      	b.n	800095c <__udivmoddi4+0xa8>
 800099c:	b902      	cbnz	r2, 80009a0 <__udivmoddi4+0xec>
 800099e:	deff      	udf	#255	; 0xff
 80009a0:	fab2 f282 	clz	r2, r2
 80009a4:	2a00      	cmp	r2, #0
 80009a6:	f040 8091 	bne.w	8000acc <__udivmoddi4+0x218>
 80009aa:	eba1 050c 	sub.w	r5, r1, ip
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb5 f3f7 	udiv	r3, r5, r7
 80009bc:	fb07 5013 	mls	r0, r7, r3, r5
 80009c0:	0c25      	lsrs	r5, r4, #16
 80009c2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80009c6:	fb0e f003 	mul.w	r0, lr, r3
 80009ca:	42a8      	cmp	r0, r5
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x12c>
 80009ce:	eb1c 0505 	adds.w	r5, ip, r5
 80009d2:	f103 38ff 	add.w	r8, r3, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x12a>
 80009d8:	42a8      	cmp	r0, r5
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2c0>
 80009de:	4643      	mov	r3, r8
 80009e0:	1a2d      	subs	r5, r5, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb5 f0f7 	udiv	r0, r5, r7
 80009e8:	fb07 5510 	mls	r5, r7, r0, r5
 80009ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x156>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 35ff 	add.w	r5, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x154>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2ca>
 8000a08:	4628      	mov	r0, r5
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a12:	e79e      	b.n	8000952 <__udivmoddi4+0x9e>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa20 f407 	lsr.w	r4, r0, r7
 8000a26:	fa05 f301 	lsl.w	r3, r5, r1
 8000a2a:	431c      	orrs	r4, r3
 8000a2c:	40fd      	lsrs	r5, r7
 8000a2e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a32:	fa00 f301 	lsl.w	r3, r0, r1
 8000a36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a3a:	0c20      	lsrs	r0, r4, #16
 8000a3c:	fa1f fe8c 	uxth.w	lr, ip
 8000a40:	fb09 5518 	mls	r5, r9, r8, r5
 8000a44:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000a48:	fb08 f00e 	mul.w	r0, r8, lr
 8000a4c:	42a8      	cmp	r0, r5
 8000a4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b8>
 8000a54:	eb1c 0505 	adds.w	r5, ip, r5
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2bc>
 8000a60:	42a8      	cmp	r0, r5
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2bc>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4465      	add	r5, ip
 8000a6c:	1a2d      	subs	r5, r5, r0
 8000a6e:	b2a4      	uxth	r4, r4
 8000a70:	fbb5 f0f9 	udiv	r0, r5, r9
 8000a74:	fb09 5510 	mls	r5, r9, r0, r5
 8000a78:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000a7c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a80:	45ae      	cmp	lr, r5
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1e2>
 8000a84:	eb1c 0505 	adds.w	r5, ip, r5
 8000a88:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2b4>
 8000a8e:	45ae      	cmp	lr, r5
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2b4>
 8000a92:	3802      	subs	r0, #2
 8000a94:	4465      	add	r5, ip
 8000a96:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a9a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a9e:	eba5 050e 	sub.w	r5, r5, lr
 8000aa2:	42a5      	cmp	r5, r4
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46a6      	mov	lr, r4
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x2a4>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x2a0>
 8000aac:	b15e      	cbz	r6, 8000ac6 <__udivmoddi4+0x212>
 8000aae:	ebb3 0208 	subs.w	r2, r3, r8
 8000ab2:	eb65 050e 	sbc.w	r5, r5, lr
 8000ab6:	fa05 f707 	lsl.w	r7, r5, r7
 8000aba:	fa22 f301 	lsr.w	r3, r2, r1
 8000abe:	40cd      	lsrs	r5, r1
 8000ac0:	431f      	orrs	r7, r3
 8000ac2:	e9c6 7500 	strd	r7, r5, [r6]
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c2 0320 	rsb	r3, r2, #32
 8000ad0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad8:	fa25 f303 	lsr.w	r3, r5, r3
 8000adc:	4095      	lsls	r5, r2
 8000ade:	430d      	orrs	r5, r1
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000aec:	fb07 3011 	mls	r0, r7, r1, r3
 8000af0:	0c2b      	lsrs	r3, r5, #16
 8000af2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000af6:	fb01 f00e 	mul.w	r0, r1, lr
 8000afa:	4298      	cmp	r0, r3
 8000afc:	fa04 f402 	lsl.w	r4, r4, r2
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x260>
 8000b02:	eb1c 0303 	adds.w	r3, ip, r3
 8000b06:	f101 38ff 	add.w	r8, r1, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b8>
 8000b0c:	4298      	cmp	r0, r3
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b8>
 8000b10:	3902      	subs	r1, #2
 8000b12:	4463      	add	r3, ip
 8000b14:	1a1b      	subs	r3, r3, r0
 8000b16:	b2ad      	uxth	r5, r5
 8000b18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b1c:	fb07 3310 	mls	r3, r7, r0, r3
 8000b20:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b24:	fb00 f30e 	mul.w	r3, r0, lr
 8000b28:	42ab      	cmp	r3, r5
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x28a>
 8000b2c:	eb1c 0505 	adds.w	r5, ip, r5
 8000b30:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b36:	42ab      	cmp	r3, r5
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4465      	add	r5, ip
 8000b3e:	1aed      	subs	r5, r5, r3
 8000b40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0x104>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e707      	b.n	800095c <__udivmoddi4+0xa8>
 8000b4c:	4686      	mov	lr, r0
 8000b4e:	e6e5      	b.n	800091c <__udivmoddi4+0x68>
 8000b50:	4618      	mov	r0, r3
 8000b52:	e6fa      	b.n	800094a <__udivmoddi4+0x96>
 8000b54:	454b      	cmp	r3, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f8>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b60:	3801      	subs	r0, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f8>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x28a>
 8000b68:	4620      	mov	r0, r4
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1e2>
 8000b6c:	4641      	mov	r1, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x260>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b8>
 8000b74:	3b02      	subs	r3, #2
 8000b76:	4465      	add	r5, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x12c>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e709      	b.n	8000992 <__udivmoddi4+0xde>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x156>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ba4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bac:	68fb      	ldr	r3, [r7, #12]
}
 8000bae:	bf00      	nop
 8000bb0:	3714      	adds	r7, #20
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bce:	4013      	ands	r3, r2
 8000bd0:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_ADC_Init+0x94>)
 8000be2:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <MX_ADC_Init+0x98>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000be6:	4b22      	ldr	r3, [pc, #136]	; (8000c70 <MX_ADC_Init+0x94>)
 8000be8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000bec:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_ADC_Init+0x94>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	; (8000c70 <MX_ADC_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_ADC_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c00:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_ADC_Init+0x94>)
 8000c5e:	f001 fe29 	bl	80028b4 <HAL_ADC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000c68:	f000 faee 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000140 	.word	0x20000140
 8000c74:	40012400 	.word	0x40012400

08000c78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a05      	ldr	r2, [pc, #20]	; (8000c9c <HAL_ADC_MspInit+0x24>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d103      	bne.n	8000c92 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8e:	f7ff ff7b 	bl	8000b88 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40012400 	.word	0x40012400

08000ca0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <HAL_ADC_MspDeInit+0x24>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d103      	bne.n	8000cba <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000cb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cb6:	f7ff ff7f 	bl	8000bb8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012400 	.word	0x40012400

08000cc8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ccc:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <SYS_InitMeasurement+0x14>)
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <SYS_InitMeasurement+0x18>)
 8000cd0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000140 	.word	0x20000140
 8000ce0:	40012400 	.word	0x40012400

08000ce4 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  int16_t temperatureDegreeC = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	81fb      	strh	r3, [r7, #14]
  uint32_t measuredLevel = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000cf2:	f000 f871 	bl	8000dd8 <SYS_GetBatteryLevel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000cfa:	4830      	ldr	r0, [pc, #192]	; (8000dbc <SYS_GetTemperatureLevel+0xd8>)
 8000cfc:	f000 f8a0 	bl	8000e40 <ADC_ReadChannels>
 8000d00:	60b8      	str	r0, [r7, #8]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <SYS_GetTemperatureLevel+0xdc>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <SYS_GetTemperatureLevel+0xe0>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d026      	beq.n	8000d5c <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SYS_GetTemperatureLevel+0xdc>)
 8000d10:	881a      	ldrh	r2, [r3, #0]
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <SYS_GetTemperatureLevel+0xe0>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d01c      	beq.n	8000d54 <SYS_GetTemperatureLevel+0x70>
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	68ba      	ldr	r2, [r7, #8]
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	4a28      	ldr	r2, [pc, #160]	; (8000dc8 <SYS_GetTemperatureLevel+0xe4>)
 8000d26:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2a:	095b      	lsrs	r3, r3, #5
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <SYS_GetTemperatureLevel+0xe0>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	fb03 f202 	mul.w	r2, r3, r2
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <SYS_GetTemperatureLevel+0xdc>)
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <SYS_GetTemperatureLevel+0xe0>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	1acb      	subs	r3, r1, r3
 8000d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	331e      	adds	r3, #30
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	e001      	b.n	8000d58 <SYS_GetTemperatureLevel+0x74>
 8000d54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000d58:	81fb      	strh	r3, [r7, #14]
 8000d5a:	e01c      	b.n	8000d96 <SYS_GetTemperatureLevel+0xb2>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	fb03 f202 	mul.w	r2, r3, r2
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <SYS_GetTemperatureLevel+0xe8>)
 8000d66:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6a:	1ad2      	subs	r2, r2, r3
 8000d6c:	0852      	lsrs	r2, r2, #1
 8000d6e:	4413      	add	r3, r2
 8000d70:	0adb      	lsrs	r3, r3, #11
 8000d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d76:	fb02 f303 	mul.w	r3, r2, r3
 8000d7a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8000d7e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8000d82:	4a13      	ldr	r2, [pc, #76]	; (8000dd0 <SYS_GetTemperatureLevel+0xec>)
 8000d84:	fb82 1203 	smull	r1, r2, r2, r3
 8000d88:	1292      	asrs	r2, r2, #10
 8000d8a:	17db      	asrs	r3, r3, #31
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	331e      	adds	r3, #30
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	81fb      	strh	r3, [r7, #14]
                                                              batteryLevelmV,
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 8000d96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <SYS_GetTemperatureLevel+0xf0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	2100      	movs	r1, #0
 8000da2:	2001      	movs	r0, #1
 8000da4:	f01d fd62 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000da8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dac:	021b      	lsls	r3, r3, #8
 8000dae:	81fb      	strh	r3, [r7, #14]

  return (int16_t) temperatureDegreeC;
 8000db0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	b0001000 	.word	0xb0001000
 8000dc0:	1fff75c8 	.word	0x1fff75c8
 8000dc4:	1fff75a8 	.word	0x1fff75a8
 8000dc8:	09ee009f 	.word	0x09ee009f
 8000dcc:	00100101 	.word	0x00100101
 8000dd0:	68db8bad 	.word	0x68db8bad
 8000dd4:	08020c10 	.word	0x08020c10

08000dd8 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <SYS_GetBatteryLevel+0x5c>)
 8000de8:	f000 f82a 	bl	8000e40 <ADC_ReadChannels>
 8000dec:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	80fb      	strh	r3, [r7, #6]
 8000df8:	e016      	b.n	8000e28 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <SYS_GetBatteryLevel+0x60>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00b      	beq.n	8000e1e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <SYS_GetBatteryLevel+0x60>)
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000e10:	fb03 f202 	mul.w	r2, r3, r2
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	80fb      	strh	r3, [r7, #6]
 8000e1c:	e004      	b.n	8000e28 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e1e:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <SYS_GetBatteryLevel+0x64>)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	b4002000 	.word	0xb4002000
 8000e38:	1fff75aa 	.word	0x1fff75aa
 8000e3c:	004c08d8 	.word	0x004c08d8

08000e40 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000e58:	f7ff fec0 	bl	8000bdc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000e5c:	481a      	ldr	r0, [pc, #104]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000e5e:	f002 fb0f 	bl	8003480 <HAL_ADCEx_Calibration_Start>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000e68:	f000 f9ee 	bl	8001248 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e78:	f107 0308 	add.w	r3, r7, #8
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000e80:	f002 f876 	bl	8002f70 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000e8a:	f000 f9dd 	bl	8001248 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000e8e:	480e      	ldr	r0, [pc, #56]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000e90:	f001 ff52 	bl	8002d38 <HAL_ADC_Start>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000e9a:	f000 f9d5 	bl	8001248 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000ea4:	f001 ffc0 	bl	8002e28 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000eaa:	f001 ff8b 	bl	8002dc4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000eae:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000eb0:	f002 f851 	bl	8002f56 <HAL_ADC_GetValue>
 8000eb4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <ADC_ReadChannels+0x88>)
 8000eb8:	f001 fec2 	bl	8002c40 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000ebc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000140 	.word	0x20000140

08000ecc <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
			*ulExpectedIdleTime * LSI_VALUE / 1000);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
  HAL_LPTIM_Counter_Start_IT(&hlptim1,
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <PreSleepProcessing+0x34>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	099b      	lsrs	r3, r3, #6
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <PreSleepProcessing+0x38>)
 8000eec:	f003 fbd4 	bl	8004698 <HAL_LPTIM_Counter_Start_IT>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f003 ff68 	bl	8004dc8 <HAL_PWR_EnterSLEEPMode>
  //HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
  //HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
//  *ulExpectedIdleTime = 0;
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	10624dd3 	.word	0x10624dd3
 8000f04:	200009f8 	.word	0x200009f8

08000f08 <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
/* place for user code */
  HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <PostSleepProcessing+0x1c>)
 8000f12:	f003 fc63 	bl	80047dc <HAL_LPTIM_Counter_Stop_IT>
  SystemClock_Config();
 8000f16:	f000 f8b3 	bl	8001080 <SystemClock_Config>
  (void) ulExpectedIdleTime;
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	200009f8 	.word	0x200009f8

08000f28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <vApplicationGetIdleTaskMemory+0x30>)
 8000f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200001a4 	.word	0x200001a4
 8000f58:	200001f8 	.word	0x200001f8

08000f5c <LL_AHB1_GRP1_EnableClock>:
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f80:	68fb      	ldr	r3, [r7, #12]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f90:	2004      	movs	r0, #4
 8000f92:	f7ff ffe3 	bl	8000f5c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f96:	2001      	movs	r0, #1
 8000f98:	f7ff ffe0 	bl	8000f5c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	200f      	movs	r0, #15
 8000fa2:	f002 fbc0 	bl	8003726 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f002 fbd7 	bl	800375a <HAL_NVIC_EnableIRQ>

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc0:	f023 0218 	bic.w	r2, r3, #24
 8000fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr

08000fda <LL_AHB2_GRP1_EnableClock>:
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b085      	sub	sp, #20
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr
	...

0800100c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b08e      	sub	sp, #56	; 0x38
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001012:	f001 fa95 	bl	8002540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001016:	f000 f833 	bl	8001080 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 800101a:	f000 f8bb 	bl	8001194 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800101e:	f000 f88d 	bl	800113c <MX_LPTIM1_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  osThreadDef(LED_Task, StartLedTask, osPriorityNormal, 0, 128);
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <main+0x64>)
 8001024:	f107 041c 	add.w	r4, r7, #28
 8001028:	461d      	mov	r5, r3
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001032:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TaskHandle = osThreadCreate(osThread(LED_Task), NULL);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f00b f9c8 	bl	800c3d2 <osThreadCreate>
 8001042:	4603      	mov	r3, r0
 8001044:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <main+0x68>)
 8001046:	6013      	str	r3, [r2, #0]
  osThreadDef(LoRaWAN_Task, StartLoRaWANTask, osPriorityNormal, 0, 1024);
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <main+0x6c>)
 800104a:	463c      	mov	r4, r7
 800104c:	461d      	mov	r5, r3
 800104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaWAN_TaskHandle = osThreadCreate(osThread(LoRaWAN_Task), NULL);
 800105a:	463b      	mov	r3, r7
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00b f9b7 	bl	800c3d2 <osThreadCreate>
 8001064:	4603      	mov	r3, r0
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <main+0x70>)
 8001068:	6013      	str	r3, [r2, #0]
  osKernelStart();
 800106a:	f00b f9ab 	bl	800c3c4 <osKernelStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800106e:	e7fe      	b.n	800106e <main+0x62>
 8001070:	08020c38 	.word	0x08020c38
 8001074:	20000a34 	.word	0x20000a34
 8001078:	08020c54 	.word	0x08020c54
 800107c:	20000a38 	.word	0x20000a38

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09a      	sub	sp, #104	; 0x68
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2248      	movs	r2, #72	; 0x48
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f01f fd16 	bl	8020ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010a6:	f003 fe81 	bl	8004dac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ff80 	bl	8000fb0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <SystemClock_Config+0xb8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b8:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <SystemClock_Config+0xb8>)
 80010ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <SystemClock_Config+0xb8>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_LSI;
 80010cc:	232c      	movs	r3, #44	; 0x2c
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010d0:	2381      	movs	r3, #129	; 0x81
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010d4:	2301      	movs	r3, #1
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80010d8:	2300      	movs	r3, #0
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80010dc:	23b0      	movs	r3, #176	; 0xb0
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0320 	add.w	r3, r7, #32
 80010f0:	4618      	mov	r0, r3
 80010f2:	f004 f97d 	bl	80053f0 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80010fc:	f000 f8a4 	bl	8001248 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001100:	234f      	movs	r3, #79	; 0x4f
 8001102:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f004 fd02 	bl	8005b28 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800112a:	f000 f88d 	bl	8001248 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3768      	adds	r7, #104	; 0x68
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58000400 	.word	0x58000400

0800113c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_LPTIM1_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001148:	2200      	movs	r2, #0
 800114a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_LPTIM1_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001154:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001158:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_LPTIM1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_LPTIM1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_LPTIM1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_LPTIM1_Init+0x50>)
 800117a:	f003 f9c5 	bl	8004508 <HAL_LPTIM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001184:	f000 f860 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200009f8 	.word	0x200009f8
 8001190:	40007c00 	.word	0x40007c00

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	2002      	movs	r0, #2
 80011aa:	f7ff ff16 	bl	8000fda <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2120      	movs	r1, #32
 80011b2:	480a      	ldr	r0, [pc, #40]	; (80011dc <MX_GPIO_Init+0x48>)
 80011b4:	f003 f906 	bl	80043c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011b8:	2320      	movs	r3, #32
 80011ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4619      	mov	r1, r3
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <MX_GPIO_Init+0x48>)
 80011ce:	f002 fecb 	bl	8003f68 <HAL_GPIO_Init>

}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	48000400 	.word	0x48000400

080011e0 <LED_control>:

/* USER CODE BEGIN 4 */
int32_t LED_control(int value) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, value);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	2120      	movs	r1, #32
 80011f0:	4803      	ldr	r0, [pc, #12]	; (8001200 <LED_control+0x20>)
 80011f2:	f003 f8e7 	bl	80043c4 <HAL_GPIO_WritePin>
  return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	48000400 	.word	0x48000400

08001204 <StartLoRaWANTask>:
/* USER CODE END 4 */
/* USER CODE BEGIN 4 */

void StartLoRaWANTask(void const * argument)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* init code for LoRaWAN */
  MX_LoRaWAN_Init();
 800120c:	f008 fae6 	bl	80097dc <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MX_LoRaWAN_Process();
 8001210:	f008 faec 	bl	80097ec <MX_LoRaWAN_Process>
    osDelay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f00b f928 	bl	800c46a <osDelay>
	MX_LoRaWAN_Process();
 800121a:	e7f9      	b.n	8001210 <StartLoRaWANTask+0xc>

0800121c <StartLedTask>:
  }
  /* USER CODE END 5 */
}
/* USER CODE END 4 */
void StartLedTask(void const * argument)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  LED_control(1);
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff ffdb 	bl	80011e0 <LED_control>
  for(;;)
  {
	LED_control(0);
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff ffd8 	bl	80011e0 <LED_control>
	osDelay(500);
 8001230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001234:	f00b f919 	bl	800c46a <osDelay>
	LED_control(1);
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff ffd1 	bl	80011e0 <LED_control>
	osDelay(500);
 800123e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001242:	f00b f912 	bl	800c46a <osDelay>
	LED_control(0);
 8001246:	e7f0      	b.n	800122a <StartLedTask+0xe>

08001248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800124c:	b672      	cpsid	i
}
 800124e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001250:	e7fe      	b.n	8001250 <Error_Handler+0x8>

08001252 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800125e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001262:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <LL_APB1_GRP1_EnableClock>:
{
 8001272:	b480      	push	{r7}
 8001274:	b085      	sub	sp, #20
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4313      	orrs	r3, r2
 8001288:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
	...

080012a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	222c      	movs	r2, #44	; 0x2c
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f01f fc05 	bl	8020ac0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b6:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_RTC_Init+0x9c>)
 80012b8:	4a22      	ldr	r2, [pc, #136]	; (8001344 <MX_RTC_Init+0xa0>)
 80012ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012bc:	4b20      	ldr	r3, [pc, #128]	; (8001340 <MX_RTC_Init+0x9c>)
 80012be:	221f      	movs	r2, #31
 80012c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c2:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_RTC_Init+0x9c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <MX_RTC_Init+0x9c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_RTC_Init+0x9c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_RTC_Init+0x9c>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_RTC_Init+0x9c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_RTC_Init+0x9c>)
 80012e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ea:	4815      	ldr	r0, [pc, #84]	; (8001340 <MX_RTC_Init+0x9c>)
 80012ec:	f005 f8d8 	bl	80064a0 <HAL_RTC_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80012f6:	f7ff ffa7 	bl	8001248 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80012fa:	4811      	ldr	r0, [pc, #68]	; (8001340 <MX_RTC_Init+0x9c>)
 80012fc:	f005 fbc6 	bl	8006a8c <HAL_RTCEx_SetSSRU_IT>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001306:	f7ff ff9f 	bl	8001248 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001316:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800131a:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800131c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2200      	movs	r2, #0
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_RTC_Init+0x9c>)
 800132a:	f005 f933 	bl	8006594 <HAL_RTC_SetAlarm_IT>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001334:	f7ff ff88 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000a3c 	.word	0x20000a3c
 8001344:	40002800 	.word	0x40002800

08001348 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b090      	sub	sp, #64	; 0x40
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	2238      	movs	r2, #56	; 0x38
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f01f fbb1 	bl	8020ac0 <memset>
  if(rtcHandle->Instance==RTC)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <HAL_RTC_MspInit+0x74>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d125      	bne.n	80013b4 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800136c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f004 ff77 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001384:	f7ff ff60 	bl	8001248 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001388:	f7ff ff63 	bl	8001252 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800138c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001390:	f7ff ff6f 	bl	8001272 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2002      	movs	r0, #2
 800139a:	f002 f9c4 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800139e:	2002      	movs	r0, #2
 80013a0:	f002 f9db 	bl	800375a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2100      	movs	r1, #0
 80013a8:	202a      	movs	r0, #42	; 0x2a
 80013aa:	f002 f9bc 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013ae:	202a      	movs	r0, #42	; 0x2a
 80013b0:	f002 f9d3 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3740      	adds	r7, #64	; 0x40
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40002800 	.word	0x40002800

080013c0 <LL_APB1_GRP1_EnableClock>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013e4:	68fb      	ldr	r3, [r7, #12]
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	210f      	movs	r1, #15
 80013f8:	f06f 0001 	mvn.w	r0, #1
 80013fc:	f002 f993 	bl	8003726 <HAL_NVIC_SetPriority>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b090      	sub	sp, #64	; 0x40
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2238      	movs	r2, #56	; 0x38
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f01f fb53 	bl	8020ac0 <memset>
  if(hlptim->Instance==LPTIM1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_LPTIM_MspInit+0x60>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d11a      	bne.n	800145a <HAL_LPTIM_MspInit+0x56>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001428:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <HAL_LPTIM_MspInit+0x64>)
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4618      	mov	r0, r3
 8001434:	f004 ff1a 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800143e:	f7ff ff03 	bl	8001248 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001442:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001446:	f7ff ffbb 	bl	80013c0 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 5, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2105      	movs	r1, #5
 800144e:	2027      	movs	r0, #39	; 0x27
 8001450:	f002 f969 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001454:	2027      	movs	r0, #39	; 0x27
 8001456:	f002 f980 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3740      	adds	r7, #64	; 0x40
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40007c00 	.word	0x40007c00
 8001468:	000c0004 	.word	0x000c0004

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <NMI_Handler+0x4>

08001472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler+0x4>

08001478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <MemManage_Handler+0x4>

0800147e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <BusFault_Handler+0x4>

08001484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <UsageFault_Handler+0x4>

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:
//  /* USER CODE BEGIN SysTick_IRQn 1 */
//
//  /* USER CODE END SysTick_IRQn 1 */
//}
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f001 f871 	bl	8002580 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800149e:	f00b fe17 	bl	800d0d0 <xTaskGetSchedulerState>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d001      	beq.n	80014ac <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014a8:	f00c f806 	bl	800d4b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80014b6:	f005 fb25 	bl	8006b04 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000a3c 	.word	0x20000a3c

080014c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80014c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014cc:	f002 ff92 	bl	80043f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
#ifdef USE_USB_SERIAL
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <DMA1_Channel5_IRQHandler+0x10>)
 80014da:	f002 fbd5 	bl	8003c88 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
#endif
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000b18 	.word	0x20000b18

080014e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <USART1_IRQHandler+0x10>)
 80014ee:	f006 f969 	bl	80077c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000a88 	.word	0x20000a88

080014fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <USART2_IRQHandler+0x10>)
 8001502:	f006 f95f 	bl	80077c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000b78 	.word	0x20000b78

08001510 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <RTC_Alarm_IRQHandler+0x10>)
 8001516:	f005 f9a5 	bl	8006864 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000a3c 	.word	0x20000a3c

08001524 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <SUBGHZ_Radio_IRQHandler+0x10>)
 800152a:	f005 fe53 	bl	80071d4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000a74 	.word	0x20000a74

08001538 <LPTIM1_IRQHandler>:
/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
extern LPTIM_HandleTypeDef hlptim1;
void LPTIM1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <LPTIM1_IRQHandler+0x10>)
 800153e:	f003 f9b3 	bl	80048a8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200009f8 	.word	0x200009f8

0800154c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001558:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800155a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4313      	orrs	r3, r2
 8001562:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001568:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4013      	ands	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001570:	68fb      	ldr	r3, [r7, #12]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SUBGHZ_Init+0x20>)
 8001582:	2208      	movs	r2, #8
 8001584:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_SUBGHZ_Init+0x20>)
 8001588:	f005 fba8 	bl	8006cdc <HAL_SUBGHZ_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001592:	f7ff fe59 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000a74 	.word	0x20000a74

080015a0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015a8:	2001      	movs	r0, #1
 80015aa:	f7ff ffcf 	bl	800154c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2100      	movs	r1, #0
 80015b2:	2032      	movs	r0, #50	; 0x32
 80015b4:	f002 f8b7 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015b8:	2032      	movs	r0, #50	; 0x32
 80015ba:	f002 f8ce 	bl	800375a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80015d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr

080015ec <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <LL_FLASH_GetUDN+0x10>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	1fff7580 	.word	0x1fff7580

08001600 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <LL_FLASH_GetDeviceID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	1fff7584 	.word	0x1fff7584

08001618 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <LL_FLASH_GetSTCompanyID+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	1fff7584 	.word	0x1fff7584

08001630 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff ffc6 	bl	80015c6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 800163a:	f01e f93b 	bl	801f8b4 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
//  DBG_Disable();

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 800163e:	f000 f964 	bl	800190a <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001642:	f01d f8d5 	bl	801e7f0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <SystemApp_Init+0x3c>)
 8001648:	f01d f990 	bl	801e96c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800164c:	2002      	movs	r0, #2
 800164e:	f01d f99b 	bl	801e988 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001652:	f7ff fb39 	bl	8000cc8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001656:	f000 f95e 	bl	8001916 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 800165a:	f01d fb89 	bl	801ed70 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800165e:	2101      	movs	r1, #1
 8001660:	2001      	movs	r0, #1
 8001662:	f01d fbc5 	bl	801edf0 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08001845 	.word	0x08001845

08001670 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END UTIL_SEQ_Idle_1 */
//  UTIL_LPM_EnterLowPower();
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr

0800167c <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af02      	add	r7, sp, #8
  uint8_t batteryLevel = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001686:	f7ff fba7 	bl	8000dd8 <SYS_GetBatteryLevel>
 800168a:	4603      	mov	r3, r0
 800168c:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800168e:	88bb      	ldrh	r3, [r7, #4]
 8001690:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001694:	4293      	cmp	r3, r2
 8001696:	d902      	bls.n	800169e <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001698:	23fe      	movs	r3, #254	; 0xfe
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	e014      	b.n	80016c8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80016a4:	d202      	bcs.n	80016ac <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	71fb      	strb	r3, [r7, #7]
 80016aa:	e00d      	b.n	80016c8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80016b2:	461a      	mov	r2, r3
 80016b4:	4613      	mov	r3, r2
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	461a      	mov	r2, r3
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <GetBatteryLevel+0x68>)
 80016c0:	fba3 2302 	umull	r2, r3, r3, r2
 80016c4:	09db      	lsrs	r3, r3, #7
 80016c6:	71fb      	strb	r3, [r7, #7]
  }

  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <GetBatteryLevel+0x6c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	2100      	movs	r1, #0
 80016d2:	2002      	movs	r0, #2
 80016d4:	f01d f8ca 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 80016d8:	79fb      	ldrb	r3, [r7, #7]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	1b4e81b5 	.word	0x1b4e81b5
 80016e8:	08020c70 	.word	0x08020c70

080016ec <GetTemperatureLevel>:

uint16_t GetTemperatureLevel(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  uint16_t temperatureLevel = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	80fb      	strh	r3, [r7, #6]

  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80016f6:	f7ff faf5 	bl	8000ce4 <SYS_GetTemperatureLevel>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da00      	bge.n	8001702 <GetTemperatureLevel+0x16>
 8001700:	33ff      	adds	r3, #255	; 0xff
 8001702:	121b      	asrs	r3, r3, #8
 8001704:	b21b      	sxth	r3, r3
 8001706:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001708:	88fb      	ldrh	r3, [r7, #6]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001712:	b590      	push	{r4, r7, lr}
 8001714:	b087      	sub	sp, #28
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 800171e:	f7ff ff65 	bl	80015ec <LL_FLASH_GetUDN>
 8001722:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172a:	d138      	bne.n	800179e <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 800172c:	f000 ff3a 	bl	80025a4 <HAL_GetUIDw0>
 8001730:	4604      	mov	r4, r0
 8001732:	f000 ff4b 	bl	80025cc <HAL_GetUIDw2>
 8001736:	4603      	mov	r3, r0
 8001738:	4423      	add	r3, r4
 800173a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 800173c:	f000 ff3c 	bl	80025b8 <HAL_GetUIDw1>
 8001740:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	0e1a      	lsrs	r2, r3, #24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3307      	adds	r3, #7
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	0c1a      	lsrs	r2, r3, #16
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3306      	adds	r3, #6
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	0a1a      	lsrs	r2, r3, #8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3305      	adds	r3, #5
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	0e1a      	lsrs	r2, r3, #24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3303      	adds	r3, #3
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	0c1a      	lsrs	r2, r3, #16
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3302      	adds	r3, #2
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	0a1a      	lsrs	r2, r3, #8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3301      	adds	r3, #1
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 800179c:	e031      	b.n	8001802 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3307      	adds	r3, #7
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	0a1a      	lsrs	r2, r3, #8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3306      	adds	r3, #6
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	0c1a      	lsrs	r2, r3, #16
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3305      	adds	r3, #5
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	0e1a      	lsrs	r2, r3, #24
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3304      	adds	r3, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 80017cc:	f7ff ff18 	bl	8001600 <LL_FLASH_GetDeviceID>
 80017d0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3303      	adds	r3, #3
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 80017dc:	f7ff ff1c 	bl	8001618 <LL_FLASH_GetSTCompanyID>
 80017e0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3302      	adds	r3, #2
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	0a1a      	lsrs	r2, r3, #8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3301      	adds	r3, #1
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	371c      	adds	r7, #28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}

0800180a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001814:	f7ff feea 	bl	80015ec <LL_FLASH_GetUDN>
 8001818:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d10b      	bne.n	800183a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001822:	f000 febf 	bl	80025a4 <HAL_GetUIDw0>
 8001826:	4604      	mov	r4, r0
 8001828:	f000 fec6 	bl	80025b8 <HAL_GetUIDw1>
 800182c:	4603      	mov	r3, r0
 800182e:	405c      	eors	r4, r3
 8001830:	f000 fecc 	bl	80025cc <HAL_GetUIDw2>
 8001834:	4603      	mov	r3, r0
 8001836:	4063      	eors	r3, r4
 8001838:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 800183a:	687b      	ldr	r3, [r7, #4]

}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4618      	mov	r0, r3
 8001854:	f01d fdba 	bl	801f3cc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800185e:	9200      	str	r2, [sp, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	; (8001880 <TimestampNow+0x3c>)
 8001862:	2110      	movs	r1, #16
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f81d 	bl	80018a4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7fe fc88 	bl	8000180 <strlen>
 8001870:	4603      	mov	r3, r0
 8001872:	b29a      	uxth	r2, r3
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	08020c7c 	.word	0x08020c7c

08001884 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001888:	2101      	movs	r1, #1
 800188a:	2002      	movs	r0, #2
 800188c:	f01d fa80 	bl	801ed90 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001898:	2100      	movs	r1, #0
 800189a:	2002      	movs	r0, #2
 800189c:	f01d fa78 	bl	801ed90 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80018a4:	b40c      	push	{r2, r3}
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f01e ff85 	bl	80207cc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018cc:	b002      	add	sp, #8
 80018ce:	4770      	bx	lr

080018d0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 80018e8:	f000 f8de 	bl	8001aa8 <TIMER_IF_GetTimerValue>
 80018ec:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 f95a 	bl	8001bb6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <EnvSensors_Init>:
  return 0;
  /* USER CODE END EnvSensors_Read */
}

int32_t  EnvSensors_Init(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800191a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
	...

08001948 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001952:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <TIMER_IF_Init+0x5c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	f083 0301 	eor.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01b      	beq.n	8001998 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <TIMER_IF_Init+0x60>)
 8001962:	f04f 32ff 	mov.w	r2, #4294967295
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001968:	f7ff fc9c 	bl	80012a4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800196c:	f000 f856 	bl	8001a1c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001970:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <TIMER_IF_Init+0x60>)
 8001976:	f004 ff19 	bl	80067ac <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <TIMER_IF_Init+0x60>)
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <TIMER_IF_Init+0x60>)
 8001984:	f005 f850 	bl	8006a28 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f9d3 	bl	8001d34 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800198e:	f000 f85f 	bl	8001a50 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001992:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <TIMER_IF_Init+0x5c>)
 8001994:	2201      	movs	r2, #1
 8001996:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001998:	79fb      	ldrb	r3, [r7, #7]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000a80 	.word	0x20000a80
 80019a8:	20000a3c 	.word	0x20000a3c

080019ac <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	222c      	movs	r2, #44	; 0x2c
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f01f f87c 	bl	8020ac0 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80019c8:	f000 f828 	bl	8001a1c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <TIMER_IF_StartTimer+0x68>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	4413      	add	r3, r2
 80019d4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	43db      	mvns	r3, r3
 80019de:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80019e4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019e8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80019ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019f0:	f107 0308 	add.w	r3, r7, #8
 80019f4:	2201      	movs	r2, #1
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <TIMER_IF_StartTimer+0x6c>)
 80019fa:	f004 fdcb 	bl	8006594 <HAL_RTC_SetAlarm_IT>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001a04:	f7ff fc20 	bl	8001248 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3738      	adds	r7, #56	; 0x38
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000a84 	.word	0x20000a84
 8001a18:	20000a3c 	.word	0x20000a3c

08001a1c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <TIMER_IF_StopTimer+0x2c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a30:	4806      	ldr	r0, [pc, #24]	; (8001a4c <TIMER_IF_StopTimer+0x30>)
 8001a32:	f004 febb 	bl	80067ac <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <TIMER_IF_StopTimer+0x30>)
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40002800 	.word	0x40002800
 8001a4c:	20000a3c 	.word	0x20000a3c

08001a50 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001a54:	f000 f98e 	bl	8001d74 <GetTimerTicks>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <TIMER_IF_SetTimerContext+0x18>)
 8001a5c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a5e:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <TIMER_IF_SetTimerContext+0x18>)
 8001a60:	681b      	ldr	r3, [r3, #0]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000a84 	.word	0x20000a84

08001a6c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a70:	4b02      	ldr	r3, [pc, #8]	; (8001a7c <TIMER_IF_GetTimerContext+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000a84 	.word	0x20000a84

08001a80 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001a8a:	f000 f973 	bl	8001d74 <GetTimerTicks>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001a98:	687b      	ldr	r3, [r7, #4]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000a84 	.word	0x20000a84

08001aa8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <TIMER_IF_GetTimerValue+0x24>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001aba:	f000 f95b 	bl	8001d74 <GetTimerTicks>
 8001abe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001ac0:	687b      	ldr	r3, [r7, #4]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000a80 	.word	0x20000a80

08001ad0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ada:	2303      	movs	r3, #3
 8001adc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001aea:	b5b0      	push	{r4, r5, r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001af2:	2100      	movs	r1, #0
 8001af4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	2000      	movs	r0, #0
 8001afa:	460a      	mov	r2, r1
 8001afc:	4603      	mov	r3, r0
 8001afe:	0d95      	lsrs	r5, r2, #22
 8001b00:	0294      	lsls	r4, r2, #10
 8001b02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe feb9 	bl	8000884 <__aeabi_uldivmod>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4613      	mov	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdb0      	pop	{r4, r5, r7, pc}

08001b24 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b24:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b28:	b085      	sub	sp, #20
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b2e:	2100      	movs	r1, #0
 8001b30:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	2000      	movs	r0, #0
 8001b36:	460c      	mov	r4, r1
 8001b38:	4605      	mov	r5, r0
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f04f 0a00 	mov.w	sl, #0
 8001b42:	f04f 0b00 	mov.w	fp, #0
 8001b46:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001b4a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001b4e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001b52:	4650      	mov	r0, sl
 8001b54:	4659      	mov	r1, fp
 8001b56:	1b02      	subs	r2, r0, r4
 8001b58:	eb61 0305 	sbc.w	r3, r1, r5
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	0099      	lsls	r1, r3, #2
 8001b66:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b6a:	0090      	lsls	r0, r2, #2
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	eb12 0804 	adds.w	r8, r2, r4
 8001b74:	eb43 0905 	adc.w	r9, r3, r5
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b8c:	4690      	mov	r8, r2
 8001b8e:	4699      	mov	r9, r3
 8001b90:	4640      	mov	r0, r8
 8001b92:	4649      	mov	r1, r9
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	0a82      	lsrs	r2, r0, #10
 8001b9e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001ba2:	0a8b      	lsrs	r3, r1, #10
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bb4:	4770      	bx	lr

08001bb6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff ff93 	bl	8001aea <TIMER_IF_Convert_ms2Tick>
 8001bc4:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001bc6:	f000 f8d5 	bl	8001d74 <GetTimerTicks>
 8001bca:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bcc:	e000      	b.n	8001bd0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001bce:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bd0:	f000 f8d0 	bl	8001d74 <GetTimerTicks>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d8f6      	bhi.n	8001bce <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001bf2:	f01d ffad 	bl	801fb50 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001c06:	f000 f8a5 	bl	8001d54 <TIMER_IF_BkUp_Read_MSBticks>
 8001c0a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4618      	mov	r0, r3
 8001c12:	f000 f88f 	bl	8001d34 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001c1e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c22:	b08c      	sub	sp, #48	; 0x30
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001c2c:	f000 f8a2 	bl	8001d74 <GetTimerTicks>
 8001c30:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c32:	f000 f88f 	bl	8001d54 <TIMER_IF_BkUp_Read_MSBticks>
 8001c36:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	60fa      	str	r2, [r7, #12]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	000b      	movs	r3, r1
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c50:	2000      	movs	r0, #0
 8001c52:	460c      	mov	r4, r1
 8001c54:	4605      	mov	r5, r0
 8001c56:	eb12 0804 	adds.w	r8, r2, r4
 8001c5a:	eb43 0905 	adc.w	r9, r3, r5
 8001c5e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	0a82      	lsrs	r2, r0, #10
 8001c70:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001c74:	0a8b      	lsrs	r3, r1, #10
 8001c76:	4613      	mov	r3, r2
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001c88:	f04f 0b00 	mov.w	fp, #0
 8001c8c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff46 	bl	8001b24 <TIMER_IF_Convert_Tick2ms>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3730      	adds	r7, #48	; 0x30
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cac <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001cba:	f004 ff47 	bl	8006b4c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000a3c 	.word	0x20000a3c

08001ccc <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001cda:	f004 ff37 	bl	8006b4c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000a3c 	.word	0x20000a3c

08001cec <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001cfa:	f004 ff3f 	bl	8006b7c <HAL_RTCEx_BKUPRead>
 8001cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000a3c 	.word	0x20000a3c

08001d10 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001d1e:	f004 ff2d 	bl	8006b7c <HAL_RTCEx_BKUPRead>
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001d24:	687b      	ldr	r3, [r7, #4]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000a3c 	.word	0x20000a3c

08001d34 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001d42:	f004 ff03 	bl	8006b4c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000a3c 	.word	0x20000a3c

08001d54 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001d5a:	2102      	movs	r1, #2
 8001d5c:	4804      	ldr	r0, [pc, #16]	; (8001d70 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001d5e:	f004 ff0d 	bl	8006b7c <HAL_RTCEx_BKUPRead>
 8001d62:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001d64:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000a3c 	.word	0x20000a3c

08001d74 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 8001d78:	4803      	ldr	r0, [pc, #12]	; (8001d88 <GetTimerTicks+0x14>)
 8001d7a:	f7ff fdd9 	bl	8001930 <LL_RTC_TIME_GetSubSecond>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40002800 	.word	0x40002800

08001d8c <LL_AHB2_GRP1_EnableClock>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db0:	68fb      	ldr	r3, [r7, #12]
}
 8001db2:	bf00      	nop
 8001db4:	3714      	adds	r7, #20
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <LL_APB1_GRP1_EnableClock>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de0:	68fb      	ldr	r3, [r7, #12]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr

08001dec <LL_APB1_GRP1_DisableClock>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e02:	4013      	ands	r3, r2
 8001e04:	658b      	str	r3, [r1, #88]	; 0x58
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <LL_APB2_GRP1_EnableClock>:
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <LL_APB2_GRP1_DisableClock>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e56:	4013      	ands	r3, r2
 8001e58:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e6a:	4a23      	ldr	r2, [pc, #140]	; (8001ef8 <MX_USART1_UART_Init+0x94>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b1f      	ldr	r3, [pc, #124]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea0:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eac:	4811      	ldr	r0, [pc, #68]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001eae:	f005 fb50 	bl	8007552 <HAL_UART_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001eb8:	f7ff f9c6 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	480d      	ldr	r0, [pc, #52]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001ec0:	f007 fba1 	bl	8009606 <HAL_UARTEx_SetTxFifoThreshold>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001eca:	f7ff f9bd 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4808      	ldr	r0, [pc, #32]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001ed2:	f007 fbd6 	bl	8009682 <HAL_UARTEx_SetRxFifoThreshold>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001edc:	f7ff f9b4 	bl	8001248 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <MX_USART1_UART_Init+0x90>)
 8001ee2:	f007 fb55 	bl	8009590 <HAL_UARTEx_EnableFifoMode>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001eec:	f7ff f9ac 	bl	8001248 <Error_Handler>
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000a88 	.word	0x20000a88
 8001ef8:	40013800 	.word	0x40013800

08001efc <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b096      	sub	sp, #88	; 0x58
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f01e fdcf 	bl	8020ac0 <memset>
  if(uartHandle->Instance==USART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a5d      	ldr	r2, [pc, #372]	; (800209c <HAL_UART_MspInit+0x1a0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d156      	bne.n	8001fda <HAL_UART_MspInit+0xde>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001f30:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <HAL_UART_MspInit+0x1a4>)
 8001f32:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 f997 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f44:	f7ff f980 	bl	8001248 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f4c:	f7ff ff60 	bl	8001e10 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff ff1b 	bl	8001d8c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USART1_RX_Pin|USART1_TX_Pin;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f66:	2307      	movs	r3, #7
 8001f68:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f6e:	4619      	mov	r1, r3
 8001f70:	484c      	ldr	r0, [pc, #304]	; (80020a4 <HAL_UART_MspInit+0x1a8>)
 8001f72:	f001 fff9 	bl	8003f68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f78:	4a4c      	ldr	r2, [pc, #304]	; (80020ac <HAL_UART_MspInit+0x1b0>)
 8001f7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f7e:	2212      	movs	r2, #18
 8001f80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f82:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f84:	2210      	movs	r2, #16
 8001f86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f88:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f94:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fac:	483e      	ldr	r0, [pc, #248]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001fae:	f001 fbf1 	bl	8003794 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001fb8:	f7ff f946 	bl	8001248 <Error_Handler>
    // if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
    // {
      // Error_Handler();
    // }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3a      	ldr	r2, [pc, #232]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001fc0:	679a      	str	r2, [r3, #120]	; 0x78
 8001fc2:	4a39      	ldr	r2, [pc, #228]	; (80020a8 <HAL_UART_MspInit+0x1ac>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2102      	movs	r1, #2
 8001fcc:	2024      	movs	r0, #36	; 0x24
 8001fce:	f001 fbaa 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fd2:	2024      	movs	r0, #36	; 0x24
 8001fd4:	f001 fbc1 	bl	800375a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd8:	e05b      	b.n	8002092 <HAL_UART_MspInit+0x196>
  else if(uartHandle->Instance==USART2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a34      	ldr	r2, [pc, #208]	; (80020b0 <HAL_UART_MspInit+0x1b4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d156      	bne.n	8002092 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_UART_MspInit+0x1b8>)
 8001fea:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 f93b 	bl	800626c <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8001ffc:	f7ff f924 	bl	8001248 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002000:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002004:	f7ff feda 	bl	8001dbc <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	2001      	movs	r0, #1
 800200a:	f7ff febf 	bl	8001d8c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 800200e:	230c      	movs	r3, #12
 8002010:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800201e:	2307      	movs	r3, #7
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f001 ff9c 	bl	8003f68 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002030:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002032:	4a1e      	ldr	r2, [pc, #120]	; (80020ac <HAL_UART_MspInit+0x1b0>)
 8002034:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002038:	2214      	movs	r2, #20
 800203a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 800203e:	2210      	movs	r2, #16
 8002040:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002048:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002060:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002066:	4814      	ldr	r0, [pc, #80]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 8002068:	f001 fb94 	bl	8003794 <HAL_DMA_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8002072:	f7ff f8e9 	bl	8001248 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 800207a:	679a      	str	r2, [r3, #120]	; 0x78
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <HAL_UART_MspInit+0x1bc>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2102      	movs	r1, #2
 8002086:	2025      	movs	r0, #37	; 0x25
 8002088:	f001 fb4d 	bl	8003726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800208c:	2025      	movs	r0, #37	; 0x25
 800208e:	f001 fb64 	bl	800375a <HAL_NVIC_EnableIRQ>
}
 8002092:	bf00      	nop
 8002094:	3758      	adds	r7, #88	; 0x58
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40013800 	.word	0x40013800
 80020a0:	00030001 	.word	0x00030001
 80020a4:	48000400 	.word	0x48000400
 80020a8:	20000b18 	.word	0x20000b18
 80020ac:	40020058 	.word	0x40020058
 80020b0:	40004400 	.word	0x40004400
 80020b4:	000c0004 	.word	0x000c0004
 80020b8:	20000c08 	.word	0x20000c08

080020bc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a16      	ldr	r2, [pc, #88]	; (8002124 <HAL_UART_MspDeInit+0x68>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d110      	bne.n	80020f0 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80020ce:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020d2:	f7ff feb5 	bl	8001e40 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USART1_RX_Pin|USART1_TX_Pin);
 80020d6:	21c0      	movs	r1, #192	; 0xc0
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <HAL_UART_MspDeInit+0x6c>)
 80020da:	f002 f8a5 	bl	8004228 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 fbfe 	bl	80038e4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80020e8:	2024      	movs	r0, #36	; 0x24
 80020ea:	f001 fb44 	bl	8003776 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80020ee:	e015      	b.n	800211c <HAL_UART_MspDeInit+0x60>
  else if(uartHandle->Instance==USART2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_UART_MspDeInit+0x70>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d110      	bne.n	800211c <HAL_UART_MspDeInit+0x60>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80020fe:	f7ff fe75 	bl	8001dec <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, USART2_RX_Pin|USART2_TX_Pin);
 8002102:	210c      	movs	r1, #12
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f002 f88e 	bl	8004228 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002110:	4618      	mov	r0, r3
 8002112:	f001 fbe7 	bl	80038e4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002116:	2025      	movs	r0, #37	; 0x25
 8002118:	f001 fb2d 	bl	8003776 <HAL_NVIC_DisableIRQ>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40013800 	.word	0x40013800
 8002128:	48000400 	.word	0x48000400
 800212c:	40004400 	.word	0x40004400

08002130 <LL_APB2_GRP1_ForceReset>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800213e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4313      	orrs	r3, r2
 8002146:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <LL_APB2_GRP1_ReleaseReset>:
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	43db      	mvns	r3, r3
 8002164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002168:	4013      	ands	r3, r2
 800216a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
	...

08002178 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002180:	4b06      	ldr	r3, [pc, #24]	; (800219c <LL_EXTI_EnableIT_0_31+0x24>)
 8002182:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002186:	4905      	ldr	r1, [pc, #20]	; (800219c <LL_EXTI_EnableIT_0_31+0x24>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58000800 	.word	0x58000800

080021a0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80021a8:	4a07      	ldr	r2, [pc, #28]	; (80021c8 <vcom_Init+0x28>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80021ae:	f7fe feed 	bl	8000f8c <MX_DMA_Init>
#ifdef USE_USB_SERIAL
  MX_USART1_UART_Init();
 80021b2:	f7ff fe57 	bl	8001e64 <MX_USART1_UART_Init>
#else
  MX_USART2_UART_Init();
#endif
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80021b6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80021ba:	f7ff ffdd 	bl	8002178 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80021be:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000c6c 	.word	0x20000c6c

080021cc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
#ifdef USE_USB_SERIAL
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80021d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021d4:	f7ff ffac 	bl	8002130 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80021d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021dc:	f7ff ffb9 	bl	8002152 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <vcom_DeInit+0x28>)
 80021e2:	f7ff ff6b 	bl	80020bc <HAL_UART_MspDeInit>
  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
#endif
  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80021e6:	200f      	movs	r0, #15
 80021e8:	f001 fac5 	bl	8003776 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80021ec:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000a88 	.word	0x20000a88

080021f8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
#ifdef USE_USB_SERIAL
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	461a      	mov	r2, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <vcom_Trace_DMA+0x24>)
 800220c:	f005 fa48 	bl	80076a0 <HAL_UART_Transmit_DMA>
#else
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
#endif
  return UTIL_ADV_TRACE_OK;
 8002210:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000a88 	.word	0x20000a88

08002220 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002228:	4a19      	ldr	r2, [pc, #100]	; (8002290 <vcom_ReceiveInit+0x70>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800222e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002232:	60bb      	str	r3, [r7, #8]
#ifdef USE_USB_SERIAL
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002234:	f107 0308 	add.w	r3, r7, #8
 8002238:	e893 0006 	ldmia.w	r3, {r1, r2}
 800223c:	4815      	ldr	r0, [pc, #84]	; (8002294 <vcom_ReceiveInit+0x74>)
 800223e:	f007 f91a 	bl	8009476 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002242:	bf00      	nop
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <vcom_ReceiveInit+0x74>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d0f7      	beq.n	8002244 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002254:	bf00      	nop
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <vcom_ReceiveInit+0x74>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002264:	d1f7      	bne.n	8002256 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <vcom_ReceiveInit+0x74>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <vcom_ReceiveInit+0x74>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002274:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <vcom_ReceiveInit+0x74>)
 8002278:	f007 f958 	bl	800952c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	4906      	ldr	r1, [pc, #24]	; (8002298 <vcom_ReceiveInit+0x78>)
 8002280:	4804      	ldr	r0, [pc, #16]	; (8002294 <vcom_ReceiveInit+0x74>)
 8002282:	f005 f9b7 	bl	80075f4 <HAL_UART_Receive_IT>
  HAL_UARTEx_EnableStopMode(&huart2);

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
#endif
  return UTIL_ADV_TRACE_OK;
 8002286:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000c70 	.word	0x20000c70
 8002294:	20000a88 	.word	0x20000a88
 8002298:	20000c68 	.word	0x20000c68

0800229c <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80022a4:	4b03      	ldr	r3, [pc, #12]	; (80022b4 <HAL_UART_TxCpltCallback+0x18>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2000      	movs	r0, #0
 80022aa:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80022ac:	bf00      	nop
 80022ae:	3708      	adds	r7, #8
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000c6c 	.word	0x20000c6c

080022b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
#ifdef USE_USB_SERIAL
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_UART_RxCpltCallback+0x38>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <HAL_UART_RxCpltCallback+0x26>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <HAL_UART_RxCpltCallback+0x26>
  {
	RxCpltCallback(&charRx, 1, 0);
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_UART_RxCpltCallback+0x38>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2101      	movs	r1, #1
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <HAL_UART_RxCpltCallback+0x3c>)
 80022dc:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80022de:	2201      	movs	r2, #1
 80022e0:	4904      	ldr	r1, [pc, #16]	; (80022f4 <HAL_UART_RxCpltCallback+0x3c>)
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f005 f986 	bl	80075f4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(huart2, &charRx, 1);
#endif
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000c70 	.word	0x20000c70
 80022f4:	20000c68 	.word	0x20000c68

080022f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022f8:	480d      	ldr	r0, [pc, #52]	; (8002330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022fc:	f7ff fb12 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <LoopForever+0x6>)
  ldr r1, =_edata
 8002302:	490d      	ldr	r1, [pc, #52]	; (8002338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <LoopForever+0xe>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002308:	e002      	b.n	8002310 <LoopCopyDataInit>

0800230a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800230a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800230c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800230e:	3304      	adds	r3, #4

08002310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002314:	d3f9      	bcc.n	800230a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002316:	4a0a      	ldr	r2, [pc, #40]	; (8002340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002318:	4c0a      	ldr	r4, [pc, #40]	; (8002344 <LoopForever+0x16>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800231c:	e001      	b.n	8002322 <LoopFillZerobss>

0800231e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800231e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002320:	3204      	adds	r2, #4

08002322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002324:	d3fb      	bcc.n	800231e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002326:	f01e fba7 	bl	8020a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800232a:	f7fe fe6f 	bl	800100c <main>

0800232e <LoopForever>:

LoopForever:
    b LoopForever
 800232e:	e7fe      	b.n	800232e <LoopForever>
  ldr   r0, =_estack
 8002330:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002338:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 800233c:	08023494 	.word	0x08023494
  ldr r2, =_sbss
 8002340:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 8002344:	200048b4 	.word	0x200048b4

08002348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002348:	e7fe      	b.n	8002348 <ADC_IRQHandler>

0800234a <LL_AHB2_GRP1_EnableClock>:
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002358:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4313      	orrs	r3, r2
 8002360:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800236e:	68fb      	ldr	r3, [r7, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
	...

0800237c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002386:	f107 030c 	add.w	r3, r7, #12
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002396:	2002      	movs	r0, #2
 8002398:	f7ff ffd7 	bl	800234a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 800239c:	2320      	movs	r3, #32
 800239e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80023a0:	2301      	movs	r3, #1
 80023a2:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <BSP_LED_Init+0x60>)
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	f107 020c 	add.w	r2, r7, #12
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fdd4 	bl	8003f68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	4a06      	ldr	r2, [pc, #24]	; (80023dc <BSP_LED_Init+0x60>)
 80023c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c8:	2120      	movs	r1, #32
 80023ca:	2201      	movs	r2, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f001 fff9 	bl	80043c4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000004 	.word	0x20000004

080023e0 <LL_AHB2_GRP1_EnableClock>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002404:	68fb      	ldr	r3, [r7, #12]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8002424:	2001      	movs	r0, #1
 8002426:	f7ff ffdb 	bl	80023e0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800242a:	2310      	movs	r3, #16
 800242c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002442:	f001 fd91 	bl	8003f68 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002446:	2320      	movs	r3, #32
 8002448:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	4619      	mov	r1, r3
 800244e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002452:	f001 fd89 	bl	8003f68 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002456:	2200      	movs	r2, #0
 8002458:	2120      	movs	r1, #32
 800245a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800245e:	f001 ffb1 	bl	80043c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002462:	2200      	movs	r2, #0
 8002464:	2110      	movs	r1, #16
 8002466:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800246a:	f001 ffab 	bl	80043c4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d83f      	bhi.n	8002508 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024bb 	.word	0x080024bb
 8002498:	080024d5 	.word	0x080024d5
 800249c:	080024ef 	.word	0x080024ef
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2110      	movs	r1, #16
 80024a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024a8:	f001 ff8c 	bl	80043c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2120      	movs	r1, #32
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f001 ff86 	bl	80043c4 <HAL_GPIO_WritePin>
      break;      
 80024b8:	e027      	b.n	800250a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80024ba:	2201      	movs	r2, #1
 80024bc:	2110      	movs	r1, #16
 80024be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c2:	f001 ff7f 	bl	80043c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80024c6:	2200      	movs	r2, #0
 80024c8:	2120      	movs	r1, #32
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ce:	f001 ff79 	bl	80043c4 <HAL_GPIO_WritePin>
      break;
 80024d2:	e01a      	b.n	800250a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80024d4:	2201      	movs	r2, #1
 80024d6:	2110      	movs	r1, #16
 80024d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024dc:	f001 ff72 	bl	80043c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80024e0:	2201      	movs	r2, #1
 80024e2:	2120      	movs	r1, #32
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f001 ff6c 	bl	80043c4 <HAL_GPIO_WritePin>
      break;
 80024ec:	e00d      	b.n	800250a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80024ee:	2200      	movs	r2, #0
 80024f0:	2110      	movs	r1, #16
 80024f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024f6:	f001 ff65 	bl	80043c4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80024fa:	2201      	movs	r2, #1
 80024fc:	2120      	movs	r1, #32
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002502:	f001 ff5f 	bl	80043c4 <HAL_GPIO_WritePin>
      break;
 8002506:	e000      	b.n	800250a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002508:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002518:	2302      	movs	r3, #2
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254a:	2003      	movs	r0, #3
 800254c:	f001 f8e0 	bl	8003710 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002550:	f003 fcae 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8002554:	4603      	mov	r3, r0
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_Init+0x3c>)
 8002558:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800255a:	200f      	movs	r0, #15
 800255c:	f7ff f9b8 	bl	80018d0 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	e001      	b.n	8002570 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800256c:	f7fe ff40 	bl	80013f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002570:	79fb      	ldrb	r3, [r7, #7]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000000 	.word	0x20000000

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_IncTick+0x1c>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x20>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a03      	ldr	r2, [pc, #12]	; (80025a0 <HAL_IncTick+0x20>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	2000000c 	.word	0x2000000c
 80025a0:	20000c74 	.word	0x20000c74

080025a4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80025a8:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <HAL_GetUIDw0+0x10>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	1fff7590 	.word	0x1fff7590

080025b8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80025bc:	4b02      	ldr	r3, [pc, #8]	; (80025c8 <HAL_GetUIDw1+0x10>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	1fff7594 	.word	0x1fff7594

080025cc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80025d0:	4b02      	ldr	r3, [pc, #8]	; (80025dc <HAL_GetUIDw2+0x10>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	1fff7598 	.word	0x1fff7598

080025e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	601a      	str	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2107      	movs	r1, #7
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr

0800265a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	210f      	movs	r1, #15
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	401a      	ands	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 010f 	and.w	r1, r3, #15
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	f003 031f 	and.w	r3, r3, #31
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	431a      	orrs	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b6:	bf00      	nop
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	60f8      	str	r0, [r7, #12]
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	43db      	mvns	r3, r3
 8002720:	401a      	ands	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0219      	lsls	r1, r3, #8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	400b      	ands	r3, r1
 800272a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800272e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002752:	f023 0317 	bic.w	r3, r3, #23
 8002756:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002778:	f023 0317 	bic.w	r3, r3, #23
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6093      	str	r3, [r2, #8]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr

0800278a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279e:	d101      	bne.n	80027a4 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027c0:	f023 0317 	bic.w	r3, r3, #23
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e6:	f023 0317 	bic.w	r3, r3, #23
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <LL_ADC_IsEnabled+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_IsEnabled+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d101      	bne.n	8002838 <LL_ADC_IsDisableOngoing+0x18>
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <LL_ADC_IsDisableOngoing+0x1a>
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002854:	f023 0317 	bic.w	r3, r3, #23
 8002858:	f043 0204 	orr.w	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800287a:	f023 0317 	bic.w	r3, r3, #23
 800287e:	f043 0210 	orr.w	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b088      	sub	sp, #32
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1ae      	b.n	8002c34 <HAL_ADC_Init+0x380>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7fe f9c7 	bl	8000c78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff ff44 	bl	800278a <LL_ADC_IsInternalRegulatorEnabled>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d115      	bne.n	8002934 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff18 	bl	8002742 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002912:	4b9b      	ldr	r3, [pc, #620]	; (8002b80 <HAL_ADC_Init+0x2cc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	4a9a      	ldr	r2, [pc, #616]	; (8002b84 <HAL_ADC_Init+0x2d0>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	3301      	adds	r3, #1
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002926:	e002      	b.n	800292e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3b01      	subs	r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f9      	bne.n	8002928 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff26 	bl	800278a <LL_ADC_IsInternalRegulatorEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10d      	bne.n	8002960 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	f043 0210 	orr.w	r2, r3, #16
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002954:	f043 0201 	orr.w	r2, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff93 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 800296a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	f003 0310 	and.w	r3, r3, #16
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 8154 	bne.w	8002c22 <HAL_ADC_Init+0x36e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 8150 	bne.w	8002c22 <HAL_ADC_Init+0x36e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff ff30 	bl	80027fc <LL_ADC_IsEnabled>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14f      	bne.n	8002a42 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f023 0118 	bic.w	r1, r3, #24
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029c4:	4313      	orrs	r3, r2
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d111      	bne.n	80029fa <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029e2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80029e8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80029ee:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_ADC_Init+0x2d4>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a16:	d014      	beq.n	8002a42 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d00f      	beq.n	8002a42 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a2a:	d00a      	beq.n	8002a42 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_ADC_Init+0x2d8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a3c:	4953      	ldr	r1, [pc, #332]	; (8002b8c <HAL_ADC_Init+0x2d8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7e1b      	ldrb	r3, [r3, #24]
 8002a46:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7e5b      	ldrb	r3, [r3, #25]
 8002a4c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7e9b      	ldrb	r3, [r3, #26]
 8002a54:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002a56:	4313      	orrs	r3, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a5c:	2a00      	cmp	r2, #0
 8002a5e:	d002      	beq.n	8002a66 <HAL_ADC_Init+0x1b2>
 8002a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_Init+0x1b4>
 8002a66:	2200      	movs	r2, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002a68:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002a6e:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	da04      	bge.n	8002a82 <HAL_ADC_Init+0x1ce>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a80:	e001      	b.n	8002a86 <HAL_ADC_Init+0x1d2>
 8002a82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                 hadc->Init.DataAlign                                           |
 8002a86:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a8e:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002a90:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d114      	bne.n	8002acc <HAL_ADC_Init+0x218>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	7e9b      	ldrb	r3, [r3, #26]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_ADC_Init+0x200>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e00b      	b.n	8002acc <HAL_ADC_Init+0x218>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_ADC_Init+0x234>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                   hadc->Init.ExternalTrigConvEdge);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002af2:	f423 73f3 	bic.w	r3, r3, #486	; 0x1e6
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	69b9      	ldr	r1, [r7, #24]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691a      	ldr	r2, [r3, #16]
 8002b06:	4b22      	ldr	r3, [pc, #136]	; (8002b90 <HAL_ADC_Init+0x2dc>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6113      	str	r3, [r2, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f7ff fd7d 	bl	800261e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6818      	ldr	r0, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4919      	ldr	r1, [pc, #100]	; (8002b94 <HAL_ADC_Init+0x2e0>)
 8002b30:	f7ff fd75 	bl	800261e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d108      	bne.n	8002b4e <HAL_ADC_Init+0x29a>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f062 020f 	orn	r2, r2, #15
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8002b4c:	e044      	b.n	8002bd8 <HAL_ADC_Init+0x324>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b56:	d13f      	bne.n	8002bd8 <HAL_ADC_Init+0x324>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e00c      	b.n	8002b78 <HAL_ADC_Init+0x2c4>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	2b0f      	cmp	r3, #15
 8002b70:	d012      	beq.n	8002b98 <HAL_ADC_Init+0x2e4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3301      	adds	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b07      	cmp	r3, #7
 8002b7c:	d9ef      	bls.n	8002b5e <HAL_ADC_Init+0x2aa>
 8002b7e:	e00c      	b.n	8002b9a <HAL_ADC_Init+0x2e6>
 8002b80:	20000000 	.word	0x20000000
 8002b84:	053e2d63 	.word	0x053e2d63
 8002b88:	1ffffc02 	.word	0x1ffffc02
 8002b8c:	40012708 	.word	0x40012708
 8002b90:	dffffc02 	.word	0xdffffc02
 8002b94:	03ffff04 	.word	0x03ffff04
            ADC_CHSELR_SQ1)
        {
          break;
 8002b98:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d108      	bne.n	8002bb2 <HAL_ADC_Init+0x2fe>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f062 020f 	orn	r2, r2, #15
 8002bae:	629a      	str	r2, [r3, #40]	; 0x28
 8002bb0:	e012      	b.n	8002bd8 <HAL_ADC_Init+0x324>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f003 031c 	and.w	r3, r3, #28
 8002bc4:	f06f 020f 	mvn.w	r2, #15
 8002bc8:	fa02 f103 	lsl.w	r1, r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_ADC_Init+0x388>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d10b      	bne.n	8002c00 <HAL_ADC_Init+0x34c>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002bfe:	e018      	b.n	8002c32 <HAL_ADC_Init+0x37e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	f023 0312 	bic.w	r3, r3, #18
 8002c08:	f043 0210 	orr.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002c20:	e007      	b.n	8002c32 <HAL_ADC_Init+0x37e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c26:	f043 0210 	orr.w	r2, r3, #16
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3720      	adds	r7, #32
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	833fffe7 	.word	0x833fffe7

08002c40 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e06a      	b.n	8002d28 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	f043 0202 	orr.w	r2, r3, #2
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fabe 	bl	80031e0 <ADC_ConversionStop>
 8002c64:	4603      	mov	r3, r0
 8002c66:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fb82 	bl	8003378 <ADC_Disable>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d102      	bne.n	8002c84 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fd6d 	bl	8002768 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8002c9c:	f023 0303 	bic.w	r3, r3, #3
 8002ca0:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f240 329f 	movw	r2, #927	; 0x39f
 8002caa:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <HAL_ADC_DeInit+0xf0>)
 8002cb8:	400b      	ands	r3, r1
 8002cba:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002cca:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0207 	bic.w	r2, r2, #7
 8002cda:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8002cea:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <HAL_ADC_DeInit+0xf4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <HAL_ADC_DeInit+0xf4>)
 8002d00:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8002d04:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd ffca 	bl	8000ca0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	833e0200 	.word	0x833e0200
 8002d34:	40012708 	.word	0x40012708

08002d38 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fda3 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d132      	bne.n	8002db6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_Start+0x26>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e02e      	b.n	8002dbc <HAL_ADC_Start+0x84>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa80 	bl	800326c <ADC_Enable>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11a      	bne.n	8002dac <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d7e:	f023 0301 	bic.w	r3, r3, #1
 8002d82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	221c      	movs	r2, #28
 8002d96:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fd4d 	bl	8002844 <LL_ADC_REG_StartConversion>
 8002daa:	e006      	b.n	8002dba <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8002db4:	e001      	b.n	8002dba <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Stop+0x16>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	e022      	b.n	8002e20 <HAL_ADC_Stop+0x5c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f9fc 	bl	80031e0 <ADC_ConversionStop>
 8002de8:	4603      	mov	r3, r0
 8002dea:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d111      	bne.n	8002e16 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fac0 	bl	8003378 <ADC_Disable>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d109      	bne.n	8002e16 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0a:	f023 0301 	bic.w	r3, r3, #1
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d102      	bne.n	8002e40 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	e010      	b.n	8002e62 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	f043 0220 	orr.w	r2, r3, #32
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e077      	b.n	8002f4e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002e5e:	2304      	movs	r3, #4
 8002e60:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e62:	f7fe fd3f 	bl	80018e4 <HAL_GetTick>
 8002e66:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e68:	e021      	b.n	8002eae <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d01d      	beq.n	8002eae <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002e72:	f7fe fd37 	bl	80018e4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <HAL_ADC_PollForConversion+0x60>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d112      	bne.n	8002eae <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4013      	ands	r3, r2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10b      	bne.n	8002eae <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	f043 0204 	orr.w	r2, r3, #4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e04f      	b.n	8002f4e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0d6      	beq.n	8002e6a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fbc4 	bl	800265a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d031      	beq.n	8002f3c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e9b      	ldrb	r3, [r3, #26]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d12d      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d126      	bne.n	8002f3c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fccc 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d112      	bne.n	8002f24 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 020c 	bic.w	r2, r2, #12
 8002f0c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	659a      	str	r2, [r3, #88]	; 0x58
 8002f22:	e00b      	b.n	8002f3c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f28:	f043 0220 	orr.w	r2, r3, #32
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7e1b      	ldrb	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	220c      	movs	r2, #12
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
	...

08002f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x28>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e110      	b.n	80031ba <HAL_ADC_ConfigChannel+0x24a>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff fc73 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f040 80f7 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	f000 80b1 	beq.w	800311e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fca:	4a7e      	ldr	r2, [pc, #504]	; (80031c4 <HAL_ADC_ConfigChannel+0x254>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff fb70 	bl	80026c0 <LL_ADC_REG_SetSequencerChAdd>
 8002fe0:	e041      	b.n	8003066 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	210f      	movs	r1, #15
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_ADC_ConfigChannel+0xa0>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	e011      	b.n	8003034 <HAL_ADC_ConfigChannel+0xc4>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	6839      	ldr	r1, [r7, #0]
 8003036:	6849      	ldr	r1, [r1, #4]
 8003038:	f001 011f 	and.w	r1, r1, #31
 800303c:	408b      	lsls	r3, r1
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	1c5a      	adds	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	429a      	cmp	r2, r3
 8003052:	d808      	bhi.n	8003066 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff fb0c 	bl	800267e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	6819      	ldr	r1, [r3, #0]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	461a      	mov	r2, r3
 8003074:	f7ff fb49 	bl	800270a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	f280 8097 	bge.w	80031b0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003082:	4851      	ldr	r0, [pc, #324]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 8003084:	f7ff fabe 	bl	8002604 <LL_ADC_GetCommonPathInternalCh>
 8003088:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a4f      	ldr	r2, [pc, #316]	; (80031cc <HAL_ADC_ConfigChannel+0x25c>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d120      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11b      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030a4:	4619      	mov	r1, r3
 80030a6:	4848      	ldr	r0, [pc, #288]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 80030a8:	f7ff fa9a 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ac:	4b48      	ldr	r3, [pc, #288]	; (80031d0 <HAL_ADC_ConfigChannel+0x260>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	099b      	lsrs	r3, r3, #6
 80030b2:	4a48      	ldr	r2, [pc, #288]	; (80031d4 <HAL_ADC_ConfigChannel+0x264>)
 80030b4:	fba2 2303 	umull	r2, r3, r2, r3
 80030b8:	099b      	lsrs	r3, r3, #6
 80030ba:	1c5a      	adds	r2, r3, #1
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030c6:	e002      	b.n	80030ce <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	3b01      	subs	r3, #1
 80030cc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1f9      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d4:	e06c      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_ADC_ConfigChannel+0x268>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10c      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x18a>
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d107      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f0:	4619      	mov	r1, r3
 80030f2:	4835      	ldr	r0, [pc, #212]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 80030f4:	f7ff fa74 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
 80030f8:	e05a      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a37      	ldr	r2, [pc, #220]	; (80031dc <HAL_ADC_ConfigChannel+0x26c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d155      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	d150      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003114:	4619      	mov	r1, r3
 8003116:	482c      	ldr	r0, [pc, #176]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 8003118:	f7ff fa62 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
 800311c:	e048      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003126:	d004      	beq.n	8003132 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_ADC_ConfigChannel+0x254>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d107      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f7ff fad1 	bl	80026e4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	da32      	bge.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800314a:	481f      	ldr	r0, [pc, #124]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 800314c:	f7ff fa5a 	bl	8002604 <LL_ADC_GetCommonPathInternalCh>
 8003150:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <HAL_ADC_ConfigChannel+0x25c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d107      	bne.n	800316c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003162:	4619      	mov	r1, r3
 8003164:	4818      	ldr	r0, [pc, #96]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 8003166:	f7ff fa3b 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
 800316a:	e021      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_ADC_ConfigChannel+0x268>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d107      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800317c:	4619      	mov	r1, r3
 800317e:	4812      	ldr	r0, [pc, #72]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 8003180:	f7ff fa2e 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
 8003184:	e014      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_ADC_ConfigChannel+0x26c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d10f      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003196:	4619      	mov	r1, r3
 8003198:	480b      	ldr	r0, [pc, #44]	; (80031c8 <HAL_ADC_ConfigChannel+0x258>)
 800319a:	f7ff fa21 	bl	80025e0 <LL_ADC_SetCommonPathInternalCh>
 800319e:	e007      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80031b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	80000004 	.word	0x80000004
 80031c8:	40012708 	.word	0x40012708
 80031cc:	b0001000 	.word	0xb0001000
 80031d0:	20000000 	.word	0x20000000
 80031d4:	053e2d63 	.word	0x053e2d63
 80031d8:	b8004000 	.word	0xb8004000
 80031dc:	b4002000 	.word	0xb4002000

080031e0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fb4f 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d033      	beq.n	8003260 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fb0f 	bl	8002820 <LL_ADC_IsDisableOngoing>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d104      	bne.n	8003212 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fb2c 	bl	800286a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003212:	f7fe fb67 	bl	80018e4 <HAL_GetTick>
 8003216:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003218:	e01b      	b.n	8003252 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800321a:	f7fe fb63 	bl	80018e4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d914      	bls.n	8003252 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00d      	beq.n	8003252 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1dc      	bne.n	800321a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003274:	2300      	movs	r3, #0
 8003276:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fabd 	bl	80027fc <LL_ADC_IsEnabled>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d169      	bne.n	800335c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689a      	ldr	r2, [r3, #8]
 800328e:	4b36      	ldr	r3, [pc, #216]	; (8003368 <ADC_Enable+0xfc>)
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f043 0210 	orr.w	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e055      	b.n	800335e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff fa7a 	bl	80027b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032bc:	482b      	ldr	r0, [pc, #172]	; (800336c <ADC_Enable+0x100>)
 80032be:	f7ff f9a1 	bl	8002604 <LL_ADC_GetCommonPathInternalCh>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00f      	beq.n	80032ec <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <ADC_Enable+0x104>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	4a28      	ldr	r2, [pc, #160]	; (8003374 <ADC_Enable+0x108>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	3301      	adds	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032de:	e002      	b.n	80032e6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f9      	bne.n	80032e0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7e5b      	ldrb	r3, [r3, #25]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d033      	beq.n	800335c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80032f4:	f7fe faf6 	bl	80018e4 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fa:	e028      	b.n	800334e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff fa7b 	bl	80027fc <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fa4d 	bl	80027b0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003316:	f7fe fae5 	bl	80018e4 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d914      	bls.n	800334e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00d      	beq.n	800334e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d1cf      	bne.n	80032fc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	80000017 	.word	0x80000017
 800336c:	40012708 	.word	0x40012708
 8003370:	20000000 	.word	0x20000000
 8003374:	053e2d63 	.word	0x053e2d63

08003378 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fa4b 	bl	8002820 <LL_ADC_IsDisableOngoing>
 800338a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fa33 	bl	80027fc <LL_ADC_IsEnabled>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d047      	beq.n	800342c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d144      	bne.n	800342c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0305 	and.w	r3, r3, #5
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10c      	bne.n	80033ca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fa0e 	bl	80027d6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2203      	movs	r2, #3
 80033c0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033c2:	f7fe fa8f 	bl	80018e4 <HAL_GetTick>
 80033c6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033c8:	e029      	b.n	800341e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e023      	b.n	800342e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033e6:	f7fe fa7d 	bl	80018e4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d914      	bls.n	800341e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00d      	beq.n	800341e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f043 0210 	orr.w	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1dc      	bne.n	80033e6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <LL_ADC_IsEnabled>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <LL_ADC_IsEnabled+0x18>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_ADC_IsEnabled+0x1a>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <LL_ADC_IsCalibrationOnGoing>:
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800346a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800346e:	d101      	bne.n	8003474 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003488:	2300      	movs	r3, #0
 800348a:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_adc_dma_transfer; /* Note: Variable not declared as volatile because register read is already declared as volatile */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_ADCEx_Calibration_Start+0x1a>
 8003496:	2302      	movs	r3, #2
 8003498:	e068      	b.n	800356c <HAL_ADCEx_Calibration_Start+0xec>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff68 	bl	8003378 <ADC_Disable>
 80034a8:	4603      	mov	r3, r0
 80034aa:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ffc0 	bl	8003436 <LL_ADC_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d14c      	bne.n	8003556 <HAL_ADCEx_Calibration_Start+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80034c4:	f043 0202 	orr.w	r2, r3, #2
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0203 	bic.w	r2, r2, #3
 80034e6:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034f6:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80034f8:	e014      	b.n	8003524 <HAL_ADCEx_Calibration_Start+0xa4>
    {
      wait_loop_index++;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003506:	d30d      	bcc.n	8003524 <HAL_ADCEx_Calibration_Start+0xa4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	f023 0312 	bic.w	r3, r3, #18
 8003510:	f043 0210 	orr.w	r2, r3, #16
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        __HAL_UNLOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e023      	b.n	800356c <HAL_ADCEx_Calibration_Start+0xec>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7ff ff96 	bl	800345a <LL_ADC_IsCalibrationOnGoing>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e2      	bne.n	80034fa <HAL_ADCEx_Calibration_Start+0x7a>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68d9      	ldr	r1, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	430a      	orrs	r2, r1
 8003542:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	f043 0201 	orr.w	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	659a      	str	r2, [r3, #88]	; 0x58
 8003554:	e005      	b.n	8003562 <HAL_ADCEx_Calibration_Start+0xe2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f043 0210 	orr.w	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800356a:	7dfb      	ldrb	r3, [r7, #23]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3718      	adds	r7, #24
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800359c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	60d3      	str	r3, [r2, #12]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db0b      	blt.n	8003602 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	4906      	ldr	r1, [pc, #24]	; (800360c <__NVIC_EnableIRQ+0x34>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db12      	blt.n	8003648 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	490a      	ldr	r1, [pc, #40]	; (8003654 <__NVIC_DisableIRQ+0x44>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	3320      	adds	r3, #32
 8003638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800363c:	f3bf 8f4f 	dsb	sy
}
 8003640:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003642:	f3bf 8f6f 	isb	sy
}
 8003646:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e000e100 	.word	0xe000e100

08003658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	6039      	str	r1, [r7, #0]
 8003662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db0a      	blt.n	8003682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2da      	uxtb	r2, r3
 8003670:	490c      	ldr	r1, [pc, #48]	; (80036a4 <__NVIC_SetPriority+0x4c>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	0112      	lsls	r2, r2, #4
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	440b      	add	r3, r1
 800367c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003680:	e00a      	b.n	8003698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4908      	ldr	r1, [pc, #32]	; (80036a8 <__NVIC_SetPriority+0x50>)
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	3b04      	subs	r3, #4
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	440b      	add	r3, r1
 8003696:	761a      	strb	r2, [r3, #24]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b089      	sub	sp, #36	; 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	bf28      	it	cs
 80036ca:	2304      	movcs	r3, #4
 80036cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2b06      	cmp	r3, #6
 80036d4:	d902      	bls.n	80036dc <NVIC_EncodePriority+0x30>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3b03      	subs	r3, #3
 80036da:	e000      	b.n	80036de <NVIC_EncodePriority+0x32>
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036e0:	f04f 32ff 	mov.w	r2, #4294967295
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43da      	mvns	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	401a      	ands	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036f4:	f04f 31ff 	mov.w	r1, #4294967295
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	fa01 f303 	lsl.w	r3, r1, r3
 80036fe:	43d9      	mvns	r1, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	4313      	orrs	r3, r2
         );
}
 8003706:	4618      	mov	r0, r3
 8003708:	3724      	adds	r7, #36	; 0x24
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7ff ff2b 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b086      	sub	sp, #24
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003734:	f7ff ff42 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003738:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	6978      	ldr	r0, [r7, #20]
 8003740:	f7ff ffb4 	bl	80036ac <NVIC_EncodePriority>
 8003744:	4602      	mov	r2, r0
 8003746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff83 	bl	8003658 <__NVIC_SetPriority>
}
 8003752:	bf00      	nop
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	4603      	mov	r3, r0
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff ff35 	bl	80035d8 <__NVIC_EnableIRQ>
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	4603      	mov	r3, r0
 800377e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	4618      	mov	r0, r3
 8003786:	f7ff ff43 	bl	8003610 <__NVIC_DisableIRQ>
}
 800378a:	bf00      	nop
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
	...

08003794 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e08e      	b.n	80038c4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_DMA_Init+0x138>)
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d80f      	bhi.n	80037d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_DMA_Init+0x13c>)
 80037ba:	4413      	add	r3, r2
 80037bc:	4a45      	ldr	r2, [pc, #276]	; (80038d4 <HAL_DMA_Init+0x140>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	009a      	lsls	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a42      	ldr	r2, [pc, #264]	; (80038d8 <HAL_DMA_Init+0x144>)
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
 80037d0:	e00e      	b.n	80037f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_DMA_Init+0x148>)
 80037da:	4413      	add	r3, r2
 80037dc:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <HAL_DMA_Init+0x140>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	009a      	lsls	r2, r3, #2
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a3c      	ldr	r2, [pc, #240]	; (80038e0 <HAL_DMA_Init+0x14c>)
 80037ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6819      	ldr	r1, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689a      	ldr	r2, [r3, #8]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fb24 	bl	8003e90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003850:	d102      	bne.n	8003858 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003864:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800386e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d010      	beq.n	800389a <HAL_DMA_Init+0x106>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b04      	cmp	r3, #4
 800387e:	d80c      	bhi.n	800389a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb4d 	bl	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	e008      	b.n	80038ac <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40020407 	.word	0x40020407
 80038d0:	bffdfff8 	.word	0xbffdfff8
 80038d4:	cccccccd 	.word	0xcccccccd
 80038d8:	40020000 	.word	0x40020000
 80038dc:	bffdfbf8 	.word	0xbffdfbf8
 80038e0:	40020400 	.word	0x40020400

080038e4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e07b      	b.n	80039ee <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0201 	bic.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_DMA_DeInit+0x114>)
 800390e:	429a      	cmp	r2, r3
 8003910:	d80f      	bhi.n	8003932 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_DMA_DeInit+0x118>)
 800391a:	4413      	add	r3, r2
 800391c:	4a38      	ldr	r2, [pc, #224]	; (8003a00 <HAL_DMA_DeInit+0x11c>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	009a      	lsls	r2, r3, #2
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a35      	ldr	r2, [pc, #212]	; (8003a04 <HAL_DMA_DeInit+0x120>)
 800392e:	641a      	str	r2, [r3, #64]	; 0x40
 8003930:	e00e      	b.n	8003950 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <HAL_DMA_DeInit+0x124>)
 800393a:	4413      	add	r3, r2
 800393c:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <HAL_DMA_DeInit+0x11c>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2f      	ldr	r2, [pc, #188]	; (8003a0c <HAL_DMA_DeInit+0x128>)
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f003 021c 	and.w	r2, r3, #28
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fa8f 	bl	8003e90 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003982:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00f      	beq.n	80039ac <HAL_DMA_DeInit+0xc8>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b04      	cmp	r3, #4
 8003992:	d80b      	bhi.n	80039ac <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fac3 	bl	8003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039aa:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40020407 	.word	0x40020407
 80039fc:	bffdfff8 	.word	0xbffdfff8
 8003a00:	cccccccd 	.word	0xcccccccd
 8003a04:	40020000 	.word	0x40020000
 8003a08:	bffdfbf8 	.word	0xbffdfbf8
 8003a0c:	40020400 	.word	0x40020400

08003a10 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d101      	bne.n	8003a30 <HAL_DMA_Start_IT+0x20>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e069      	b.n	8003b04 <HAL_DMA_Start_IT+0xf4>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d155      	bne.n	8003af0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f9d3 	bl	8003e14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f042 020e 	orr.w	r2, r2, #14
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	e00f      	b.n	8003aa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0204 	bic.w	r2, r2, #4
 8003a96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 020a 	orr.w	r2, r2, #10
 8003aa6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003adc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e008      	b.n	8003b02 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2280      	movs	r2, #128	; 0x80
 8003af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e04f      	b.n	8003bbe <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d008      	beq.n	8003b3c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2204      	movs	r2, #4
 8003b2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e040      	b.n	8003bbe <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 020e 	bic.w	r2, r2, #14
 8003b4a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	f003 021c 	and.w	r2, r3, #28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	2101      	movs	r1, #1
 8003b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b7e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b88:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003baa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d005      	beq.n	8003bec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2204      	movs	r2, #4
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	e047      	b.n	8003c7c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 020e 	bic.w	r2, r2, #14
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0201 	bic.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f003 021c 	and.w	r2, r3, #28
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	2101      	movs	r1, #1
 8003c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00c      	beq.n	8003c5c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
    }
  }
  return status;
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca4:	f003 031c 	and.w	r3, r3, #28
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d027      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x7c>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f003 021c 	and.w	r2, r3, #28
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2104      	movs	r1, #4
 8003cea:	fa01 f202 	lsl.w	r2, r1, r2
 8003cee:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8081 	beq.w	8003dfc <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003d02:	e07b      	b.n	8003dfc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f003 031c 	and.w	r3, r3, #28
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d03d      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x10c>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d038      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10b      	bne.n	8003d48 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 020a 	bic.w	r2, r2, #10
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_DMA_IRQHandler+0x180>)
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d909      	bls.n	8003d68 <HAL_DMA_IRQHandler+0xe0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	f003 031c 	and.w	r3, r3, #28
 8003d5c:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <HAL_DMA_IRQHandler+0x184>)
 8003d5e:	2102      	movs	r1, #2
 8003d60:	fa01 f303 	lsl.w	r3, r1, r3
 8003d64:	6053      	str	r3, [r2, #4]
 8003d66:	e008      	b.n	8003d7a <HAL_DMA_IRQHandler+0xf2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f003 031c 	and.w	r3, r3, #28
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <HAL_DMA_IRQHandler+0x188>)
 8003d72:	2102      	movs	r1, #2
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d038      	beq.n	8003dfc <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003d92:	e033      	b.n	8003dfc <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	f003 031c 	and.w	r3, r3, #28
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	409a      	lsls	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d02a      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x176>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d025      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 020e 	bic.w	r2, r2, #14
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f003 021c 	and.w	r2, r3, #28
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
}
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40020080 	.word	0x40020080
 8003e0c:	40020400 	.word	0x40020400
 8003e10:	40020000 	.word	0x40020000

08003e14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d004      	beq.n	8003e3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	f003 021c 	and.w	r2, r3, #28
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	2101      	movs	r1, #1
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b10      	cmp	r3, #16
 8003e60:	d108      	bne.n	8003e74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e72:	e007      	b.n	8003e84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
	...

08003e90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d813      	bhi.n	8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003eb0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	3b08      	subs	r3, #8
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e011      	b.n	8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	4b10      	ldr	r3, [pc, #64]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	3b08      	subs	r3, #8
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	3307      	adds	r3, #7
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003ef4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2201      	movs	r2, #1
 8003efe:	409a      	lsls	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f04:	bf00      	nop
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bc80      	pop	{r7}
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40020407 	.word	0x40020407
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	4002081c 	.word	0x4002081c
 8003f1c:	40020880 	.word	0x40020880

08003f20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f36:	4413      	add	r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2201      	movs	r2, #1
 8003f50:	409a      	lsls	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr
 8003f60:	1000823f 	.word	0x1000823f
 8003f64:	40020940 	.word	0x40020940

08003f68 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f76:	e140      	b.n	80041fa <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	fa01 f303 	lsl.w	r3, r1, r3
 8003f84:	4013      	ands	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 8132 	beq.w	80041f4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d005      	beq.n	8003fa8 <HAL_GPIO_Init+0x40>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d130      	bne.n	800400a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0201 	and.w	r2, r3, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d017      	beq.n	8004046 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d123      	bne.n	800409a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	08da      	lsrs	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3208      	adds	r2, #8
 800405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	220f      	movs	r2, #15
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43db      	mvns	r3, r3
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4013      	ands	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0203 	and.w	r2, r3, #3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 808c 	beq.w	80041f4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80040dc:	4a4e      	ldr	r2, [pc, #312]	; (8004218 <HAL_GPIO_Init+0x2b0>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	2207      	movs	r2, #7
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004106:	d00d      	beq.n	8004124 <HAL_GPIO_Init+0x1bc>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a44      	ldr	r2, [pc, #272]	; (800421c <HAL_GPIO_Init+0x2b4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d007      	beq.n	8004120 <HAL_GPIO_Init+0x1b8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a43      	ldr	r2, [pc, #268]	; (8004220 <HAL_GPIO_Init+0x2b8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_GPIO_Init+0x1b4>
 8004118:	2302      	movs	r3, #2
 800411a:	e004      	b.n	8004126 <HAL_GPIO_Init+0x1be>
 800411c:	2307      	movs	r3, #7
 800411e:	e002      	b.n	8004126 <HAL_GPIO_Init+0x1be>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_GPIO_Init+0x1be>
 8004124:	2300      	movs	r3, #0
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	f002 0203 	and.w	r2, r2, #3
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	4093      	lsls	r3, r2
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004136:	4938      	ldr	r1, [pc, #224]	; (8004218 <HAL_GPIO_Init+0x2b0>)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3302      	adds	r3, #2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004144:	4b37      	ldr	r3, [pc, #220]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 8004146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43db      	mvns	r3, r3
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4013      	ands	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800416a:	4a2e      	ldr	r2, [pc, #184]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004172:	4b2c      	ldr	r3, [pc, #176]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004198:	4a22      	ldr	r2, [pc, #136]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041a0:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	43db      	mvns	r3, r3
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4013      	ands	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c4:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4013      	ands	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <HAL_GPIO_Init+0x2bc>)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	f47f aeb7 	bne.w	8003f78 <HAL_GPIO_Init+0x10>
  }
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	48000400 	.word	0x48000400
 8004220:	48000800 	.word	0x48000800
 8004224:	58000800 	.word	0x58000800

08004228 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004236:	e0af      	b.n	8004398 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004238:	2201      	movs	r2, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80a2 	beq.w	8004392 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800424e:	4a59      	ldr	r2, [pc, #356]	; (80043b4 <HAL_GPIO_DeInit+0x18c>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	3302      	adds	r3, #2
 8004256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800425a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	2207      	movs	r2, #7
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004276:	d00d      	beq.n	8004294 <HAL_GPIO_DeInit+0x6c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a4f      	ldr	r2, [pc, #316]	; (80043b8 <HAL_GPIO_DeInit+0x190>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d007      	beq.n	8004290 <HAL_GPIO_DeInit+0x68>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <HAL_GPIO_DeInit+0x194>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d101      	bne.n	800428c <HAL_GPIO_DeInit+0x64>
 8004288:	2302      	movs	r3, #2
 800428a:	e004      	b.n	8004296 <HAL_GPIO_DeInit+0x6e>
 800428c:	2307      	movs	r3, #7
 800428e:	e002      	b.n	8004296 <HAL_GPIO_DeInit+0x6e>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_GPIO_DeInit+0x6e>
 8004294:	2300      	movs	r3, #0
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	f002 0203 	and.w	r2, r2, #3
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	4093      	lsls	r3, r2
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d136      	bne.n	8004314 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80042a6:	4b46      	ldr	r3, [pc, #280]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042a8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	4943      	ldr	r1, [pc, #268]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80042b8:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	493f      	ldr	r1, [pc, #252]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80042ca:	4b3d      	ldr	r3, [pc, #244]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	493b      	ldr	r1, [pc, #236]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	43db      	mvns	r3, r3
 80042e0:	4937      	ldr	r1, [pc, #220]	; (80043c0 <HAL_GPIO_DeInit+0x198>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	2207      	movs	r2, #7
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <HAL_GPIO_DeInit+0x18c>)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	43da      	mvns	r2, r3
 8004306:	482b      	ldr	r0, [pc, #172]	; (80043b4 <HAL_GPIO_DeInit+0x18c>)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	400a      	ands	r2, r1
 800430e:	3302      	adds	r3, #2
 8004310:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2103      	movs	r1, #3
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	08da      	lsrs	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3208      	adds	r2, #8
 8004330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	08d2      	lsrs	r2, r2, #3
 8004348:	4019      	ands	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3208      	adds	r2, #8
 800434e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2103      	movs	r1, #3
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	401a      	ands	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	2101      	movs	r1, #1
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	401a      	ands	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	2103      	movs	r1, #3
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	401a      	ands	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	3301      	adds	r3, #1
 8004396:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f af49 	bne.w	8004238 <HAL_GPIO_DeInit+0x10>
  }
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	40010000 	.word	0x40010000
 80043b8:	48000400 	.word	0x48000400
 80043bc:	48000800 	.word	0x48000800
 80043c0:	58000800 	.word	0x58000800

080043c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
 80043d0:	4613      	mov	r3, r2
 80043d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043d4:	787b      	ldrb	r3, [r7, #1]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043e0:	e002      	b.n	80043e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043e2:	887a      	ldrh	r2, [r7, #2]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bc80      	pop	{r7}
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	4013      	ands	r3, r2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d006      	beq.n	8004418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	4618      	mov	r0, r3
 8004414:	f005 fa64 	bl	80098e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004418:	bf00      	nop
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	58000800 	.word	0x58000800

08004424 <LL_RCC_SetLPTIMClockSource>:
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	041b      	lsls	r3, r3, #16
 800443a:	43db      	mvns	r3, r3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <LL_RCC_GetLPTIMClockSource>:
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004462:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4013      	ands	r3, r2
 800446a:	0c1a      	lsrs	r2, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4313      	orrs	r3, r2
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <LL_APB1_GRP1_ForceReset>:
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4313      	orrs	r3, r2
 8004490:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004492:	bf00      	nop
 8004494:	370c      	adds	r7, #12
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <LL_APB1_GRP2_ForceReset>:
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80044a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr

080044be <LL_APB1_GRP1_ReleaseReset>:
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	43db      	mvns	r3, r3
 80044d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d4:	4013      	ands	r3, r2
 80044d6:	638b      	str	r3, [r1, #56]	; 0x38
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <LL_APB1_GRP2_ReleaseReset>:
{
 80044e2:	b480      	push	{r7}
 80044e4:	b083      	sub	sp, #12
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 80044ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	43db      	mvns	r3, r3
 80044f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044f8:	4013      	ands	r3, r2
 80044fa:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	bc80      	pop	{r7}
 8004504:	4770      	bx	lr
	...

08004508 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0b6      	b.n	8004688 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc ff65 	bl	8001404 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0201 	orr.w	r2, r2, #1
 8004550:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800455a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004564:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fac2 	bl	8004af4 <LPTIM_WaitForFlag>
 8004570:	4603      	mov	r3, r0
 8004572:	2b03      	cmp	r3, #3
 8004574:	d101      	bne.n	800457a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e086      	b.n	8004688 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 faea 	bl	8004b54 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 faaa 	bl	8004ada <HAL_LPTIM_GetState>
 8004586:	4603      	mov	r3, r0
 8004588:	2b03      	cmp	r3, #3
 800458a:	d101      	bne.n	8004590 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e07b      	b.n	8004688 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d004      	beq.n	80045aa <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045a8:	d103      	bne.n	80045b2 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 031e 	bic.w	r3, r3, #30
 80045b0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d005      	beq.n	80045ca <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80045c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_LPTIM_Init+0x188>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045da:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80045e0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80045e6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80045ec:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004604:	4313      	orrs	r3, r2
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d004      	beq.n	800461e <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800461c:	d107      	bne.n	800462e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004626:	4313      	orrs	r3, r2
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4313      	orrs	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004636:	4293      	cmp	r3, r2
 8004638:	d00a      	beq.n	8004650 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004642:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004648:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <HAL_LPTIM_Init+0x18c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d108      	bne.n	8004674 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	621a      	str	r2, [r3, #32]
 8004672:	e004      	b.n	800467e <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800467c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	ff19f1fe 	.word	0xff19f1fe
 8004694:	40007c00 	.word	0x40007c00

08004698 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a48      	ldr	r2, [pc, #288]	; (80047d0 <HAL_LPTIM_Counter_Start_IT+0x138>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <HAL_LPTIM_Counter_Start_IT+0x2e>
 80046b4:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ba:	4a46      	ldr	r2, [pc, #280]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046c4:	e015      	b.n	80046f2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a43      	ldr	r2, [pc, #268]	; (80047d8 <HAL_LPTIM_Counter_Start_IT+0x140>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d108      	bne.n	80046e2 <HAL_LPTIM_Counter_Start_IT+0x4a>
 80046d0:	4b40      	ldr	r3, [pc, #256]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046d6:	4a3f      	ldr	r2, [pc, #252]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80046e0:	e007      	b.n	80046f2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 80046e2:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e8:	4a3a      	ldr	r2, [pc, #232]	; (80047d4 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 80046ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d00c      	beq.n	8004714 <HAL_LPTIM_Counter_Start_IT+0x7c>
      (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) &&
 80046fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004702:	d107      	bne.n	8004714 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8004712:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691a      	ldr	r2, [r3, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0201 	orr.w	r2, r2, #1
 8004722:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2210      	movs	r2, #16
 800472a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004734:	2110      	movs	r1, #16
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f9dc 	bl	8004af4 <LPTIM_WaitForFlag>
 800473c:	4603      	mov	r3, r0
 800473e:	2b03      	cmp	r3, #3
 8004740:	d101      	bne.n	8004746 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e03f      	b.n	80047c6 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa04 	bl	8004b54 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9c4 	bl	8004ada <HAL_LPTIM_GetState>
 8004752:	4603      	mov	r3, r0
 8004754:	2b03      	cmp	r3, #3
 8004756:	d101      	bne.n	800475c <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e034      	b.n	80047c6 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	689a      	ldr	r2, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0210 	orr.w	r2, r2, #16
 800476a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0202 	orr.w	r2, r2, #2
 800477a:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800478a:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800479a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0204 	orr.w	r2, r2, #4
 80047ba:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40007c00 	.word	0x40007c00
 80047d4:	58000800 	.word	0x58000800
 80047d8:	40009400 	.word	0x40009400

080047dc <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a2a      	ldr	r2, [pc, #168]	; (800489c <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <HAL_LPTIM_Counter_Stop_IT+0x2c>
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 80047f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fc:	4a28      	ldr	r2, [pc, #160]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 80047fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004802:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004806:	e015      	b.n	8004834 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a25      	ldr	r2, [pc, #148]	; (80048a4 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d108      	bne.n	8004824 <HAL_LPTIM_Counter_Stop_IT+0x48>
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 800481a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800481e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004822:	e007      	b.n	8004834 <HAL_LPTIM_Counter_Stop_IT+0x58>
 8004824:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 8004826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 800482c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f98d 	bl	8004b54 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f94d 	bl	8004ada <HAL_LPTIM_GetState>
 8004840:	4603      	mov	r3, r0
 8004842:	2b03      	cmp	r3, #3
 8004844:	d101      	bne.n	800484a <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e024      	b.n	8004894 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0202 	bic.w	r2, r2, #2
 8004868:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004878:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004888:	609a      	str	r2, [r3, #8]
  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40007c00 	.word	0x40007c00
 80048a0:	58000800 	.word	0x58000800
 80048a4:	40009400 	.word	0x40009400

080048a8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d10d      	bne.n	80048da <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d106      	bne.n	80048da <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2201      	movs	r2, #1
 80048d2:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 f8af 	bl	8004a38 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d10d      	bne.n	8004904 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d106      	bne.n	8004904 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2202      	movs	r2, #2
 80048fc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f8a3 	bl	8004a4a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d10d      	bne.n	800492e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b04      	cmp	r3, #4
 800491e:	d106      	bne.n	800492e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2204      	movs	r2, #4
 8004926:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f897 	bl	8004a5c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d10d      	bne.n	8004958 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b08      	cmp	r3, #8
 8004948:	d106      	bne.n	8004958 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f88b 	bl	8004a6e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d10d      	bne.n	8004982 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d106      	bne.n	8004982 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2210      	movs	r2, #16
 800497a:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f87f 	bl	8004a80 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b20      	cmp	r3, #32
 800498e:	d10d      	bne.n	80049ac <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d106      	bne.n	80049ac <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2220      	movs	r2, #32
 80049a4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f873 	bl	8004a92 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	d10d      	bne.n	80049d6 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b40      	cmp	r3, #64	; 0x40
 80049c6:	d106      	bne.n	80049d6 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f867 	bl	8004aa4 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d10d      	bne.n	8004a00 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d106      	bne.n	8004a00 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2280      	movs	r2, #128	; 0x80
 80049f8:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f85b 	bl	8004ab6 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	d10f      	bne.n	8004a30 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1e:	d107      	bne.n	8004a30 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a28:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f84c 	bl	8004ac8 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004a64:	bf00      	nop
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b083      	sub	sp, #12
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bc80      	pop	{r7}
 8004a7e:	4770      	bx	lr

08004a80 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bc80      	pop	{r7}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bc80      	pop	{r7}
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ae8:	b2db      	uxtb	r3, r3
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <LPTIM_WaitForFlag+0x58>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <LPTIM_WaitForFlag+0x5c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	0b9b      	lsrs	r3, r3, #14
 8004b0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	4013      	ands	r3, r2
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d002      	beq.n	8004b3e <LPTIM_WaitForFlag+0x4a>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ec      	bne.n	8004b18 <LPTIM_WaitForFlag+0x24>

  return result;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	20000000 	.word	0x20000000
 8004b50:	d1b71759 	.word	0xd1b71759

08004b54 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8004b60:	b672      	cpsid	i
}
 8004b62:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a8d      	ldr	r2, [pc, #564]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d015      	beq.n	8004b9a <LPTIM_Disable+0x46>
 8004b6e:	4a8c      	ldr	r2, [pc, #560]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d818      	bhi.n	8004ba6 <LPTIM_Disable+0x52>
 8004b74:	4a8b      	ldr	r2, [pc, #556]	; (8004da4 <LPTIM_Disable+0x250>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d003      	beq.n	8004b82 <LPTIM_Disable+0x2e>
 8004b7a:	4a8b      	ldr	r2, [pc, #556]	; (8004da8 <LPTIM_Disable+0x254>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d006      	beq.n	8004b8e <LPTIM_Disable+0x3a>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 8004b80:	e011      	b.n	8004ba6 <LPTIM_Disable+0x52>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004b82:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004b86:	f7ff fc66 	bl	8004456 <LL_RCC_GetLPTIMClockSource>
 8004b8a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b8c:	e00c      	b.n	8004ba8 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b8e:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004b92:	f7ff fc60 	bl	8004456 <LL_RCC_GetLPTIMClockSource>
 8004b96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004b98:	e006      	b.n	8004ba8 <LPTIM_Disable+0x54>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004b9a:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004b9e:	f7ff fc5a 	bl	8004456 <LL_RCC_GetLPTIMClockSource>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004ba4:	e000      	b.n	8004ba8 <LPTIM_Disable+0x54>
      break;
 8004ba6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	623b      	str	r3, [r7, #32]
  tmpCFGR = hlptim->Instance->CFGR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	61fb      	str	r3, [r7, #28]
  tmpCMP = hlptim->Instance->CMP;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	61bb      	str	r3, [r7, #24]
  tmpARR = hlptim->Instance->ARR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpOR = hlptim->Instance->OR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	613b      	str	r3, [r7, #16]
  tmpRCR = hlptim->Instance->RCR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd6:	60fb      	str	r3, [r7, #12]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a70      	ldr	r2, [pc, #448]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d019      	beq.n	8004c16 <LPTIM_Disable+0xc2>
 8004be2:	4a6f      	ldr	r2, [pc, #444]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d81d      	bhi.n	8004c24 <LPTIM_Disable+0xd0>
 8004be8:	4a6e      	ldr	r2, [pc, #440]	; (8004da4 <LPTIM_Disable+0x250>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <LPTIM_Disable+0xa2>
 8004bee:	4a6e      	ldr	r2, [pc, #440]	; (8004da8 <LPTIM_Disable+0x254>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d009      	beq.n	8004c08 <LPTIM_Disable+0xb4>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8004bf4:	e016      	b.n	8004c24 <LPTIM_Disable+0xd0>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004bf6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004bfa:	f7ff fc3e 	bl	800447a <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004bfe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004c02:	f7ff fc5c 	bl	80044be <LL_APB1_GRP1_ReleaseReset>
      break;
 8004c06:	e00e      	b.n	8004c26 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004c08:	2020      	movs	r0, #32
 8004c0a:	f7ff fc47 	bl	800449c <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004c0e:	2020      	movs	r0, #32
 8004c10:	f7ff fc67 	bl	80044e2 <LL_APB1_GRP2_ReleaseReset>
      break;
 8004c14:	e007      	b.n	8004c26 <LPTIM_Disable+0xd2>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8004c16:	2040      	movs	r0, #64	; 0x40
 8004c18:	f7ff fc40 	bl	800449c <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8004c1c:	2040      	movs	r0, #64	; 0x40
 8004c1e:	f7ff fc60 	bl	80044e2 <LL_APB1_GRP2_ReleaseReset>
      break;
 8004c22:	e000      	b.n	8004c26 <LPTIM_Disable+0xd2>
      break;
 8004c24:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d106      	bne.n	8004c3a <LPTIM_Disable+0xe6>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <LPTIM_Disable+0xe6>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8096 	beq.w	8004d66 <LPTIM_Disable+0x212>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a58      	ldr	r2, [pc, #352]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <LPTIM_Disable+0x118>
 8004c44:	4a56      	ldr	r2, [pc, #344]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d815      	bhi.n	8004c76 <LPTIM_Disable+0x122>
 8004c4a:	4a56      	ldr	r2, [pc, #344]	; (8004da4 <LPTIM_Disable+0x250>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <LPTIM_Disable+0x104>
 8004c50:	4a55      	ldr	r2, [pc, #340]	; (8004da8 <LPTIM_Disable+0x254>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d005      	beq.n	8004c62 <LPTIM_Disable+0x10e>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 8004c56:	e00e      	b.n	8004c76 <LPTIM_Disable+0x122>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004c58:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004c5c:	f7ff fbe2 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004c60:	e00a      	b.n	8004c78 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004c62:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004c66:	f7ff fbdd 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004c6a:	e005      	b.n	8004c78 <LPTIM_Disable+0x124>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 8004c6c:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8004c70:	f7ff fbd8 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004c74:	e000      	b.n	8004c78 <LPTIM_Disable+0x124>
        break;
 8004c76:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01a      	beq.n	8004cb4 <LPTIM_Disable+0x160>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004c96:	2108      	movs	r1, #8
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ff2b 	bl	8004af4 <LPTIM_WaitForFlag>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d103      	bne.n	8004cac <LPTIM_Disable+0x158>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01a      	beq.n	8004cf0 <LPTIM_Disable+0x19c>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004cd2:	2110      	movs	r1, #16
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff0d 	bl	8004af4 <LPTIM_WaitForFlag>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d103      	bne.n	8004ce8 <LPTIM_Disable+0x194>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2210      	movs	r2, #16
 8004cee:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01c      	beq.n	8004d30 <LPTIM_Disable+0x1dc>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8004d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7ff feee 	bl	8004af4 <LPTIM_WaitForFlag>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d103      	bne.n	8004d26 <LPTIM_Disable+0x1d2>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2203      	movs	r2, #3
 8004d22:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d2e:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a1a      	ldr	r2, [pc, #104]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d011      	beq.n	8004d5e <LPTIM_Disable+0x20a>
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <LPTIM_Disable+0x24c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d814      	bhi.n	8004d6a <LPTIM_Disable+0x216>
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <LPTIM_Disable+0x250>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <LPTIM_Disable+0x1fa>
 8004d46:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <LPTIM_Disable+0x254>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <LPTIM_Disable+0x202>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8004d4c:	e00d      	b.n	8004d6a <LPTIM_Disable+0x216>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d50:	f7ff fb68 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004d54:	e00a      	b.n	8004d6c <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d58:	f7ff fb64 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004d5c:	e006      	b.n	8004d6c <LPTIM_Disable+0x218>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8004d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d60:	f7ff fb60 	bl	8004424 <LL_RCC_SetLPTIMClockSource>
        break;
 8004d64:	e002      	b.n	8004d6c <LPTIM_Disable+0x218>
    }
  }
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <LPTIM_Disable+0x218>
        break;
 8004d6a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691a      	ldr	r2, [r3, #16]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0201 	bic.w	r2, r2, #1
 8004d7a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8004d94:	b662      	cpsie	i
}
 8004d96:	bf00      	nop

  __enable_irq();
}
 8004d98:	bf00      	nop
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40009800 	.word	0x40009800
 8004da4:	40007c00 	.word	0x40007c00
 8004da8:	40009400 	.word	0x40009400

08004dac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db0:	4b04      	ldr	r3, [pc, #16]	; (8004dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a03      	ldr	r2, [pc, #12]	; (8004dc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dba:	6013      	str	r3, [r2, #0]
}
 8004dbc:	bf00      	nop
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr
 8004dc4:	58000400 	.word	0x58000400

08004dc8 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10c      	bne.n	8004df4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de6:	d10d      	bne.n	8004e04 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004de8:	f000 f83c 	bl	8004e64 <HAL_PWREx_DisableLowPowerRunMode>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d008      	beq.n	8004e04 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004df2:	e015      	b.n	8004e20 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004e00:	f000 f822 	bl	8004e48 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e04:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4a08      	ldr	r2, [pc, #32]	; (8004e2c <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e0a:	f023 0304 	bic.w	r3, r3, #4
 8004e0e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e10:	78fb      	ldrb	r3, [r7, #3]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e16:	bf30      	wfi
 8004e18:	e002      	b.n	8004e20 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e1a:	bf40      	sev
    __WFE();
 8004e1c:	bf20      	wfe
    __WFE();
 8004e1e:	bf20      	wfe
  }
}
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	58000400 	.word	0x58000400
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e34:	4b03      	ldr	r3, [pc, #12]	; (8004e44 <HAL_PWREx_GetVoltageRange+0x14>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	58000400 	.word	0x58000400

08004e48 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a03      	ldr	r2, [pc, #12]	; (8004e60 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004e52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr
 8004e60:	58000400 	.word	0x58000400

08004e64 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e74:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004e76:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2232      	movs	r2, #50	; 0x32
 8004e7c:	fb02 f303 	mul.w	r3, r2, r3
 8004e80:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	0c9b      	lsrs	r3, r3, #18
 8004e88:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e8a:	e002      	b.n	8004e92 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9e:	d102      	bne.n	8004ea6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1f2      	bne.n	8004e8c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb2:	d101      	bne.n	8004eb8 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e000      	b.n	8004eba <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	58000400 	.word	0x58000400
 8004ec8:	20000000 	.word	0x20000000
 8004ecc:	431bde83 	.word	0x431bde83

08004ed0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004ed4:	4b06      	ldr	r3, [pc, #24]	; (8004ef0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee0:	d101      	bne.n	8004ee6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr
 8004ef0:	58000400 	.word	0x58000400

08004ef4 <LL_RCC_HSE_EnableTcxo>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f06:	6013      	str	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr

08004f10 <LL_RCC_HSE_DisableTcxo>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3e:	d101      	bne.n	8004f44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <LL_RCC_HSE_Enable>:
{
 8004f4e:	b480      	push	{r7}
 8004f50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr

08004f6a <LL_RCC_HSE_Disable>:
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7c:	6013      	str	r3, [r2, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_HSE_IsReady>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f98:	d101      	bne.n	8004f9e <LL_RCC_HSE_IsReady+0x18>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <LL_RCC_HSE_IsReady+0x1a>
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <LL_RCC_HSI_Enable>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]
}
 8004fbc:	bf00      	nop
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bc80      	pop	{r7}
 8004fc2:	4770      	bx	lr

08004fc4 <LL_RCC_HSI_Disable>:
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_HSI_IsReady>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff2:	d101      	bne.n	8004ff8 <LL_RCC_HSI_IsReady+0x18>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <LL_RCC_HSI_IsReady+0x1a>
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bc80      	pop	{r7}
 8005000:	4770      	bx	lr

08005002 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800500a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	061b      	lsls	r3, r3, #24
 8005018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501c:	4313      	orrs	r3, r2
 800501e:	604b      	str	r3, [r1, #4]
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <LL_RCC_LSE_IsReady>:
{
 800502a:	b480      	push	{r7}
 800502c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800502e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d101      	bne.n	8005042 <LL_RCC_LSE_IsReady+0x18>
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <LL_RCC_LSE_IsReady+0x1a>
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <LL_RCC_LSI_Enable>:
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <LL_RCC_LSI_Disable>:
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr

0800508c <LL_RCC_LSI_IsReady>:
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b02      	cmp	r3, #2
 800509e:	d101      	bne.n	80050a4 <LL_RCC_LSI_IsReady+0x18>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <LL_RCC_LSI_IsReady+0x1a>
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_MSI_Enable>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	6013      	str	r3, [r2, #0]
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bc80      	pop	{r7}
 80050c8:	4770      	bx	lr

080050ca <LL_RCC_MSI_Disable>:
{
 80050ca:	b480      	push	{r7}
 80050cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	6013      	str	r3, [r2, #0]
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr

080050e6 <LL_RCC_MSI_IsReady>:
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80050ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d101      	bne.n	80050fc <LL_RCC_MSI_IsReady+0x16>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <LL_RCC_MSI_IsReady+0x18>
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b08      	cmp	r3, #8
 8005116:	d101      	bne.n	800511c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <LL_RCC_MSI_GetRange>:
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr

0800513c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800514c:	4618      	mov	r0, r3
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr

08005154 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800516e:	4313      	orrs	r3, r2
 8005170:	604b      	str	r3, [r1, #4]
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr

0800517c <LL_RCC_SetSysClkSource>:
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f023 0203 	bic.w	r2, r3, #3
 800518e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4313      	orrs	r3, r2
 8005196:	608b      	str	r3, [r1, #8]
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <LL_RCC_GetSysClkSource>:
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 030c 	and.w	r3, r3, #12
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_SetAHBPrescaler>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <LL_RCC_SetAHB3Prescaler>:
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051ee:	f023 020f 	bic.w	r2, r3, #15
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <LL_RCC_SetAPB1Prescaler>:
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800521c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <LL_RCC_SetAPB2Prescaler>:
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <LL_RCC_GetAHBPrescaler>:
{
 8005256:	b480      	push	{r7}
 8005258:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800525a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <LL_RCC_GetAHB3Prescaler>:
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005274:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800527e:	4618      	mov	r0, r3
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr

08005286 <LL_RCC_GetAPB1Prescaler>:
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005294:	4618      	mov	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	bc80      	pop	{r7}
 800529a:	4770      	bx	lr

0800529c <LL_RCC_GetAPB2Prescaler>:
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80052a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052c4:	6013      	str	r3, [r2, #0]
}
 80052c6:	bf00      	nop
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80052d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e0:	6013      	str	r3, [r2, #0]
}
 80052e2:	bf00      	nop
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr

080052ea <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052fc:	d101      	bne.n	8005302 <LL_RCC_PLL_IsReady+0x18>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <LL_RCC_PLL_IsReady+0x1a>
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr

0800533a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	bc80      	pop	{r7}
 800534e:	4770      	bx	lr

08005350 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0303 	and.w	r3, r3, #3
}
 800535e:	4618      	mov	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr

08005366 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005366:	b480      	push	{r7}
 8005368:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800536a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005378:	d101      	bne.n	800537e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	46bd      	mov	sp, r7
 8005384:	bc80      	pop	{r7}
 8005386:	4770      	bx	lr

08005388 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005390:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d101      	bne.n	80053a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800539e:	2301      	movs	r3, #1
 80053a0:	e000      	b.n	80053a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80053b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053be:	d101      	bne.n	80053c4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80053d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053e0:	d101      	bne.n	80053e6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e38b      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005402:	f7ff fece 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005406:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005408:	f7ff ffa2 	bl	8005350 <LL_RCC_PLL_GetMainSource>
 800540c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 80c9 	beq.w	80055ae <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d005      	beq.n	800542e <HAL_RCC_OscConfig+0x3e>
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d17b      	bne.n	8005520 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d178      	bne.n	8005520 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800542e:	f7ff fe5a 	bl	80050e6 <LL_RCC_MSI_IsReady>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_OscConfig+0x54>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e36a      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x72>
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005460:	e006      	b.n	8005470 <HAL_RCC_OscConfig+0x80>
 8005462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005470:	4293      	cmp	r3, r2
 8005472:	d222      	bcs.n	80054ba <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd51 	bl	8005f20 <RCC_SetFlashLatencyFromMSIRange>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e348      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005492:	f043 0308 	orr.w	r3, r3, #8
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054aa:	4313      	orrs	r3, r2
 80054ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fe4e 	bl	8005154 <LL_RCC_MSI_SetCalibTrimming>
 80054b8:	e021      	b.n	80054fe <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054c4:	f043 0308 	orr.w	r3, r3, #8
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fe35 	bl	8005154 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fd16 	bl	8005f20 <RCC_SetFlashLatencyFromMSIRange>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e30d      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054fe:	f000 fcd7 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005502:	4603      	mov	r3, r0
 8005504:	4aa1      	ldr	r2, [pc, #644]	; (800578c <HAL_RCC_OscConfig+0x39c>)
 8005506:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005508:	4ba1      	ldr	r3, [pc, #644]	; (8005790 <HAL_RCC_OscConfig+0x3a0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fc f9df 	bl	80018d0 <HAL_InitTick>
 8005512:	4603      	mov	r3, r0
 8005514:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d047      	beq.n	80055ac <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	e2fc      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d02c      	beq.n	8005582 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005528:	f7ff fdc1 	bl	80050ae <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800552c:	f7fc f9da 	bl	80018e4 <HAL_GetTick>
 8005530:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005534:	f7fc f9d6 	bl	80018e4 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e2e9      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005546:	f7ff fdce 	bl	80050e6 <LL_RCC_MSI_IsReady>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f1      	beq.n	8005534 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800555a:	f043 0308 	orr.w	r3, r3, #8
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff fdea 	bl	8005154 <LL_RCC_MSI_SetCalibTrimming>
 8005580:	e015      	b.n	80055ae <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005582:	f7ff fda2 	bl	80050ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005586:	f7fc f9ad 	bl	80018e4 <HAL_GetTick>
 800558a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800558c:	e008      	b.n	80055a0 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800558e:	f7fc f9a9 	bl	80018e4 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e2bc      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80055a0:	f7ff fda1 	bl	80050e6 <LL_RCC_MSI_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f1      	bne.n	800558e <HAL_RCC_OscConfig+0x19e>
 80055aa:	e000      	b.n	80055ae <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80055ac:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d05f      	beq.n	800567a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d005      	beq.n	80055cc <HAL_RCC_OscConfig+0x1dc>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b0c      	cmp	r3, #12
 80055c4:	d10d      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b03      	cmp	r3, #3
 80055ca:	d10a      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055cc:	f7ff fcdb 	bl	8004f86 <LL_RCC_HSE_IsReady>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d050      	beq.n	8005678 <HAL_RCC_OscConfig+0x288>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d14c      	bne.n	8005678 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e29b      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055f4:	4313      	orrs	r3, r2
 80055f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005600:	d102      	bne.n	8005608 <HAL_RCC_OscConfig+0x218>
 8005602:	f7ff fca4 	bl	8004f4e <LL_RCC_HSE_Enable>
 8005606:	e00d      	b.n	8005624 <HAL_RCC_OscConfig+0x234>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005610:	d104      	bne.n	800561c <HAL_RCC_OscConfig+0x22c>
 8005612:	f7ff fc6f 	bl	8004ef4 <LL_RCC_HSE_EnableTcxo>
 8005616:	f7ff fc9a 	bl	8004f4e <LL_RCC_HSE_Enable>
 800561a:	e003      	b.n	8005624 <HAL_RCC_OscConfig+0x234>
 800561c:	f7ff fca5 	bl	8004f6a <LL_RCC_HSE_Disable>
 8005620:	f7ff fc76 	bl	8004f10 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d012      	beq.n	8005652 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800562c:	f7fc f95a 	bl	80018e4 <HAL_GetTick>
 8005630:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005634:	f7fc f956 	bl	80018e4 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b64      	cmp	r3, #100	; 0x64
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e269      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005646:	f7ff fc9e 	bl	8004f86 <LL_RCC_HSE_IsReady>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0f1      	beq.n	8005634 <HAL_RCC_OscConfig+0x244>
 8005650:	e013      	b.n	800567a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fc f947 	bl	80018e4 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800565a:	f7fc f943 	bl	80018e4 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b64      	cmp	r3, #100	; 0x64
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e256      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800566c:	f7ff fc8b 	bl	8004f86 <LL_RCC_HSE_IsReady>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f1      	bne.n	800565a <HAL_RCC_OscConfig+0x26a>
 8005676:	e000      	b.n	800567a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005678:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d04b      	beq.n	800571e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b04      	cmp	r3, #4
 800568a:	d005      	beq.n	8005698 <HAL_RCC_OscConfig+0x2a8>
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d113      	bne.n	80056ba <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d110      	bne.n	80056ba <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005698:	f7ff fca2 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 800569c:	4603      	mov	r3, r0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <HAL_RCC_OscConfig+0x2be>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e235      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff fca5 	bl	8005002 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056b8:	e031      	b.n	800571e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d019      	beq.n	80056f6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056c2:	f7ff fc71 	bl	8004fa8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c6:	f7fc f90d 	bl	80018e4 <HAL_GetTick>
 80056ca:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056ce:	f7fc f909 	bl	80018e4 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e21c      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80056e0:	f7ff fc7e 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f1      	beq.n	80056ce <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fc87 	bl	8005002 <LL_RCC_HSI_SetCalibTrimming>
 80056f4:	e013      	b.n	800571e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f6:	f7ff fc65 	bl	8004fc4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fa:	f7fc f8f3 	bl	80018e4 <HAL_GetTick>
 80056fe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005700:	e008      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005702:	f7fc f8ef 	bl	80018e4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	2b02      	cmp	r3, #2
 800570e:	d901      	bls.n	8005714 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e202      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005714:	f7ff fc64 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1f1      	bne.n	8005702 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d06f      	beq.n	800580a <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d057      	beq.n	80057e2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0310 	and.w	r3, r3, #16
 8005746:	429a      	cmp	r2, r3
 8005748:	d036      	beq.n	80057b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d006      	beq.n	8005762 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e1db      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d018      	beq.n	800579e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800576c:	f7ff fc7e 	bl	800506c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005770:	f7fc f8b8 	bl	80018e4 <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005776:	e00d      	b.n	8005794 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005778:	f7fc f8b4 	bl	80018e4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b11      	cmp	r3, #17
 8005784:	d906      	bls.n	8005794 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e1c7      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
 800578a:	bf00      	nop
 800578c:	20000000 	.word	0x20000000
 8005790:	20000008 	.word	0x20000008
          while (LL_RCC_LSI_IsReady() != 0U)
 8005794:	f7ff fc7a 	bl	800508c <LL_RCC_LSI_IsReady>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1ec      	bne.n	8005778 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800579e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a6:	f023 0210 	bic.w	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b2:	4313      	orrs	r3, r2
 80057b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b8:	f7ff fc48 	bl	800504c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fc f892 	bl	80018e4 <HAL_GetTick>
 80057c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fc f88e 	bl	80018e4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b11      	cmp	r3, #17
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e1a1      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80057d6:	f7ff fc59 	bl	800508c <LL_RCC_LSI_IsReady>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d0f1      	beq.n	80057c4 <HAL_RCC_OscConfig+0x3d4>
 80057e0:	e013      	b.n	800580a <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e2:	f7ff fc43 	bl	800506c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e6:	f7fc f87d 	bl	80018e4 <HAL_GetTick>
 80057ea:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ee:	f7fc f879 	bl	80018e4 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b11      	cmp	r3, #17
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e18c      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005800:	f7ff fc44 	bl	800508c <LL_RCC_LSI_IsReady>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f1      	bne.n	80057ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80d8 	beq.w	80059c8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005818:	f7ff fb5a 	bl	8004ed0 <LL_PWR_IsEnabledBkUpAccess>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d113      	bne.n	800584a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005822:	f7ff fac3 	bl	8004dac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005826:	f7fc f85d 	bl	80018e4 <HAL_GetTick>
 800582a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800582e:	f7fc f859 	bl	80018e4 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e16c      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005840:	f7ff fb46 	bl	8004ed0 <LL_PWR_IsEnabledBkUpAccess>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f1      	beq.n	800582e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d07b      	beq.n	800594a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b85      	cmp	r3, #133	; 0x85
 8005858:	d003      	beq.n	8005862 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b05      	cmp	r3, #5
 8005860:	d109      	bne.n	8005876 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800586e:	f043 0304 	orr.w	r3, r3, #4
 8005872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005876:	f7fc f835 	bl	80018e4 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005884:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005888:	f043 0301 	orr.w	r3, r3, #1
 800588c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005890:	e00a      	b.n	80058a8 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fc f827 	bl	80018e4 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1ad3      	subs	r3, r2, r3
 800589c:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e138      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80058a8:	f7ff fbbf 	bl	800502a <LL_RCC_LSE_IsReady>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ef      	beq.n	8005892 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b81      	cmp	r3, #129	; 0x81
 80058b8:	d003      	beq.n	80058c2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	2b85      	cmp	r3, #133	; 0x85
 80058c0:	d121      	bne.n	8005906 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f7fc f80f 	bl	80018e4 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058dc:	e00a      	b.n	80058f4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058de:	f7fc f801 	bl	80018e4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e112      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	2b00      	cmp	r3, #0
 8005902:	d0ec      	beq.n	80058de <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005904:	e060      	b.n	80059c8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005906:	f7fb ffed 	bl	80018e4 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005920:	e00a      	b.n	8005938 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005922:	f7fb ffdf 	bl	80018e4 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005930:	4293      	cmp	r3, r2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e0f0      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1ec      	bne.n	8005922 <HAL_RCC_OscConfig+0x532>
 8005948:	e03e      	b.n	80059c8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800594a:	f7fb ffcb 	bl	80018e4 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800595c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005964:	e00a      	b.n	800597c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005966:	f7fb ffbd 	bl	80018e4 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	f241 3288 	movw	r2, #5000	; 0x1388
 8005974:	4293      	cmp	r3, r2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e0ce      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800597c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1ec      	bne.n	8005966 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800598c:	f7fb ffaa 	bl	80018e4 <HAL_GetTick>
 8005990:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80059a6:	e00a      	b.n	80059be <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a8:	f7fb ff9c 	bl	80018e4 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0ad      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80059be:	f7ff fb34 	bl	800502a <LL_RCC_LSE_IsReady>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1ef      	bne.n	80059a8 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80a3 	beq.w	8005b18 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b0c      	cmp	r3, #12
 80059d6:	d076      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d14b      	bne.n	8005a78 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059e0:	f7ff fc75 	bl	80052ce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fb ff7e 	bl	80018e4 <HAL_GetTick>
 80059e8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fb ff7a 	bl	80018e4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b0a      	cmp	r3, #10
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e08d      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80059fe:	f7ff fc74 	bl	80052ea <LL_RCC_PLL_IsReady>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f1      	bne.n	80059ec <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	4b45      	ldr	r3, [pc, #276]	; (8005b24 <HAL_RCC_OscConfig+0x734>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a1a:	4311      	orrs	r1, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a20:	0212      	lsls	r2, r2, #8
 8005a22:	4311      	orrs	r1, r2
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a28:	4311      	orrs	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a2e:	4311      	orrs	r1, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a34:	430a      	orrs	r2, r1
 8005a36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a3e:	f7ff fc38 	bl	80052b2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a50:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fb ff47 	bl	80018e4 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fb ff43 	bl	80018e4 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b0a      	cmp	r3, #10
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e056      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005a6c:	f7ff fc3d 	bl	80052ea <LL_RCC_PLL_IsReady>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0f1      	beq.n	8005a5a <HAL_RCC_OscConfig+0x66a>
 8005a76:	e04f      	b.n	8005b18 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a78:	f7ff fc29 	bl	80052ce <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a96:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fb ff20 	bl	80018e4 <HAL_GetTick>
 8005aa4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa8:	f7fb ff1c 	bl	80018e4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b0a      	cmp	r3, #10
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e02f      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005aba:	f7ff fc16 	bl	80052ea <LL_RCC_PLL_IsReady>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f1      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x6b8>
 8005ac4:	e028      	b.n	8005b18 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e023      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	f003 0203 	and.w	r2, r3, #3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d115      	bne.n	8005b14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d10e      	bne.n	8005b14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d106      	bne.n	8005b14 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d001      	beq.n	8005b18 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	11c1808c 	.word	0x11c1808c

08005b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e10f      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b3c:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d91b      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b4a:	4b86      	ldr	r3, [pc, #536]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f023 0207 	bic.w	r2, r3, #7
 8005b52:	4984      	ldr	r1, [pc, #528]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b5a:	f7fb fec3 	bl	80018e4 <HAL_GetTick>
 8005b5e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b60:	e008      	b.n	8005b74 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b62:	f7fb febf 	bl	80018e4 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d901      	bls.n	8005b74 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e0f3      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b74:	4b7b      	ldr	r3, [pc, #492]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d1ef      	bne.n	8005b62 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fb10 	bl	80051b8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b98:	f7fb fea4 	bl	80018e4 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ba0:	f7fb fea0 	bl	80018e4 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e0d4      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005bb2:	f7ff fbd8 	bl	8005366 <LL_RCC_IsActiveFlag_HPRE>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d0f1      	beq.n	8005ba0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d016      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fb06 	bl	80051de <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005bd2:	f7fb fe87 	bl	80018e4 <HAL_GetTick>
 8005bd6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005bda:	f7fb fe83 	bl	80018e4 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e0b7      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005bec:	f7ff fbcc 	bl	8005388 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0f1      	beq.n	8005bda <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff faff 	bl	800520a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c0c:	f7fb fe6a 	bl	80018e4 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c14:	f7fb fe66 	bl	80018e4 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e09a      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005c26:	f7ff fbc1 	bl	80053ac <LL_RCC_IsActiveFlag_PPRE1>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f1      	beq.n	8005c14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d017      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff faf4 	bl	8005230 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c48:	f7fb fe4c 	bl	80018e4 <HAL_GetTick>
 8005c4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c4e:	e008      	b.n	8005c62 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c50:	f7fb fe48 	bl	80018e4 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e07c      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005c62:	f7ff fbb4 	bl	80053ce <LL_RCC_IsActiveFlag_PPRE2>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0f1      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d043      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005c80:	f7ff f981 	bl	8004f86 <LL_RCC_HSE_IsReady>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d11e      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e066      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d106      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005c96:	f7ff fb28 	bl	80052ea <LL_RCC_PLL_IsReady>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d113      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e05b      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005cac:	f7ff fa1b 	bl	80050e6 <LL_RCC_MSI_IsReady>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d108      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e050      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005cba:	f7ff f991 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e049      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fa55 	bl	800517c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fb fe07 	bl	80018e4 <HAL_GetTick>
 8005cd6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cda:	f7fb fe03 	bl	80018e4 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d901      	bls.n	8005cf0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e035      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf0:	f7ff fa57 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1ec      	bne.n	8005cda <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d00:	4b18      	ldr	r3, [pc, #96]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0307 	and.w	r3, r3, #7
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d21b      	bcs.n	8005d46 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 0207 	bic.w	r2, r3, #7
 8005d16:	4913      	ldr	r1, [pc, #76]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1e:	f7fb fde1 	bl	80018e4 <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d26:	f7fb fddd 	bl	80018e4 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e011      	b.n	8005d5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <HAL_RCC_ClockConfig+0x23c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d1ef      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d46:	f000 f8b3 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4a06      	ldr	r2, [pc, #24]	; (8005d68 <HAL_RCC_ClockConfig+0x240>)
 8005d4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_ClockConfig+0x244>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fb fdbb 	bl	80018d0 <HAL_InitTick>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	58004000 	.word	0x58004000
 8005d68:	20000000 	.word	0x20000000
 8005d6c:	20000008 	.word	0x20000008

08005d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d7e:	f7ff fa10 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005d82:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d84:	f7ff fae4 	bl	8005350 <LL_RCC_PLL_GetMainSource>
 8005d88:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d005      	beq.n	8005d9c <HAL_RCC_GetSysClockFreq+0x2c>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	2b0c      	cmp	r3, #12
 8005d94:	d139      	bne.n	8005e0a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d136      	bne.n	8005e0a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005d9c:	f7ff f9b3 	bl	8005106 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d115      	bne.n	8005dd2 <HAL_RCC_GetSysClockFreq+0x62>
 8005da6:	f7ff f9ae 	bl	8005106 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d106      	bne.n	8005dbe <HAL_RCC_GetSysClockFreq+0x4e>
 8005db0:	f7ff f9b9 	bl	8005126 <LL_RCC_MSI_GetRange>
 8005db4:	4603      	mov	r3, r0
 8005db6:	0a1b      	lsrs	r3, r3, #8
 8005db8:	f003 030f 	and.w	r3, r3, #15
 8005dbc:	e005      	b.n	8005dca <HAL_RCC_GetSysClockFreq+0x5a>
 8005dbe:	f7ff f9bd 	bl	800513c <LL_RCC_MSI_GetRangeAfterStandby>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	0a1b      	lsrs	r3, r3, #8
 8005dc6:	f003 030f 	and.w	r3, r3, #15
 8005dca:	4a36      	ldr	r2, [pc, #216]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd0:	e014      	b.n	8005dfc <HAL_RCC_GetSysClockFreq+0x8c>
 8005dd2:	f7ff f998 	bl	8005106 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d106      	bne.n	8005dea <HAL_RCC_GetSysClockFreq+0x7a>
 8005ddc:	f7ff f9a3 	bl	8005126 <LL_RCC_MSI_GetRange>
 8005de0:	4603      	mov	r3, r0
 8005de2:	091b      	lsrs	r3, r3, #4
 8005de4:	f003 030f 	and.w	r3, r3, #15
 8005de8:	e005      	b.n	8005df6 <HAL_RCC_GetSysClockFreq+0x86>
 8005dea:	f7ff f9a7 	bl	800513c <LL_RCC_MSI_GetRangeAfterStandby>
 8005dee:	4603      	mov	r3, r0
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x134>)
 8005df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dfc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d115      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e08:	e012      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d102      	bne.n	8005e16 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	e00c      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	2b08      	cmp	r3, #8
 8005e1a:	d109      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e1c:	f7ff f886 	bl	8004f2c <LL_RCC_HSE_IsEnabledDiv2>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d102      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005e26:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e28:	617b      	str	r3, [r7, #20]
 8005e2a:	e001      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e2e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e30:	f7ff f9b7 	bl	80051a2 <LL_RCC_GetSysClkSource>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d12f      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005e3a:	f7ff fa89 	bl	8005350 <LL_RCC_PLL_GetMainSource>
 8005e3e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d003      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0xde>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d003      	beq.n	8005e54 <HAL_RCC_GetSysClockFreq+0xe4>
 8005e4c:	e00d      	b.n	8005e6a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005e4e:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e50:	60fb      	str	r3, [r7, #12]
        break;
 8005e52:	e00d      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005e54:	f7ff f86a 	bl	8004f2c <LL_RCC_HSE_IsEnabledDiv2>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d102      	bne.n	8005e64 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005e60:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005e62:	e005      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <HAL_RCC_GetSysClockFreq+0x13c>)
 8005e66:	60fb      	str	r3, [r7, #12]
        break;
 8005e68:	e002      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	60fb      	str	r3, [r7, #12]
        break;
 8005e6e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005e70:	f7ff fa4c 	bl	800530c <LL_RCC_PLL_GetN>
 8005e74:	4602      	mov	r2, r0
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	fb03 f402 	mul.w	r4, r3, r2
 8005e7c:	f7ff fa5d 	bl	800533a <LL_RCC_PLL_GetDivider>
 8005e80:	4603      	mov	r3, r0
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	3301      	adds	r3, #1
 8005e86:	fbb4 f4f3 	udiv	r4, r4, r3
 8005e8a:	f7ff fa4b 	bl	8005324 <LL_RCC_PLL_GetR>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	0f5b      	lsrs	r3, r3, #29
 8005e92:	3301      	adds	r3, #1
 8005e94:	fbb4 f3f3 	udiv	r3, r4, r3
 8005e98:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005e9a:	697b      	ldr	r3, [r7, #20]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	371c      	adds	r7, #28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd90      	pop	{r4, r7, pc}
 8005ea4:	08022b14 	.word	0x08022b14
 8005ea8:	00f42400 	.word	0x00f42400
 8005eac:	01e84800 	.word	0x01e84800

08005eb0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb0:	b598      	push	{r3, r4, r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005eb4:	f7ff ff5c 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	f7ff f9cc 	bl	8005256 <LL_RCC_GetAHBPrescaler>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	091b      	lsrs	r3, r3, #4
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ecc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd98      	pop	{r3, r4, r7, pc}
 8005ed4:	08022ab4 	.word	0x08022ab4

08005ed8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed8:	b598      	push	{r3, r4, r7, lr}
 8005eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005edc:	f7ff ffe8 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	f7ff f9d0 	bl	8005286 <LL_RCC_GetAPB1Prescaler>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	4a03      	ldr	r2, [pc, #12]	; (8005ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	bd98      	pop	{r3, r4, r7, pc}
 8005ef8:	08022af4 	.word	0x08022af4

08005efc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005efc:	b598      	push	{r3, r4, r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005f00:	f7ff ffd6 	bl	8005eb0 <HAL_RCC_GetHCLKFreq>
 8005f04:	4604      	mov	r4, r0
 8005f06:	f7ff f9c9 	bl	800529c <LL_RCC_GetAPB2Prescaler>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	0adb      	lsrs	r3, r3, #11
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	bd98      	pop	{r3, r4, r7, pc}
 8005f1c:	08022af4 	.word	0x08022af4

08005f20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	091b      	lsrs	r3, r3, #4
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	4a10      	ldr	r2, [pc, #64]	; (8005f74 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f36:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005f38:	f7ff f998 	bl	800526c <LL_RCC_GetAHB3Prescaler>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0c9c      	lsrs	r4, r3, #18
 8005f5c:	f7fe ff68 	bl	8004e30 <HAL_PWREx_GetVoltageRange>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4619      	mov	r1, r3
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 f80b 	bl	8005f80 <RCC_SetFlashLatency>
 8005f6a:	4603      	mov	r3, r0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd90      	pop	{r4, r7, pc}
 8005f74:	08022b14 	.word	0x08022b14
 8005f78:	08022ab4 	.word	0x08022ab4
 8005f7c:	431bde83 	.word	0x431bde83

08005f80 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08e      	sub	sp, #56	; 0x38
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <RCC_SetFlashLatency+0xf4>)
 8005f8c:	f107 0320 	add.w	r3, r7, #32
 8005f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f94:	6018      	str	r0, [r3, #0]
 8005f96:	3304      	adds	r3, #4
 8005f98:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005f9a:	4a37      	ldr	r2, [pc, #220]	; (8006078 <RCC_SetFlashLatency+0xf8>)
 8005f9c:	f107 0318 	add.w	r3, r7, #24
 8005fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fa4:	6018      	str	r0, [r3, #0]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005faa:	4a34      	ldr	r2, [pc, #208]	; (800607c <RCC_SetFlashLatency+0xfc>)
 8005fac:	f107 030c 	add.w	r3, r7, #12
 8005fb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc0:	d11b      	bne.n	8005ffa <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc6:	e014      	b.n	8005ff2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	3338      	adds	r3, #56	; 0x38
 8005fce:	443b      	add	r3, r7
 8005fd0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d807      	bhi.n	8005fec <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	3338      	adds	r3, #56	; 0x38
 8005fe2:	443b      	add	r3, r7
 8005fe4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fea:	e021      	b.n	8006030 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	3301      	adds	r3, #1
 8005ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d9e7      	bls.n	8005fc8 <RCC_SetFlashLatency+0x48>
 8005ff8:	e01a      	b.n	8006030 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ffe:	e014      	b.n	800602a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	3338      	adds	r3, #56	; 0x38
 8006006:	443b      	add	r3, r7
 8006008:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4293      	cmp	r3, r2
 8006012:	d807      	bhi.n	8006024 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	3338      	adds	r3, #56	; 0x38
 800601a:	443b      	add	r3, r7
 800601c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006022:	e005      	b.n	8006030 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006026:	3301      	adds	r3, #1
 8006028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	2b02      	cmp	r3, #2
 800602e:	d9e7      	bls.n	8006000 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006030:	4b13      	ldr	r3, [pc, #76]	; (8006080 <RCC_SetFlashLatency+0x100>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 0207 	bic.w	r2, r3, #7
 8006038:	4911      	ldr	r1, [pc, #68]	; (8006080 <RCC_SetFlashLatency+0x100>)
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	4313      	orrs	r3, r2
 800603e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006040:	f7fb fc50 	bl	80018e4 <HAL_GetTick>
 8006044:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006046:	e008      	b.n	800605a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006048:	f7fb fc4c 	bl	80018e4 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b02      	cmp	r3, #2
 8006054:	d901      	bls.n	800605a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e007      	b.n	800606a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <RCC_SetFlashLatency+0x100>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006064:	429a      	cmp	r2, r3
 8006066:	d1ef      	bne.n	8006048 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3738      	adds	r7, #56	; 0x38
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	08020c88 	.word	0x08020c88
 8006078:	08020c90 	.word	0x08020c90
 800607c:	08020c98 	.word	0x08020c98
 8006080:	58004000 	.word	0x58004000

08006084 <LL_RCC_LSE_IsReady>:
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b02      	cmp	r3, #2
 8006096:	d101      	bne.n	800609c <LL_RCC_LSE_IsReady+0x18>
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <LL_RCC_LSE_IsReady+0x1a>
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <LL_RCC_SetUSARTClockSource>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80060ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0c1b      	lsrs	r3, r3, #16
 80060ba:	43db      	mvns	r3, r3
 80060bc:	401a      	ands	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_SetI2SClockSource>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80060de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_SetLPUARTClockSource>:
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006114:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	bc80      	pop	{r7}
 8006128:	4770      	bx	lr

0800612a <LL_RCC_SetI2CClockSource>:
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006136:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006142:	43db      	mvns	r3, r3
 8006144:	401a      	ands	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800614e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr

08006162 <LL_RCC_SetLPTIMClockSource>:
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800616a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	041b      	lsls	r3, r3, #16
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	041b      	lsls	r3, r3, #16
 8006180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800618a:	bf00      	nop
 800618c:	370c      	adds	r7, #12
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr

08006194 <LL_RCC_SetRNGClockSource>:
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80061a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bc80      	pop	{r7}
 80061bc:	4770      	bx	lr

080061be <LL_RCC_SetADCClockSource>:
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4313      	orrs	r3, r2
 80061da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <LL_RCC_SetRTCClockSource>:
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4313      	orrs	r3, r2
 8006204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	bc80      	pop	{r7}
 8006210:	4770      	bx	lr

08006212 <LL_RCC_GetRTCClockSource>:
{
 8006212:	b480      	push	{r7}
 8006214:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006222:	4618      	mov	r0, r3
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <LL_RCC_ForceBackupDomainReset>:
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800623a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800623e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006242:	bf00      	nop
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr

0800624a <LL_RCC_ReleaseBackupDomainReset>:
{
 800624a:	b480      	push	{r7}
 800624c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800624e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800625e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	bc80      	pop	{r7}
 8006268:	4770      	bx	lr
	...

0800626c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006278:	2300      	movs	r3, #0
 800627a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800627c:	2300      	movs	r3, #0
 800627e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d058      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800628c:	f7fe fd8e 	bl	8004dac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006290:	f7fb fb28 	bl	80018e4 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006296:	e009      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006298:	f7fb fb24 	bl	80018e4 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d902      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	74fb      	strb	r3, [r7, #19]
        break;
 80062aa:	e006      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80062ac:	4b7b      	ldr	r3, [pc, #492]	; (800649c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b8:	d1ee      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80062ba:	7cfb      	ldrb	r3, [r7, #19]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d13c      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80062c0:	f7ff ffa7 	bl	8006212 <LL_RCC_GetRTCClockSource>
 80062c4:	4602      	mov	r2, r0
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d00f      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062da:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062dc:	f7ff ffa5 	bl	800622a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062e0:	f7ff ffb3 	bl	800624a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d014      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f8:	f7fb faf4 	bl	80018e4 <HAL_GetTick>
 80062fc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80062fe:	e00b      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fb faf0 	bl	80018e4 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d902      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	74fb      	strb	r3, [r7, #19]
            break;
 8006316:	e004      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006318:	f7ff feb4 	bl	8006084 <LL_RCC_LSE_IsReady>
 800631c:	4603      	mov	r3, r0
 800631e:	2b01      	cmp	r3, #1
 8006320:	d1ee      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d105      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff ff5b 	bl	80061e8 <LL_RCC_SetRTCClockSource>
 8006332:	e004      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	74bb      	strb	r3, [r7, #18]
 8006338:	e001      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	7cfb      	ldrb	r3, [r7, #19]
 800633c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4618      	mov	r0, r3
 8006350:	f7ff fea9 	bl	80060a6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	4618      	mov	r0, r3
 8006366:	f7ff fe9e 	bl	80060a6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fec0 	bl	8006100 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff fee6 	bl	8006162 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fedb 	bl	8006162 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fed0 	bl	8006162 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7ff fea9 	bl	800612a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fe9e 	bl	800612a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d004      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7ff fe93 	bl	800612a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fe5e 	bl	80060d6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006422:	d107      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800642e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006432:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d010      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fea5 	bl	8006194 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800645c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006460:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d011      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006472:	4618      	mov	r0, r3
 8006474:	f7ff fea3 	bl	80061be <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006480:	d107      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800648c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006490:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006492:	7cbb      	ldrb	r3, [r7, #18]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	58000400 	.word	0x58000400

080064a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d068      	beq.n	8006584 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fa ff3e 	bl	8001348 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064d4:	4b2e      	ldr	r3, [pc, #184]	; (8006590 <HAL_RTC_Init+0xf0>)
 80064d6:	22ca      	movs	r2, #202	; 0xca
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24
 80064da:	4b2d      	ldr	r3, [pc, #180]	; (8006590 <HAL_RTC_Init+0xf0>)
 80064dc:	2253      	movs	r2, #83	; 0x53
 80064de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fa0f 	bl	8006904 <RTC_EnterInitMode>
 80064e6:	4603      	mov	r3, r0
 80064e8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80064ea:	7bfb      	ldrb	r3, [r7, #15]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d13f      	bne.n	8006570 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80064f0:	4b27      	ldr	r3, [pc, #156]	; (8006590 <HAL_RTC_Init+0xf0>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4a26      	ldr	r2, [pc, #152]	; (8006590 <HAL_RTC_Init+0xf0>)
 80064f6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80064fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fe:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006500:	4b23      	ldr	r3, [pc, #140]	; (8006590 <HAL_RTC_Init+0xf0>)
 8006502:	699a      	ldr	r2, [r3, #24]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	4319      	orrs	r1, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	430b      	orrs	r3, r1
 8006514:	491e      	ldr	r1, [pc, #120]	; (8006590 <HAL_RTC_Init+0xf0>)
 8006516:	4313      	orrs	r3, r2
 8006518:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	491a      	ldr	r1, [pc, #104]	; (8006590 <HAL_RTC_Init+0xf0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800652a:	4b19      	ldr	r3, [pc, #100]	; (8006590 <HAL_RTC_Init+0xf0>)
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	430b      	orrs	r3, r1
 800653c:	4914      	ldr	r1, [pc, #80]	; (8006590 <HAL_RTC_Init+0xf0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa12 	bl	800696c <RTC_ExitInitMode>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10e      	bne.n	8006570 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006552:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <HAL_RTC_Init+0xf0>)
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a19      	ldr	r1, [r3, #32]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	4319      	orrs	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	430b      	orrs	r3, r1
 800656a:	4909      	ldr	r1, [pc, #36]	; (8006590 <HAL_RTC_Init+0xf0>)
 800656c:	4313      	orrs	r3, r2
 800656e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_RTC_Init+0xf0>)
 8006572:	22ff      	movs	r2, #255	; 0xff
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	40002800 	.word	0x40002800

08006594 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d101      	bne.n	80065b2 <HAL_RTC_SetAlarm_IT+0x1e>
 80065ae:	2302      	movs	r3, #2
 80065b0:	e0f3      	b.n	800679a <HAL_RTC_SetAlarm_IT+0x206>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80065c2:	4b78      	ldr	r3, [pc, #480]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ca:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065d2:	d06a      	beq.n	80066aa <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d13a      	bne.n	8006650 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80065da:	4b72      	ldr	r3, [pc, #456]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d102      	bne.n	80065ec <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f9f5 	bl	80069e8 <RTC_ByteToBcd2>
 80065fe:	4603      	mov	r3, r0
 8006600:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f9ee 	bl	80069e8 <RTC_ByteToBcd2>
 800660c:	4603      	mov	r3, r0
 800660e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006610:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	789b      	ldrb	r3, [r3, #2]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f9e6 	bl	80069e8 <RTC_ByteToBcd2>
 800661c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800661e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	78db      	ldrb	r3, [r3, #3]
 8006626:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006628:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006632:	4618      	mov	r0, r3
 8006634:	f000 f9d8 	bl	80069e8 <RTC_ByteToBcd2>
 8006638:	4603      	mov	r3, r0
 800663a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800663c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006644:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	e02c      	b.n	80066aa <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006658:	d00d      	beq.n	8006676 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006662:	d008      	beq.n	8006676 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006664:	4b4f      	ldr	r3, [pc, #316]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d102      	bne.n	8006676 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	2200      	movs	r2, #0
 8006674:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006682:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006688:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	78db      	ldrb	r3, [r3, #3]
 800668e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006690:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006698:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800669a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80066a0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066aa:	4b3e      	ldr	r3, [pc, #248]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ac:	22ca      	movs	r2, #202	; 0xca
 80066ae:	625a      	str	r2, [r3, #36]	; 0x24
 80066b0:	4b3c      	ldr	r3, [pc, #240]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066b2:	2253      	movs	r2, #83	; 0x53
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d12c      	bne.n	800671a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80066c0:	4b38      	ldr	r3, [pc, #224]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	4a37      	ldr	r2, [pc, #220]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80066ca:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80066cc:	4b35      	ldr	r3, [pc, #212]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d8:	d107      	bne.n	80066ea <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	4930      	ldr	r1, [pc, #192]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066e4:	4313      	orrs	r3, r2
 80066e6:	644b      	str	r3, [r1, #68]	; 0x44
 80066e8:	e006      	b.n	80066f8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80066ea:	4a2e      	ldr	r2, [pc, #184]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80066f0:	4a2c      	ldr	r2, [pc, #176]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80066f8:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	f043 0201 	orr.w	r2, r3, #1
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800670c:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006712:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006716:	6193      	str	r3, [r2, #24]
 8006718:	e02b      	b.n	8006772 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	4a21      	ldr	r2, [pc, #132]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006720:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006724:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006726:	4b1f      	ldr	r3, [pc, #124]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006728:	2202      	movs	r2, #2
 800672a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d107      	bne.n	8006744 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4919      	ldr	r1, [pc, #100]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800673e:	4313      	orrs	r3, r2
 8006740:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006742:	e006      	b.n	8006752 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006744:	4a17      	ldr	r2, [pc, #92]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800674a:	4a16      	ldr	r2, [pc, #88]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006752:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f043 0202 	orr.w	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	4a0e      	ldr	r2, [pc, #56]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 800676c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006770:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <HAL_RTC_SetAlarm_IT+0x214>)
 8006774:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006778:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <HAL_RTC_SetAlarm_IT+0x214>)
 800677a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800677e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006782:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <HAL_RTC_SetAlarm_IT+0x210>)
 8006784:	22ff      	movs	r2, #255	; 0xff
 8006786:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	371c      	adds	r7, #28
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd90      	pop	{r4, r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40002800 	.word	0x40002800
 80067a8:	58000800 	.word	0x58000800

080067ac <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <HAL_RTC_DeactivateAlarm+0x18>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e048      	b.n	8006856 <HAL_RTC_DeactivateAlarm+0xaa>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067d4:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067d6:	22ca      	movs	r2, #202	; 0xca
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24
 80067da:	4b21      	ldr	r3, [pc, #132]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067dc:	2253      	movs	r2, #83	; 0x53
 80067de:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e6:	d115      	bne.n	8006814 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80067f2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 80067fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067fe:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	f023 0201 	bic.w	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800680c:	4b14      	ldr	r3, [pc, #80]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 800680e:	2201      	movs	r2, #1
 8006810:	65da      	str	r2, [r3, #92]	; 0x5c
 8006812:	e014      	b.n	800683e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006814:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	4a11      	ldr	r2, [pc, #68]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 800681a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800681e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006820:	4b0f      	ldr	r3, [pc, #60]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006824:	4a0e      	ldr	r2, [pc, #56]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800682a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	f023 0202 	bic.w	r2, r3, #2
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 800683a:	2202      	movs	r2, #2
 800683c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006840:	22ff      	movs	r2, #255	; 0xff
 8006842:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	40002800 	.word	0x40002800

08006864 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800686e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	4013      	ands	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006884:	2201      	movs	r2, #1
 8006886:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fb f9ae 	bl	8001bea <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0302 	and.w	r3, r3, #2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800689a:	2202      	movs	r2, #2
 800689c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f94a 	bl	8006b38 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40002800 	.word	0x40002800

080068b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80068c0:	4b0f      	ldr	r3, [pc, #60]	; (8006900 <HAL_RTC_WaitForSynchro+0x48>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	4a0e      	ldr	r2, [pc, #56]	; (8006900 <HAL_RTC_WaitForSynchro+0x48>)
 80068c6:	f023 0320 	bic.w	r3, r3, #32
 80068ca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80068cc:	f7fb f80a 	bl	80018e4 <HAL_GetTick>
 80068d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068d2:	e009      	b.n	80068e8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068d4:	f7fb f806 	bl	80018e4 <HAL_GetTick>
 80068d8:	4602      	mov	r2, r0
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068e2:	d901      	bls.n	80068e8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e006      	b.n	80068f6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_RTC_WaitForSynchro+0x48>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0ef      	beq.n	80068d4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	40002800 	.word	0x40002800

08006904 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690c:	2300      	movs	r3, #0
 800690e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006910:	4b15      	ldr	r3, [pc, #84]	; (8006968 <RTC_EnterInitMode+0x64>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006918:	2b00      	cmp	r3, #0
 800691a:	d120      	bne.n	800695e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800691c:	4b12      	ldr	r3, [pc, #72]	; (8006968 <RTC_EnterInitMode+0x64>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4a11      	ldr	r2, [pc, #68]	; (8006968 <RTC_EnterInitMode+0x64>)
 8006922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006926:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006928:	f7fa ffdc 	bl	80018e4 <HAL_GetTick>
 800692c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800692e:	e00d      	b.n	800694c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006930:	f7fa ffd8 	bl	80018e4 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693e:	d905      	bls.n	800694c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2203      	movs	r2, #3
 8006948:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800694c:	4b06      	ldr	r3, [pc, #24]	; (8006968 <RTC_EnterInitMode+0x64>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006954:	2b00      	cmp	r3, #0
 8006956:	d102      	bne.n	800695e <RTC_EnterInitMode+0x5a>
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d1e8      	bne.n	8006930 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40002800 	.word	0x40002800

0800696c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <RTC_ExitInitMode+0x78>)
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <RTC_ExitInitMode+0x78>)
 800697e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006982:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006984:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <RTC_ExitInitMode+0x78>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10c      	bne.n	80069aa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff91 	bl	80068b8 <HAL_RTC_WaitForSynchro>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01e      	beq.n	80069da <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2203      	movs	r2, #3
 80069a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e017      	b.n	80069da <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <RTC_ExitInitMode+0x78>)
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <RTC_ExitInitMode+0x78>)
 80069b0:	f023 0320 	bic.w	r3, r3, #32
 80069b4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff7e 	bl	80068b8 <HAL_RTC_WaitForSynchro>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <RTC_ExitInitMode+0x78>)
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	4a04      	ldr	r2, [pc, #16]	; (80069e4 <RTC_ExitInitMode+0x78>)
 80069d4:	f043 0320 	orr.w	r3, r3, #32
 80069d8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40002800 	.word	0x40002800

080069e8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80069fa:	e005      	b.n	8006a08 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	3b0a      	subs	r3, #10
 8006a06:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006a08:	7afb      	ldrb	r3, [r7, #11]
 8006a0a:	2b09      	cmp	r3, #9
 8006a0c:	d8f6      	bhi.n	80069fc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	b2db      	uxtb	r3, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3714      	adds	r7, #20
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bc80      	pop	{r7}
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_RTCEx_EnableBypassShadow+0x16>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e01f      	b.n	8006a7e <HAL_RTCEx_EnableBypassShadow+0x56>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a4e:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a50:	22ca      	movs	r2, #202	; 0xca
 8006a52:	625a      	str	r2, [r3, #36]	; 0x24
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a56:	2253      	movs	r2, #83	; 0x53
 8006a58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	4a0a      	ldr	r2, [pc, #40]	; (8006a88 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a60:	f043 0320 	orr.w	r3, r3, #32
 8006a64:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a66:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006a68:	22ff      	movs	r2, #255	; 0xff
 8006a6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bc80      	pop	{r7}
 8006a86:	4770      	bx	lr
 8006a88:	40002800 	.word	0x40002800

08006a8c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	e027      	b.n	8006af2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2202      	movs	r2, #2
 8006aae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ab4:	22ca      	movs	r2, #202	; 0xca
 8006ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8006ab8:	4b10      	ldr	r3, [pc, #64]	; (8006afc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006aba:	2253      	movs	r2, #83	; 0x53
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	; (8006afc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006aca:	4b0d      	ldr	r3, [pc, #52]	; (8006b00 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad0:	4a0b      	ldr	r2, [pc, #44]	; (8006b00 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006ad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ad6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006adc:	22ff      	movs	r2, #255	; 0xff
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	40002800 	.word	0x40002800
 8006b00:	58000800 	.word	0x58000800

08006b04 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006b0c:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d005      	beq.n	8006b24 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006b1a:	2240      	movs	r2, #64	; 0x40
 8006b1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7fb f86d 	bl	8001bfe <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40002800 	.word	0x40002800

08006b38 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bc80      	pop	{r7}
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006b58:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006b5a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4413      	add	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	601a      	str	r2, [r3, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	4000b100 	.word	0x4000b100

08006b7c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <HAL_RTCEx_BKUPRead+0x28>)
 8006b88:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	4413      	add	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	4000b100 	.word	0x4000b100

08006ba8 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006bb0:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bb8:	4904      	ldr	r1, [pc, #16]	; (8006bcc <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	608b      	str	r3, [r1, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58000400 	.word	0x58000400

08006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bd4:	4b05      	ldr	r3, [pc, #20]	; (8006bec <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	4a04      	ldr	r2, [pc, #16]	; (8006bec <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006be4:	bf00      	nop
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bc80      	pop	{r7}
 8006bea:	4770      	bx	lr
 8006bec:	58000400 	.word	0x58000400

08006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006bfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c04:	bf00      	nop
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr
 8006c0c:	58000400 	.word	0x58000400

08006c10 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006c14:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006c16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c1a:	619a      	str	r2, [r3, #24]
}
 8006c1c:	bf00      	nop
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	58000400 	.word	0x58000400

08006c28 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006c2c:	4b06      	ldr	r3, [pc, #24]	; (8006c48 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d101      	bne.n	8006c3c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bc80      	pop	{r7}
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	58000400 	.word	0x58000400

08006c4c <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d101      	bne.n	8006c60 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bc80      	pop	{r7}
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	58000400 	.word	0x58000400

08006c70 <LL_RCC_RF_DisableReset>:
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006c88:	bf00      	nop
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bc80      	pop	{r7}
 8006c8e:	4770      	bx	lr

08006c90 <LL_RCC_IsRFUnderReset>:
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca4:	d101      	bne.n	8006caa <LL_RCC_IsRFUnderReset+0x1a>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <LL_RCC_IsRFUnderReset+0x1c>
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006cbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006cc2:	4905      	ldr	r1, [pc, #20]	; (8006cd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bc80      	pop	{r7}
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	58000800 	.word	0x58000800

08006cdc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	73fb      	strb	r3, [r7, #15]
    return status;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	e04b      	b.n	8006d8a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	799b      	ldrb	r3, [r3, #6]
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa fc4a 	bl	80015a0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006d12:	f7ff ffad 	bl	8006c70 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006d16:	4b1f      	ldr	r3, [pc, #124]	; (8006d94 <HAL_SUBGHZ_Init+0xb8>)
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	0cdb      	lsrs	r3, r3, #19
 8006d24:	2264      	movs	r2, #100	; 0x64
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d105      	bne.n	8006d3e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	609a      	str	r2, [r3, #8]
      break;
 8006d3c:	e007      	b.n	8006d4e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006d44:	f7ff ffa4 	bl	8006c90 <LL_RCC_IsRFUnderReset>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1ee      	bne.n	8006d2c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d4e:	f7ff ff3f 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006d52:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006d56:	f7ff ffad 	bl	8006cb4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006d5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006d5e:	f7ff ff23 	bl	8006ba8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006d62:	f7ff ff55 	bl	8006c10 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 faad 	bl	80072d0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	719a      	strb	r2, [r3, #6]

  return status;
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000000 	.word	0x20000000

08006d98 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	461a      	mov	r2, r3
 8006da4:	460b      	mov	r3, r1
 8006da6:	817b      	strh	r3, [r7, #10]
 8006da8:	4613      	mov	r3, r2
 8006daa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	799b      	ldrb	r3, [r3, #6]
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d14a      	bne.n	8006e4c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	795b      	ldrb	r3, [r3, #5]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e045      	b.n	8006e4e <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fb4c 	bl	800746c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006dd4:	f7ff ff0c 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006dd8:	210d      	movs	r1, #13
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 fa98 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006de0:	897b      	ldrh	r3, [r7, #10]
 8006de2:	0a1b      	lsrs	r3, r3, #8
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4619      	mov	r1, r3
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 fa90 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006df0:	897b      	ldrh	r3, [r7, #10]
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	4619      	mov	r1, r3
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fa8a 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	82bb      	strh	r3, [r7, #20]
 8006e00:	e00a      	b.n	8006e18 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e02:	8abb      	ldrh	r3, [r7, #20]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fa7f 	bl	8007310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e12:	8abb      	ldrh	r3, [r7, #20]
 8006e14:	3301      	adds	r3, #1
 8006e16:	82bb      	strh	r3, [r7, #20]
 8006e18:	8aba      	ldrh	r2, [r7, #20]
 8006e1a:	893b      	ldrh	r3, [r7, #8]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d3f0      	bcc.n	8006e02 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e20:	f7ff fed6 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 fb45 	bl	80074b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
 8006e36:	e001      	b.n	8006e3c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	715a      	strb	r2, [r3, #5]

    return status;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	e000      	b.n	8006e4e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006e4c:	2302      	movs	r3, #2
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3718      	adds	r7, #24
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b088      	sub	sp, #32
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	461a      	mov	r2, r3
 8006e62:	460b      	mov	r3, r1
 8006e64:	817b      	strh	r3, [r7, #10]
 8006e66:	4613      	mov	r3, r2
 8006e68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	799b      	ldrb	r3, [r3, #6]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d14a      	bne.n	8006f0e <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	795b      	ldrb	r3, [r3, #5]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d101      	bne.n	8006e84 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006e80:	2302      	movs	r3, #2
 8006e82:	e045      	b.n	8006f10 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 faee 	bl	800746c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e90:	f7ff feae 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006e94:	211d      	movs	r1, #29
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 fa3a 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006e9c:	897b      	ldrh	r3, [r7, #10]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 fa32 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006eac:	897b      	ldrh	r3, [r7, #10]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 fa2c 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006eb8:	2100      	movs	r1, #0
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 fa28 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	82fb      	strh	r3, [r7, #22]
 8006ec4:	e009      	b.n	8006eda <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006ec6:	69b9      	ldr	r1, [r7, #24]
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 fa77 	bl	80073bc <SUBGHZSPI_Receive>
      pData++;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006ed4:	8afb      	ldrh	r3, [r7, #22]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	82fb      	strh	r3, [r7, #22]
 8006eda:	8afa      	ldrh	r2, [r7, #22]
 8006edc:	893b      	ldrh	r3, [r7, #8]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d3f1      	bcc.n	8006ec6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ee2:	f7ff fe75 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f000 fae4 	bl	80074b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e001      	b.n	8006efe <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	715a      	strb	r2, [r3, #5]

    return status;
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
 8006f0c:	e000      	b.n	8006f10 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
  }
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3720      	adds	r7, #32
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	607a      	str	r2, [r7, #4]
 8006f22:	461a      	mov	r2, r3
 8006f24:	460b      	mov	r3, r1
 8006f26:	72fb      	strb	r3, [r7, #11]
 8006f28:	4613      	mov	r3, r2
 8006f2a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	799b      	ldrb	r3, [r3, #6]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d14a      	bne.n	8006fcc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	795b      	ldrb	r3, [r3, #5]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e045      	b.n	8006fce <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fa8f 	bl	800746c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006f4e:	7afb      	ldrb	r3, [r7, #11]
 8006f50:	2b84      	cmp	r3, #132	; 0x84
 8006f52:	d002      	beq.n	8006f5a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006f54:	7afb      	ldrb	r3, [r7, #11]
 8006f56:	2b94      	cmp	r3, #148	; 0x94
 8006f58:	d103      	bne.n	8006f62 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	711a      	strb	r2, [r3, #4]
 8006f60:	e002      	b.n	8006f68 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2200      	movs	r2, #0
 8006f66:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f68:	f7ff fe42 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 f9cd 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f76:	2300      	movs	r3, #0
 8006f78:	82bb      	strh	r3, [r7, #20]
 8006f7a:	e00a      	b.n	8006f92 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f7c:	8abb      	ldrh	r3, [r7, #20]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	4619      	mov	r1, r3
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f000 f9c2 	bl	8007310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f8c:	8abb      	ldrh	r3, [r7, #20]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	82bb      	strh	r3, [r7, #20]
 8006f92:	8aba      	ldrh	r2, [r7, #20]
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d3f0      	bcc.n	8006f7c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f9a:	f7ff fe19 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006f9e:	7afb      	ldrb	r3, [r7, #11]
 8006fa0:	2b84      	cmp	r3, #132	; 0x84
 8006fa2:	d002      	beq.n	8006faa <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 fa85 	bl	80074b4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	75fb      	strb	r3, [r7, #23]
 8006fb6:	e001      	b.n	8006fbc <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	715a      	strb	r2, [r3, #5]

    return status;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	e000      	b.n	8006fce <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
  }
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	607a      	str	r2, [r7, #4]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	72fb      	strb	r3, [r7, #11]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	799b      	ldrb	r3, [r3, #6]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d13d      	bne.n	8007074 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	795b      	ldrb	r3, [r3, #5]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007000:	2302      	movs	r3, #2
 8007002:	e038      	b.n	8007076 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2201      	movs	r2, #1
 8007008:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f000 fa2e 	bl	800746c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007010:	f7ff fdee 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007014:	7afb      	ldrb	r3, [r7, #11]
 8007016:	4619      	mov	r1, r3
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 f979 	bl	8007310 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f975 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007026:	2300      	movs	r3, #0
 8007028:	82fb      	strh	r3, [r7, #22]
 800702a:	e009      	b.n	8007040 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800702c:	69b9      	ldr	r1, [r7, #24]
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f9c4 	bl	80073bc <SUBGHZSPI_Receive>
      pData++;
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	3301      	adds	r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800703a:	8afb      	ldrh	r3, [r7, #22]
 800703c:	3301      	adds	r3, #1
 800703e:	82fb      	strh	r3, [r7, #22]
 8007040:	8afa      	ldrh	r2, [r7, #22]
 8007042:	893b      	ldrh	r3, [r7, #8]
 8007044:	429a      	cmp	r2, r3
 8007046:	d3f1      	bcc.n	800702c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007048:	f7ff fdc2 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fa31 	bl	80074b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d002      	beq.n	8007060 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e001      	b.n	8007064 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	715a      	strb	r2, [r3, #5]

    return status;
 8007070:	7ffb      	ldrb	r3, [r7, #31]
 8007072:	e000      	b.n	8007076 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
  }
}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	461a      	mov	r2, r3
 800708a:	460b      	mov	r3, r1
 800708c:	72fb      	strb	r3, [r7, #11]
 800708e:	4613      	mov	r3, r2
 8007090:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	799b      	ldrb	r3, [r3, #6]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d13e      	bne.n	800711a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	795b      	ldrb	r3, [r3, #5]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e039      	b.n	800711c <HAL_SUBGHZ_WriteBuffer+0x9e>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 f9dc 	bl	800746c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070b4:	f7ff fd9c 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80070b8:	210e      	movs	r1, #14
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f928 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	4619      	mov	r1, r3
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f923 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070ca:	2300      	movs	r3, #0
 80070cc:	82bb      	strh	r3, [r7, #20]
 80070ce:	e00a      	b.n	80070e6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070d0:	8abb      	ldrh	r3, [r7, #20]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	4413      	add	r3, r2
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	4619      	mov	r1, r3
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f918 	bl	8007310 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070e0:	8abb      	ldrh	r3, [r7, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	82bb      	strh	r3, [r7, #20]
 80070e6:	8aba      	ldrh	r2, [r7, #20]
 80070e8:	893b      	ldrh	r3, [r7, #8]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d3f0      	bcc.n	80070d0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070ee:	f7ff fd6f 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f9de 	bl	80074b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
 8007104:	e001      	b.n	800710a <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	715a      	strb	r2, [r3, #5]

    return status;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	e000      	b.n	800711c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	461a      	mov	r2, r3
 8007130:	460b      	mov	r3, r1
 8007132:	72fb      	strb	r3, [r7, #11]
 8007134:	4613      	mov	r3, r2
 8007136:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	799b      	ldrb	r3, [r3, #6]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b01      	cmp	r3, #1
 8007144:	d141      	bne.n	80071ca <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	795b      	ldrb	r3, [r3, #5]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800714e:	2302      	movs	r3, #2
 8007150:	e03c      	b.n	80071cc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f987 	bl	800746c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800715e:	f7ff fd47 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007162:	211e      	movs	r1, #30
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f8d3 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	4619      	mov	r1, r3
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f8ce 	bl	8007310 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 f8ca 	bl	8007310 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800717c:	2300      	movs	r3, #0
 800717e:	82fb      	strh	r3, [r7, #22]
 8007180:	e009      	b.n	8007196 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007182:	69b9      	ldr	r1, [r7, #24]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f919 	bl	80073bc <SUBGHZSPI_Receive>
      pData++;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	3301      	adds	r3, #1
 800718e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007190:	8afb      	ldrh	r3, [r7, #22]
 8007192:	3301      	adds	r3, #1
 8007194:	82fb      	strh	r3, [r7, #22]
 8007196:	8afa      	ldrh	r2, [r7, #22]
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	429a      	cmp	r2, r3
 800719c:	d3f1      	bcc.n	8007182 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800719e:	f7ff fd17 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 f986 	bl	80074b4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	e001      	b.n	80071ba <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80071b6:	2300      	movs	r3, #0
 80071b8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	715a      	strb	r2, [r3, #5]

    return status;
 80071c6:	7ffb      	ldrb	r3, [r7, #31]
 80071c8:	e000      	b.n	80071cc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80071ca:	2302      	movs	r3, #2
  }
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3720      	adds	r7, #32
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80071dc:	2300      	movs	r3, #0
 80071de:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80071e0:	f107 020c 	add.w	r2, r7, #12
 80071e4:	2302      	movs	r3, #2
 80071e6:	2112      	movs	r1, #18
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff fef4 	bl	8006fd6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80071ee:	7b3b      	ldrb	r3, [r7, #12]
 80071f0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80071f2:	89fb      	ldrh	r3, [r7, #14]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	b21a      	sxth	r2, r3
 80071f8:	7b7b      	ldrb	r3, [r7, #13]
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b21b      	sxth	r3, r3
 8007200:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007202:	89fb      	ldrh	r3, [r7, #14]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d002      	beq.n	8007212 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f017 f923 	bl	801e458 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	085b      	lsrs	r3, r3, #1
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d002      	beq.n	8007224 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f017 f928 	bl	801e474 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	089b      	lsrs	r3, r3, #2
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f017 f977 	bl	801e524 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007236:	89fb      	ldrh	r3, [r7, #14]
 8007238:	08db      	lsrs	r3, r3, #3
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d002      	beq.n	8007248 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f017 f97c 	bl	801e540 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	091b      	lsrs	r3, r3, #4
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f017 f981 	bl	801e55c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800725a:	89fb      	ldrh	r3, [r7, #14]
 800725c:	095b      	lsrs	r3, r3, #5
 800725e:	f003 0301 	and.w	r3, r3, #1
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f017 f94e 	bl	801e508 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800726c:	89fb      	ldrh	r3, [r7, #14]
 800726e:	099b      	lsrs	r3, r3, #6
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f017 f909 	bl	801e490 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800727e:	89fb      	ldrh	r3, [r7, #14]
 8007280:	09db      	lsrs	r3, r3, #7
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800728a:	89fb      	ldrh	r3, [r7, #14]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007296:	2101      	movs	r1, #1
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f017 f907 	bl	801e4ac <HAL_SUBGHZ_CADStatusCallback>
 800729e:	e003      	b.n	80072a8 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f017 f902 	bl	801e4ac <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	0a5b      	lsrs	r3, r3, #9
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f017 f917 	bl	801e4e8 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80072ba:	f107 020c 	add.w	r2, r7, #12
 80072be:	2302      	movs	r3, #2
 80072c0:	2102      	movs	r1, #2
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fe28 	bl	8006f18 <HAL_SUBGHZ_ExecSetCmd>
}
 80072c8:	bf00      	nop
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072d8:	4b0c      	ldr	r3, [pc, #48]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a0b      	ldr	r2, [pc, #44]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80072e4:	4a09      	ldr	r2, [pc, #36]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80072ec:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072f0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80072f4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80072f6:	4b05      	ldr	r3, [pc, #20]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a04      	ldr	r2, [pc, #16]	; (800730c <SUBGHZSPI_Init+0x3c>)
 80072fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007300:	6013      	str	r3, [r2, #0]
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr
 800730c:	58010000 	.word	0x58010000

08007310 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007320:	4b23      	ldr	r3, [pc, #140]	; (80073b0 <SUBGHZSPI_Transmit+0xa0>)
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	1a9b      	subs	r3, r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	0cdb      	lsrs	r3, r3, #19
 800732e:	2264      	movs	r2, #100	; 0x64
 8007330:	fb02 f303 	mul.w	r3, r2, r3
 8007334:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	609a      	str	r2, [r3, #8]
      break;
 8007346:	e008      	b.n	800735a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3b01      	subs	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800734e:	4b19      	ldr	r3, [pc, #100]	; (80073b4 <SUBGHZSPI_Transmit+0xa4>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b02      	cmp	r3, #2
 8007358:	d1ed      	bne.n	8007336 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800735a:	4b17      	ldr	r3, [pc, #92]	; (80073b8 <SUBGHZSPI_Transmit+0xa8>)
 800735c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007364:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <SUBGHZSPI_Transmit+0xa0>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	4613      	mov	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	0cdb      	lsrs	r3, r3, #19
 8007372:	2264      	movs	r2, #100	; 0x64
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d105      	bne.n	800738c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	609a      	str	r2, [r3, #8]
      break;
 800738a:	e008      	b.n	800739e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b01      	subs	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007392:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <SUBGHZSPI_Transmit+0xa4>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b01      	cmp	r3, #1
 800739c:	d1ed      	bne.n	800737a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <SUBGHZSPI_Transmit+0xa4>)
 80073a0:	68db      	ldr	r3, [r3, #12]

  return status;
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000000 	.word	0x20000000
 80073b4:	58010000 	.word	0x58010000
 80073b8:	5801000c 	.word	0x5801000c

080073bc <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80073ca:	4b25      	ldr	r3, [pc, #148]	; (8007460 <SUBGHZSPI_Receive+0xa4>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4613      	mov	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	1a9b      	subs	r3, r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	0cdb      	lsrs	r3, r3, #19
 80073d8:	2264      	movs	r2, #100	; 0x64
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d105      	bne.n	80073f2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	609a      	str	r2, [r3, #8]
      break;
 80073f0:	e008      	b.n	8007404 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <SUBGHZSPI_Receive+0xa8>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b02      	cmp	r3, #2
 8007402:	d1ed      	bne.n	80073e0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007404:	4b18      	ldr	r3, [pc, #96]	; (8007468 <SUBGHZSPI_Receive+0xac>)
 8007406:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	22ff      	movs	r2, #255	; 0xff
 800740c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800740e:	4b14      	ldr	r3, [pc, #80]	; (8007460 <SUBGHZSPI_Receive+0xa4>)
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4613      	mov	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	1a9b      	subs	r3, r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	0cdb      	lsrs	r3, r3, #19
 800741c:	2264      	movs	r2, #100	; 0x64
 800741e:	fb02 f303 	mul.w	r3, r2, r3
 8007422:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d105      	bne.n	8007436 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	609a      	str	r2, [r3, #8]
      break;
 8007434:	e008      	b.n	8007448 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3b01      	subs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800743c:	4b09      	ldr	r3, [pc, #36]	; (8007464 <SUBGHZSPI_Receive+0xa8>)
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	2b01      	cmp	r3, #1
 8007446:	d1ed      	bne.n	8007424 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007448:	4b06      	ldr	r3, [pc, #24]	; (8007464 <SUBGHZSPI_Receive+0xa8>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	b2da      	uxtb	r2, r3
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	701a      	strb	r2, [r3, #0]

  return status;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
}
 8007454:	4618      	mov	r0, r3
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000000 	.word	0x20000000
 8007464:	58010000 	.word	0x58010000
 8007468:	5801000c 	.word	0x5801000c

0800746c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	791b      	ldrb	r3, [r3, #4]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d111      	bne.n	80074a0 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800747c:	4b0c      	ldr	r3, [pc, #48]	; (80074b0 <SUBGHZ_CheckDeviceReady+0x44>)
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	0c1b      	lsrs	r3, r3, #16
 800748a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800748c:	f7ff fbb0 	bl	8006bf0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3b01      	subs	r3, #1
 8007494:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f9      	bne.n	8007490 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800749c:	f7ff fb98 	bl	8006bd0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f807 	bl	80074b4 <SUBGHZ_WaitOnBusy>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20000000 	.word	0x20000000

080074b4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80074c0:	4b12      	ldr	r3, [pc, #72]	; (800750c <SUBGHZ_WaitOnBusy+0x58>)
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	4413      	add	r3, r2
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	0d1b      	lsrs	r3, r3, #20
 80074ce:	2264      	movs	r2, #100	; 0x64
 80074d0:	fb02 f303 	mul.w	r3, r2, r3
 80074d4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80074d6:	f7ff fbb9 	bl	8006c4c <LL_PWR_IsActiveFlag_RFBUSYMS>
 80074da:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d105      	bne.n	80074ee <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2202      	movs	r2, #2
 80074ea:	609a      	str	r2, [r3, #8]
      break;
 80074ec:	e009      	b.n	8007502 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3b01      	subs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80074f4:	f7ff fb98 	bl	8006c28 <LL_PWR_IsActiveFlag_RFBUSYS>
 80074f8:	4602      	mov	r2, r0
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d0e9      	beq.n	80074d6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007502:	7dfb      	ldrb	r3, [r7, #23]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000000 	.word	0x20000000

08007510 <LL_RCC_GetUSARTClockSource>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800751c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	401a      	ands	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	041b      	lsls	r3, r3, #16
 8007528:	4313      	orrs	r3, r2
}
 800752a:	4618      	mov	r0, r3
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	bc80      	pop	{r7}
 8007532:	4770      	bx	lr

08007534 <LL_RCC_GetLPUARTClockSource>:
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4013      	ands	r3, r2
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	bc80      	pop	{r7}
 8007550:	4770      	bx	lr

08007552 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e042      	b.n	80075ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800756a:	2b00      	cmp	r3, #0
 800756c:	d106      	bne.n	800757c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7fa fcc0 	bl	8001efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2224      	movs	r2, #36	; 0x24
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0201 	bic.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fc4b 	bl	8007e30 <UART_SetConfig>
 800759a:	4603      	mov	r3, r0
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e022      	b.n	80075ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 feb3 	bl	8008318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f042 0201 	orr.w	r2, r2, #1
 80075e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 ff39 	bl	800845a <UART_CheckIdleState>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
	...

080075f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007608:	2b20      	cmp	r3, #32
 800760a:	d142      	bne.n	8007692 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <HAL_UART_Receive_IT+0x24>
 8007612:	88fb      	ldrh	r3, [r7, #6]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e03b      	b.n	8007694 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_UART_Receive_IT+0x36>
 8007626:	2302      	movs	r3, #2
 8007628:	e034      	b.n	8007694 <HAL_UART_Receive_IT+0xa0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a17      	ldr	r2, [pc, #92]	; (800769c <HAL_UART_Receive_IT+0xa8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d01f      	beq.n	8007682 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d018      	beq.n	8007682 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	613b      	str	r3, [r7, #16]
   return(result);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	623b      	str	r3, [r7, #32]
 8007670:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	6a3a      	ldr	r2, [r7, #32]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	61bb      	str	r3, [r7, #24]
   return(result);
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e6      	bne.n	8007650 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007682:	88fb      	ldrh	r3, [r7, #6]
 8007684:	461a      	mov	r2, r3
 8007686:	68b9      	ldr	r1, [r7, #8]
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 fff9 	bl	8008680 <UART_Start_Receive_IT>
 800768e:	4603      	mov	r3, r0
 8007690:	e000      	b.n	8007694 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007692:	2302      	movs	r3, #2
  }
}
 8007694:	4618      	mov	r0, r3
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40008000 	.word	0x40008000

080076a0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d17a      	bne.n	80077ae <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <HAL_UART_Transmit_DMA+0x24>
 80076be:	88fb      	ldrh	r3, [r7, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d101      	bne.n	80076c8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e073      	b.n	80077b0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Transmit_DMA+0x36>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e06c      	b.n	80077b0 <HAL_UART_Transmit_DMA+0x110>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	88fa      	ldrh	r2, [r7, #6]
 80076f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2221      	movs	r2, #33	; 0x21
 8007700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007708:	2b00      	cmp	r3, #0
 800770a:	d02c      	beq.n	8007766 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007710:	4a29      	ldr	r2, [pc, #164]	; (80077b8 <HAL_UART_Transmit_DMA+0x118>)
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007718:	4a28      	ldr	r2, [pc, #160]	; (80077bc <HAL_UART_Transmit_DMA+0x11c>)
 800771a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007720:	4a27      	ldr	r2, [pc, #156]	; (80077c0 <HAL_UART_Transmit_DMA+0x120>)
 8007722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007728:	2200      	movs	r2, #0
 800772a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007734:	4619      	mov	r1, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3328      	adds	r3, #40	; 0x28
 800773c:	461a      	mov	r2, r3
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	f7fc f966 	bl	8003a10 <HAL_DMA_Start_IT>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00d      	beq.n	8007766 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2210      	movs	r2, #16
 800774e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2220      	movs	r2, #32
 800775e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e024      	b.n	80077b0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2240      	movs	r2, #64	; 0x40
 800776c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	613b      	str	r3, [r7, #16]
   return(result);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007796:	623a      	str	r2, [r7, #32]
 8007798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	69f9      	ldr	r1, [r7, #28]
 800779c:	6a3a      	ldr	r2, [r7, #32]
 800779e:	e841 2300 	strex	r3, r2, [r1]
 80077a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1e5      	bne.n	8007776 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e000      	b.n	80077b0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	080089cf 	.word	0x080089cf
 80077bc:	08008a69 	.word	0x08008a69
 80077c0:	08008a85 	.word	0x08008a85

080077c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b0ba      	sub	sp, #232	; 0xe8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80077f2:	4013      	ands	r3, r2
 80077f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11b      	bne.n	8007838 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007804:	f003 0320 	and.w	r3, r3, #32
 8007808:	2b00      	cmp	r3, #0
 800780a:	d015      	beq.n	8007838 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800780c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007810:	f003 0320 	and.w	r3, r3, #32
 8007814:	2b00      	cmp	r3, #0
 8007816:	d105      	bne.n	8007824 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800781c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 82d6 	beq.w	8007dda <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
      }
      return;
 8007836:	e2d0      	b.n	8007dda <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800783c:	2b00      	cmp	r3, #0
 800783e:	f000 811f 	beq.w	8007a80 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007842:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007846:	4b8b      	ldr	r3, [pc, #556]	; (8007a74 <HAL_UART_IRQHandler+0x2b0>)
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800784e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007852:	4b89      	ldr	r3, [pc, #548]	; (8007a78 <HAL_UART_IRQHandler+0x2b4>)
 8007854:	4013      	ands	r3, r2
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 8112 	beq.w	8007a80 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800785c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d011      	beq.n	800788c <HAL_UART_IRQHandler+0xc8>
 8007868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800786c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f043 0201 	orr.w	r2, r3, #1
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800788c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <HAL_UART_IRQHandler+0xf8>
 8007898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00b      	beq.n	80078bc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2202      	movs	r2, #2
 80078aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b2:	f043 0204 	orr.w	r2, r3, #4
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d011      	beq.n	80078ec <HAL_UART_IRQHandler+0x128>
 80078c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00b      	beq.n	80078ec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2204      	movs	r2, #4
 80078da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e2:	f043 0202 	orr.w	r2, r3, #2
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d017      	beq.n	8007928 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007904:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007908:	4b5a      	ldr	r3, [pc, #360]	; (8007a74 <HAL_UART_IRQHandler+0x2b0>)
 800790a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2208      	movs	r2, #8
 8007916:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800791e:	f043 0208 	orr.w	r2, r3, #8
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007930:	2b00      	cmp	r3, #0
 8007932:	d012      	beq.n	800795a <HAL_UART_IRQHandler+0x196>
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00c      	beq.n	800795a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007948:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007950:	f043 0220 	orr.w	r2, r3, #32
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 823c 	beq.w	8007dde <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d013      	beq.n	800799a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800797e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d005      	beq.n	80079be <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80079b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d04f      	beq.n	8007a5e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 ffa0 	bl	8008904 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b40      	cmp	r3, #64	; 0x40
 80079d0:	d141      	bne.n	8007a56 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a0e:	e841 2300 	strex	r3, r2, [r1]
 8007a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1d9      	bne.n	80079d2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d013      	beq.n	8007a4e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a2a:	4a14      	ldr	r2, [pc, #80]	; (8007a7c <HAL_UART_IRQHandler+0x2b8>)
 8007a2c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fc f8c8 	bl	8003bc8 <HAL_DMA_Abort_IT>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a48:	4610      	mov	r0, r2
 8007a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4c:	e00f      	b.n	8007a6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f9d9 	bl	8007e06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a54:	e00b      	b.n	8007a6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9d5 	bl	8007e06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5c:	e007      	b.n	8007a6e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f9d1 	bl	8007e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a6c:	e1b7      	b.n	8007dde <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6e:	bf00      	nop
    return;
 8007a70:	e1b5      	b.n	8007dde <HAL_UART_IRQHandler+0x61a>
 8007a72:	bf00      	nop
 8007a74:	10000001 	.word	0x10000001
 8007a78:	04000120 	.word	0x04000120
 8007a7c:	08008b05 	.word	0x08008b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 814a 	bne.w	8007d1e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8143 	beq.w	8007d1e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 813c 	beq.w	8007d1e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	f040 80b5 	bne.w	8007c28 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007aca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8187 	beq.w	8007de2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f080 817f 	bcs.w	8007de2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f040 8086 	bne.w	8007c0c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1da      	bne.n	8007b00 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	3308      	adds	r3, #8
 8007b50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b5c:	f023 0301 	bic.w	r3, r3, #1
 8007b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3308      	adds	r3, #8
 8007b6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e1      	bne.n	8007b4a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3308      	adds	r3, #8
 8007ba6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007baa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007bac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e3      	bne.n	8007b86 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bdc:	f023 0310 	bic.w	r3, r3, #16
 8007be0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bf0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e4      	bne.n	8007bcc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fb ff80 	bl	8003b0c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f8f9 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c26:	e0dc      	b.n	8007de2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80ce 	beq.w	8007de6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80c9 	beq.w	8007de6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	e853 3f00 	ldrex	r3, [r3]
 8007c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c76:	647b      	str	r3, [r7, #68]	; 0x44
 8007c78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e4      	bne.n	8007c54 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8007cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1e1      	bne.n	8007c8a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f023 0310 	bic.w	r3, r3, #16
 8007cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cfc:	61fb      	str	r3, [r7, #28]
 8007cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	69b9      	ldr	r1, [r7, #24]
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e4      	bne.n	8007cda <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d14:	4619      	mov	r1, r3
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f87e 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d1c:	e063      	b.n	8007de6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00e      	beq.n	8007d48 <HAL_UART_IRQHandler+0x584>
 8007d2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d3e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fb7d 	bl	8009440 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d46:	e051      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d014      	beq.n	8007d7e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d105      	bne.n	8007d6c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d03a      	beq.n	8007dea <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
    }
    return;
 8007d7c:	e035      	b.n	8007dea <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_UART_IRQHandler+0x5da>
 8007d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 feca 	bl	8008b30 <UART_EndTransmit_IT>
    return;
 8007d9c:	e026      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_UART_IRQHandler+0x5fa>
 8007daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fb54 	bl	8009464 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dbc:	e016      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d010      	beq.n	8007dec <HAL_UART_IRQHandler+0x628>
 8007dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da0c      	bge.n	8007dec <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 fb3d 	bl	8009452 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dd8:	e008      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
      return;
 8007dda:	bf00      	nop
 8007ddc:	e006      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
    return;
 8007dde:	bf00      	nop
 8007de0:	e004      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
      return;
 8007de2:	bf00      	nop
 8007de4:	e002      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
      return;
 8007de6:	bf00      	nop
 8007de8:	e000      	b.n	8007dec <HAL_UART_IRQHandler+0x628>
    return;
 8007dea:	bf00      	nop
  }
}
 8007dec:	37e8      	adds	r7, #232	; 0xe8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop

08007df4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr

08007e06 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr

08007e18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e24:	bf00      	nop
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr
	...

08007e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e34:	b08c      	sub	sp, #48	; 0x30
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	689a      	ldr	r2, [r3, #8]
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	431a      	orrs	r2, r3
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	4b94      	ldr	r3, [pc, #592]	; (80080b0 <UART_SetConfig+0x280>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	68da      	ldr	r2, [r3, #12]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a89      	ldr	r2, [pc, #548]	; (80080b4 <UART_SetConfig+0x284>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007ea6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	6812      	ldr	r2, [r2, #0]
 8007eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb0:	430b      	orrs	r3, r1
 8007eb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	f023 010f 	bic.w	r1, r3, #15
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a7a      	ldr	r2, [pc, #488]	; (80080b8 <UART_SetConfig+0x288>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d127      	bne.n	8007f24 <UART_SetConfig+0xf4>
 8007ed4:	2003      	movs	r0, #3
 8007ed6:	f7ff fb1b 	bl	8007510 <LL_RCC_GetUSARTClockSource>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8007ee0:	2b03      	cmp	r3, #3
 8007ee2:	d81b      	bhi.n	8007f1c <UART_SetConfig+0xec>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0xbc>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007efd 	.word	0x08007efd
 8007ef0:	08007f0d 	.word	0x08007f0d
 8007ef4:	08007f05 	.word	0x08007f05
 8007ef8:	08007f15 	.word	0x08007f15
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f02:	e080      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f04:	2302      	movs	r3, #2
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0a:	e07c      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f12:	e078      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f14:	2308      	movs	r3, #8
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1a:	e074      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f22:	e070      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a64      	ldr	r2, [pc, #400]	; (80080bc <UART_SetConfig+0x28c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d138      	bne.n	8007fa0 <UART_SetConfig+0x170>
 8007f2e:	200c      	movs	r0, #12
 8007f30:	f7ff faee 	bl	8007510 <LL_RCC_GetUSARTClockSource>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8007f3a:	2b0c      	cmp	r3, #12
 8007f3c:	d82c      	bhi.n	8007f98 <UART_SetConfig+0x168>
 8007f3e:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <UART_SetConfig+0x114>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f79 	.word	0x08007f79
 8007f48:	08007f99 	.word	0x08007f99
 8007f4c:	08007f99 	.word	0x08007f99
 8007f50:	08007f99 	.word	0x08007f99
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	08007f99 	.word	0x08007f99
 8007f5c:	08007f99 	.word	0x08007f99
 8007f60:	08007f99 	.word	0x08007f99
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f99 	.word	0x08007f99
 8007f6c:	08007f99 	.word	0x08007f99
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7e:	e042      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f80:	2302      	movs	r3, #2
 8007f82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f86:	e03e      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f88:	2304      	movs	r3, #4
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f8e:	e03a      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f90:	2308      	movs	r3, #8
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f96:	e036      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f9e:	e032      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a43      	ldr	r2, [pc, #268]	; (80080b4 <UART_SetConfig+0x284>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d12a      	bne.n	8008000 <UART_SetConfig+0x1d0>
 8007faa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007fae:	f7ff fac1 	bl	8007534 <LL_RCC_GetLPUARTClockSource>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fb8:	d01a      	beq.n	8007ff0 <UART_SetConfig+0x1c0>
 8007fba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fbe:	d81b      	bhi.n	8007ff8 <UART_SetConfig+0x1c8>
 8007fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc4:	d00c      	beq.n	8007fe0 <UART_SetConfig+0x1b0>
 8007fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fca:	d815      	bhi.n	8007ff8 <UART_SetConfig+0x1c8>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d003      	beq.n	8007fd8 <UART_SetConfig+0x1a8>
 8007fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fd4:	d008      	beq.n	8007fe8 <UART_SetConfig+0x1b8>
 8007fd6:	e00f      	b.n	8007ff8 <UART_SetConfig+0x1c8>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fde:	e012      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe6:	e00e      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007fe8:	2304      	movs	r3, #4
 8007fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fee:	e00a      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007ff0:	2308      	movs	r3, #8
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ff6:	e006      	b.n	8008006 <UART_SetConfig+0x1d6>
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ffe:	e002      	b.n	8008006 <UART_SetConfig+0x1d6>
 8008000:	2310      	movs	r3, #16
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a2a      	ldr	r2, [pc, #168]	; (80080b4 <UART_SetConfig+0x284>)
 800800c:	4293      	cmp	r3, r2
 800800e:	f040 80a4 	bne.w	800815a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008016:	2b08      	cmp	r3, #8
 8008018:	d823      	bhi.n	8008062 <UART_SetConfig+0x232>
 800801a:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <UART_SetConfig+0x1f0>)
 800801c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008020:	08008045 	.word	0x08008045
 8008024:	08008063 	.word	0x08008063
 8008028:	0800804d 	.word	0x0800804d
 800802c:	08008063 	.word	0x08008063
 8008030:	08008053 	.word	0x08008053
 8008034:	08008063 	.word	0x08008063
 8008038:	08008063 	.word	0x08008063
 800803c:	08008063 	.word	0x08008063
 8008040:	0800805b 	.word	0x0800805b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fd ff48 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 8008048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800804a:	e010      	b.n	800806e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800804c:	4b1c      	ldr	r3, [pc, #112]	; (80080c0 <UART_SetConfig+0x290>)
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008050:	e00d      	b.n	800806e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008052:	f7fd fe8d 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8008056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008058:	e009      	b.n	800806e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800805a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008060:	e005      	b.n	800806e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800806c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800806e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 8137 	beq.w	80082e4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	4a12      	ldr	r2, [pc, #72]	; (80080c4 <UART_SetConfig+0x294>)
 800807c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008080:	461a      	mov	r2, r3
 8008082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008084:	fbb3 f3f2 	udiv	r3, r3, r2
 8008088:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	685a      	ldr	r2, [r3, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	4413      	add	r3, r2
 8008094:	69ba      	ldr	r2, [r7, #24]
 8008096:	429a      	cmp	r2, r3
 8008098:	d305      	bcc.n	80080a6 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d910      	bls.n	80080c8 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080ac:	e11a      	b.n	80082e4 <UART_SetConfig+0x4b4>
 80080ae:	bf00      	nop
 80080b0:	cfff69f3 	.word	0xcfff69f3
 80080b4:	40008000 	.word	0x40008000
 80080b8:	40013800 	.word	0x40013800
 80080bc:	40004400 	.word	0x40004400
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	08022ba4 	.word	0x08022ba4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2200      	movs	r2, #0
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	60fa      	str	r2, [r7, #12]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	4a8e      	ldr	r2, [pc, #568]	; (8008310 <UART_SetConfig+0x4e0>)
 80080d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2200      	movs	r2, #0
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080ea:	f7f8 fbcb 	bl	8000884 <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	020b      	lsls	r3, r1, #8
 8008100:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008104:	0202      	lsls	r2, r0, #8
 8008106:	6979      	ldr	r1, [r7, #20]
 8008108:	6849      	ldr	r1, [r1, #4]
 800810a:	0849      	lsrs	r1, r1, #1
 800810c:	2000      	movs	r0, #0
 800810e:	460c      	mov	r4, r1
 8008110:	4605      	mov	r5, r0
 8008112:	eb12 0804 	adds.w	r8, r2, r4
 8008116:	eb43 0905 	adc.w	r9, r3, r5
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	469a      	mov	sl, r3
 8008122:	4693      	mov	fp, r2
 8008124:	4652      	mov	r2, sl
 8008126:	465b      	mov	r3, fp
 8008128:	4640      	mov	r0, r8
 800812a:	4649      	mov	r1, r9
 800812c:	f7f8 fbaa 	bl	8000884 <__aeabi_uldivmod>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4613      	mov	r3, r2
 8008136:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800813e:	d308      	bcc.n	8008152 <UART_SetConfig+0x322>
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008146:	d204      	bcs.n	8008152 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6a3a      	ldr	r2, [r7, #32]
 800814e:	60da      	str	r2, [r3, #12]
 8008150:	e0c8      	b.n	80082e4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008158:	e0c4      	b.n	80082e4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008162:	d168      	bne.n	8008236 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008168:	2b08      	cmp	r3, #8
 800816a:	d828      	bhi.n	80081be <UART_SetConfig+0x38e>
 800816c:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <UART_SetConfig+0x344>)
 800816e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008172:	bf00      	nop
 8008174:	08008199 	.word	0x08008199
 8008178:	080081a1 	.word	0x080081a1
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081bf 	.word	0x080081bf
 8008184:	080081af 	.word	0x080081af
 8008188:	080081bf 	.word	0x080081bf
 800818c:	080081bf 	.word	0x080081bf
 8008190:	080081bf 	.word	0x080081bf
 8008194:	080081b7 	.word	0x080081b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008198:	f7fd fe9e 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 800819c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800819e:	e014      	b.n	80081ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a0:	f7fd feac 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 80081a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081a6:	e010      	b.n	80081ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081a8:	4b5a      	ldr	r3, [pc, #360]	; (8008314 <UART_SetConfig+0x4e4>)
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081ac:	e00d      	b.n	80081ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ae:	f7fd fddf 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 80081b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081b4:	e009      	b.n	80081ca <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081bc:	e005      	b.n	80081ca <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f000 8089 	beq.w	80082e4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d6:	4a4e      	ldr	r2, [pc, #312]	; (8008310 <UART_SetConfig+0x4e0>)
 80081d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081dc:	461a      	mov	r2, r3
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081e4:	005a      	lsls	r2, r3, #1
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	441a      	add	r2, r3
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	2b0f      	cmp	r3, #15
 80081fe:	d916      	bls.n	800822e <UART_SetConfig+0x3fe>
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008206:	d212      	bcs.n	800822e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	b29b      	uxth	r3, r3
 800820c:	f023 030f 	bic.w	r3, r3, #15
 8008210:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008212:	6a3b      	ldr	r3, [r7, #32]
 8008214:	085b      	lsrs	r3, r3, #1
 8008216:	b29b      	uxth	r3, r3
 8008218:	f003 0307 	and.w	r3, r3, #7
 800821c:	b29a      	uxth	r2, r3
 800821e:	8bfb      	ldrh	r3, [r7, #30]
 8008220:	4313      	orrs	r3, r2
 8008222:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	8bfa      	ldrh	r2, [r7, #30]
 800822a:	60da      	str	r2, [r3, #12]
 800822c:	e05a      	b.n	80082e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008234:	e056      	b.n	80082e4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800823a:	2b08      	cmp	r3, #8
 800823c:	d827      	bhi.n	800828e <UART_SetConfig+0x45e>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <UART_SetConfig+0x414>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008269 	.word	0x08008269
 8008248:	08008271 	.word	0x08008271
 800824c:	08008279 	.word	0x08008279
 8008250:	0800828f 	.word	0x0800828f
 8008254:	0800827f 	.word	0x0800827f
 8008258:	0800828f 	.word	0x0800828f
 800825c:	0800828f 	.word	0x0800828f
 8008260:	0800828f 	.word	0x0800828f
 8008264:	08008287 	.word	0x08008287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008268:	f7fd fe36 	bl	8005ed8 <HAL_RCC_GetPCLK1Freq>
 800826c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800826e:	e014      	b.n	800829a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008270:	f7fd fe44 	bl	8005efc <HAL_RCC_GetPCLK2Freq>
 8008274:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008276:	e010      	b.n	800829a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008278:	4b26      	ldr	r3, [pc, #152]	; (8008314 <UART_SetConfig+0x4e4>)
 800827a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800827c:	e00d      	b.n	800829a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800827e:	f7fd fd77 	bl	8005d70 <HAL_RCC_GetSysClockFreq>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008284:	e009      	b.n	800829a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800828c:	e005      	b.n	800829a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800828e:	2300      	movs	r3, #0
 8008290:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008298:	bf00      	nop
    }

    if (pclk != 0U)
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	2b00      	cmp	r3, #0
 800829e:	d021      	beq.n	80082e4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a4:	4a1a      	ldr	r2, [pc, #104]	; (8008310 <UART_SetConfig+0x4e0>)
 80082a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	085b      	lsrs	r3, r3, #1
 80082b8:	441a      	add	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	2b0f      	cmp	r3, #15
 80082ca:	d908      	bls.n	80082de <UART_SetConfig+0x4ae>
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082d2:	d204      	bcs.n	80082de <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a3a      	ldr	r2, [r7, #32]
 80082da:	60da      	str	r2, [r3, #12]
 80082dc:	e002      	b.n	80082e4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	2200      	movs	r2, #0
 80082f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2200      	movs	r2, #0
 80082fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008300:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008304:	4618      	mov	r0, r3
 8008306:	3730      	adds	r7, #48	; 0x30
 8008308:	46bd      	mov	sp, r7
 800830a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800830e:	bf00      	nop
 8008310:	08022ba4 	.word	0x08022ba4
 8008314:	00f42400 	.word	0x00f42400

08008318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	f003 0304 	and.w	r3, r3, #4
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838a:	f003 0308 	and.w	r3, r3, #8
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00a      	beq.n	80083a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00a      	beq.n	80083ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00a      	beq.n	80083ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01a      	beq.n	800842e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	430a      	orrs	r2, r1
 800840c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008416:	d10a      	bne.n	800842e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	430a      	orrs	r2, r1
 800842c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	605a      	str	r2, [r3, #4]
  }
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b086      	sub	sp, #24
 800845e:	af02      	add	r7, sp, #8
 8008460:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800846a:	f7f9 fa3b 	bl	80018e4 <HAL_GetTick>
 800846e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0308 	and.w	r3, r3, #8
 800847a:	2b08      	cmp	r3, #8
 800847c:	d10e      	bne.n	800849c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f82f 	bl	80084f0 <UART_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e025      	b.n	80084e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d10e      	bne.n	80084c8 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084ae:	9300      	str	r3, [sp, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 f819 	bl	80084f0 <UART_WaitOnFlagUntilTimeout>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084c4:	2303      	movs	r3, #3
 80084c6:	e00f      	b.n	80084e8 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b09c      	sub	sp, #112	; 0x70
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008500:	e0a9      	b.n	8008656 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008508:	f000 80a5 	beq.w	8008656 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800850c:	f7f9 f9ea 	bl	80018e4 <HAL_GetTick>
 8008510:	4602      	mov	r2, r0
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	1ad3      	subs	r3, r2, r3
 8008516:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008518:	429a      	cmp	r2, r3
 800851a:	d302      	bcc.n	8008522 <UART_WaitOnFlagUntilTimeout+0x32>
 800851c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800851e:	2b00      	cmp	r3, #0
 8008520:	d140      	bne.n	80085a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008536:	667b      	str	r3, [r7, #100]	; 0x64
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008542:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800854e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3308      	adds	r3, #8
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	f023 0301 	bic.w	r3, r3, #1
 800856a:	663b      	str	r3, [r7, #96]	; 0x60
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3308      	adds	r3, #8
 8008572:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008574:	64ba      	str	r2, [r7, #72]	; 0x48
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800857a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2220      	movs	r2, #32
 800858c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2220      	movs	r2, #32
 8008594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e069      	b.n	8008678 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d051      	beq.n	8008656 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69db      	ldr	r3, [r3, #28]
 80085b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c0:	d149      	bne.n	8008656 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
 80085ec:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085f2:	e841 2300 	strex	r3, r2, [r1]
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1e6      	bne.n	80085cc <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	e853 3f00 	ldrex	r3, [r3]
 800860c:	613b      	str	r3, [r7, #16]
   return(result);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	66bb      	str	r3, [r7, #104]	; 0x68
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3308      	adds	r3, #8
 800861c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800861e:	623a      	str	r2, [r7, #32]
 8008620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	69f9      	ldr	r1, [r7, #28]
 8008624:	6a3a      	ldr	r2, [r7, #32]
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	61bb      	str	r3, [r7, #24]
   return(result);
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e5      	bne.n	80085fe <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2220      	movs	r2, #32
 800863e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2220      	movs	r2, #32
 8008646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e010      	b.n	8008678 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	4013      	ands	r3, r2
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	429a      	cmp	r2, r3
 8008664:	bf0c      	ite	eq
 8008666:	2301      	moveq	r3, #1
 8008668:	2300      	movne	r3, #0
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	429a      	cmp	r2, r3
 8008672:	f43f af46 	beq.w	8008502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3770      	adds	r7, #112	; 0x70
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008680:	b480      	push	{r7}
 8008682:	b09d      	sub	sp, #116	; 0x74
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b2:	d10e      	bne.n	80086d2 <UART_Start_Receive_IT+0x52>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <UART_Start_Receive_IT+0x48>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086c6:	e02d      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	22ff      	movs	r2, #255	; 0xff
 80086cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086d0:	e028      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10d      	bne.n	80086f6 <UART_Start_Receive_IT+0x76>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <UART_Start_Receive_IT+0x6c>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086ea:	e01b      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	227f      	movs	r2, #127	; 0x7f
 80086f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80086f4:	e016      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086fe:	d10d      	bne.n	800871c <UART_Start_Receive_IT+0x9c>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <UART_Start_Receive_IT+0x92>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	227f      	movs	r2, #127	; 0x7f
 800870c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008710:	e008      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	223f      	movs	r2, #63	; 0x3f
 8008716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800871a:	e003      	b.n	8008724 <UART_Start_Receive_IT+0xa4>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2222      	movs	r2, #34	; 0x22
 8008730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873e:	e853 3f00 	ldrex	r3, [r3]
 8008742:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3308      	adds	r3, #8
 8008752:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008754:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008756:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800875a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e5      	bne.n	8008734 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008770:	d14d      	bne.n	800880e <UART_Start_Receive_IT+0x18e>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008778:	88fa      	ldrh	r2, [r7, #6]
 800877a:	429a      	cmp	r2, r3
 800877c:	d347      	bcc.n	800880e <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008786:	d107      	bne.n	8008798 <UART_Start_Receive_IT+0x118>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d103      	bne.n	8008798 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a38      	ldr	r2, [pc, #224]	; (8008874 <UART_Start_Receive_IT+0x1f4>)
 8008794:	671a      	str	r2, [r3, #112]	; 0x70
 8008796:	e002      	b.n	800879e <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4a37      	ldr	r2, [pc, #220]	; (8008878 <UART_Start_Receive_IT+0x1f8>)
 800879c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3308      	adds	r3, #8
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	e853 3f00 	ldrex	r3, [r3]
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087ee:	667b      	str	r3, [r7, #100]	; 0x64
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	3308      	adds	r3, #8
 80087f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087f8:	637a      	str	r2, [r7, #52]	; 0x34
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008800:	e841 2300 	strex	r3, r2, [r1]
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1e5      	bne.n	80087d8 <UART_Start_Receive_IT+0x158>
 800880c:	e02c      	b.n	8008868 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008816:	d107      	bne.n	8008828 <UART_Start_Receive_IT+0x1a8>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d103      	bne.n	8008828 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	4a16      	ldr	r2, [pc, #88]	; (800887c <UART_Start_Receive_IT+0x1fc>)
 8008824:	671a      	str	r2, [r3, #112]	; 0x70
 8008826:	e002      	b.n	800882e <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	4a15      	ldr	r2, [pc, #84]	; (8008880 <UART_Start_Receive_IT+0x200>)
 800882c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	613b      	str	r3, [r7, #16]
   return(result);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800884a:	663b      	str	r3, [r7, #96]	; 0x60
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008854:	623b      	str	r3, [r7, #32]
 8008856:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	69f9      	ldr	r1, [r7, #28]
 800885a:	6a3a      	ldr	r2, [r7, #32]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	61bb      	str	r3, [r7, #24]
   return(result);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e6      	bne.n	8008836 <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3774      	adds	r7, #116	; 0x74
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr
 8008874:	08009141 	.word	0x08009141
 8008878:	08008e49 	.word	0x08008e49
 800887c:	08008ce7 	.word	0x08008ce7
 8008880:	08008b87 	.word	0x08008b87

08008884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b08f      	sub	sp, #60	; 0x3c
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	61fb      	str	r3, [r7, #28]
   return(result);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80088a0:	637b      	str	r3, [r7, #52]	; 0x34
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b2:	e841 2300 	strex	r3, r2, [r1]
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1e6      	bne.n	800888c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	3308      	adds	r3, #8
 80088c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	e853 3f00 	ldrex	r3, [r3]
 80088cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80088d4:	633b      	str	r3, [r7, #48]	; 0x30
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3308      	adds	r3, #8
 80088dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088de:	61ba      	str	r2, [r7, #24]
 80088e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e2:	6979      	ldr	r1, [r7, #20]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	e841 2300 	strex	r3, r2, [r1]
 80088ea:	613b      	str	r3, [r7, #16]
   return(result);
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d1e5      	bne.n	80088be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2220      	movs	r2, #32
 80088f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80088fa:	bf00      	nop
 80088fc:	373c      	adds	r7, #60	; 0x3c
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b095      	sub	sp, #84	; 0x54
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892a:	643b      	str	r3, [r7, #64]	; 0x40
 800892c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008932:	e841 2300 	strex	r3, r2, [r1]
 8008936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1e6      	bne.n	800890c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3308      	adds	r3, #8
 8008944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	e853 3f00 	ldrex	r3, [r3]
 800894c:	61fb      	str	r3, [r7, #28]
   return(result);
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	64bb      	str	r3, [r7, #72]	; 0x48
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800896a:	e841 2300 	strex	r3, r2, [r1]
 800896e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1e3      	bne.n	800893e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897a:	2b01      	cmp	r3, #1
 800897c:	d118      	bne.n	80089b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	60bb      	str	r3, [r7, #8]
   return(result);
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	f023 0310 	bic.w	r3, r3, #16
 8008992:	647b      	str	r3, [r7, #68]	; 0x44
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899c:	61bb      	str	r3, [r7, #24]
 800899e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6979      	ldr	r1, [r7, #20]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	613b      	str	r3, [r7, #16]
   return(result);
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e6      	bne.n	800897e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2220      	movs	r2, #32
 80089b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80089c4:	bf00      	nop
 80089c6:	3754      	adds	r7, #84	; 0x54
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bc80      	pop	{r7}
 80089cc:	4770      	bx	lr

080089ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b090      	sub	sp, #64	; 0x40
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d137      	bne.n	8008a5a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80089ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	623b      	str	r3, [r7, #32]
   return(result);
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a12:	633a      	str	r2, [r7, #48]	; 0x30
 8008a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	e853 3f00 	ldrex	r3, [r3]
 8008a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	61fb      	str	r3, [r7, #28]
 8008a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a48:	69b9      	ldr	r1, [r7, #24]
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	e841 2300 	strex	r3, r2, [r1]
 8008a50:	617b      	str	r3, [r7, #20]
   return(result);
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e6      	bne.n	8008a26 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a58:	e002      	b.n	8008a60 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008a5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a5c:	f7f9 fc1e 	bl	800229c <HAL_UART_TxCpltCallback>
}
 8008a60:	bf00      	nop
 8008a62:	3740      	adds	r7, #64	; 0x40
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7ff f9bc 	bl	8007df4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aac:	2b80      	cmp	r3, #128	; 0x80
 8008aae:	d109      	bne.n	8008ac4 <UART_DMAError+0x40>
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b21      	cmp	r3, #33	; 0x21
 8008ab4:	d106      	bne.n	8008ac4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f7ff fee0 	bl	8008884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ace:	2b40      	cmp	r3, #64	; 0x40
 8008ad0:	d109      	bne.n	8008ae6 <UART_DMAError+0x62>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b22      	cmp	r3, #34	; 0x22
 8008ad6:	d106      	bne.n	8008ae6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008ae0:	6978      	ldr	r0, [r7, #20]
 8008ae2:	f7ff ff0f 	bl	8008904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aec:	f043 0210 	orr.w	r2, r3, #16
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008af6:	6978      	ldr	r0, [r7, #20]
 8008af8:	f7ff f985 	bl	8007e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008afc:	bf00      	nop
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff f96f 	bl	8007e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b28:	bf00      	nop
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b088      	sub	sp, #32
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4c:	61fb      	str	r3, [r7, #28]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	61bb      	str	r3, [r7, #24]
 8008b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6979      	ldr	r1, [r7, #20]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	613b      	str	r3, [r7, #16]
   return(result);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e6      	bne.n	8008b38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2220      	movs	r2, #32
 8008b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7f9 fb8f 	bl	800229c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b7e:	bf00      	nop
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b096      	sub	sp, #88	; 0x58
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b9e:	2b22      	cmp	r3, #34	; 0x22
 8008ba0:	f040 8095 	bne.w	8008cce <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008bae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008bb2:	b2d9      	uxtb	r1, r3
 8008bb4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008bb8:	b2da      	uxtb	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbe:	400a      	ands	r2, r1
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d178      	bne.n	8008cde <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c00:	653b      	str	r3, [r7, #80]	; 0x50
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e6      	bne.n	8008bec <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c2e:	6a3b      	ldr	r3, [r7, #32]
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c3e:	633a      	str	r2, [r7, #48]	; 0x30
 8008c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e5      	bne.n	8008c1e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d12e      	bne.n	8008cc6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 0310 	bic.w	r3, r3, #16
 8008c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8c:	61fb      	str	r3, [r7, #28]
 8008c8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	69b9      	ldr	r1, [r7, #24]
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	617b      	str	r3, [r7, #20]
   return(result);
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e6      	bne.n	8008c6e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	f003 0310 	and.w	r3, r3, #16
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d103      	bne.n	8008cb6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2210      	movs	r2, #16
 8008cb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7ff f8aa 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cc4:	e00b      	b.n	8008cde <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7f9 faf6 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8008ccc:	e007      	b.n	8008cde <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0208 	orr.w	r2, r2, #8
 8008cdc:	619a      	str	r2, [r3, #24]
}
 8008cde:	bf00      	nop
 8008ce0:	3758      	adds	r7, #88	; 0x58
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b096      	sub	sp, #88	; 0x58
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cf4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfe:	2b22      	cmp	r3, #34	; 0x22
 8008d00:	f040 8095 	bne.w	8008e2e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008d14:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008d18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d28:	1c9a      	adds	r2, r3, #2
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b01      	subs	r3, #1
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d178      	bne.n	8008e3e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d54:	e853 3f00 	ldrex	r3, [r3]
 8008d58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	461a      	mov	r2, r3
 8008d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e6      	bne.n	8008d4c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3308      	adds	r3, #8
 8008d84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	f023 0301 	bic.w	r3, r3, #1
 8008d94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3308      	adds	r3, #8
 8008d9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e5      	bne.n	8008d7e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d12e      	bne.n	8008e26 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	647b      	str	r3, [r7, #68]	; 0x44
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	6979      	ldr	r1, [r7, #20]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d103      	bne.n	8008e16 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2210      	movs	r2, #16
 8008e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fe fffa 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e24:	e00b      	b.n	8008e3e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f9 fa46 	bl	80022b8 <HAL_UART_RxCpltCallback>
}
 8008e2c:	e007      	b.n	8008e3e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0208 	orr.w	r2, r2, #8
 8008e3c:	619a      	str	r2, [r3, #24]
}
 8008e3e:	bf00      	nop
 8008e40:	3758      	adds	r7, #88	; 0x58
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b0a6      	sub	sp, #152	; 0x98
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e56:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	69db      	ldr	r3, [r3, #28]
 8008e60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7e:	2b22      	cmp	r3, #34	; 0x22
 8008e80:	f040 814f 	bne.w	8009122 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e8a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e8e:	e0f6      	b.n	800907e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e9a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008e9e:	b2d9      	uxtb	r1, r3
 8008ea0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eaa:	400a      	ands	r2, r1
 8008eac:	b2d2      	uxtb	r2, r2
 8008eae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eda:	f003 0307 	and.w	r3, r3, #7
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d053      	beq.n	8008f8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ee2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d011      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008eee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00b      	beq.n	8008f12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2201      	movs	r2, #1
 8008f00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f08:	f043 0201 	orr.w	r2, r3, #1
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d011      	beq.n	8008f42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00b      	beq.n	8008f42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f38:	f043 0204 	orr.w	r2, r3, #4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008f42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d011      	beq.n	8008f72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008f4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00b      	beq.n	8008f72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2204      	movs	r2, #4
 8008f60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f68:	f043 0202 	orr.w	r2, r3, #2
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d006      	beq.n	8008f8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f7fe ff42 	bl	8007e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d173      	bne.n	800907e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008fa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008faa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008fb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fba:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e4      	bne.n	8008f96 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3308      	adds	r3, #8
 8008fd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fe2:	f023 0301 	bic.w	r3, r3, #1
 8008fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	3308      	adds	r3, #8
 8008fee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008ff0:	657a      	str	r2, [r7, #84]	; 0x54
 8008ff2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ff6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ff8:	e841 2300 	strex	r3, r2, [r1]
 8008ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d1e3      	bne.n	8008fcc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2220      	movs	r2, #32
 8009008:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d12e      	bne.n	8009078 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	e853 3f00 	ldrex	r3, [r3]
 800902c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	f023 0310 	bic.w	r3, r3, #16
 8009034:	67bb      	str	r3, [r7, #120]	; 0x78
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800903e:	643b      	str	r3, [r7, #64]	; 0x40
 8009040:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e6      	bne.n	8009020 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b10      	cmp	r3, #16
 800905e:	d103      	bne.n	8009068 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2210      	movs	r2, #16
 8009066:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7fe fed1 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
 8009076:	e002      	b.n	800907e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7f9 f91d 	bl	80022b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800907e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009082:	2b00      	cmp	r3, #0
 8009084:	d006      	beq.n	8009094 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009086:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	f47f aefe 	bne.w	8008e90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800909a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800909e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d045      	beq.n	8009132 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d23e      	bcs.n	8009132 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3308      	adds	r3, #8
 80090ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	e853 3f00 	ldrex	r3, [r3]
 80090c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090ca:	673b      	str	r3, [r7, #112]	; 0x70
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80090d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e5      	bne.n	80090b4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a14      	ldr	r2, [pc, #80]	; (800913c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80090ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f043 0320 	orr.w	r3, r3, #32
 8009102:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6979      	ldr	r1, [r7, #20]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	613b      	str	r3, [r7, #16]
   return(result);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e6      	bne.n	80090ee <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009120:	e007      	b.n	8009132 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0208 	orr.w	r2, r2, #8
 8009130:	619a      	str	r2, [r3, #24]
}
 8009132:	bf00      	nop
 8009134:	3798      	adds	r7, #152	; 0x98
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	08008b87 	.word	0x08008b87

08009140 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b0a8      	sub	sp, #160	; 0xa0
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800914e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	2b22      	cmp	r3, #34	; 0x22
 8009178:	f040 8153 	bne.w	8009422 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009182:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009186:	e0fa      	b.n	800937e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800919a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800919e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80091a2:	4013      	ands	r3, r2
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b0:	1c9a      	adds	r2, r3, #2
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b01      	subs	r3, #1
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d053      	beq.n	8009286 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d011      	beq.n	800920e <UART_RxISR_16BIT_FIFOEN+0xce>
 80091ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2201      	movs	r2, #1
 80091fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009204:	f043 0201 	orr.w	r2, r3, #1
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800920e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d011      	beq.n	800923e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800921a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00b      	beq.n	800923e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2202      	movs	r2, #2
 800922c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009234:	f043 0204 	orr.w	r2, r3, #4
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800923e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	d011      	beq.n	800926e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800924a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00b      	beq.n	800926e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2204      	movs	r2, #4
 800925c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009264:	f043 0202 	orr.w	r2, r3, #2
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7fe fdc4 	bl	8007e06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800928c:	b29b      	uxth	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	d175      	bne.n	800937e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80092a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80092ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e4      	bne.n	8009292 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3308      	adds	r3, #8
 80092ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80092f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e1      	bne.n	80092c8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2220      	movs	r2, #32
 8009308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d12e      	bne.n	8009378 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	e853 3f00 	ldrex	r3, [r3]
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	f023 0310 	bic.w	r3, r3, #16
 8009334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800933e:	647b      	str	r3, [r7, #68]	; 0x44
 8009340:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009346:	e841 2300 	strex	r3, r2, [r1]
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1e6      	bne.n	8009320 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	f003 0310 	and.w	r3, r3, #16
 800935c:	2b10      	cmp	r3, #16
 800935e:	d103      	bne.n	8009368 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2210      	movs	r2, #16
 8009366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fe fd51 	bl	8007e18 <HAL_UARTEx_RxEventCallback>
 8009376:	e002      	b.n	800937e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7f8 ff9d 	bl	80022b8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800937e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009386:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	f47f aefa 	bne.w	8009188 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800939a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800939e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d045      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093ac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d23e      	bcs.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3308      	adds	r3, #8
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	623b      	str	r3, [r7, #32]
   return(result);
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ca:	677b      	str	r3, [r7, #116]	; 0x74
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80093d4:	633a      	str	r2, [r7, #48]	; 0x30
 80093d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093dc:	e841 2300 	strex	r3, r2, [r1]
 80093e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1e5      	bne.n	80093b4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a14      	ldr	r2, [pc, #80]	; (800943c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80093ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f043 0320 	orr.w	r3, r3, #32
 8009402:	673b      	str	r3, [r7, #112]	; 0x70
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800940c:	61fb      	str	r3, [r7, #28]
 800940e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009410:	69b9      	ldr	r1, [r7, #24]
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	e841 2300 	strex	r3, r2, [r1]
 8009418:	617b      	str	r3, [r7, #20]
   return(result);
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1e6      	bne.n	80093ee <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009420:	e007      	b.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	699a      	ldr	r2, [r3, #24]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f042 0208 	orr.w	r2, r2, #8
 8009430:	619a      	str	r2, [r3, #24]
}
 8009432:	bf00      	nop
 8009434:	37a0      	adds	r7, #160	; 0xa0
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	08008ce7 	.word	0x08008ce7

08009440 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	bc80      	pop	{r7}
 8009450:	4770      	bx	lr

08009452 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009452:	b480      	push	{r7}
 8009454:	b083      	sub	sp, #12
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr

08009464 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	bc80      	pop	{r7}
 8009474:	4770      	bx	lr

08009476 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b088      	sub	sp, #32
 800947a:	af02      	add	r7, sp, #8
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	1d3b      	adds	r3, r7, #4
 8009480:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800948e:	2b01      	cmp	r3, #1
 8009490:	d101      	bne.n	8009496 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009492:	2302      	movs	r3, #2
 8009494:	e046      	b.n	8009524 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2224      	movs	r2, #36	; 0x24
 80094a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 0201 	bic.w	r2, r2, #1
 80094b4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d105      	bne.n	80094dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80094d0:	1d3b      	adds	r3, r7, #4
 80094d2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f911 	bl	80096fe <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f042 0201 	orr.w	r2, r2, #1
 80094ea:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094ec:	f7f8 f9fa 	bl	80018e4 <HAL_GetTick>
 80094f0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7fe fff5 	bl	80084f0 <UART_WaitOnFlagUntilTimeout>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d002      	beq.n	8009512 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	75fb      	strb	r3, [r7, #23]
 8009510:	e003      	b.n	800951a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2220      	movs	r2, #32
 8009516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009522:	7dfb      	ldrb	r3, [r7, #23]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	; 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_UARTEx_EnableStopMode+0x16>
 800953e:	2302      	movs	r3, #2
 8009540:	e021      	b.n	8009586 <HAL_UARTEx_EnableStopMode+0x5a>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	e853 3f00 	ldrex	r3, [r3]
 8009556:	60bb      	str	r3, [r7, #8]
   return(result);
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f043 0302 	orr.w	r3, r3, #2
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	61bb      	str	r3, [r7, #24]
 800956a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	6979      	ldr	r1, [r7, #20]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	e841 2300 	strex	r3, r2, [r1]
 8009574:	613b      	str	r3, [r7, #16]
   return(result);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1e6      	bne.n	800954a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3724      	adds	r7, #36	; 0x24
 800958a:	46bd      	mov	sp, r7
 800958c:	bc80      	pop	{r7}
 800958e:	4770      	bx	lr

08009590 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_UARTEx_EnableFifoMode+0x16>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e02b      	b.n	80095fe <HAL_UARTEx_EnableFifoMode+0x6e>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2224      	movs	r2, #36	; 0x24
 80095b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f022 0201 	bic.w	r2, r2, #1
 80095cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80095dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f8ac 	bl	8009744 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b084      	sub	sp, #16
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
 800960e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800961a:	2302      	movs	r3, #2
 800961c:	e02d      	b.n	800967a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2224      	movs	r2, #36	; 0x24
 800962a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	681a      	ldr	r2, [r3, #0]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f022 0201 	bic.w	r2, r2, #1
 8009644:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f872 	bl	8009744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009696:	2302      	movs	r3, #2
 8009698:	e02d      	b.n	80096f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2224      	movs	r2, #36	; 0x24
 80096a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f022 0201 	bic.w	r2, r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 f834 	bl	8009744 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3710      	adds	r7, #16
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	60f8      	str	r0, [r7, #12]
 8009706:	1d3b      	adds	r3, r7, #4
 8009708:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f023 0210 	bic.w	r2, r3, #16
 8009716:	893b      	ldrh	r3, [r7, #8]
 8009718:	4619      	mov	r1, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800972c:	7abb      	ldrb	r3, [r7, #10]
 800972e:	061a      	lsls	r2, r3, #24
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	605a      	str	r2, [r3, #4]
}
 8009738:	bf00      	nop
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	bc80      	pop	{r7}
 8009740:	4770      	bx	lr
	...

08009744 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009750:	2b00      	cmp	r3, #0
 8009752:	d108      	bne.n	8009766 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009764:	e031      	b.n	80097ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009766:	2308      	movs	r3, #8
 8009768:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800976a:	2308      	movs	r3, #8
 800976c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	0e5b      	lsrs	r3, r3, #25
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0307 	and.w	r3, r3, #7
 800977c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	0f5b      	lsrs	r3, r3, #29
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 0307 	and.w	r3, r3, #7
 800978c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	7b3a      	ldrb	r2, [r7, #12]
 8009792:	4910      	ldr	r1, [pc, #64]	; (80097d4 <UARTEx_SetNbDataToProcess+0x90>)
 8009794:	5c8a      	ldrb	r2, [r1, r2]
 8009796:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800979a:	7b3a      	ldrb	r2, [r7, #12]
 800979c:	490e      	ldr	r1, [pc, #56]	; (80097d8 <UARTEx_SetNbDataToProcess+0x94>)
 800979e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	7b7a      	ldrb	r2, [r7, #13]
 80097b0:	4908      	ldr	r1, [pc, #32]	; (80097d4 <UARTEx_SetNbDataToProcess+0x90>)
 80097b2:	5c8a      	ldrb	r2, [r1, r2]
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80097b8:	7b7a      	ldrb	r2, [r7, #13]
 80097ba:	4907      	ldr	r1, [pc, #28]	; (80097d8 <UARTEx_SetNbDataToProcess+0x94>)
 80097bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097be:	fb93 f3f2 	sdiv	r3, r3, r2
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80097ca:	bf00      	nop
 80097cc:	3714      	adds	r7, #20
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr
 80097d4:	08022bbc 	.word	0x08022bbc
 80097d8:	08022bc4 	.word	0x08022bc4

080097dc <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 80097e0:	f7f7 ff26 	bl	8001630 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 80097e4:	f000 f80a 	bl	80097fc <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 80097e8:	bf00      	nop
 80097ea:	bd80      	pop	{r7, pc}

080097ec <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295
 80097f4:	f015 fb66 	bl	801eec4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 80097f8:	bf00      	nop
 80097fa:	bd80      	pop	{r7, pc}

080097fc <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_1 */
  CMD_Init(CmdProcessNotify);
 8009802:	482c      	ldr	r0, [pc, #176]	; (80098b4 <LoRaWAN_Init+0xb8>)
 8009804:	f001 fe5c 	bl	800b4c0 <CMD_Init>

  BSP_LED_Init(LED_RED);
 8009808:	2000      	movs	r0, #0
 800980a:	f7f8 fdb7 	bl	800237c <BSP_LED_Init>
  //BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);

  /* Get LoRa APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800980e:	2300      	movs	r3, #0
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	2301      	movs	r3, #1
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	2301      	movs	r3, #1
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	4b27      	ldr	r3, [pc, #156]	; (80098b8 <LoRaWAN_Init+0xbc>)
 800981c:	2200      	movs	r2, #0
 800981e:	2100      	movs	r1, #0
 8009820:	2002      	movs	r0, #2
 8009822:	f015 f823 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8009826:	2300      	movs	r3, #0
 8009828:	9302      	str	r3, [sp, #8]
 800982a:	2303      	movs	r3, #3
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	2302      	movs	r3, #2
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	4b22      	ldr	r3, [pc, #136]	; (80098bc <LoRaWAN_Init+0xc0>)
 8009834:	2200      	movs	r2, #0
 8009836:	2100      	movs	r1, #0
 8009838:	2002      	movs	r0, #2
 800983a:	f015 f817 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800983e:	2300      	movs	r3, #0
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	2301      	movs	r3, #1
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	2301      	movs	r3, #1
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <LoRaWAN_Init+0xc4>)
 800984c:	2200      	movs	r2, #0
 800984e:	2100      	movs	r1, #0
 8009850:	2002      	movs	r0, #2
 8009852:	f015 f80b 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
          (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n\r\n\r\n----------LoRaWAN_End_Node_FreeRTOS----------\r\n\r\n\r\n");
 8009856:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <LoRaWAN_Init+0xc8>)
 8009858:	2200      	movs	r2, #0
 800985a:	2100      	movs	r1, #0
 800985c:	2002      	movs	r0, #2
 800985e:	f015 f805 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009862:	4a19      	ldr	r2, [pc, #100]	; (80098c8 <LoRaWAN_Init+0xcc>)
 8009864:	2100      	movs	r1, #0
 8009866:	2002      	movs	r0, #2
 8009868:	f015 fc10 	bl	801f08c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Vcom), UTIL_SEQ_RFU, CMD_Process);
 800986c:	4a17      	ldr	r2, [pc, #92]	; (80098cc <LoRaWAN_Init+0xd0>)
 800986e:	2100      	movs	r1, #0
 8009870:	2001      	movs	r0, #1
 8009872:	f015 fc0b 	bl	801f08c <UTIL_SEQ_RegTask>
  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009876:	f002 f8c7 	bl	800ba08 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks);
 800987a:	4815      	ldr	r0, [pc, #84]	; (80098d0 <LoRaWAN_Init+0xd4>)
 800987c:	f005 fd4e 	bl	800f31c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009880:	4814      	ldr	r0, [pc, #80]	; (80098d4 <LoRaWAN_Init+0xd8>)
 8009882:	f005 fd97 	bl	800f3b4 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  APP_PPRINTF("ATtention command interface\r\n");
 8009886:	4b14      	ldr	r3, [pc, #80]	; (80098d8 <LoRaWAN_Init+0xdc>)
 8009888:	2200      	movs	r2, #0
 800988a:	2100      	movs	r1, #0
 800988c:	2000      	movs	r0, #0
 800988e:	f014 ffed 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1f6      	bne.n	8009886 <LoRaWAN_Init+0x8a>
  APP_PPRINTF("AT? to list all available functions\r\n");
 8009898:	4b10      	ldr	r3, [pc, #64]	; (80098dc <LoRaWAN_Init+0xe0>)
 800989a:	2200      	movs	r2, #0
 800989c:	2100      	movs	r1, #0
 800989e:	2000      	movs	r0, #0
 80098a0:	f014 ffe4 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f6      	bne.n	8009898 <LoRaWAN_Init+0x9c>
  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	08009953 	.word	0x08009953
 80098b8:	08020ca4 	.word	0x08020ca4
 80098bc:	08020cc4 	.word	0x08020cc4
 80098c0:	08020ce4 	.word	0x08020ce4
 80098c4:	08020d04 	.word	0x08020d04
 80098c8:	0800f60d 	.word	0x0800f60d
 80098cc:	0800b51d 	.word	0x0800b51d
 80098d0:	20000010 	.word	0x20000010
 80098d4:	20000044 	.word	0x20000044
 80098d8:	08020d40 	.word	0x08020d40
 80098dc:	08020d60 	.word	0x08020d60

080098e0 <HAL_GPIO_EXTI_Callback>:
/* If users wants to go through the BSP, stm32wlxx_it.c should be updated  */
/* in the USER CODE SESSION of the correspondent EXTIn_IRQHandler() */
/* to call the BSP_PB_IRQHandler() or the HAL_EXTI_IRQHandler(&H_EXTI_n);. */
/* Then the below HAL_GPIO_EXTI_Callback() can be replaced by BSP callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	4603      	mov	r3, r0
 80098e8:	80fb      	strh	r3, [r7, #6]
//      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
//      break;
//    default:
//      break;
//  }
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b082      	sub	sp, #8
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  if ((appData != NULL) || (params != NULL))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d102      	bne.n	800990a <OnRxData+0x16>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <OnRxData+0x1e>
  {
	    AT_event_receive(appData, params);
 800990a:	6839      	ldr	r1, [r7, #0]
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f873 	bl	80099f8 <AT_event_receive>
  }
  /* USER CODE END OnRxData_1 */
}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <OnTxData>:


static void OnTxData(LmHandlerTxParams_t *params)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <OnTxData+0x14>
  {
	  AT_event_confirm(params);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f913 	bl	8009b54 <AT_event_confirm>
  }
  /* USER CODE END OnTxData_1 */
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <OnJoinRequest+0x14>
  {
	  AT_event_join(joinParams);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f835 	bl	80099b4 <AT_event_join>
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800994a:	bf00      	nop
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <CmdProcessNotify>:

static void CmdProcessNotify(void)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CmdProcessNotify_1 */

  /* USER CODE END CmdProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Vcom), 0);
 8009956:	2100      	movs	r1, #0
 8009958:	2001      	movs	r0, #1
 800995a:	f015 fbb9 	bl	801f0d0 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN CmdProcessNotify_2 */

  /* USER CODE END CmdProcessNotify_2 */
}
 800995e:	bf00      	nop
 8009960:	bd80      	pop	{r7, pc}

08009962 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8009966:	2100      	movs	r1, #0
 8009968:	2002      	movs	r0, #2
 800996a:	f015 fbb1 	bl	801f0d0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800996e:	bf00      	nop
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009978:	f3bf 8f4f 	dsb	sy
}
 800997c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800997e:	4b06      	ldr	r3, [pc, #24]	; (8009998 <__NVIC_SystemReset+0x24>)
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009986:	4904      	ldr	r1, [pc, #16]	; (8009998 <__NVIC_SystemReset+0x24>)
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <__NVIC_SystemReset+0x28>)
 800998a:	4313      	orrs	r3, r2
 800998c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800998e:	f3bf 8f4f 	dsb	sy
}
 8009992:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009994:	bf00      	nop
 8009996:	e7fd      	b.n	8009994 <__NVIC_SystemReset+0x20>
 8009998:	e000ed00 	.word	0xe000ed00
 800999c:	05fa0004 	.word	0x05fa0004

080099a0 <AT_return_error>:
{
  return AT_OK;
}

ATEerror_t AT_return_error(const char *param)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  return AT_ERROR;
 80099a8:	2301      	movs	r3, #1
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <AT_event_join>:

/* --------------- Application events --------------- */
void AT_event_join(LmHandlerJoinParams_t *params)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_join_1 */

  /* USER CODE END AT_event_join_1 */
  if ((params != NULL) && (params->Status == LORAMAC_HANDLER_SUCCESS))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00b      	beq.n	80099da <AT_event_join+0x26>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d106      	bne.n	80099da <AT_event_join+0x26>
  {
    AT_PRINTF("+EVT:JOINED\r\n");
 80099cc:	4b08      	ldr	r3, [pc, #32]	; (80099f0 <AT_event_join+0x3c>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	2100      	movs	r1, #0
 80099d2:	2000      	movs	r0, #0
 80099d4:	f014 ff4a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 80099d8:	e006      	b.n	80099e8 <AT_event_join+0x34>
  }
  else
  {
    AT_PRINTF("+EVT:JOIN FAILED\r\n");
 80099da:	4b06      	ldr	r3, [pc, #24]	; (80099f4 <AT_event_join+0x40>)
 80099dc:	2200      	movs	r2, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	2000      	movs	r0, #0
 80099e2:	f014 ff43 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_join_2 */

  /* USER CODE END AT_event_join_2 */
}
 80099e6:	bf00      	nop
 80099e8:	bf00      	nop
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	08020e14 	.word	0x08020e14
 80099f4:	08020e24 	.word	0x08020e24

080099f8 <AT_event_receive>:

void AT_event_receive(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 80099f8:	b5b0      	push	{r4, r5, r7, lr}
 80099fa:	b090      	sub	sp, #64	; 0x40
 80099fc:	af06      	add	r7, sp, #24
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN AT_event_receive_1 */

  /* USER CODE END AT_event_receive_1 */
  const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 8009a02:	4b4e      	ldr	r3, [pc, #312]	; (8009b3c <AT_event_receive+0x144>)
 8009a04:	f107 040c 	add.w	r4, r7, #12
 8009a08:	461d      	mov	r5, r3
 8009a0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009a0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a12:	e884 0003 	stmia.w	r4, {r0, r1}
  uint8_t ReceivedDataSize = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((appData != NULL) && (appData->BufferSize > 0))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d03e      	beq.n	8009aa0 <AT_event_receive+0xa8>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d03a      	beq.n	8009aa0 <AT_event_receive+0xa8>
  {
    /* Received data to be copied*/
    if (LORAWAN_APP_DATA_BUFFER_MAX_SIZE <= appData->BufferSize)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	785b      	ldrb	r3, [r3, #1]
 8009a2e:	2bf1      	cmp	r3, #241	; 0xf1
 8009a30:	d903      	bls.n	8009a3a <AT_event_receive+0x42>
    {
      ReceivedDataSize = LORAWAN_APP_DATA_BUFFER_MAX_SIZE;
 8009a32:	23f2      	movs	r3, #242	; 0xf2
 8009a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a38:	e003      	b.n	8009a42 <AT_event_receive+0x4a>
    }
    else
    {
      ReceivedDataSize = appData->BufferSize;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /*asynchronous notification to the host*/
    AT_PRINTF("+EVT:%d:%02X:", appData->Port, ReceivedDataSize);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	9200      	str	r2, [sp, #0]
 8009a50:	4b3b      	ldr	r3, [pc, #236]	; (8009b40 <AT_event_receive+0x148>)
 8009a52:	2200      	movs	r2, #0
 8009a54:	2100      	movs	r1, #0
 8009a56:	2000      	movs	r0, #0
 8009a58:	f014 ff08 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a62:	e011      	b.n	8009a88 <AT_event_receive+0x90>
    {
      AT_PRINTF("%02x", appData->Buffer[i]);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a6c:	4413      	add	r3, r2
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	4b34      	ldr	r3, [pc, #208]	; (8009b44 <AT_event_receive+0x14c>)
 8009a74:	2200      	movs	r2, #0
 8009a76:	2100      	movs	r1, #0
 8009a78:	2000      	movs	r0, #0
 8009a7a:	f014 fef7 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    for (uint8_t i = 0; i < ReceivedDataSize; i++)
 8009a7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a82:	3301      	adds	r3, #1
 8009a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009a88:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d3e7      	bcc.n	8009a64 <AT_event_receive+0x6c>
    }
    AT_PRINTF("\r\n");
 8009a94:	4b2c      	ldr	r3, [pc, #176]	; (8009b48 <AT_event_receive+0x150>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	2100      	movs	r1, #0
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	f014 fee6 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }

  if (params != NULL)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d046      	beq.n	8009b34 <AT_event_receive+0x13c>
  {
    if (params->LinkCheck == true)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	7b5b      	ldrb	r3, [r3, #13]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d025      	beq.n	8009afa <AT_event_receive+0x102>
    {
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d, DMODM %d, GWN %d\r\n", slotStrings[params->RxSlot], params->Datarate,
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	3328      	adds	r3, #40	; 0x28
 8009ab8:	443b      	add	r3, r7
 8009aba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009abe:	683a      	ldr	r2, [r7, #0]
 8009ac0:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8009acc:	4610      	mov	r0, r2
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	7b92      	ldrb	r2, [r2, #14]
 8009ada:	4615      	mov	r5, r2
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	7bd2      	ldrb	r2, [r2, #15]
 8009ae0:	9205      	str	r2, [sp, #20]
 8009ae2:	9504      	str	r5, [sp, #16]
 8009ae4:	9403      	str	r4, [sp, #12]
 8009ae6:	9002      	str	r0, [sp, #8]
 8009ae8:	9101      	str	r1, [sp, #4]
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	4b17      	ldr	r3, [pc, #92]	; (8009b4c <AT_event_receive+0x154>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	2100      	movs	r1, #0
 8009af2:	2000      	movs	r0, #0
 8009af4:	f014 feba 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }

  /* USER CODE BEGIN AT_event_receive_2 */

  /* USER CODE END AT_event_receive_2 */
}
 8009af8:	e01c      	b.n	8009b34 <AT_event_receive+0x13c>
      AT_PRINTF("+EVT:RX_%s, DR %d, RSSI %d, SNR %d\r\n", slotStrings[params->RxSlot], params->Datarate, params->Rssi,
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	3328      	adds	r3, #40	; 0x28
 8009b04:	443b      	add	r3, r7
 8009b06:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	f992 2002 	ldrsb.w	r2, [r2, #2]
 8009b10:	4611      	mov	r1, r2
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	f992 2003 	ldrsb.w	r2, [r2, #3]
 8009b18:	4610      	mov	r0, r2
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009b20:	9203      	str	r2, [sp, #12]
 8009b22:	9002      	str	r0, [sp, #8]
 8009b24:	9101      	str	r1, [sp, #4]
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	4b09      	ldr	r3, [pc, #36]	; (8009b50 <AT_event_receive+0x158>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	2000      	movs	r0, #0
 8009b30:	f014 fe9c 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8009b34:	bf00      	nop
 8009b36:	3728      	adds	r7, #40	; 0x28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b3c:	08020eb4 	.word	0x08020eb4
 8009b40:	08020e38 	.word	0x08020e38
 8009b44:	08020e48 	.word	0x08020e48
 8009b48:	08020e50 	.word	0x08020e50
 8009b4c:	08020e54 	.word	0x08020e54
 8009b50:	08020e8c 	.word	0x08020e8c

08009b54 <AT_event_confirm>:

void AT_event_confirm(LmHandlerTxParams_t *params)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_event_confirm_1 */

  /* USER CODE END AT_event_confirm_1 */
  if ((params != NULL) && (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG) && (params->AckReceived != 0))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00d      	beq.n	8009b7e <AT_event_confirm+0x2a>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	789b      	ldrb	r3, [r3, #2]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d109      	bne.n	8009b7e <AT_event_confirm+0x2a>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	78db      	ldrb	r3, [r3, #3]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <AT_event_confirm+0x2a>
  {
    AT_PRINTF("+EVT:SEND_CONFIRMED\r\n");
 8009b72:	4b05      	ldr	r3, [pc, #20]	; (8009b88 <AT_event_confirm+0x34>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	2100      	movs	r1, #0
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f014 fe77 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN AT_event_confirm_2 */

  /* USER CODE END AT_event_confirm_2 */
}
 8009b7e:	bf00      	nop
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	08020ecc 	.word	0x08020ecc

08009b8c <AT_reset>:

/* --------------- General commands --------------- */
ATEerror_t AT_reset(const char *param)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_reset_1 */

  /* USER CODE END AT_reset_1 */
  NVIC_SystemReset();
 8009b94:	f7ff feee 	bl	8009974 <__NVIC_SystemReset>

08009b98 <AT_verbose_get>:

  /* USER CODE END AT_reset_2 */
}

ATEerror_t AT_verbose_get(const char *param)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_get_1 */

  /* USER CODE END AT_verbose_get_1 */
  print_u(UTIL_ADV_TRACE_GetVerboseLevel());
 8009ba0:	f014 ff02 	bl	801e9a8 <UTIL_ADV_TRACE_GetVerboseLevel>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f001 fc4c 	bl	800b444 <print_u>
  return AT_OK;
 8009bac:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_get_2 */

  /* USER CODE END AT_verbose_get_2 */
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <AT_verbose_set>:

ATEerror_t AT_verbose_set(const char *param)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_verbose_set_1 */

  /* USER CODE END AT_verbose_set_1 */
  const char *buf = param;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60fb      	str	r3, [r7, #12]
  int32_t lvl_nb;

  /* read and set the verbose level */
  if (1 != tiny_sscanf(buf, "%u", &lvl_nb))
 8009bc4:	f107 0308 	add.w	r3, r7, #8
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4913      	ldr	r1, [pc, #76]	; (8009c18 <AT_verbose_set+0x60>)
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f016 fcd3 	bl	8020578 <tiny_sscanf>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d007      	beq.n	8009be8 <AT_verbose_set+0x30>
  {
    AT_PRINTF("AT+VL: verbose level is not well set\r\n");
 8009bd8:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <AT_verbose_set+0x64>)
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2100      	movs	r1, #0
 8009bde:	2000      	movs	r0, #0
 8009be0:	f014 fe44 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8009be4:	2302      	movs	r3, #2
 8009be6:	e013      	b.n	8009c10 <AT_verbose_set+0x58>
  }
  if ((lvl_nb > VLEVEL_H) || (lvl_nb < VLEVEL_OFF))
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	dc02      	bgt.n	8009bf4 <AT_verbose_set+0x3c>
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	da07      	bge.n	8009c04 <AT_verbose_set+0x4c>
  {
    AT_PRINTF("AT+VL: verbose level out of range => 0(VLEVEL_OFF) to 3(VLEVEL_H)\r\n");
 8009bf4:	4b0a      	ldr	r3, [pc, #40]	; (8009c20 <AT_verbose_set+0x68>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	f014 fe36 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 8009c00:	2302      	movs	r3, #2
 8009c02:	e005      	b.n	8009c10 <AT_verbose_set+0x58>
  }

  UTIL_ADV_TRACE_SetVerboseLevel(lvl_nb);
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f014 febd 	bl	801e988 <UTIL_ADV_TRACE_SetVerboseLevel>

  return AT_OK;
 8009c0e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_verbose_set_2 */

  /* USER CODE END AT_verbose_set_2 */
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	08020ee4 	.word	0x08020ee4
 8009c1c:	08020ee8 	.word	0x08020ee8
 8009c20:	08020f10 	.word	0x08020f10

08009c24 <AT_LocalTime_get>:

ATEerror_t AT_LocalTime_get(const char *param)
{
 8009c24:	b5b0      	push	{r4, r5, r7, lr}
 8009c26:	b094      	sub	sp, #80	; 0x50
 8009c28:	af06      	add	r7, sp, #24
 8009c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_LocalTime_get_1 */

  /* USER CODE END AT_LocalTime_get_1 */
  struct tm localtime;
  SysTime_t UnixEpoch = SysTimeGet();
 8009c2c:	f107 030c 	add.w	r3, r7, #12
 8009c30:	4618      	mov	r0, r3
 8009c32:	f015 fbcb 	bl	801f3cc <SysTimeGet>
  UnixEpoch.Seconds -= 18; /*removing leap seconds*/
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b12      	subs	r3, #18
 8009c3a:	60fb      	str	r3, [r7, #12]

  UnixEpoch.Seconds += 3600 * 2; /*adding 2 hours*/
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 8009c42:	60fb      	str	r3, [r7, #12]

  SysTimeLocalTime(UnixEpoch.Seconds,  & localtime);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f107 0214 	add.w	r2, r7, #20
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f015 fc7b 	bl	801f548 <SysTimeLocalTime>

  AT_PRINTF("LTIME:%02dh%02dm%02ds on %02d/%02d/%04d\r\n",
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	6979      	ldr	r1, [r7, #20]
 8009c58:	6a38      	ldr	r0, [r7, #32]
 8009c5a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009c5c:	3401      	adds	r4, #1
 8009c5e:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8009c60:	f205 756c 	addw	r5, r5, #1900	; 0x76c
 8009c64:	9505      	str	r5, [sp, #20]
 8009c66:	9404      	str	r4, [sp, #16]
 8009c68:	9003      	str	r0, [sp, #12]
 8009c6a:	9102      	str	r1, [sp, #8]
 8009c6c:	9201      	str	r2, [sp, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <AT_LocalTime_get+0x64>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	2100      	movs	r1, #0
 8009c76:	2000      	movs	r0, #0
 8009c78:	f014 fdf8 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            localtime.tm_hour, localtime.tm_min, localtime.tm_sec,
            localtime.tm_mday, localtime.tm_mon + 1, localtime.tm_year + 1900);

  return AT_OK;
 8009c7c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_LocalTime_get_2 */

  /* USER CODE END AT_LocalTime_get_2 */
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3738      	adds	r7, #56	; 0x38
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bdb0      	pop	{r4, r5, r7, pc}
 8009c86:	bf00      	nop
 8009c88:	08020f54 	.word	0x08020f54

08009c8c <AT_JoinEUI_get>:

/* --------------- Keys, IDs and EUIs management commands --------------- */
ATEerror_t AT_JoinEUI_get(const char *param)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_get_1 */

  /* USER CODE END AT_JoinEUI_get_1 */
  uint8_t appEUI[8];
  if (LmHandlerGetAppEUI(appEUI) != LORAMAC_HANDLER_SUCCESS)
 8009c94:	f107 0308 	add.w	r3, r7, #8
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f006 f9e4 	bl	8010066 <LmHandlerGetAppEUI>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <AT_JoinEUI_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e005      	b.n	8009cb4 <AT_JoinEUI_get+0x28>
  }

  print_8_02x(appEUI);
 8009ca8:	f107 0308 	add.w	r3, r7, #8
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fb7f 	bl	800b3b0 <print_8_02x>
  return AT_OK;
 8009cb2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_get_2 */

  /* USER CODE END AT_JoinEUI_get_2 */
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <AT_JoinEUI_set>:

ATEerror_t AT_JoinEUI_set(const char *param)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08a      	sub	sp, #40	; 0x28
 8009cc0:	af06      	add	r7, sp, #24
 8009cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinEUI_set_1 */

  /* USER CODE END AT_JoinEUI_set_1 */
  uint8_t JoinEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	1c59      	adds	r1, r3, #1
 8009cca:	f107 0208 	add.w	r2, r7, #8
 8009cce:	f107 0308 	add.w	r3, r7, #8
 8009cd2:	3307      	adds	r3, #7
 8009cd4:	9305      	str	r3, [sp, #20]
 8009cd6:	f107 0308 	add.w	r3, r7, #8
 8009cda:	3306      	adds	r3, #6
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	f107 0308 	add.w	r3, r7, #8
 8009ce2:	3305      	adds	r3, #5
 8009ce4:	9303      	str	r3, [sp, #12]
 8009ce6:	f107 0308 	add.w	r3, r7, #8
 8009cea:	3304      	adds	r3, #4
 8009cec:	9302      	str	r3, [sp, #8]
 8009cee:	f107 0308 	add.w	r3, r7, #8
 8009cf2:	3303      	adds	r3, #3
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	3302      	adds	r3, #2
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	490b      	ldr	r1, [pc, #44]	; (8009d30 <AT_JoinEUI_set+0x74>)
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f016 fc38 	bl	8020578 <tiny_sscanf>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b08      	cmp	r3, #8
 8009d0c:	d001      	beq.n	8009d12 <AT_JoinEUI_set+0x56>
                  &JoinEui[0], &JoinEui[1], &JoinEui[2], &JoinEui[3],
                  &JoinEui[4], &JoinEui[5], &JoinEui[6], &JoinEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8009d0e:	2302      	movs	r3, #2
 8009d10:	e00a      	b.n	8009d28 <AT_JoinEUI_set+0x6c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppEUI(JoinEui))
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	4618      	mov	r0, r3
 8009d18:	f006 f9c7 	bl	80100aa <LmHandlerSetAppEUI>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <AT_JoinEUI_set+0x6a>
  {
    return AT_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <AT_JoinEUI_set+0x6c>
  }

  return AT_OK;
 8009d26:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinEUI_set_2 */

  /* USER CODE END AT_JoinEUI_set_2 */
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	08020f80 	.word	0x08020f80

08009d34 <AT_NwkKey_get>:

ATEerror_t AT_NwkKey_get(const char *param)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b086      	sub	sp, #24
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkKey_get_1 */

  /* USER CODE END AT_NwkKey_get_1 */
  uint8_t nwkKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkKey(nwkKey))
 8009d3c:	f107 0308 	add.w	r3, r7, #8
 8009d40:	4618      	mov	r0, r3
 8009d42:	f006 fc64 	bl	801060e <LmHandlerGetNwkKey>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <AT_NwkKey_get+0x1c>
  {
    return AT_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e005      	b.n	8009d5c <AT_NwkKey_get+0x28>
  }
  print_16_02x(nwkKey);
 8009d50:	f107 0308 	add.w	r3, r7, #8
 8009d54:	4618      	mov	r0, r3
 8009d56:	f001 fac3 	bl	800b2e0 <print_16_02x>

  return AT_OK;
 8009d5a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkKey_get_2 */

  /* USER CODE END AT_NwkKey_get_2 */
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <AT_NwkKey_set>:

ATEerror_t AT_NwkKey_set(const char *param)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkKey_set_1 */

  /* USER CODE END AT_NwkKey_set_1 */
  uint8_t nwkKey[16];
  if (sscanf_16_hhx(param, nwkKey) != 16)
 8009d6c:	f107 0308 	add.w	r3, r7, #8
 8009d70:	4619      	mov	r1, r3
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 fa3a 	bl	800b1ec <sscanf_16_hhx>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b10      	cmp	r3, #16
 8009d7c:	d001      	beq.n	8009d82 <AT_NwkKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e00a      	b.n	8009d98 <AT_NwkKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkKey(nwkKey))
 8009d82:	f107 0308 	add.w	r3, r7, #8
 8009d86:	4618      	mov	r0, r3
 8009d88:	f006 fc63 	bl	8010652 <LmHandlerSetNwkKey>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <AT_NwkKey_set+0x32>
  {
    return AT_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e000      	b.n	8009d98 <AT_NwkKey_set+0x34>
  }

  return AT_OK;
 8009d96:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkKey_set_2 */

  /* USER CODE END AT_NwkKey_set_2 */
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <AT_AppKey_get>:

ATEerror_t AT_AppKey_get(const char *param)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppKey_get_1 */

  /* USER CODE END AT_AppKey_get_1 */
  uint8_t appKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppKey(appKey))
 8009da8:	f107 0308 	add.w	r3, r7, #8
 8009dac:	4618      	mov	r0, r3
 8009dae:	f006 fc70 	bl	8010692 <LmHandlerGetAppKey>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <AT_AppKey_get+0x1c>
  {
    return AT_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e005      	b.n	8009dc8 <AT_AppKey_get+0x28>
  }
  print_16_02x(appKey);
 8009dbc:	f107 0308 	add.w	r3, r7, #8
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 fa8d 	bl	800b2e0 <print_16_02x>

  return AT_OK;
 8009dc6:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppKey_get_2 */

  /* USER CODE END AT_AppKey_get_2 */
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <AT_AppKey_set>:

ATEerror_t AT_AppKey_set(const char *param)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppKey_set_1 */

  /* USER CODE END AT_AppKey_set_1 */
  uint8_t appKey[16];
  if (sscanf_16_hhx(param, appKey) != 16)
 8009dd8:	f107 0308 	add.w	r3, r7, #8
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fa04 	bl	800b1ec <sscanf_16_hhx>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b10      	cmp	r3, #16
 8009de8:	d001      	beq.n	8009dee <AT_AppKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009dea:	2302      	movs	r3, #2
 8009dec:	e00a      	b.n	8009e04 <AT_AppKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppKey(appKey))
 8009dee:	f107 0308 	add.w	r3, r7, #8
 8009df2:	4618      	mov	r0, r3
 8009df4:	f006 fc6f 	bl	80106d6 <LmHandlerSetAppKey>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <AT_AppKey_set+0x32>
  {
    return AT_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e000      	b.n	8009e04 <AT_AppKey_set+0x34>
  }

  return AT_OK;
 8009e02:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppKey_set_2 */

  /* USER CODE END AT_AppKey_set_2 */
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3718      	adds	r7, #24
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <AT_NwkSKey_get>:

ATEerror_t AT_NwkSKey_get(const char *param)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkSKey_get_1 */

  /* USER CODE END AT_NwkSKey_get_1 */
  uint8_t nwkSKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetNwkSKey(nwkSKey))
 8009e14:	f107 0308 	add.w	r3, r7, #8
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f006 fc7c 	bl	8010716 <LmHandlerGetNwkSKey>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <AT_NwkSKey_get+0x1c>
  {
    return AT_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e005      	b.n	8009e34 <AT_NwkSKey_get+0x28>
  }
  print_16_02x(nwkSKey);
 8009e28:	f107 0308 	add.w	r3, r7, #8
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f001 fa57 	bl	800b2e0 <print_16_02x>

  return AT_OK;
 8009e32:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkSKey_get_2 */

  /* USER CODE END AT_NwkSKey_get_2 */
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3718      	adds	r7, #24
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <AT_NwkSKey_set>:

ATEerror_t AT_NwkSKey_set(const char *param)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NwkSKey_set_1 */

  /* USER CODE END AT_NwkSKey_set_1 */
  uint8_t nwkSKey[16];
  if (sscanf_16_hhx(param, nwkSKey) != 16)
 8009e44:	f107 0308 	add.w	r3, r7, #8
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 f9ce 	bl	800b1ec <sscanf_16_hhx>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b10      	cmp	r3, #16
 8009e54:	d001      	beq.n	8009e5a <AT_NwkSKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009e56:	2302      	movs	r3, #2
 8009e58:	e00a      	b.n	8009e70 <AT_NwkSKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetNwkSKey(nwkSKey))
 8009e5a:	f107 0308 	add.w	r3, r7, #8
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f006 fc7b 	bl	801075a <LmHandlerSetNwkSKey>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <AT_NwkSKey_set+0x32>
  {
    return AT_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <AT_NwkSKey_set+0x34>
  }

  return AT_OK;
 8009e6e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NwkSKey_set_2 */

  /* USER CODE END AT_NwkSKey_set_2 */
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3718      	adds	r7, #24
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <AT_AppSKey_get>:

ATEerror_t AT_AppSKey_get(const char *param)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppSKey_get_1 */

  /* USER CODE END AT_AppSKey_get_1 */
  uint8_t appSKey[16];
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerGetAppSKey(appSKey))
 8009e80:	f107 0308 	add.w	r3, r7, #8
 8009e84:	4618      	mov	r0, r3
 8009e86:	f006 fc88 	bl	801079a <LmHandlerGetAppSKey>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <AT_AppSKey_get+0x1c>
  {
    return AT_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	e005      	b.n	8009ea0 <AT_AppSKey_get+0x28>
  }
  print_16_02x(appSKey);
 8009e94:	f107 0308 	add.w	r3, r7, #8
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f001 fa21 	bl	800b2e0 <print_16_02x>

  return AT_OK;
 8009e9e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppSKey_get_2 */

  /* USER CODE END AT_AppSKey_get_2 */
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <AT_AppSKey_set>:

ATEerror_t AT_AppSKey_set(const char *param)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_AppSKey_set_1 */

  /* USER CODE END AT_AppSKey_set_1 */
  uint8_t appSKey[16];
  if (sscanf_16_hhx(param, appSKey) != 16)
 8009eb0:	f107 0308 	add.w	r3, r7, #8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 f998 	bl	800b1ec <sscanf_16_hhx>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b10      	cmp	r3, #16
 8009ec0:	d001      	beq.n	8009ec6 <AT_AppSKey_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e00a      	b.n	8009edc <AT_AppSKey_set+0x34>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetAppSKey(appSKey))
 8009ec6:	f107 0308 	add.w	r3, r7, #8
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f006 fc87 	bl	80107de <LmHandlerSetAppSKey>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <AT_AppSKey_set+0x32>
  {
    return AT_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e000      	b.n	8009edc <AT_AppSKey_set+0x34>
  }

  return AT_OK;
 8009eda:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_AppSKey_set_2 */

  /* USER CODE END AT_AppSKey_set_2 */
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3718      	adds	r7, #24
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <AT_DevAddr_get>:

ATEerror_t AT_DevAddr_get(const char *param)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_get_1 */

  /* USER CODE END AT_DevAddr_get_1 */
  uint32_t devAddr;
  if (LmHandlerGetDevAddr(&devAddr) != LORAMAC_HANDLER_SUCCESS)
 8009eec:	f107 030c 	add.w	r3, r7, #12
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f006 f939 	bl	8010168 <LmHandlerGetDevAddr>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <AT_DevAddr_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009efc:	2302      	movs	r3, #2
 8009efe:	e004      	b.n	8009f0a <AT_DevAddr_get+0x26>
  }

  print_uint32_as_02x(devAddr);
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 f9ca 	bl	800b29c <print_uint32_as_02x>
  return AT_OK;
 8009f08:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_get_2 */

  /* USER CODE END AT_DevAddr_get_2 */
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <AT_DevAddr_set>:

ATEerror_t AT_DevAddr_set(const char *param)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevAddr_set_1 */

  /* USER CODE END AT_DevAddr_set_1 */
  uint32_t devAddr;
  if (sscanf_uint32_as_hhx(param, &devAddr) != 4)
 8009f1a:	f107 030c 	add.w	r3, r7, #12
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 f947 	bl	800b1b4 <sscanf_uint32_as_hhx>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d001      	beq.n	8009f30 <AT_DevAddr_set+0x1e>
  {
    return AT_PARAM_ERROR;
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	e009      	b.n	8009f44 <AT_DevAddr_set+0x32>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevAddr(devAddr))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f006 f937 	bl	80101a6 <LmHandlerSetDevAddr>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <AT_DevAddr_set+0x30>
  {
    return AT_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <AT_DevAddr_set+0x32>
  }

  return AT_OK;
 8009f42:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevAddr_set_2 */

  /* USER CODE END AT_DevAddr_set_2 */
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <AT_DevEUI_get>:

ATEerror_t AT_DevEUI_get(const char *param)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_get_1 */

  /* USER CODE END AT_DevEUI_get_1 */
  uint8_t devEUI[8];
  if (LmHandlerGetDevEUI(devEUI) != LORAMAC_HANDLER_SUCCESS)
 8009f54:	f107 0308 	add.w	r3, r7, #8
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f006 f857 	bl	801000c <LmHandlerGetDevEUI>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <AT_DevEUI_get+0x1c>
  {
    return AT_PARAM_ERROR;
 8009f64:	2302      	movs	r3, #2
 8009f66:	e005      	b.n	8009f74 <AT_DevEUI_get+0x28>
  }

  print_8_02x(devEUI);
 8009f68:	f107 0308 	add.w	r3, r7, #8
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f001 fa1f 	bl	800b3b0 <print_8_02x>
  return AT_OK;
 8009f72:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_get_2 */

  /* USER CODE END AT_DevEUI_get_2 */
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <AT_DevEUI_set>:

ATEerror_t AT_DevEUI_set(const char *param)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08a      	sub	sp, #40	; 0x28
 8009f80:	af06      	add	r7, sp, #24
 8009f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DevEUI_set_1 */

  /* USER CODE END AT_DevEUI_set_1 */
  uint8_t devEui[8];
  if (tiny_sscanf(param, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 8009f84:	f107 0308 	add.w	r3, r7, #8
 8009f88:	1c59      	adds	r1, r3, #1
 8009f8a:	f107 0208 	add.w	r2, r7, #8
 8009f8e:	f107 0308 	add.w	r3, r7, #8
 8009f92:	3307      	adds	r3, #7
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	f107 0308 	add.w	r3, r7, #8
 8009f9a:	3306      	adds	r3, #6
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	f107 0308 	add.w	r3, r7, #8
 8009fa2:	3305      	adds	r3, #5
 8009fa4:	9303      	str	r3, [sp, #12]
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	3304      	adds	r3, #4
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	f107 0308 	add.w	r3, r7, #8
 8009fb2:	3303      	adds	r3, #3
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	f107 0308 	add.w	r3, r7, #8
 8009fba:	3302      	adds	r3, #2
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	490b      	ldr	r1, [pc, #44]	; (8009ff0 <AT_DevEUI_set+0x74>)
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f016 fad8 	bl	8020578 <tiny_sscanf>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b08      	cmp	r3, #8
 8009fcc:	d001      	beq.n	8009fd2 <AT_DevEUI_set+0x56>
                  &devEui[0], &devEui[1], &devEui[2], &devEui[3],
                  &devEui[4], &devEui[5], &devEui[6], &devEui[7]) != 8)
  {
    return AT_PARAM_ERROR;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	e00a      	b.n	8009fe8 <AT_DevEUI_set+0x6c>
  }

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerSetDevEUI(devEui))
 8009fd2:	f107 0308 	add.w	r3, r7, #8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f006 f83a 	bl	8010050 <LmHandlerSetDevEUI>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <AT_DevEUI_set+0x6a>
  {
    return AT_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e000      	b.n	8009fe8 <AT_DevEUI_set+0x6c>
  }

  return AT_OK;
 8009fe6:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DevEUI_set_2 */

  /* USER CODE END AT_DevEUI_set_2 */
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	08020f80 	.word	0x08020f80

08009ff4 <AT_NetworkID_get>:

ATEerror_t AT_NetworkID_get(const char *param)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_get_1 */

  /* USER CODE END AT_NetworkID_get_1 */
  uint32_t networkId;
  if (LmHandlerGetNetworkID(&networkId) != LORAMAC_HANDLER_SUCCESS)
 8009ffc:	f107 030c 	add.w	r3, r7, #12
 800a000:	4618      	mov	r0, r3
 800a002:	f006 f872 	bl	80100ea <LmHandlerGetNetworkID>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <AT_NetworkID_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a00c:	2302      	movs	r3, #2
 800a00e:	e004      	b.n	800a01a <AT_NetworkID_get+0x26>
  }

  print_d(networkId);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fa04 	bl	800b420 <print_d>
  return AT_OK;
 800a018:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_get_2 */

  /* USER CODE END AT_NetworkID_get_2 */
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <AT_NetworkID_set>:

ATEerror_t AT_NetworkID_set(const char *param)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_NetworkID_set_1 */

  /* USER CODE END AT_NetworkID_set_1 */
  uint32_t networkId;
  if (tiny_sscanf(param, "%u", &networkId) != 1)
 800a02c:	f107 030c 	add.w	r3, r7, #12
 800a030:	461a      	mov	r2, r3
 800a032:	490b      	ldr	r1, [pc, #44]	; (800a060 <AT_NetworkID_set+0x3c>)
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f016 fa9f 	bl	8020578 <tiny_sscanf>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d001      	beq.n	800a044 <AT_NetworkID_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a040:	2302      	movs	r3, #2
 800a042:	e009      	b.n	800a058 <AT_NetworkID_set+0x34>
  }

  if (networkId > 127)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2b7f      	cmp	r3, #127	; 0x7f
 800a048:	d901      	bls.n	800a04e <AT_NetworkID_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a04a:	2302      	movs	r3, #2
 800a04c:	e004      	b.n	800a058 <AT_NetworkID_set+0x34>
  }

  LmHandlerSetNetworkID(networkId);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	4618      	mov	r0, r3
 800a052:	f006 f869 	bl	8010128 <LmHandlerSetNetworkID>
  return AT_OK;
 800a056:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_NetworkID_set_2 */

  /* USER CODE END AT_NetworkID_set_2 */
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	08020ee4 	.word	0x08020ee4

0800a064 <AT_Join>:

/* --------------- LoRaWAN join and send data commands --------------- */
ATEerror_t AT_Join(const char *param)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Join_1 */

  /* USER CODE END AT_Join_1 */
  switch (param[0])
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b30      	cmp	r3, #48	; 0x30
 800a072:	d002      	beq.n	800a07a <AT_Join+0x16>
 800a074:	2b31      	cmp	r3, #49	; 0x31
 800a076:	d004      	beq.n	800a082 <AT_Join+0x1e>
 800a078:	e007      	b.n	800a08a <AT_Join+0x26>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800a07a:	2001      	movs	r0, #1
 800a07c:	f005 fad0 	bl	800f620 <LmHandlerJoin>
      break;
 800a080:	e005      	b.n	800a08e <AT_Join+0x2a>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 800a082:	2002      	movs	r0, #2
 800a084:	f005 facc 	bl	800f620 <LmHandlerJoin>
      break;
 800a088:	e001      	b.n	800a08e <AT_Join+0x2a>
    default:
      return AT_PARAM_ERROR;
 800a08a:	2302      	movs	r3, #2
 800a08c:	e000      	b.n	800a090 <AT_Join+0x2c>
  }

  return AT_OK;
 800a08e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Join_2 */

  /* USER CODE END AT_Join_2 */
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <AT_Link_Check>:

ATEerror_t AT_Link_Check(const char *param)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Link_Check_1 */

  /* USER CODE END AT_Link_Check_1 */
  if (LmHandlerLinkCheckReq() != LORAMAC_HANDLER_SUCCESS)
 800a0a0:	f005 fc0a 	bl	800f8b8 <LmHandlerLinkCheckReq>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <AT_Link_Check+0x16>
  {
    return AT_PARAM_ERROR;
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e000      	b.n	800a0b0 <AT_Link_Check+0x18>
  }

  return AT_OK;
 800a0ae:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Link_Check_2 */

  /* USER CODE END AT_Link_Check_2 */
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <AT_Send>:

ATEerror_t AT_Send(const char *param)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Send_1 */

  /* USER CODE END AT_Send_1 */
  const char *buf = param;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t bufSize = strlen(param);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f7f6 f85b 	bl	8000180 <strlen>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t appPort;
  LmHandlerMsgTypes_t isTxConfirmed;
  unsigned size = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	61fb      	str	r3, [r7, #28]
  char hex[3] = {0, 0, 0};
 800a0d2:	4a7b      	ldr	r2, [pc, #492]	; (800a2c0 <AT_Send+0x208>)
 800a0d4:	f107 0310 	add.w	r3, r7, #16
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	4611      	mov	r1, r2
 800a0dc:	8019      	strh	r1, [r3, #0]
 800a0de:	3302      	adds	r3, #2
 800a0e0:	0c12      	lsrs	r2, r2, #16
 800a0e2:	701a      	strb	r2, [r3, #0]
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	60fb      	str	r3, [r7, #12]
  LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	76bb      	strb	r3, [r7, #26]
  ATEerror_t status = AT_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	76fb      	strb	r3, [r7, #27]

  /* read and set the application port */
  if (1 != tiny_sscanf(buf, "%u:", &appPort))
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	4973      	ldr	r1, [pc, #460]	; (800a2c4 <AT_Send+0x20c>)
 800a0f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0fa:	f016 fa3d 	bl	8020578 <tiny_sscanf>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b01      	cmp	r3, #1
 800a102:	d00d      	beq.n	800a120 <AT_Send+0x68>
  {
    AT_PRINTF("AT+SEND without the application port\r\n");
 800a104:	4b70      	ldr	r3, [pc, #448]	; (800a2c8 <AT_Send+0x210>)
 800a106:	2200      	movs	r2, #0
 800a108:	2100      	movs	r1, #0
 800a10a:	2000      	movs	r0, #0
 800a10c:	f014 fbae 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a110:	2302      	movs	r3, #2
 800a112:	e0d0      	b.n	800a2b6 <AT_Send+0x1fe>
  }

  /* skip the application port */
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
  {
    buf ++;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	3301      	adds	r3, #1
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a11a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a11c:	3b01      	subs	r3, #1
 800a11e:	847b      	strh	r3, [r7, #34]	; 0x22
  while (('0' <= buf[0]) && (buf[0] <= '9') && bufSize > 1)
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b2f      	cmp	r3, #47	; 0x2f
 800a126:	d906      	bls.n	800a136 <AT_Send+0x7e>
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b39      	cmp	r3, #57	; 0x39
 800a12e:	d802      	bhi.n	800a136 <AT_Send+0x7e>
 800a130:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a132:	2b01      	cmp	r3, #1
 800a134:	d8ee      	bhi.n	800a114 <AT_Send+0x5c>
  };

  if ((bufSize == 0) || (':' != buf[0]))
 800a136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <AT_Send+0x8c>
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b3a      	cmp	r3, #58	; 0x3a
 800a142:	d007      	beq.n	800a154 <AT_Send+0x9c>
  {
    AT_PRINTF("AT+SEND missing : character after app port\r\n");
 800a144:	4b61      	ldr	r3, [pc, #388]	; (800a2cc <AT_Send+0x214>)
 800a146:	2200      	movs	r2, #0
 800a148:	2100      	movs	r1, #0
 800a14a:	2000      	movs	r0, #0
 800a14c:	f014 fb8e 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a150:	2302      	movs	r3, #2
 800a152:	e0b0      	b.n	800a2b6 <AT_Send+0x1fe>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	3301      	adds	r3, #1
 800a158:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a15a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a15c:	3b01      	subs	r3, #1
 800a15e:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  switch (buf[0])
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b30      	cmp	r3, #48	; 0x30
 800a166:	d002      	beq.n	800a16e <AT_Send+0xb6>
 800a168:	2b31      	cmp	r3, #49	; 0x31
 800a16a:	d004      	beq.n	800a176 <AT_Send+0xbe>
 800a16c:	e007      	b.n	800a17e <AT_Send+0xc6>
  {
    case '0':
      isTxConfirmed = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800a16e:	2300      	movs	r3, #0
 800a170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800a174:	e00b      	b.n	800a18e <AT_Send+0xd6>
    case '1':
      isTxConfirmed = LORAMAC_HANDLER_CONFIRMED_MSG;
 800a176:	2301      	movs	r3, #1
 800a178:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      break;
 800a17c:	e007      	b.n	800a18e <AT_Send+0xd6>
    default:
      AT_PRINTF("AT+SEND without the acknowledge flag\r\n");
 800a17e:	4b54      	ldr	r3, [pc, #336]	; (800a2d0 <AT_Send+0x218>)
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	2000      	movs	r0, #0
 800a186:	f014 fb71 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      return AT_PARAM_ERROR;
 800a18a:	2302      	movs	r3, #2
 800a18c:	e093      	b.n	800a2b6 <AT_Send+0x1fe>
  }

  if (bufSize > 0)
 800a18e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <AT_Send+0xe8>
  {
    /* skip the acknowledge flag */
    buf ++;
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	3301      	adds	r3, #1
 800a198:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a19a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a19c:	3b01      	subs	r3, #1
 800a19e:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  if ((bufSize == 0) || (':' != buf[0]))
 800a1a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <AT_Send+0xf6>
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b3a      	cmp	r3, #58	; 0x3a
 800a1ac:	d007      	beq.n	800a1be <AT_Send+0x106>
  {
    AT_PRINTF("AT+SEND missing : character after ack flag\r\n");
 800a1ae:	4b49      	ldr	r3, [pc, #292]	; (800a2d4 <AT_Send+0x21c>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	f014 fb59 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800a1ba:	2302      	movs	r3, #2
 800a1bc:	e07b      	b.n	800a2b6 <AT_Send+0x1fe>
  }
  else
  {
    /* skip the char ':' */
    buf ++;
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	627b      	str	r3, [r7, #36]	; 0x24
    bufSize --;
 800a1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a1c6:	3b01      	subs	r3, #1
 800a1c8:	847b      	strh	r3, [r7, #34]	; 0x22
  }

  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 800a1ca:	e021      	b.n	800a210 <AT_Send+0x158>
  {
    hex[0] = buf[size * 2];
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d2:	4413      	add	r3, r2
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	743b      	strb	r3, [r7, #16]
    hex[1] = buf[size * 2 + 1];
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	3301      	adds	r3, #1
 800a1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e0:	4413      	add	r3, r2
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	747b      	strb	r3, [r7, #17]
    if (tiny_sscanf(hex, "%hhx", &AppData.Buffer[size]) != 1)
 800a1e6:	4b3c      	ldr	r3, [pc, #240]	; (800a2d8 <AT_Send+0x220>)
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	441a      	add	r2, r3
 800a1ee:	f107 0310 	add.w	r3, r7, #16
 800a1f2:	493a      	ldr	r1, [pc, #232]	; (800a2dc <AT_Send+0x224>)
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f016 f9bf 	bl	8020578 <tiny_sscanf>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d001      	beq.n	800a204 <AT_Send+0x14c>
    {
      return AT_PARAM_ERROR;
 800a200:	2302      	movs	r3, #2
 800a202:	e058      	b.n	800a2b6 <AT_Send+0x1fe>
    }
    size++;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	3301      	adds	r3, #1
 800a208:	61fb      	str	r3, [r7, #28]
    bufSize -= 2;
 800a20a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a20c:	3b02      	subs	r3, #2
 800a20e:	847b      	strh	r3, [r7, #34]	; 0x22
  while ((size < LORAWAN_APP_DATA_BUFFER_MAX_SIZE) && (bufSize > 1))
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2bf1      	cmp	r3, #241	; 0xf1
 800a214:	d802      	bhi.n	800a21c <AT_Send+0x164>
 800a216:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d8d7      	bhi.n	800a1cc <AT_Send+0x114>
  }
  if (bufSize != 0)
 800a21c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <AT_Send+0x16e>
  {
    return AT_PARAM_ERROR;
 800a222:	2302      	movs	r3, #2
 800a224:	e047      	b.n	800a2b6 <AT_Send+0x1fe>
  }

  AppData.BufferSize = size;
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <AT_Send+0x220>)
 800a22c:	705a      	strb	r2, [r3, #1]
  AppData.Port = appPort;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	b2da      	uxtb	r2, r3
 800a232:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <AT_Send+0x220>)
 800a234:	701a      	strb	r2, [r3, #0]

  lmhStatus = LmHandlerSend(&AppData, isTxConfirmed, &nextTxIn, false);
 800a236:	f107 020c 	add.w	r2, r7, #12
 800a23a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800a23e:	2300      	movs	r3, #0
 800a240:	4825      	ldr	r0, [pc, #148]	; (800a2d8 <AT_Send+0x220>)
 800a242:	f005 fa63 	bl	800f70c <LmHandlerSend>
 800a246:	4603      	mov	r3, r0
 800a248:	76bb      	strb	r3, [r7, #26]

  switch (lmhStatus)
 800a24a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a24e:	3306      	adds	r3, #6
 800a250:	2b06      	cmp	r3, #6
 800a252:	d82c      	bhi.n	800a2ae <AT_Send+0x1f6>
 800a254:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <AT_Send+0x1a4>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a2a3 	.word	0x0800a2a3
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a289 	.word	0x0800a289
 800a268:	0800a29d 	.word	0x0800a29d
 800a26c:	0800a289 	.word	0x0800a289
 800a270:	0800a2af 	.word	0x0800a2af
 800a274:	0800a279 	.word	0x0800a279
  {
    case LORAMAC_HANDLER_SUCCESS:
      status = (nextTxIn > 0) ? AT_DUTYCYCLE_RESTRICTED : AT_OK;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <AT_Send+0x1ca>
 800a27e:	2308      	movs	r3, #8
 800a280:	e000      	b.n	800a284 <AT_Send+0x1cc>
 800a282:	2300      	movs	r3, #0
 800a284:	76fb      	strb	r3, [r7, #27]
      break;
 800a286:	e015      	b.n	800a2b4 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_BUSY_ERROR:
    case LORAMAC_HANDLER_COMPLIANCE_RUNNING:
      status = (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET) ? AT_NO_NET_JOINED : AT_BUSY_ERROR;
 800a288:	f005 fa24 	bl	800f6d4 <LmHandlerJoinStatus>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d001      	beq.n	800a296 <AT_Send+0x1de>
 800a292:	2305      	movs	r3, #5
 800a294:	e000      	b.n	800a298 <AT_Send+0x1e0>
 800a296:	2303      	movs	r3, #3
 800a298:	76fb      	strb	r3, [r7, #27]
      break;
 800a29a:	e00b      	b.n	800a2b4 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_NO_NETWORK_JOINED:
      status = AT_NO_NET_JOINED;
 800a29c:	2305      	movs	r3, #5
 800a29e:	76fb      	strb	r3, [r7, #27]
      break;
 800a2a0:	e008      	b.n	800a2b4 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED:
      status = AT_DUTYCYCLE_RESTRICTED;
 800a2a2:	2308      	movs	r3, #8
 800a2a4:	76fb      	strb	r3, [r7, #27]
      break;
 800a2a6:	e005      	b.n	800a2b4 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_CRYPTO_ERROR:
      status = AT_CRYPTO_ERROR;
 800a2a8:	2309      	movs	r3, #9
 800a2aa:	76fb      	strb	r3, [r7, #27]
      break;
 800a2ac:	e002      	b.n	800a2b4 <AT_Send+0x1fc>
    case LORAMAC_HANDLER_ERROR:
    default:
      status = AT_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	76fb      	strb	r3, [r7, #27]
      break;
 800a2b2:	bf00      	nop
  }

  return status;
 800a2b4:	7efb      	ldrb	r3, [r7, #27]
  /* USER CODE BEGIN AT_Send_2 */

  /* USER CODE END AT_Send_2 */
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3728      	adds	r7, #40	; 0x28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08021064 	.word	0x08021064
 800a2c4:	08020fa8 	.word	0x08020fa8
 800a2c8:	08020fac 	.word	0x08020fac
 800a2cc:	08020fd4 	.word	0x08020fd4
 800a2d0:	08021004 	.word	0x08021004
 800a2d4:	0802102c 	.word	0x0802102c
 800a2d8:	20000054 	.word	0x20000054
 800a2dc:	0802105c 	.word	0x0802105c

0800a2e0 <AT_version_get>:

/* --------------- LoRaWAN network management commands --------------- */
ATEerror_t AT_version_get(const char *param)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af04      	add	r7, sp, #16
 800a2e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_version_get_1 */

  /* USER CODE END AT_version_get_1 */
  /* Get LoRa APP version*/
  AT_PRINTF("APP_VERSION:        V%X.%X.%X\r\n",
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9302      	str	r3, [sp, #8]
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	9301      	str	r3, [sp, #4]
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4b11      	ldr	r3, [pc, #68]	; (800a33c <AT_version_get+0x5c>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f014 fab6 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORA_APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW LoraWAN info */
  AT_PRINTF("MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800a300:	2300      	movs	r3, #0
 800a302:	9302      	str	r3, [sp, #8]
 800a304:	2303      	movs	r3, #3
 800a306:	9301      	str	r3, [sp, #4]
 800a308:	2302      	movs	r3, #2
 800a30a:	9300      	str	r3, [sp, #0]
 800a30c:	4b0c      	ldr	r3, [pc, #48]	; (800a340 <AT_version_get+0x60>)
 800a30e:	2200      	movs	r2, #0
 800a310:	2100      	movs	r1, #0
 800a312:	2000      	movs	r0, #0
 800a314:	f014 faaa 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__LORAWAN_VERSION >> __APP_VERSION_SUB2_SHIFT));

  /* Get MW SubGhz_Phy info */
  AT_PRINTF("MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800a318:	2300      	movs	r3, #0
 800a31a:	9302      	str	r3, [sp, #8]
 800a31c:	2301      	movs	r3, #1
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	2301      	movs	r3, #1
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	4b07      	ldr	r3, [pc, #28]	; (800a344 <AT_version_get+0x64>)
 800a326:	2200      	movs	r2, #0
 800a328:	2100      	movs	r1, #0
 800a32a:	2000      	movs	r0, #0
 800a32c:	f014 fa9e 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_MAIN_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB1_SHIFT),
            (uint8_t)(__SUBGHZ_PHY_VERSION >> __APP_VERSION_SUB2_SHIFT));

  return AT_OK;
 800a330:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_version_get_2 */

  /* USER CODE END AT_version_get_2 */
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	08021068 	.word	0x08021068
 800a340:	08021088 	.word	0x08021088
 800a344:	080210a8 	.word	0x080210a8

0800a348 <AT_ADR_get>:

ATEerror_t AT_ADR_get(const char *param)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_get_1 */

  /* USER CODE END AT_ADR_get_1 */
  bool adrEnable;
  if (LmHandlerGetAdrEnable(&adrEnable) != LORAMAC_HANDLER_SUCCESS)
 800a350:	f107 030f 	add.w	r3, r7, #15
 800a354:	4618      	mov	r0, r3
 800a356:	f005 ff61 	bl	801021c <LmHandlerGetAdrEnable>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <AT_ADR_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a360:	2302      	movs	r3, #2
 800a362:	e004      	b.n	800a36e <AT_ADR_get+0x26>
  }

  print_d(adrEnable);
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	4618      	mov	r0, r3
 800a368:	f001 f85a 	bl	800b420 <print_d>
  return AT_OK;
 800a36c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_ADR_get_2 */

  /* USER CODE END AT_ADR_get_2 */
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <AT_ADR_set>:

ATEerror_t AT_ADR_set(const char *param)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_ADR_set_1 */

  /* USER CODE END AT_ADR_set_1 */
  switch (param[0])
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	3b30      	subs	r3, #48	; 0x30
 800a384:	2b01      	cmp	r3, #1
 800a386:	d80d      	bhi.n	800a3a4 <AT_ADR_set+0x2e>
  {
    case '0':
    case '1':
      LmHandlerSetAdrEnable(param[0] - '0');
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	3b30      	subs	r3, #48	; 0x30
 800a38e:	2b00      	cmp	r3, #0
 800a390:	bf14      	ite	ne
 800a392:	2301      	movne	r3, #1
 800a394:	2300      	moveq	r3, #0
 800a396:	b2db      	uxtb	r3, r3
 800a398:	4618      	mov	r0, r3
 800a39a:	f005 ff55 	bl	8010248 <LmHandlerSetAdrEnable>
      break;
 800a39e:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	e000      	b.n	800a3a6 <AT_ADR_set+0x30>
      return AT_PARAM_ERROR;
 800a3a4:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_ADR_set_2 */

  /* USER CODE END AT_ADR_set_2 */
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <AT_DataRate_get>:

ATEerror_t AT_DataRate_get(const char *param)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_get_1 */

  /* USER CODE END AT_DataRate_get_1 */
  int8_t txDatarate;
  if (LmHandlerGetTxDatarate(&txDatarate) != LORAMAC_HANDLER_SUCCESS)
 800a3b6:	f107 030f 	add.w	r3, r7, #15
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f005 fb5a 	bl	800fa74 <LmHandlerGetTxDatarate>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <AT_DataRate_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e005      	b.n	800a3d6 <AT_DataRate_get+0x28>
  }

  print_d(txDatarate);
 800a3ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f001 f826 	bl	800b420 <print_d>
  return AT_OK;
 800a3d4:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_get_2 */

  /* USER CODE END AT_DataRate_get_2 */
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3710      	adds	r7, #16
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
	...

0800a3e0 <AT_DataRate_set>:

ATEerror_t AT_DataRate_set(const char *param)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DataRate_set_1 */

  /* USER CODE END AT_DataRate_set_1 */
  int8_t datarate;

  if (tiny_sscanf(param, "%hhu", &datarate) != 1)
 800a3e8:	f107 030f 	add.w	r3, r7, #15
 800a3ec:	461a      	mov	r2, r3
 800a3ee:	4911      	ldr	r1, [pc, #68]	; (800a434 <AT_DataRate_set+0x54>)
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f016 f8c1 	bl	8020578 <tiny_sscanf>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	d001      	beq.n	800a400 <AT_DataRate_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	e014      	b.n	800a42a <AT_DataRate_set+0x4a>
  }
  if ((datarate < 0) || (datarate > 15))
 800a400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a404:	2b00      	cmp	r3, #0
 800a406:	db03      	blt.n	800a410 <AT_DataRate_set+0x30>
 800a408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a40c:	2b0f      	cmp	r3, #15
 800a40e:	dd01      	ble.n	800a414 <AT_DataRate_set+0x34>
  {
    return AT_PARAM_ERROR;
 800a410:	2302      	movs	r3, #2
 800a412:	e00a      	b.n	800a42a <AT_DataRate_set+0x4a>
  }

  if (LmHandlerSetTxDatarate(datarate) != LORAMAC_HANDLER_SUCCESS)
 800a414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a418:	4618      	mov	r0, r3
 800a41a:	f005 ff33 	bl	8010284 <LmHandlerSetTxDatarate>
 800a41e:	4603      	mov	r3, r0
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <AT_DataRate_set+0x48>
  {
    return AT_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <AT_DataRate_set+0x4a>
  }

  return AT_OK;
 800a428:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DataRate_set_2 */

  /* USER CODE END AT_DataRate_set_2 */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3710      	adds	r7, #16
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	080210c8 	.word	0x080210c8

0800a438 <AT_Region_get>:

ATEerror_t AT_Region_get(const char *param)
{
 800a438:	b5b0      	push	{r4, r5, r7, lr}
 800a43a:	b090      	sub	sp, #64	; 0x40
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_get_1 */

  /* USER CODE END AT_Region_get_1 */
  const char *regionStrings[] = { "AS923", "AU915", "CN470", "CN779", "EU433", "EU868", "KR920", "IN865", "US915", "RU864" };
 800a440:	4b17      	ldr	r3, [pc, #92]	; (800a4a0 <AT_Region_get+0x68>)
 800a442:	f107 0410 	add.w	r4, r7, #16
 800a446:	461d      	mov	r5, r3
 800a448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a44a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a44c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a44e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a450:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a454:	e884 0003 	stmia.w	r4, {r0, r1}
  LoRaMacRegion_t region;
  if (LmHandlerGetActiveRegion(&region) != LORAMAC_HANDLER_SUCCESS)
 800a458:	f107 030f 	add.w	r3, r7, #15
 800a45c:	4618      	mov	r0, r3
 800a45e:	f005 fb31 	bl	800fac4 <LmHandlerGetActiveRegion>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <AT_Region_get+0x34>
  {
    return AT_PARAM_ERROR;
 800a468:	2302      	movs	r3, #2
 800a46a:	e015      	b.n	800a498 <AT_Region_get+0x60>
  }

  if (region > LORAMAC_REGION_RU864)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d901      	bls.n	800a476 <AT_Region_get+0x3e>
  {
    return AT_PARAM_ERROR;
 800a472:	2302      	movs	r3, #2
 800a474:	e010      	b.n	800a498 <AT_Region_get+0x60>
  }

  AT_PRINTF("%d:%s\r\n", region, regionStrings[region]);
 800a476:	7bfb      	ldrb	r3, [r7, #15]
 800a478:	461a      	mov	r2, r3
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	3338      	adds	r3, #56	; 0x38
 800a480:	443b      	add	r3, r7
 800a482:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	9200      	str	r2, [sp, #0]
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <AT_Region_get+0x6c>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	2100      	movs	r1, #0
 800a490:	2000      	movs	r0, #0
 800a492:	f014 f9eb 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800a496:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_get_2 */

  /* USER CODE END AT_Region_get_2 */
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3738      	adds	r7, #56	; 0x38
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bdb0      	pop	{r4, r5, r7, pc}
 800a4a0:	080210d8 	.word	0x080210d8
 800a4a4:	080210d0 	.word	0x080210d0

0800a4a8 <AT_Region_set>:

ATEerror_t AT_Region_set(const char *param)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b084      	sub	sp, #16
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Region_set_1 */

  /* USER CODE END AT_Region_set_1 */
  LoRaMacRegion_t region;
  if (tiny_sscanf(param, "%hhu", &region) != 1)
 800a4b0:	f107 030f 	add.w	r3, r7, #15
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	490e      	ldr	r1, [pc, #56]	; (800a4f0 <AT_Region_set+0x48>)
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f016 f85d 	bl	8020578 <tiny_sscanf>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d001      	beq.n	800a4c8 <AT_Region_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	e00e      	b.n	800a4e6 <AT_Region_set+0x3e>
  }
  if (region > LORAMAC_REGION_RU864)
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ca:	2b09      	cmp	r3, #9
 800a4cc:	d901      	bls.n	800a4d2 <AT_Region_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	e009      	b.n	800a4e6 <AT_Region_set+0x3e>
  }

  if (LmHandlerSetActiveRegion(region) != LORAMAC_HANDLER_SUCCESS)
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f005 fe87 	bl	80101e8 <LmHandlerSetActiveRegion>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <AT_Region_set+0x3c>
  {
    return AT_PARAM_ERROR;
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e000      	b.n	800a4e6 <AT_Region_set+0x3e>
  }

  return AT_OK;
 800a4e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Region_set_2 */

  /* USER CODE END AT_Region_set_2 */
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	080210c8 	.word	0x080210c8

0800a4f4 <AT_DeviceClass_get>:

ATEerror_t AT_DeviceClass_get(const char *param)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af02      	add	r7, sp, #8
 800a4fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_get_1 */

  /* USER CODE END AT_DeviceClass_get_1 */
  DeviceClass_t currentClass;
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800a4fc:	f001 fabc 	bl	800ba78 <LoraInfo_GetPtr>
 800a500:	60f8      	str	r0, [r7, #12]
  if (loraInfo == NULL)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <AT_DeviceClass_get+0x18>
  {
    return AT_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	e053      	b.n	800a5b4 <AT_DeviceClass_get+0xc0>
  }

  if (LmHandlerGetCurrentClass(&currentClass) != LORAMAC_HANDLER_SUCCESS)
 800a50c:	f107 030b 	add.w	r3, r7, #11
 800a510:	4618      	mov	r0, r3
 800a512:	f005 fa8f 	bl	800fa34 <LmHandlerGetCurrentClass>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <AT_DeviceClass_get+0x2c>
  {
    return AT_PARAM_ERROR;
 800a51c:	2302      	movs	r3, #2
 800a51e:	e049      	b.n	800a5b4 <AT_DeviceClass_get+0xc0>
  }

  if ((loraInfo->ClassB == 1) && (ClassBEnableRequest == true) && (currentClass == CLASS_A))
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	689b      	ldr	r3, [r3, #8]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d13b      	bne.n	800a5a0 <AT_DeviceClass_get+0xac>
 800a528:	4b24      	ldr	r3, [pc, #144]	; (800a5bc <AT_DeviceClass_get+0xc8>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d037      	beq.n	800a5a0 <AT_DeviceClass_get+0xac>
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d134      	bne.n	800a5a0 <AT_DeviceClass_get+0xac>
  {
    BeaconState_t beaconState;

    if (LmHandlerGetBeaconState(&beaconState) != LORAMAC_HANDLER_SUCCESS)
 800a536:	f107 030a 	add.w	r3, r7, #10
 800a53a:	4618      	mov	r0, r3
 800a53c:	f006 f85c 	bl	80105f8 <LmHandlerGetBeaconState>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d001      	beq.n	800a54a <AT_DeviceClass_get+0x56>
    {
      return AT_PARAM_ERROR;
 800a546:	2302      	movs	r3, #2
 800a548:	e034      	b.n	800a5b4 <AT_DeviceClass_get+0xc0>
    }

    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 800a54a:	7abb      	ldrb	r3, [r7, #10]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d005      	beq.n	800a55c <AT_DeviceClass_get+0x68>
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 800a550:	7abb      	ldrb	r3, [r7, #10]
    if ((beaconState == BEACON_STATE_ACQUISITION) ||
 800a552:	2b01      	cmp	r3, #1
 800a554:	d002      	beq.n	800a55c <AT_DeviceClass_get+0x68>
        (beaconState == BEACON_STATE_REACQUISITION)) /*Beacon_Searching on Class B request*/
 800a556:	7abb      	ldrb	r3, [r7, #10]
        (beaconState == BEACON_STATE_ACQUISITION_BY_TIME) ||
 800a558:	2b04      	cmp	r3, #4
 800a55a:	d106      	bne.n	800a56a <AT_DeviceClass_get+0x76>
    {
      AT_PRINTF("B,S0\r\n");
 800a55c:	4b18      	ldr	r3, [pc, #96]	; (800a5c0 <AT_DeviceClass_get+0xcc>)
 800a55e:	2200      	movs	r2, #0
 800a560:	2100      	movs	r1, #0
 800a562:	2000      	movs	r0, #0
 800a564:	f014 f982 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800a568:	e019      	b.n	800a59e <AT_DeviceClass_get+0xaa>
    }
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800a56a:	7abb      	ldrb	r3, [r7, #10]
 800a56c:	2b05      	cmp	r3, #5
 800a56e:	d008      	beq.n	800a582 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_IDLE)   ||
 800a570:	7abb      	ldrb	r3, [r7, #10]
    else if ((beaconState == BEACON_STATE_LOCKED) || /*Beacon locked on Gateway*/
 800a572:	2b07      	cmp	r3, #7
 800a574:	d005      	beq.n	800a582 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_GUARD)  ||
 800a576:	7abb      	ldrb	r3, [r7, #10]
             (beaconState == BEACON_STATE_IDLE)   ||
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d002      	beq.n	800a582 <AT_DeviceClass_get+0x8e>
             (beaconState == BEACON_STATE_RX))
 800a57c:	7abb      	ldrb	r3, [r7, #10]
             (beaconState == BEACON_STATE_GUARD)  ||
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d106      	bne.n	800a590 <AT_DeviceClass_get+0x9c>
    {
      AT_PRINTF("B,S1\r\n");
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <AT_DeviceClass_get+0xd0>)
 800a584:	2200      	movs	r2, #0
 800a586:	2100      	movs	r1, #0
 800a588:	2000      	movs	r0, #0
 800a58a:	f014 f96f 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800a58e:	e006      	b.n	800a59e <AT_DeviceClass_get+0xaa>
    }
    else
    {
      AT_PRINTF("B,S2\r\n");
 800a590:	4b0d      	ldr	r3, [pc, #52]	; (800a5c8 <AT_DeviceClass_get+0xd4>)
 800a592:	2200      	movs	r2, #0
 800a594:	2100      	movs	r1, #0
 800a596:	2000      	movs	r0, #0
 800a598:	f014 f968 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  {
 800a59c:	e009      	b.n	800a5b2 <AT_DeviceClass_get+0xbe>
 800a59e:	e008      	b.n	800a5b2 <AT_DeviceClass_get+0xbe>
    }
  }
  else /* we are now either in Class B enable or Class C enable*/
  {
    AT_PRINTF("%c\r\n", 'A' + currentClass);
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	3341      	adds	r3, #65	; 0x41
 800a5a4:	9300      	str	r3, [sp, #0]
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <AT_DeviceClass_get+0xd8>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	2000      	movs	r0, #0
 800a5ae:	f014 f95d 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }

  return AT_OK;
 800a5b2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_get_2 */

  /* USER CODE END AT_DeviceClass_get_2 */
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3710      	adds	r7, #16
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20000c78 	.word	0x20000c78
 800a5c0:	08021100 	.word	0x08021100
 800a5c4:	08021108 	.word	0x08021108
 800a5c8:	08021110 	.word	0x08021110
 800a5cc:	08021118 	.word	0x08021118

0800a5d0 <AT_DeviceClass_set>:

ATEerror_t AT_DeviceClass_set(const char *param)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DeviceClass_set_1 */

  /* USER CODE END AT_DeviceClass_set_1 */
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	73fb      	strb	r3, [r7, #15]
  LoraInfo_t *loraInfo = LoraInfo_GetPtr();
 800a5dc:	f001 fa4c 	bl	800ba78 <LoraInfo_GetPtr>
 800a5e0:	60b8      	str	r0, [r7, #8]
  if (loraInfo == NULL)
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d101      	bne.n	800a5ec <AT_DeviceClass_set+0x1c>
  {
    return AT_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e03c      	b.n	800a666 <AT_DeviceClass_set+0x96>
  }

  switch (param[0])
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b43      	cmp	r3, #67	; 0x43
 800a5f2:	d022      	beq.n	800a63a <AT_DeviceClass_set+0x6a>
 800a5f4:	2b43      	cmp	r3, #67	; 0x43
 800a5f6:	dc26      	bgt.n	800a646 <AT_DeviceClass_set+0x76>
 800a5f8:	2b41      	cmp	r3, #65	; 0x41
 800a5fa:	d002      	beq.n	800a602 <AT_DeviceClass_set+0x32>
 800a5fc:	2b42      	cmp	r3, #66	; 0x42
 800a5fe:	d00d      	beq.n	800a61c <AT_DeviceClass_set+0x4c>
 800a600:	e021      	b.n	800a646 <AT_DeviceClass_set+0x76>
  {
    case 'A':
      if (loraInfo->ClassB == 1)
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	2b01      	cmp	r3, #1
 800a608:	d102      	bne.n	800a610 <AT_DeviceClass_set+0x40>
      {
        ClassBEnableRequest = false;
 800a60a:	4b19      	ldr	r3, [pc, #100]	; (800a670 <AT_DeviceClass_set+0xa0>)
 800a60c:	2200      	movs	r2, #0
 800a60e:	701a      	strb	r2, [r3, #0]
      }
      errorStatus = LmHandlerRequestClass(CLASS_A);
 800a610:	2000      	movs	r0, #0
 800a612:	f005 f97d 	bl	800f910 <LmHandlerRequestClass>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]
      break;
 800a61a:	e016      	b.n	800a64a <AT_DeviceClass_set+0x7a>
    case 'B':
      if (loraInfo->ClassB == 1)
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	2b01      	cmp	r3, #1
 800a622:	d108      	bne.n	800a636 <AT_DeviceClass_set+0x66>
      {
        ClassBEnableRequest = true;
 800a624:	4b12      	ldr	r3, [pc, #72]	; (800a670 <AT_DeviceClass_set+0xa0>)
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
        errorStatus = LmHandlerRequestClass(CLASS_B);  /*Class B AT cmd switch Class B not supported cf.[UM2073]*/
 800a62a:	2001      	movs	r0, #1
 800a62c:	f005 f970 	bl	800f910 <LmHandlerRequestClass>
 800a630:	4603      	mov	r3, r0
 800a632:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        return AT_NO_CLASS_B_ENABLE;
      }
      break;
 800a634:	e009      	b.n	800a64a <AT_DeviceClass_set+0x7a>
        return AT_NO_CLASS_B_ENABLE;
 800a636:	2307      	movs	r3, #7
 800a638:	e015      	b.n	800a666 <AT_DeviceClass_set+0x96>
    case 'C':
      errorStatus = LmHandlerRequestClass(CLASS_C);
 800a63a:	2002      	movs	r0, #2
 800a63c:	f005 f968 	bl	800f910 <LmHandlerRequestClass>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
      break;
 800a644:	e001      	b.n	800a64a <AT_DeviceClass_set+0x7a>
    default:
      return AT_PARAM_ERROR;
 800a646:	2302      	movs	r3, #2
 800a648:	e00d      	b.n	800a666 <AT_DeviceClass_set+0x96>
  }

  if (errorStatus == LORAMAC_HANDLER_NO_NETWORK_JOINED)
 800a64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a64e:	f113 0f03 	cmn.w	r3, #3
 800a652:	d101      	bne.n	800a658 <AT_DeviceClass_set+0x88>
  {
    return AT_NO_NET_JOINED;
 800a654:	2305      	movs	r3, #5
 800a656:	e006      	b.n	800a666 <AT_DeviceClass_set+0x96>
  }
  else if (errorStatus != LORAMAC_HANDLER_SUCCESS)
 800a658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <AT_DeviceClass_set+0x94>
  {
    return AT_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	e000      	b.n	800a666 <AT_DeviceClass_set+0x96>
  }

  return AT_OK;
 800a664:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DeviceClass_set_2 */

  /* USER CODE END AT_DeviceClass_set_2 */
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20000c78 	.word	0x20000c78

0800a674 <AT_DutyCycle_get>:

ATEerror_t AT_DutyCycle_get(const char *param)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_get_1 */

  /* USER CODE END AT_DutyCycle_get_1 */
  bool dutyCycleEnable;
  if (LmHandlerGetDutyCycleEnable(&dutyCycleEnable) != LORAMAC_HANDLER_SUCCESS)
 800a67c:	f107 030f 	add.w	r3, r7, #15
 800a680:	4618      	mov	r0, r3
 800a682:	f005 fe25 	bl	80102d0 <LmHandlerGetDutyCycleEnable>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <AT_DutyCycle_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a68c:	2302      	movs	r3, #2
 800a68e:	e004      	b.n	800a69a <AT_DutyCycle_get+0x26>
  }

  print_d(dutyCycleEnable);
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fec4 	bl	800b420 <print_d>
  return AT_OK;
 800a698:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_DutyCycle_get_2 */

  /* USER CODE END AT_DutyCycle_get_2 */
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <AT_DutyCycle_set>:

ATEerror_t AT_DutyCycle_set(const char *param)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b082      	sub	sp, #8
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_DutyCycle_set_1 */

  /* USER CODE END AT_DutyCycle_set_1 */
  switch (param[0])
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	3b30      	subs	r3, #48	; 0x30
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d80d      	bhi.n	800a6d0 <AT_DutyCycle_set+0x2e>
  {
    case '0':
    case '1':
      LmHandlerSetDutyCycleEnable(param[0] - '0');
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	3b30      	subs	r3, #48	; 0x30
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	bf14      	ite	ne
 800a6be:	2301      	movne	r3, #1
 800a6c0:	2300      	moveq	r3, #0
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f005 fe19 	bl	80102fc <LmHandlerSetDutyCycleEnable>
      break;
 800a6ca:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  return AT_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	e000      	b.n	800a6d2 <AT_DutyCycle_set+0x30>
      return AT_PARAM_ERROR;
 800a6d0:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_DutyCycle_set_2 */

  /* USER CODE END AT_DutyCycle_set_2 */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <AT_JoinAcceptDelay1_get>:

ATEerror_t AT_JoinAcceptDelay1_get(const char *param)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_1 */

  /* USER CODE END AT_JoinAcceptDelay1_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a6e2:	f107 030c 	add.w	r3, r7, #12
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f005 fe9c 	bl	8010424 <LmHandlerGetJoinRx1Delay>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <AT_JoinAcceptDelay1_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e004      	b.n	800a700 <AT_JoinAcceptDelay1_get+0x26>
  }

  print_u(rxDelay);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fea3 	bl	800b444 <print_u>
  return AT_OK;
 800a6fe:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_get_2 */

  /* USER CODE END AT_JoinAcceptDelay1_get_2 */
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <AT_JoinAcceptDelay1_set>:

ATEerror_t AT_JoinAcceptDelay1_set(const char *param)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_1 */

  /* USER CODE END AT_JoinAcceptDelay1_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a710:	f107 030c 	add.w	r3, r7, #12
 800a714:	461a      	mov	r2, r3
 800a716:	490b      	ldr	r1, [pc, #44]	; (800a744 <AT_JoinAcceptDelay1_set+0x3c>)
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f015 ff2d 	bl	8020578 <tiny_sscanf>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b01      	cmp	r3, #1
 800a722:	d001      	beq.n	800a728 <AT_JoinAcceptDelay1_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a724:	2302      	movs	r3, #2
 800a726:	e009      	b.n	800a73c <AT_JoinAcceptDelay1_set+0x34>
  }
  else if (LmHandlerSetJoinRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f005 ff1d 	bl	801056a <LmHandlerSetJoinRx1Delay>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <AT_JoinAcceptDelay1_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a736:	2302      	movs	r3, #2
 800a738:	e000      	b.n	800a73c <AT_JoinAcceptDelay1_set+0x34>
  }

  return AT_OK;
 800a73a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay1_set_2 */

  /* USER CODE END AT_JoinAcceptDelay1_set_2 */
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	08021120 	.word	0x08021120

0800a748 <AT_JoinAcceptDelay2_get>:

ATEerror_t AT_JoinAcceptDelay2_get(const char *param)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_1 */

  /* USER CODE END AT_JoinAcceptDelay2_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetJoinRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a750:	f107 030c 	add.w	r3, r7, #12
 800a754:	4618      	mov	r0, r3
 800a756:	f005 fe84 	bl	8010462 <LmHandlerGetJoinRx2Delay>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <AT_JoinAcceptDelay2_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a760:	2302      	movs	r3, #2
 800a762:	e004      	b.n	800a76e <AT_JoinAcceptDelay2_get+0x26>
  }

  print_u(rxDelay);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4618      	mov	r0, r3
 800a768:	f000 fe6c 	bl	800b444 <print_u>
  return AT_OK;
 800a76c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_get_2 */

  /* USER CODE END AT_JoinAcceptDelay2_get_2 */
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
	...

0800a778 <AT_JoinAcceptDelay2_set>:

ATEerror_t AT_JoinAcceptDelay2_set(const char *param)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_1 */

  /* USER CODE END AT_JoinAcceptDelay2_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a780:	f107 030c 	add.w	r3, r7, #12
 800a784:	461a      	mov	r2, r3
 800a786:	490b      	ldr	r1, [pc, #44]	; (800a7b4 <AT_JoinAcceptDelay2_set+0x3c>)
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f015 fef5 	bl	8020578 <tiny_sscanf>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b01      	cmp	r3, #1
 800a792:	d001      	beq.n	800a798 <AT_JoinAcceptDelay2_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a794:	2302      	movs	r3, #2
 800a796:	e009      	b.n	800a7ac <AT_JoinAcceptDelay2_set+0x34>
  }
  else if (LmHandlerSetJoinRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f005 fefd 	bl	801059a <LmHandlerSetJoinRx2Delay>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <AT_JoinAcceptDelay2_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e000      	b.n	800a7ac <AT_JoinAcceptDelay2_set+0x34>
  }

  return AT_OK;
 800a7aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_JoinAcceptDelay2_set_2 */

  /* USER CODE END AT_JoinAcceptDelay2_set_2 */
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3710      	adds	r7, #16
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	08021120 	.word	0x08021120

0800a7b8 <AT_Rx1Delay_get>:

ATEerror_t AT_Rx1Delay_get(const char *param)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_get_1 */

  /* USER CODE END AT_Rx1Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx1Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a7c0:	f107 030c 	add.w	r3, r7, #12
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f005 fdef 	bl	80103a8 <LmHandlerGetRx1Delay>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <AT_Rx1Delay_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e004      	b.n	800a7de <AT_Rx1Delay_get+0x26>
  }

  print_u(rxDelay);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f000 fe34 	bl	800b444 <print_u>
  return AT_OK;
 800a7dc:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_get_2 */

  /* USER CODE END AT_Rx1Delay_get_2 */
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
	...

0800a7e8 <AT_Rx1Delay_set>:

ATEerror_t AT_Rx1Delay_set(const char *param)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx1Delay_set_1 */

  /* USER CODE END AT_Rx1Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	490b      	ldr	r1, [pc, #44]	; (800a824 <AT_Rx1Delay_set+0x3c>)
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f015 febd 	bl	8020578 <tiny_sscanf>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b01      	cmp	r3, #1
 800a802:	d001      	beq.n	800a808 <AT_Rx1Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a804:	2302      	movs	r3, #2
 800a806:	e009      	b.n	800a81c <AT_Rx1Delay_set+0x34>
  }
  else if (LmHandlerSetRx1Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f005 fe7d 	bl	801050a <LmHandlerSetRx1Delay>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d001      	beq.n	800a81a <AT_Rx1Delay_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a816:	2302      	movs	r3, #2
 800a818:	e000      	b.n	800a81c <AT_Rx1Delay_set+0x34>
  }

  return AT_OK;
 800a81a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx1Delay_set_2 */

  /* USER CODE END AT_Rx1Delay_set_2 */
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	08021120 	.word	0x08021120

0800a828 <AT_Rx2Delay_get>:

ATEerror_t AT_Rx2Delay_get(const char *param)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_get_1 */

  /* USER CODE END AT_Rx2Delay_get_1 */
  uint32_t rxDelay;
  if (LmHandlerGetRx2Delay(&rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a830:	f107 030c 	add.w	r3, r7, #12
 800a834:	4618      	mov	r0, r3
 800a836:	f005 fdd6 	bl	80103e6 <LmHandlerGetRx2Delay>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d001      	beq.n	800a844 <AT_Rx2Delay_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a840:	2302      	movs	r3, #2
 800a842:	e004      	b.n	800a84e <AT_Rx2Delay_get+0x26>
  }

  print_u(rxDelay);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4618      	mov	r0, r3
 800a848:	f000 fdfc 	bl	800b444 <print_u>
  return AT_OK;
 800a84c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_get_2 */

  /* USER CODE END AT_Rx2Delay_get_2 */
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <AT_Rx2Delay_set>:

ATEerror_t AT_Rx2Delay_set(const char *param)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Delay_set_1 */

  /* USER CODE END AT_Rx2Delay_set_1 */
  uint32_t rxDelay;
  if (tiny_sscanf(param, "%lu", &rxDelay) != 1)
 800a860:	f107 030c 	add.w	r3, r7, #12
 800a864:	461a      	mov	r2, r3
 800a866:	490b      	ldr	r1, [pc, #44]	; (800a894 <AT_Rx2Delay_set+0x3c>)
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f015 fe85 	bl	8020578 <tiny_sscanf>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b01      	cmp	r3, #1
 800a872:	d001      	beq.n	800a878 <AT_Rx2Delay_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a874:	2302      	movs	r3, #2
 800a876:	e009      	b.n	800a88c <AT_Rx2Delay_set+0x34>
  }
  else if (LmHandlerSetRx2Delay(rxDelay) != LORAMAC_HANDLER_SUCCESS)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f005 fe5d 	bl	801053a <LmHandlerSetRx2Delay>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <AT_Rx2Delay_set+0x32>
  {
    return AT_PARAM_ERROR;
 800a886:	2302      	movs	r3, #2
 800a888:	e000      	b.n	800a88c <AT_Rx2Delay_set+0x34>
  }

  return AT_OK;
 800a88a:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Delay_set_2 */

  /* USER CODE END AT_Rx2Delay_set_2 */
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	08021120 	.word	0x08021120

0800a898 <AT_Rx2DataRate_get>:

ATEerror_t AT_Rx2DataRate_get(const char *param)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2DataRate_get_1 */

  /* USER CODE END AT_Rx2DataRate_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 800a8a0:	f107 0308 	add.w	r3, r7, #8
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f005 fd3d 	bl	8010324 <LmHandlerGetRX2Params>
  print_d(rx2Params.Datarate);
 800a8aa:	7b3b      	ldrb	r3, [r7, #12]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fdb7 	bl	800b420 <print_d>
  return AT_OK;
 800a8b2:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_get_2 */

  /* USER CODE END AT_Rx2DataRate_get_2 */
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <AT_Rx2DataRate_set>:

ATEerror_t AT_Rx2DataRate_set(const char *param)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2DataRate_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f005 fd2b 	bl	8010324 <LmHandlerGetRX2Params>

  /* Update the Datarate with scanf */
  if (tiny_sscanf(param, "%hhu", &(rx2Params.Datarate)) != 1)
 800a8ce:	f107 0308 	add.w	r3, r7, #8
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	490e      	ldr	r1, [pc, #56]	; (800a910 <AT_Rx2DataRate_set+0x54>)
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f015 fe4d 	bl	8020578 <tiny_sscanf>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d001      	beq.n	800a8e8 <AT_Rx2DataRate_set+0x2c>
  {
    return AT_PARAM_ERROR;
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e00f      	b.n	800a908 <AT_Rx2DataRate_set+0x4c>
  }
  else if (rx2Params.Datarate > 15)
 800a8e8:	7b3b      	ldrb	r3, [r7, #12]
 800a8ea:	2b0f      	cmp	r3, #15
 800a8ec:	d901      	bls.n	800a8f2 <AT_Rx2DataRate_set+0x36>
  {
    return AT_PARAM_ERROR;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	e00a      	b.n	800a908 <AT_Rx2DataRate_set+0x4c>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 800a8f2:	f107 0308 	add.w	r3, r7, #8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f005 fdeb 	bl	80104d2 <LmHandlerSetRX2Params>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <AT_Rx2DataRate_set+0x4a>
  {
    return AT_PARAM_ERROR;
 800a902:	2302      	movs	r3, #2
 800a904:	e000      	b.n	800a908 <AT_Rx2DataRate_set+0x4c>
  }

  return AT_OK;
 800a906:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2DataRate_set_2 */

  /* USER CODE END AT_Rx2DataRate_set_2 */
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	080210c8 	.word	0x080210c8

0800a914 <AT_Rx2Frequency_get>:

ATEerror_t AT_Rx2Frequency_get(const char *param)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Rx2Frequency_get_1 */

  /* USER CODE END AT_Rx2Frequency_get_1 */
  RxChannelParams_t rx2Params;
  LmHandlerGetRX2Params(&rx2Params);
 800a91c:	f107 0308 	add.w	r3, r7, #8
 800a920:	4618      	mov	r0, r3
 800a922:	f005 fcff 	bl	8010324 <LmHandlerGetRX2Params>
  print_d(rx2Params.Frequency);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	4618      	mov	r0, r3
 800a92a:	f000 fd79 	bl	800b420 <print_d>
  return AT_OK;
 800a92e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_get_2 */

  /* USER CODE END AT_Rx2Frequency_get_2 */
}
 800a930:	4618      	mov	r0, r3
 800a932:	3710      	adds	r7, #16
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <AT_Rx2Frequency_set>:

ATEerror_t AT_Rx2Frequency_set(const char *param)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]

  /* USER CODE END AT_Rx2Frequency_set_1 */
  RxChannelParams_t rx2Params;

  /* Get the current configuration of RX2 */
  LmHandlerGetRX2Params(&rx2Params);
 800a940:	f107 0308 	add.w	r3, r7, #8
 800a944:	4618      	mov	r0, r3
 800a946:	f005 fced 	bl	8010324 <LmHandlerGetRX2Params>

  /* Update the frequency with scanf */
  if (tiny_sscanf(param, "%lu", &(rx2Params.Frequency)) != 1)
 800a94a:	f107 0308 	add.w	r3, r7, #8
 800a94e:	461a      	mov	r2, r3
 800a950:	490b      	ldr	r1, [pc, #44]	; (800a980 <AT_Rx2Frequency_set+0x48>)
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f015 fe10 	bl	8020578 <tiny_sscanf>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d001      	beq.n	800a962 <AT_Rx2Frequency_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800a95e:	2302      	movs	r3, #2
 800a960:	e00a      	b.n	800a978 <AT_Rx2Frequency_set+0x40>
  }
  else if (LmHandlerSetRX2Params(&rx2Params) != LORAMAC_HANDLER_SUCCESS)
 800a962:	f107 0308 	add.w	r3, r7, #8
 800a966:	4618      	mov	r0, r3
 800a968:	f005 fdb3 	bl	80104d2 <LmHandlerSetRX2Params>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <AT_Rx2Frequency_set+0x3e>
  {
    return AT_PARAM_ERROR;
 800a972:	2302      	movs	r3, #2
 800a974:	e000      	b.n	800a978 <AT_Rx2Frequency_set+0x40>
  }

  return AT_OK;
 800a976:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_Rx2Frequency_set_2 */

  /* USER CODE END AT_Rx2Frequency_set_2 */
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3710      	adds	r7, #16
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	08021120 	.word	0x08021120

0800a984 <AT_TransmitPower_get>:

ATEerror_t AT_TransmitPower_get(const char *param)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_get_1 */

  /* USER CODE END AT_TransmitPower_get_1 */
  int8_t txPower;
  if (LmHandlerGetTxPower(&txPower) != LORAMAC_HANDLER_SUCCESS)
 800a98c:	f107 030f 	add.w	r3, r7, #15
 800a990:	4618      	mov	r0, r3
 800a992:	f005 fce9 	bl	8010368 <LmHandlerGetTxPower>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <AT_TransmitPower_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800a99c:	2302      	movs	r3, #2
 800a99e:	e005      	b.n	800a9ac <AT_TransmitPower_get+0x28>
  }

  print_d(txPower);
 800a9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f000 fd3b 	bl	800b420 <print_d>
  return AT_OK;
 800a9aa:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_get_2 */

  /* USER CODE END AT_TransmitPower_get_2 */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3710      	adds	r7, #16
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <AT_TransmitPower_set>:

ATEerror_t AT_TransmitPower_set(const char *param)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_TransmitPower_set_1 */

  /* USER CODE END AT_TransmitPower_set_1 */
  int8_t txPower;
  if (tiny_sscanf(param, "%hhu", &txPower) != 1)
 800a9bc:	f107 030f 	add.w	r3, r7, #15
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	490c      	ldr	r1, [pc, #48]	; (800a9f4 <AT_TransmitPower_set+0x40>)
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f015 fdd7 	bl	8020578 <tiny_sscanf>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d001      	beq.n	800a9d4 <AT_TransmitPower_set+0x20>
  {
    return AT_PARAM_ERROR;
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e00a      	b.n	800a9ea <AT_TransmitPower_set+0x36>
  }

  if (LmHandlerSetTxPower(txPower) != LORAMAC_HANDLER_SUCCESS)
 800a9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f005 fd61 	bl	80104a0 <LmHandlerSetTxPower>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <AT_TransmitPower_set+0x34>
  {
    return AT_PARAM_ERROR;
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	e000      	b.n	800a9ea <AT_TransmitPower_set+0x36>
  }

  return AT_OK;
 800a9e8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_TransmitPower_set_2 */

  /* USER CODE END AT_TransmitPower_set_2 */
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	080210c8 	.word	0x080210c8

0800a9f8 <AT_PingSlot_get>:

ATEerror_t AT_PingSlot_get(const char *param)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_get_1 */

  /* USER CODE END AT_PingSlot_get_1 */
  uint8_t periodicity;

  if (LmHandlerGetPingPeriodicity(&periodicity) != LORAMAC_HANDLER_SUCCESS)
 800aa00:	f107 030f 	add.w	r3, r7, #15
 800aa04:	4618      	mov	r0, r3
 800aa06:	f005 fde0 	bl	80105ca <LmHandlerGetPingPeriodicity>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <AT_PingSlot_get+0x1c>
  {
    return AT_PARAM_ERROR;
 800aa10:	2302      	movs	r3, #2
 800aa12:	e004      	b.n	800aa1e <AT_PingSlot_get+0x26>
  }

  print_d(periodicity);
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f000 fd02 	bl	800b420 <print_d>
  return AT_OK;
 800aa1c:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_get_2 */

  /* USER CODE END AT_PingSlot_get_2 */
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <AT_PingSlot_set>:

ATEerror_t AT_PingSlot_set(const char *param)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_PingSlot_set_1 */

  /* USER CODE END AT_PingSlot_set_1 */
  uint8_t periodicity;

  if (tiny_sscanf(param, "%hhu", &periodicity) != 1)
 800aa30:	f107 030f 	add.w	r3, r7, #15
 800aa34:	461a      	mov	r2, r3
 800aa36:	490e      	ldr	r1, [pc, #56]	; (800aa70 <AT_PingSlot_set+0x48>)
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f015 fd9d 	bl	8020578 <tiny_sscanf>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d001      	beq.n	800aa48 <AT_PingSlot_set+0x20>
  {
    return AT_PARAM_ERROR;
 800aa44:	2302      	movs	r3, #2
 800aa46:	e00e      	b.n	800aa66 <AT_PingSlot_set+0x3e>
  }
  else if (periodicity > 7)
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	2b07      	cmp	r3, #7
 800aa4c:	d901      	bls.n	800aa52 <AT_PingSlot_set+0x2a>
  {
    return AT_PARAM_ERROR;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e009      	b.n	800aa66 <AT_PingSlot_set+0x3e>
  }
  else if (LmHandlerSetPingPeriodicity(periodicity) != LORAMAC_HANDLER_SUCCESS)
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f005 fdc3 	bl	80105e0 <LmHandlerSetPingPeriodicity>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <AT_PingSlot_set+0x3c>
  {
    return AT_PARAM_ERROR;
 800aa60:	2302      	movs	r3, #2
 800aa62:	e000      	b.n	800aa66 <AT_PingSlot_set+0x3e>
  }

  return AT_OK;
 800aa64:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_PingSlot_set_2 */

  /* USER CODE END AT_PingSlot_set_2 */
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3710      	adds	r7, #16
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	080210c8 	.word	0x080210c8

0800aa74 <AT_test_txTone>:

/* --------------- Radio tests commands --------------- */
ATEerror_t AT_test_txTone(const char *param)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_txTone_1 */

  /* USER CODE END AT_test_txTone_1 */
  if (0U == TST_TxTone())
 800aa7c:	f001 f806 	bl	800ba8c <TST_TxTone>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <AT_test_txTone+0x16>
  {
    return AT_OK;
 800aa86:	2300      	movs	r3, #0
 800aa88:	e000      	b.n	800aa8c <AT_test_txTone+0x18>
  }
  else
  {
    return AT_BUSY_ERROR;
 800aa8a:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_txTone_2 */

  /* USER CODE END AT_test_txTone_2 */
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <AT_test_rxRssi>:

ATEerror_t AT_test_rxRssi(const char *param)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rxRssi_1 */

  /* USER CODE END AT_test_rxRssi_1 */
  if (0U == TST_RxRssi())
 800aa9c:	f001 f824 	bl	800bae8 <TST_RxRssi>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <AT_test_rxRssi+0x16>
  {
    return AT_OK;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e000      	b.n	800aaac <AT_test_rxRssi+0x18>
  }
  else
  {
    return AT_BUSY_ERROR;
 800aaaa:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rxRssi_2 */

  /* USER CODE END AT_test_rxRssi_2 */
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <AT_test_get_config>:

ATEerror_t AT_test_get_config(const char *param)
{
 800aab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aab6:	b0a7      	sub	sp, #156	; 0x9c
 800aab8:	af0c      	add	r7, sp, #48	; 0x30
 800aaba:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN AT_test_get_config_1 */

  /* USER CODE END AT_test_get_config_1 */
  testParameter_t testParam;
  uint32_t loraBW[7] = {7812, 15625, 31250, 62500, 125000, 250000, 500000};
 800aabc:	4b86      	ldr	r3, [pc, #536]	; (800acd8 <AT_test_get_config+0x224>)
 800aabe:	f107 041c 	add.w	r4, r7, #28
 800aac2:	461d      	mov	r5, r3
 800aac4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aac8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800aacc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  TST_get_config(&testParam);
 800aad0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aad4:	4618      	mov	r0, r3
 800aad6:	f001 f8b3 	bl	800bc40 <TST_get_config>

  AT_PRINTF("1: Freq= %d Hz\r\n", testParam.freq);
 800aada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	4b7f      	ldr	r3, [pc, #508]	; (800acdc <AT_test_get_config+0x228>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	2000      	movs	r0, #0
 800aae6:	f013 fec1 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  AT_PRINTF("2: Power= %d dBm\r\n", testParam.power);
 800aaea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	4b7c      	ldr	r3, [pc, #496]	; (800ace0 <AT_test_get_config+0x22c>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	2100      	movs	r1, #0
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f013 feb9 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

  if (testParam.modulation == 0)
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d14a      	bne.n	800ab96 <AT_test_get_config+0xe2>
  {
    /*fsk*/
    AT_PRINTF("3: Bandwidth= %d Hz\r\n", testParam.bandwidth);
 800ab00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	4b77      	ldr	r3, [pc, #476]	; (800ace4 <AT_test_get_config+0x230>)
 800ab06:	2200      	movs	r2, #0
 800ab08:	2100      	movs	r1, #0
 800ab0a:	2000      	movs	r0, #0
 800ab0c:	f013 feae 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: FSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800ab10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	4b74      	ldr	r3, [pc, #464]	; (800ace8 <AT_test_get_config+0x234>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f013 fea6 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: Coding Rate not applicable\r\n");
 800ab20:	4b72      	ldr	r3, [pc, #456]	; (800acec <AT_test_get_config+0x238>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	2100      	movs	r1, #0
 800ab26:	2000      	movs	r0, #0
 800ab28:	f013 fea0 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800ab2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4b6f      	ldr	r3, [pc, #444]	; (800acf0 <AT_test_get_config+0x23c>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2000      	movs	r0, #0
 800ab38:	f013 fe98 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	4b6c      	ldr	r3, [pc, #432]	; (800acf4 <AT_test_get_config+0x240>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	2100      	movs	r1, #0
 800ab46:	2000      	movs	r0, #0
 800ab48:	f013 fe90 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation FSK\r\n");
 800ab4c:	4b6a      	ldr	r3, [pc, #424]	; (800acf8 <AT_test_get_config+0x244>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	2000      	movs	r0, #0
 800ab54:	f013 fe8a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800ab58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab5a:	9300      	str	r3, [sp, #0]
 800ab5c:	4b67      	ldr	r3, [pc, #412]	; (800acfc <AT_test_get_config+0x248>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	2100      	movs	r1, #0
 800ab62:	2000      	movs	r0, #0
 800ab64:	f013 fe82 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: FSK deviation= %d Hz\r\n", testParam.fskDev);
 800ab68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	4b64      	ldr	r3, [pc, #400]	; (800ad00 <AT_test_get_config+0x24c>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	2000      	movs	r0, #0
 800ab74:	f013 fe7a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt not applicable\r\n");
 800ab78:	4b62      	ldr	r3, [pc, #392]	; (800ad04 <AT_test_get_config+0x250>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2000      	movs	r0, #0
 800ab80:	f013 fe74 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12: FSK gaussian BT product= %d \r\n", testParam.BTproduct);
 800ab84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab86:	9300      	str	r3, [sp, #0]
 800ab88:	4b5f      	ldr	r3, [pc, #380]	; (800ad08 <AT_test_get_config+0x254>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	2000      	movs	r0, #0
 800ab90:	f013 fe6c 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ab94:	e061      	b.n	800ac5a <AT_test_get_config+0x1a6>
  }
  else if (testParam.modulation == 1)
 800ab96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d156      	bne.n	800ac4a <AT_test_get_config+0x196>
  {
    /*Lora*/
    AT_PRINTF("3: Bandwidth= %d (=%d Hz)\r\n", testParam.bandwidth, loraBW[testParam.bandwidth]);
 800ab9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	3358      	adds	r3, #88	; 0x58
 800aba4:	f107 0110 	add.w	r1, r7, #16
 800aba8:	440b      	add	r3, r1
 800abaa:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	9200      	str	r2, [sp, #0]
 800abb2:	4b56      	ldr	r3, [pc, #344]	; (800ad0c <AT_test_get_config+0x258>)
 800abb4:	2200      	movs	r2, #0
 800abb6:	2100      	movs	r1, #0
 800abb8:	2000      	movs	r0, #0
 800abba:	f013 fe57 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("4: SF= %d \r\n", testParam.loraSf_datarate);
 800abbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	4b53      	ldr	r3, [pc, #332]	; (800ad10 <AT_test_get_config+0x25c>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	2100      	movs	r1, #0
 800abc8:	2000      	movs	r0, #0
 800abca:	f013 fe4f 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("5: CR= %d (=4/%d) \r\n", testParam.codingRate, testParam.codingRate + 4);
 800abce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abd2:	3204      	adds	r2, #4
 800abd4:	9201      	str	r2, [sp, #4]
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	4b4e      	ldr	r3, [pc, #312]	; (800ad14 <AT_test_get_config+0x260>)
 800abda:	2200      	movs	r2, #0
 800abdc:	2100      	movs	r1, #0
 800abde:	2000      	movs	r0, #0
 800abe0:	f013 fe44 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("6: LNA State= %d  \r\n", testParam.lna);
 800abe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	4b41      	ldr	r3, [pc, #260]	; (800acf0 <AT_test_get_config+0x23c>)
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	2000      	movs	r0, #0
 800abf0:	f013 fe3c 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("7: PA Boost State= %d  \r\n", testParam.paBoost);
 800abf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4b3e      	ldr	r3, [pc, #248]	; (800acf4 <AT_test_get_config+0x240>)
 800abfa:	2200      	movs	r2, #0
 800abfc:	2100      	movs	r1, #0
 800abfe:	2000      	movs	r0, #0
 800ac00:	f013 fe34 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("8: modulation LORA\r\n");
 800ac04:	4b44      	ldr	r3, [pc, #272]	; (800ad18 <AT_test_get_config+0x264>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	2100      	movs	r1, #0
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	f013 fe2e 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("9: Payload len= %d Bytes\r\n", testParam.payloadLen);
 800ac10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	4b39      	ldr	r3, [pc, #228]	; (800acfc <AT_test_get_config+0x248>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	2100      	movs	r1, #0
 800ac1a:	2000      	movs	r0, #0
 800ac1c:	f013 fe26 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("10: Frequency deviation not applicable\r\n");
 800ac20:	4b3e      	ldr	r3, [pc, #248]	; (800ad1c <AT_test_get_config+0x268>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	2100      	movs	r1, #0
 800ac26:	2000      	movs	r0, #0
 800ac28:	f013 fe20 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("11: LowDRopt[0 to 2]= %d \r\n", testParam.lowDrOpt);
 800ac2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	4b3b      	ldr	r3, [pc, #236]	; (800ad20 <AT_test_get_config+0x26c>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	2100      	movs	r1, #0
 800ac36:	2000      	movs	r0, #0
 800ac38:	f013 fe18 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    AT_PRINTF("12 BT product not applicable\r\n");
 800ac3c:	4b39      	ldr	r3, [pc, #228]	; (800ad24 <AT_test_get_config+0x270>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2100      	movs	r1, #0
 800ac42:	2000      	movs	r0, #0
 800ac44:	f013 fe12 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ac48:	e007      	b.n	800ac5a <AT_test_get_config+0x1a6>
  }
  else
  {
    AT_PRINTF("4: BPSK datarate= %d bps\r\n", testParam.loraSf_datarate);
 800ac4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	4b36      	ldr	r3, [pc, #216]	; (800ad28 <AT_test_get_config+0x274>)
 800ac50:	2200      	movs	r2, #0
 800ac52:	2100      	movs	r1, #0
 800ac54:	2000      	movs	r0, #0
 800ac56:	f013 fe09 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  }

  AT_PRINTF("can be copy/paste in set cmd: AT+TCONF=%d:%d:%d:%d:4/%d:%d:%d:%d:%d:%d:%d:%d\r\n", testParam.freq,
 800ac5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800ac62:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800ac64:	3404      	adds	r4, #4
 800ac66:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800ac68:	6d7e      	ldr	r6, [r7, #84]	; 0x54
 800ac6a:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
 800ac6e:	f8c7 c010 	str.w	ip, [r7, #16]
 800ac72:	f8d7 e058 	ldr.w	lr, [r7, #88]	; 0x58
 800ac76:	f8c7 e00c 	str.w	lr, [r7, #12]
 800ac7a:	f8d7 c05c 	ldr.w	ip, [r7, #92]	; 0x5c
 800ac7e:	f8c7 c008 	str.w	ip, [r7, #8]
 800ac82:	f8d7 e060 	ldr.w	lr, [r7, #96]	; 0x60
 800ac86:	f8c7 e004 	str.w	lr, [r7, #4]
 800ac8a:	f8d7 c064 	ldr.w	ip, [r7, #100]	; 0x64
 800ac8e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 800ac92:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ac96:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800ac9a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ac9e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800aca2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800aca6:	f8cd e020 	str.w	lr, [sp, #32]
 800acaa:	f8d7 c010 	ldr.w	ip, [r7, #16]
 800acae:	f8cd c01c 	str.w	ip, [sp, #28]
 800acb2:	9606      	str	r6, [sp, #24]
 800acb4:	9505      	str	r5, [sp, #20]
 800acb6:	9404      	str	r4, [sp, #16]
 800acb8:	9003      	str	r0, [sp, #12]
 800acba:	9102      	str	r1, [sp, #8]
 800acbc:	9201      	str	r2, [sp, #4]
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4b1a      	ldr	r3, [pc, #104]	; (800ad2c <AT_test_get_config+0x278>)
 800acc2:	2200      	movs	r2, #0
 800acc4:	2100      	movs	r1, #0
 800acc6:	2000      	movs	r0, #0
 800acc8:	f013 fdd0 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            testParam.power,
            testParam.bandwidth, testParam.loraSf_datarate, testParam.codingRate + 4, \
            testParam.lna, testParam.paBoost, testParam.modulation, testParam.payloadLen, testParam.fskDev, testParam.lowDrOpt,
            testParam.BTproduct);
  return AT_OK;
 800accc:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_get_config_2 */

  /* USER CODE END AT_test_get_config_2 */
}
 800acce:	4618      	mov	r0, r3
 800acd0:	376c      	adds	r7, #108	; 0x6c
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08021394 	.word	0x08021394
 800acdc:	08021124 	.word	0x08021124
 800ace0:	08021138 	.word	0x08021138
 800ace4:	0802114c 	.word	0x0802114c
 800ace8:	08021164 	.word	0x08021164
 800acec:	08021180 	.word	0x08021180
 800acf0:	080211a0 	.word	0x080211a0
 800acf4:	080211b8 	.word	0x080211b8
 800acf8:	080211d4 	.word	0x080211d4
 800acfc:	080211e8 	.word	0x080211e8
 800ad00:	08021204 	.word	0x08021204
 800ad04:	08021220 	.word	0x08021220
 800ad08:	08021240 	.word	0x08021240
 800ad0c:	08021264 	.word	0x08021264
 800ad10:	08021280 	.word	0x08021280
 800ad14:	08021290 	.word	0x08021290
 800ad18:	080212a8 	.word	0x080212a8
 800ad1c:	080212c0 	.word	0x080212c0
 800ad20:	080212ec 	.word	0x080212ec
 800ad24:	08021308 	.word	0x08021308
 800ad28:	08021328 	.word	0x08021328
 800ad2c:	08021344 	.word	0x08021344

0800ad30 <AT_test_set_config>:

ATEerror_t AT_test_set_config(const char *param)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b0a8      	sub	sp, #160	; 0xa0
 800ad34:	af0c      	add	r7, sp, #48	; 0x30
 800ad36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_set_config_1 */

  /* USER CODE END AT_test_set_config_1 */
  testParameter_t testParam = {0};
 800ad38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ad3c:	2230      	movs	r2, #48	; 0x30
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f015 febd 	bl	8020ac0 <memset>
  uint32_t fskDeviation;
  uint32_t lowDrOpt;
  uint32_t BTproduct;
  uint32_t crNum;

  if (13 == tiny_sscanf(param, "%d:%d:%d:%d:%d/%d:%d:%d:%d:%d:%d:%d:%d",
 800ad46:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ad4a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ad4e:	f107 0310 	add.w	r3, r7, #16
 800ad52:	930a      	str	r3, [sp, #40]	; 0x28
 800ad54:	f107 0314 	add.w	r3, r7, #20
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5a:	f107 0318 	add.w	r3, r7, #24
 800ad5e:	9308      	str	r3, [sp, #32]
 800ad60:	f107 031c 	add.w	r3, r7, #28
 800ad64:	9307      	str	r3, [sp, #28]
 800ad66:	f107 0320 	add.w	r3, r7, #32
 800ad6a:	9306      	str	r3, [sp, #24]
 800ad6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad70:	9305      	str	r3, [sp, #20]
 800ad72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad76:	9304      	str	r3, [sp, #16]
 800ad78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad7c:	9303      	str	r3, [sp, #12]
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	9302      	str	r3, [sp, #8]
 800ad84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	460b      	mov	r3, r1
 800ad92:	4975      	ldr	r1, [pc, #468]	; (800af68 <AT_test_set_config+0x238>)
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f015 fbef 	bl	8020578 <tiny_sscanf>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b0d      	cmp	r3, #13
 800ad9e:	d001      	beq.n	800ada4 <AT_test_set_config+0x74>
  {
    /*extend to new format for extended*/
  }
  else
  {
    return AT_PARAM_ERROR;
 800ada0:	2302      	movs	r3, #2
 800ada2:	e0dd      	b.n	800af60 <AT_test_set_config+0x230>
  }
  /*get current config*/
  TST_get_config(&testParam);
 800ada4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 ff49 	bl	800bc40 <TST_get_config>

  /* 8: modulation check and set */
  /* first check because required for others */
  if (modulation == 0)
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d102      	bne.n	800adba <AT_test_set_config+0x8a>
  {
    testParam.modulation = TEST_FSK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	643b      	str	r3, [r7, #64]	; 0x40
 800adb8:	e00d      	b.n	800add6 <AT_test_set_config+0xa6>
  }
  else if (modulation == 1)
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d102      	bne.n	800adc6 <AT_test_set_config+0x96>
  {
    testParam.modulation = TEST_LORA;
 800adc0:	2301      	movs	r3, #1
 800adc2:	643b      	str	r3, [r7, #64]	; 0x40
 800adc4:	e007      	b.n	800add6 <AT_test_set_config+0xa6>
  }
  else if (modulation == 2)
 800adc6:	6a3b      	ldr	r3, [r7, #32]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d102      	bne.n	800add2 <AT_test_set_config+0xa2>
  {
    testParam.modulation = TEST_BPSK;
 800adcc:	2302      	movs	r3, #2
 800adce:	643b      	str	r3, [r7, #64]	; 0x40
 800add0:	e001      	b.n	800add6 <AT_test_set_config+0xa6>
  }
  else
  {
    return AT_PARAM_ERROR;
 800add2:	2302      	movs	r3, #2
 800add4:	e0c4      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 1: frequency check and set */
  if (freq < 1000)
 800add6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800addc:	d205      	bcs.n	800adea <AT_test_set_config+0xba>
  {
    /*given in MHz*/
    testParam.freq = freq * 1000000;
 800adde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade0:	4a62      	ldr	r2, [pc, #392]	; (800af6c <AT_test_set_config+0x23c>)
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	647b      	str	r3, [r7, #68]	; 0x44
 800ade8:	e001      	b.n	800adee <AT_test_set_config+0xbe>
  }
  else
  {
    testParam.freq = freq;
 800adea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adec:	647b      	str	r3, [r7, #68]	; 0x44
  }

  /* 2: power check and set */
  if ((power >= -9) && (power <= 22))
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	f113 0f09 	cmn.w	r3, #9
 800adf4:	db08      	blt.n	800ae08 <AT_test_set_config+0xd8>
 800adf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf8:	2b16      	cmp	r3, #22
 800adfa:	dc05      	bgt.n	800ae08 <AT_test_set_config+0xd8>
  {
    testParam.power = power;
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	64bb      	str	r3, [r7, #72]	; 0x48
  {
    return AT_PARAM_ERROR;
  }

  /* 3: bandwidth check and set */
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 800ae00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d002      	beq.n	800ae0c <AT_test_set_config+0xdc>
 800ae06:	e00c      	b.n	800ae22 <AT_test_set_config+0xf2>
    return AT_PARAM_ERROR;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e0a9      	b.n	800af60 <AT_test_set_config+0x230>
  if ((testParam.modulation == TEST_FSK) && (bandwidth >= 4800) && (bandwidth <= 467000))
 800ae0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae0e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 800ae12:	d306      	bcc.n	800ae22 <AT_test_set_config+0xf2>
 800ae14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae16:	4a56      	ldr	r2, [pc, #344]	; (800af70 <AT_test_set_config+0x240>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d802      	bhi.n	800ae22 <AT_test_set_config+0xf2>
  {
    testParam.bandwidth = bandwidth;
 800ae1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae20:	e00d      	b.n	800ae3e <AT_test_set_config+0x10e>
  }
  else if ((testParam.modulation == TEST_LORA) && (bandwidth <= BW_500kHz))
 800ae22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d105      	bne.n	800ae34 <AT_test_set_config+0x104>
 800ae28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae2a:	2b06      	cmp	r3, #6
 800ae2c:	d802      	bhi.n	800ae34 <AT_test_set_config+0x104>
  {
    testParam.bandwidth = bandwidth;
 800ae2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae32:	e004      	b.n	800ae3e <AT_test_set_config+0x10e>
  }
  else if (testParam.modulation == TEST_BPSK)
 800ae34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d001      	beq.n	800ae3e <AT_test_set_config+0x10e>
  {
    /* Not used */
  }
  else
  {
    return AT_PARAM_ERROR;
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e090      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 4: datarate/spreading factor check and set */
  if ((testParam.modulation == TEST_FSK) && (loraSf_datarate >= 600) && (loraSf_datarate <= 300000))
 800ae3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <AT_test_set_config+0x12a>
 800ae44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae46:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800ae4a:	d306      	bcc.n	800ae5a <AT_test_set_config+0x12a>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	4a49      	ldr	r2, [pc, #292]	; (800af74 <AT_test_set_config+0x244>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d802      	bhi.n	800ae5a <AT_test_set_config+0x12a>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae56:	653b      	str	r3, [r7, #80]	; 0x50
 800ae58:	e017      	b.n	800ae8a <AT_test_set_config+0x15a>
  }
  else if ((testParam.modulation == TEST_LORA) && (loraSf_datarate >= 5) && (loraSf_datarate <= 12))
 800ae5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d108      	bne.n	800ae72 <AT_test_set_config+0x142>
 800ae60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d905      	bls.n	800ae72 <AT_test_set_config+0x142>
 800ae66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae68:	2b0c      	cmp	r3, #12
 800ae6a:	d802      	bhi.n	800ae72 <AT_test_set_config+0x142>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6e:	653b      	str	r3, [r7, #80]	; 0x50
 800ae70:	e00b      	b.n	800ae8a <AT_test_set_config+0x15a>
  }
  else if ((testParam.modulation == TEST_BPSK) && (loraSf_datarate <= 1000))
 800ae72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d106      	bne.n	800ae86 <AT_test_set_config+0x156>
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae7e:	d802      	bhi.n	800ae86 <AT_test_set_config+0x156>
  {
    testParam.loraSf_datarate = loraSf_datarate;
 800ae80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae82:	653b      	str	r3, [r7, #80]	; 0x50
 800ae84:	e001      	b.n	800ae8a <AT_test_set_config+0x15a>
  }
  else
  {
    return AT_PARAM_ERROR;
 800ae86:	2302      	movs	r3, #2
 800ae88:	e06a      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 5: coding rate check and set */
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 800ae8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d011      	beq.n	800aeb4 <AT_test_set_config+0x184>
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d00e      	beq.n	800aeb4 <AT_test_set_config+0x184>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_LORA) && ((codingRate >= 5) && (codingRate <= 8)))
 800ae96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d109      	bne.n	800aeb0 <AT_test_set_config+0x180>
 800ae9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d906      	bls.n	800aeb0 <AT_test_set_config+0x180>
 800aea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea4:	2b08      	cmp	r3, #8
 800aea6:	d803      	bhi.n	800aeb0 <AT_test_set_config+0x180>
  {
    testParam.codingRate = codingRate - 4;
 800aea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeaa:	3b04      	subs	r3, #4
 800aeac:	657b      	str	r3, [r7, #84]	; 0x54
 800aeae:	e001      	b.n	800aeb4 <AT_test_set_config+0x184>
  }
  else
  {
    return AT_PARAM_ERROR;
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e055      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 6: lna state check and set */
  if (lna <= 1)
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d805      	bhi.n	800aec6 <AT_test_set_config+0x196>
  {
    testParam.lna = lna;
 800aeba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebc:	65bb      	str	r3, [r7, #88]	; 0x58
  {
    return AT_PARAM_ERROR;
  }

  /* 7: pa boost check and set */
  if (paBoost <= 1)
 800aebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d804      	bhi.n	800aece <AT_test_set_config+0x19e>
 800aec4:	e001      	b.n	800aeca <AT_test_set_config+0x19a>
    return AT_PARAM_ERROR;
 800aec6:	2302      	movs	r3, #2
 800aec8:	e04a      	b.n	800af60 <AT_test_set_config+0x230>
  {
    /* Not used */
    testParam.paBoost = paBoost;
 800aeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aecc:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  /* 9: payloadLen check and set */
  if ((payloadLen != 0) && (payloadLen < 256))
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d008      	beq.n	800aee6 <AT_test_set_config+0x1b6>
 800aed4:	69fb      	ldr	r3, [r7, #28]
 800aed6:	2bff      	cmp	r3, #255	; 0xff
 800aed8:	d805      	bhi.n	800aee6 <AT_test_set_config+0x1b6>
  {
    testParam.payloadLen = payloadLen;
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	663b      	str	r3, [r7, #96]	; 0x60
  {
    return AT_PARAM_ERROR;
  }

  /* 10: fsk Deviation check and set */
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800aede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d015      	beq.n	800af10 <AT_test_set_config+0x1e0>
 800aee4:	e001      	b.n	800aeea <AT_test_set_config+0x1ba>
    return AT_PARAM_ERROR;
 800aee6:	2302      	movs	r3, #2
 800aee8:	e03a      	b.n	800af60 <AT_test_set_config+0x230>
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800aeea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d00f      	beq.n	800af10 <AT_test_set_config+0x1e0>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_FSK) && ((fskDeviation >= 600) && (fskDeviation <= 200000)))
 800aef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <AT_test_set_config+0x1dc>
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800aefc:	d306      	bcc.n	800af0c <AT_test_set_config+0x1dc>
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	4a1d      	ldr	r2, [pc, #116]	; (800af78 <AT_test_set_config+0x248>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d802      	bhi.n	800af0c <AT_test_set_config+0x1dc>
  {
    /*given in MHz*/
    testParam.fskDev = fskDeviation;
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	667b      	str	r3, [r7, #100]	; 0x64
 800af0a:	e001      	b.n	800af10 <AT_test_set_config+0x1e0>
  }
  else
  {
    return AT_PARAM_ERROR;
 800af0c:	2302      	movs	r3, #2
 800af0e:	e027      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 11: low datarate optimization check and set */
  if ((testParam.modulation == TEST_FSK) || (testParam.modulation == TEST_BPSK))
 800af10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00d      	beq.n	800af32 <AT_test_set_config+0x202>
 800af16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d00a      	beq.n	800af32 <AT_test_set_config+0x202>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_LORA) && (lowDrOpt <= 2))
 800af1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d105      	bne.n	800af2e <AT_test_set_config+0x1fe>
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b02      	cmp	r3, #2
 800af26:	d802      	bhi.n	800af2e <AT_test_set_config+0x1fe>
  {
    testParam.lowDrOpt = lowDrOpt;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800af2c:	e001      	b.n	800af32 <AT_test_set_config+0x202>
  }
  else
  {
    return AT_PARAM_ERROR;
 800af2e:	2302      	movs	r3, #2
 800af30:	e016      	b.n	800af60 <AT_test_set_config+0x230>
  }

  /* 12: FSK gaussian BT product check and set */
  if ((testParam.modulation == TEST_LORA) || (testParam.modulation == TEST_BPSK))
 800af32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af34:	2b01      	cmp	r3, #1
 800af36:	d00d      	beq.n	800af54 <AT_test_set_config+0x224>
 800af38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d00a      	beq.n	800af54 <AT_test_set_config+0x224>
  {
    /* Not used */
  }
  else if ((testParam.modulation == TEST_FSK) && (BTproduct <= 4))
 800af3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af40:	2b00      	cmp	r3, #0
 800af42:	d105      	bne.n	800af50 <AT_test_set_config+0x220>
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	2b04      	cmp	r3, #4
 800af48:	d802      	bhi.n	800af50 <AT_test_set_config+0x220>
  {
    /*given in MHz*/
    testParam.BTproduct = BTproduct;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af4e:	e001      	b.n	800af54 <AT_test_set_config+0x224>
  }
  else
  {
    return AT_PARAM_ERROR;
 800af50:	2302      	movs	r3, #2
 800af52:	e005      	b.n	800af60 <AT_test_set_config+0x230>
  }

  TST_set_config(&testParam);
 800af54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af58:	4618      	mov	r0, r3
 800af5a:	f000 fe61 	bl	800bc20 <TST_set_config>

  return AT_OK;
 800af5e:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_set_config_2 */

  /* USER CODE END AT_test_set_config_2 */
}
 800af60:	4618      	mov	r0, r3
 800af62:	3770      	adds	r7, #112	; 0x70
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	080213b0 	.word	0x080213b0
 800af6c:	000f4240 	.word	0x000f4240
 800af70:	00072038 	.word	0x00072038
 800af74:	000493e0 	.word	0x000493e0
 800af78:	00030d40 	.word	0x00030d40

0800af7c <AT_test_tx>:

ATEerror_t AT_test_tx(const char *param)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_1 */

  /* USER CODE END AT_test_tx_1 */
  const char *buf = param;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800af88:	f107 0308 	add.w	r3, r7, #8
 800af8c:	461a      	mov	r2, r3
 800af8e:	490e      	ldr	r1, [pc, #56]	; (800afc8 <AT_test_tx+0x4c>)
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f015 faf1 	bl	8020578 <tiny_sscanf>
 800af96:	4603      	mov	r3, r0
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d007      	beq.n	800afac <AT_test_tx+0x30>
  {
    AT_PRINTF("AT+TTX: nb packets sent is missing\r\n");
 800af9c:	4b0b      	ldr	r3, [pc, #44]	; (800afcc <AT_test_tx+0x50>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	2100      	movs	r1, #0
 800afa2:	2000      	movs	r0, #0
 800afa4:	f013 fc62 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800afa8:	2302      	movs	r3, #2
 800afaa:	e009      	b.n	800afc0 <AT_test_tx+0x44>
  }

  if (0U == TST_TX_Start(nb_packet))
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	4618      	mov	r0, r3
 800afb0:	f000 fe66 	bl	800bc80 <TST_TX_Start>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <AT_test_tx+0x42>
  {
    return AT_OK;
 800afba:	2300      	movs	r3, #0
 800afbc:	e000      	b.n	800afc0 <AT_test_tx+0x44>
  }
  else
  {
    return AT_BUSY_ERROR;
 800afbe:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_tx_2 */

  /* USER CODE END AT_test_tx_2 */
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08020ee4 	.word	0x08020ee4
 800afcc:	080213d8 	.word	0x080213d8

0800afd0 <AT_test_rx>:

ATEerror_t AT_test_rx(const char *param)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_rx_1 */

  /* USER CODE END AT_test_rx_1 */
  const char *buf = param;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	60fb      	str	r3, [r7, #12]
  uint32_t nb_packet;

  if (1 != tiny_sscanf(buf, "%u", &nb_packet))
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	461a      	mov	r2, r3
 800afe2:	490e      	ldr	r1, [pc, #56]	; (800b01c <AT_test_rx+0x4c>)
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f015 fac7 	bl	8020578 <tiny_sscanf>
 800afea:	4603      	mov	r3, r0
 800afec:	2b01      	cmp	r3, #1
 800afee:	d007      	beq.n	800b000 <AT_test_rx+0x30>
  {
    AT_PRINTF("AT+TRX: nb expected packets is missing\r\n");
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <AT_test_rx+0x50>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	2100      	movs	r1, #0
 800aff6:	2000      	movs	r0, #0
 800aff8:	f013 fc38 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    return AT_PARAM_ERROR;
 800affc:	2302      	movs	r3, #2
 800affe:	e009      	b.n	800b014 <AT_test_rx+0x44>
  }

  if (0U == TST_RX_Start(nb_packet))
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 ff80 	bl	800bf08 <TST_RX_Start>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <AT_test_rx+0x42>
  {
    return AT_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	e000      	b.n	800b014 <AT_test_rx+0x44>
  }
  else
  {
    return AT_BUSY_ERROR;
 800b012:	2303      	movs	r3, #3
  }
  /* USER CODE BEGIN AT_test_rx_2 */

  /* USER CODE END AT_test_rx_2 */
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	08020ee4 	.word	0x08020ee4
 800b020:	08021400 	.word	0x08021400

0800b024 <AT_Certif>:
ATEerror_t AT_Certif(const char *param)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af02      	add	r7, sp, #8
 800b02a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_Certif_1 */

  /* USER CODE END AT_Certif_1 */
  switch (param[0])
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b30      	cmp	r3, #48	; 0x30
 800b032:	d002      	beq.n	800b03a <AT_Certif+0x16>
 800b034:	2b31      	cmp	r3, #49	; 0x31
 800b036:	d003      	beq.n	800b040 <AT_Certif+0x1c>
 800b038:	e01e      	b.n	800b078 <AT_Certif+0x54>
  {
    case '0':
      LmHandlerJoin(ACTIVATION_TYPE_ABP);
 800b03a:	2001      	movs	r0, #1
 800b03c:	f004 faf0 	bl	800f620 <LmHandlerJoin>
    case '1':
      LmHandlerJoin(ACTIVATION_TYPE_OTAA);
 800b040:	2002      	movs	r0, #2
 800b042:	f004 faed 	bl	800f620 <LmHandlerJoin>
      break;
 800b046:	bf00      	nop
    default:
      return AT_PARAM_ERROR;
  }

  UTIL_TIMER_Create(&TxCertifTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnCertifTimer, NULL);  /* 8s */
 800b048:	2300      	movs	r3, #0
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <AT_Certif+0x60>)
 800b04e:	2200      	movs	r2, #0
 800b050:	f04f 31ff 	mov.w	r1, #4294967295
 800b054:	480c      	ldr	r0, [pc, #48]	; (800b088 <AT_Certif+0x64>)
 800b056:	f014 fc3d 	bl	801f8d4 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxCertifTimer,  8000);  /* 8s */
 800b05a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800b05e:	480a      	ldr	r0, [pc, #40]	; (800b088 <AT_Certif+0x64>)
 800b060:	f014 fd4c 	bl	801fafc <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxCertifTimer);
 800b064:	4808      	ldr	r0, [pc, #32]	; (800b088 <AT_Certif+0x64>)
 800b066:	f014 fc6b 	bl	801f940 <UTIL_TIMER_Start>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaCertifTx), UTIL_SEQ_RFU, CertifSend);
 800b06a:	4a08      	ldr	r2, [pc, #32]	; (800b08c <AT_Certif+0x68>)
 800b06c:	2100      	movs	r1, #0
 800b06e:	2004      	movs	r0, #4
 800b070:	f014 f80c 	bl	801f08c <UTIL_SEQ_RegTask>

  return AT_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	e000      	b.n	800b07a <AT_Certif+0x56>
      return AT_PARAM_ERROR;
 800b078:	2302      	movs	r3, #2
  /* USER CODE BEGIN AT_Certif_2 */

  /* USER CODE END AT_Certif_2 */
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	0800b469 	.word	0x0800b469
 800b088:	20000d70 	.word	0x20000d70
 800b08c:	0800b481 	.word	0x0800b481

0800b090 <AT_test_tx_hopping>:

ATEerror_t AT_test_tx_hopping(const char *param)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b09a      	sub	sp, #104	; 0x68
 800b094:	af04      	add	r7, sp, #16
 800b096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_tx_hopping_1 */

  /* USER CODE END AT_test_tx_hopping_1 */
  const char *buf = param;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t nb_tx;

  testParameter_t test_param;
  uint32_t hop_freq;

  if (4 != tiny_sscanf(buf, "%u,%u,%u,%u", &freq_start, &freq_stop, &delta_f, &nb_tx))
 800b09c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800b0a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b0a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b0a8:	9301      	str	r3, [sp, #4]
 800b0aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	492b      	ldr	r1, [pc, #172]	; (800b160 <AT_test_tx_hopping+0xd0>)
 800b0b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b0b6:	f015 fa5f 	bl	8020578 <tiny_sscanf>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b04      	cmp	r3, #4
 800b0be:	d001      	beq.n	800b0c4 <AT_test_tx_hopping+0x34>
  {
    return AT_PARAM_ERROR;
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	e048      	b.n	800b156 <AT_test_tx_hopping+0xc6>
  }

  /*if freq is set in MHz, convert to Hz*/
  if (freq_start < 1000)
 800b0c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0ca:	d204      	bcs.n	800b0d6 <AT_test_tx_hopping+0x46>
  {
    freq_start *= 1000000;
 800b0cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ce:	4a25      	ldr	r2, [pc, #148]	; (800b164 <AT_test_tx_hopping+0xd4>)
 800b0d0:	fb02 f303 	mul.w	r3, r2, r3
 800b0d4:	64bb      	str	r3, [r7, #72]	; 0x48
  }
  if (freq_stop < 1000)
 800b0d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b0dc:	d204      	bcs.n	800b0e8 <AT_test_tx_hopping+0x58>
  {
    freq_stop *= 1000000;
 800b0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0e0:	4a20      	ldr	r2, [pc, #128]	; (800b164 <AT_test_tx_hopping+0xd4>)
 800b0e2:	fb02 f303 	mul.w	r3, r2, r3
 800b0e6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  /**/
  hop_freq = freq_start;
 800b0e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ea:	657b      	str	r3, [r7, #84]	; 0x54

  for (int i = 0; i < nb_tx; i++)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800b0f0:	e02c      	b.n	800b14c <AT_test_tx_hopping+0xbc>
  {
    /*get current config*/
    TST_get_config(&test_param);
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fda2 	bl	800bc40 <TST_get_config>

    /*increment frequency*/
    test_param.freq = hop_freq;
 800b0fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0fe:	613b      	str	r3, [r7, #16]
    /*Set new config*/
    TST_set_config(&test_param);
 800b100:	f107 030c 	add.w	r3, r7, #12
 800b104:	4618      	mov	r0, r3
 800b106:	f000 fd8b 	bl	800bc20 <TST_set_config>

    APP_TPRINTF("Tx Hop at %dHz. %d of %d\r\n", hop_freq, i, nb_tx);
 800b10a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10c:	9302      	str	r3, [sp, #8]
 800b10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	4b14      	ldr	r3, [pc, #80]	; (800b168 <AT_test_tx_hopping+0xd8>)
 800b118:	2201      	movs	r2, #1
 800b11a:	2100      	movs	r1, #0
 800b11c:	2000      	movs	r0, #0
 800b11e:	f013 fba5 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    if (0U != TST_TX_Start(1))
 800b122:	2001      	movs	r0, #1
 800b124:	f000 fdac 	bl	800bc80 <TST_TX_Start>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d001      	beq.n	800b132 <AT_test_tx_hopping+0xa2>
    {
      return AT_BUSY_ERROR;
 800b12e:	2303      	movs	r3, #3
 800b130:	e011      	b.n	800b156 <AT_test_tx_hopping+0xc6>
    }

    hop_freq += delta_f;
 800b132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b136:	4413      	add	r3, r2
 800b138:	657b      	str	r3, [r7, #84]	; 0x54

    if (hop_freq > freq_stop)
 800b13a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b13c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b13e:	429a      	cmp	r2, r3
 800b140:	d901      	bls.n	800b146 <AT_test_tx_hopping+0xb6>
    {
      hop_freq = freq_start;
 800b142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b144:	657b      	str	r3, [r7, #84]	; 0x54
  for (int i = 0; i < nb_tx; i++)
 800b146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b148:	3301      	adds	r3, #1
 800b14a:	653b      	str	r3, [r7, #80]	; 0x50
 800b14c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b14e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b150:	429a      	cmp	r2, r3
 800b152:	d3ce      	bcc.n	800b0f2 <AT_test_tx_hopping+0x62>
    }
  }

  return AT_OK;
 800b154:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_tx_hopping_2 */

  /* USER CODE END AT_test_tx_hopping_2 */
}
 800b156:	4618      	mov	r0, r3
 800b158:	3758      	adds	r7, #88	; 0x58
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	0802142c 	.word	0x0802142c
 800b164:	000f4240 	.word	0x000f4240
 800b168:	08021438 	.word	0x08021438

0800b16c <AT_test_stop>:

ATEerror_t AT_test_stop(const char *param)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_test_stop_1 */

  /* USER CODE END AT_test_stop_1 */
  TST_stop();
 800b174:	f000 fd74 	bl	800bc60 <TST_stop>
  AT_PRINTF("Test Stop\r\n");
 800b178:	4b05      	ldr	r3, [pc, #20]	; (800b190 <AT_test_stop+0x24>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	2100      	movs	r1, #0
 800b17e:	2000      	movs	r0, #0
 800b180:	f013 fb74 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  return AT_OK;
 800b184:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_test_stop_2 */

  /* USER CODE END AT_test_stop_2 */
}
 800b186:	4618      	mov	r0, r3
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	08021454 	.word	0x08021454

0800b194 <AT_bat_get>:
  /* USER CODE END AT_read_register_2 */
}

/* --------------- Information command --------------- */
ATEerror_t AT_bat_get(const char *param)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AT_bat_get_1 */

  /* USER CODE END AT_bat_get_1 */
  print_d(SYS_GetBatteryLevel());
 800b19c:	f7f5 fe1c 	bl	8000dd8 <SYS_GetBatteryLevel>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f93c 	bl	800b420 <print_d>

  return AT_OK;
 800b1a8:	2300      	movs	r3, #0
  /* USER CODE BEGIN AT_bat_get_2 */

  /* USER CODE END AT_bat_get_2 */
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <sscanf_uint32_as_hhx>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t sscanf_uint32_as_hhx(const char *from, uint32_t *value)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af02      	add	r7, sp, #8
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN sscanf_uint32_as_hhx_1 */

  /* USER CODE END sscanf_uint32_as_hhx_1 */
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx",
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	1cd9      	adds	r1, r3, #3
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	1c98      	adds	r0, r3, #2
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	9201      	str	r2, [sp, #4]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	460a      	mov	r2, r1
 800b1d4:	4904      	ldr	r1, [pc, #16]	; (800b1e8 <sscanf_uint32_as_hhx+0x34>)
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f015 f9ce 	bl	8020578 <tiny_sscanf>
 800b1dc:	4603      	mov	r3, r0
                     &((unsigned char *)(value))[1],
                     &((unsigned char *)(value))[0]);
  /* USER CODE BEGIN sscanf_uint32_as_hhx_2 */

  /* USER CODE END sscanf_uint32_as_hhx_2 */
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	08021474 	.word	0x08021474

0800b1ec <sscanf_16_hhx>:

static int sscanf_16_hhx(const char *from, uint8_t *pt)
{
 800b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ee:	b099      	sub	sp, #100	; 0x64
 800b1f0:	af0e      	add	r7, sp, #56	; 0x38
 800b1f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b1f4:	6239      	str	r1, [r7, #32]
  /* USER CODE BEGIN sscanf_16_hhx_1 */

  /* USER CODE END sscanf_16_hhx_1 */
  return tiny_sscanf(from, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx:%hhx",
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	f103 0c01 	add.w	ip, r3, #1
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	1c99      	adds	r1, r3, #2
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	1cd8      	adds	r0, r3, #3
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	1d1c      	adds	r4, r3, #4
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	1d5d      	adds	r5, r3, #5
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	1d9e      	adds	r6, r3, #6
 800b210:	6a3b      	ldr	r3, [r7, #32]
 800b212:	3307      	adds	r3, #7
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	f103 0208 	add.w	r2, r3, #8
 800b21c:	61ba      	str	r2, [r7, #24]
 800b21e:	6a3b      	ldr	r3, [r7, #32]
 800b220:	f103 0e09 	add.w	lr, r3, #9
 800b224:	f8c7 e014 	str.w	lr, [r7, #20]
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	330a      	adds	r3, #10
 800b22c:	613b      	str	r3, [r7, #16]
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	f103 020b 	add.w	r2, r3, #11
 800b234:	60fa      	str	r2, [r7, #12]
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	f103 0e0c 	add.w	lr, r3, #12
 800b23c:	f8c7 e008 	str.w	lr, [r7, #8]
 800b240:	6a3b      	ldr	r3, [r7, #32]
 800b242:	330d      	adds	r3, #13
 800b244:	607b      	str	r3, [r7, #4]
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f103 020e 	add.w	r2, r3, #14
 800b24c:	6a3b      	ldr	r3, [r7, #32]
 800b24e:	330f      	adds	r3, #15
 800b250:	930d      	str	r3, [sp, #52]	; 0x34
 800b252:	920c      	str	r2, [sp, #48]	; 0x30
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	930b      	str	r3, [sp, #44]	; 0x2c
 800b258:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800b25c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	9209      	str	r2, [sp, #36]	; 0x24
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	9308      	str	r3, [sp, #32]
 800b268:	f8d7 e014 	ldr.w	lr, [r7, #20]
 800b26c:	f8cd e01c 	str.w	lr, [sp, #28]
 800b270:	69ba      	ldr	r2, [r7, #24]
 800b272:	9206      	str	r2, [sp, #24]
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	9305      	str	r3, [sp, #20]
 800b278:	9604      	str	r6, [sp, #16]
 800b27a:	9503      	str	r5, [sp, #12]
 800b27c:	9402      	str	r4, [sp, #8]
 800b27e:	9001      	str	r0, [sp, #4]
 800b280:	9100      	str	r1, [sp, #0]
 800b282:	4663      	mov	r3, ip
 800b284:	6a3a      	ldr	r2, [r7, #32]
 800b286:	4904      	ldr	r1, [pc, #16]	; (800b298 <sscanf_16_hhx+0xac>)
 800b288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b28a:	f015 f975 	bl	8020578 <tiny_sscanf>
 800b28e:	4603      	mov	r3, r0
                     &pt[7], &pt[8], &pt[9], &pt[10], &pt[11], &pt[12], &pt[13],
                     &pt[14], &pt[15]);
  /* USER CODE BEGIN sscanf_16_hhx_2 */

  /* USER CODE END sscanf_16_hhx_2 */
}
 800b290:	4618      	mov	r0, r3
 800b292:	372c      	adds	r7, #44	; 0x2c
 800b294:	46bd      	mov	sp, r7
 800b296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b298:	08021488 	.word	0x08021488

0800b29c <print_uint32_as_02x>:

static void print_uint32_as_02x(uint32_t value)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af04      	add	r7, sp, #16
 800b2a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_uint32_as_02x_1 */

  /* USER CODE END print_uint32_as_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X\r\n",
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	3303      	adds	r3, #3
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	1d3b      	adds	r3, r7, #4
 800b2ae:	3302      	adds	r3, #2
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	1d3b      	adds	r3, r7, #4
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	1d3b      	adds	r3, r7, #4
 800b2be:	781b      	ldrb	r3, [r3, #0]
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	9002      	str	r0, [sp, #8]
 800b2c4:	9101      	str	r1, [sp, #4]
 800b2c6:	9200      	str	r2, [sp, #0]
 800b2c8:	4b04      	ldr	r3, [pc, #16]	; (800b2dc <print_uint32_as_02x+0x40>)
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	2000      	movs	r0, #0
 800b2d0:	f013 facc 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            (unsigned)((unsigned char *)(&value))[1],
            (unsigned)((unsigned char *)(&value))[0]);
  /* USER CODE BEGIN print_uint32_as_02x_2 */

  /* USER CODE END print_uint32_as_02x_2 */
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}
 800b2dc:	080214d8 	.word	0x080214d8

0800b2e0 <print_16_02x>:

static void print_16_02x(uint8_t *pt)
{
 800b2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e2:	b09b      	sub	sp, #108	; 0x6c
 800b2e4:	af10      	add	r7, sp, #64	; 0x40
 800b2e6:	6278      	str	r0, [r7, #36]	; 0x24
  /* USER CODE BEGIN print_16_02x_1 */

  /* USER CODE END print_16_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	461d      	mov	r5, r3
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	3303      	adds	r3, #3
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	461e      	mov	r6, r3
 800b306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b308:	3304      	adds	r3, #4
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	623b      	str	r3, [r7, #32]
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	3305      	adds	r3, #5
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	61fb      	str	r3, [r7, #28]
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	3306      	adds	r3, #6
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	61bb      	str	r3, [r7, #24]
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	3307      	adds	r3, #7
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	3308      	adds	r3, #8
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	613b      	str	r3, [r7, #16]
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	3309      	adds	r3, #9
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	60fb      	str	r3, [r7, #12]
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	330a      	adds	r3, #10
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	60bb      	str	r3, [r7, #8]
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	330b      	adds	r3, #11
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	607b      	str	r3, [r7, #4]
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	330c      	adds	r3, #12
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	603b      	str	r3, [r7, #0]
 800b34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b350:	330d      	adds	r3, #13
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	4619      	mov	r1, r3
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	330e      	adds	r3, #14
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	330f      	adds	r3, #15
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	930f      	str	r3, [sp, #60]	; 0x3c
 800b366:	920e      	str	r2, [sp, #56]	; 0x38
 800b368:	910d      	str	r1, [sp, #52]	; 0x34
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	920c      	str	r2, [sp, #48]	; 0x30
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	920b      	str	r2, [sp, #44]	; 0x2c
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	920a      	str	r2, [sp, #40]	; 0x28
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	9209      	str	r2, [sp, #36]	; 0x24
 800b37a:	693a      	ldr	r2, [r7, #16]
 800b37c:	9208      	str	r2, [sp, #32]
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	9207      	str	r2, [sp, #28]
 800b382:	69ba      	ldr	r2, [r7, #24]
 800b384:	9206      	str	r2, [sp, #24]
 800b386:	69fa      	ldr	r2, [r7, #28]
 800b388:	9205      	str	r2, [sp, #20]
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	9304      	str	r3, [sp, #16]
 800b38e:	9603      	str	r6, [sp, #12]
 800b390:	9502      	str	r5, [sp, #8]
 800b392:	9401      	str	r4, [sp, #4]
 800b394:	9000      	str	r0, [sp, #0]
 800b396:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <print_16_02x+0xcc>)
 800b398:	2200      	movs	r2, #0
 800b39a:	2100      	movs	r1, #0
 800b39c:	2000      	movs	r0, #0
 800b39e:	f013 fa65 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            pt[8], pt[9], pt[10], pt[11],
            pt[12], pt[13], pt[14], pt[15]);
  /* USER CODE BEGIN print_16_02x_2 */

  /* USER CODE END print_16_02x_2 */
}
 800b3a2:	bf00      	nop
 800b3a4:	372c      	adds	r7, #44	; 0x2c
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	080214f0 	.word	0x080214f0

0800b3b0 <print_8_02x>:

static void print_8_02x(uint8_t *pt)
{
 800b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b2:	b08b      	sub	sp, #44	; 0x2c
 800b3b4:	af08      	add	r7, sp, #32
 800b3b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_8_02x_1 */

  /* USER CODE END print_8_02x_1 */
  AT_PRINTF("%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	4619      	mov	r1, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3302      	adds	r3, #2
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	461c      	mov	r4, r3
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	461d      	mov	r5, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	3305      	adds	r3, #5
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	461e      	mov	r6, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3306      	adds	r3, #6
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	603b      	str	r3, [r7, #0]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	3307      	adds	r3, #7
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	9307      	str	r3, [sp, #28]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	9306      	str	r3, [sp, #24]
 800b3fa:	9605      	str	r6, [sp, #20]
 800b3fc:	9504      	str	r5, [sp, #16]
 800b3fe:	9403      	str	r4, [sp, #12]
 800b400:	9002      	str	r0, [sp, #8]
 800b402:	9101      	str	r1, [sp, #4]
 800b404:	9200      	str	r2, [sp, #0]
 800b406:	4b05      	ldr	r3, [pc, #20]	; (800b41c <print_8_02x+0x6c>)
 800b408:	2200      	movs	r2, #0
 800b40a:	2100      	movs	r1, #0
 800b40c:	2000      	movs	r0, #0
 800b40e:	f013 fa2d 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
            pt[0], pt[1], pt[2], pt[3], pt[4], pt[5], pt[6], pt[7]);
  /* USER CODE BEGIN print_8_02x_2 */

  /* USER CODE END print_8_02x_2 */
}
 800b412:	bf00      	nop
 800b414:	370c      	adds	r7, #12
 800b416:	46bd      	mov	sp, r7
 800b418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b41a:	bf00      	nop
 800b41c:	08021544 	.word	0x08021544

0800b420 <print_d>:

static void print_d(int32_t value)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af02      	add	r7, sp, #8
 800b426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_d_1 */

  /* USER CODE END print_d_1 */
  AT_PRINTF("%d\r\n", value);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	4b04      	ldr	r3, [pc, #16]	; (800b440 <print_d+0x20>)
 800b42e:	2200      	movs	r2, #0
 800b430:	2100      	movs	r1, #0
 800b432:	2000      	movs	r0, #0
 800b434:	f013 fa1a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_d_2 */

  /* USER CODE END print_d_2 */
}
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	08021570 	.word	0x08021570

0800b444 <print_u>:

static void print_u(uint32_t value)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN print_u_1 */

  /* USER CODE END print_u_1 */
  AT_PRINTF("%u\r\n", value);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	4b04      	ldr	r3, [pc, #16]	; (800b464 <print_u+0x20>)
 800b452:	2200      	movs	r2, #0
 800b454:	2100      	movs	r1, #0
 800b456:	2000      	movs	r0, #0
 800b458:	f013 fa08 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE BEGIN print_u_2 */

  /* USER CODE END print_u_2 */
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	08021578 	.word	0x08021578

0800b468 <OnCertifTimer>:

static void OnCertifTimer(void *context)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnCertifTimer_1 */

  /* USER CODE END OnCertifTimer_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaCertifTx), CFG_SEQ_Prio_0);
 800b470:	2100      	movs	r1, #0
 800b472:	2004      	movs	r0, #4
 800b474:	f013 fe2c 	bl	801f0d0 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnCertifTimer_2 */

  /* USER CODE END OnCertifTimer_2 */
}
 800b478:	bf00      	nop
 800b47a:	3708      	adds	r7, #8
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <CertifSend>:

static void CertifSend(void)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CertifSend_1 */

  /* USER CODE END CertifSend_1 */
  AppData.Buffer[0] = 0x43;
 800b484:	4b0c      	ldr	r3, [pc, #48]	; (800b4b8 <CertifSend+0x38>)
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	2243      	movs	r2, #67	; 0x43
 800b48a:	701a      	strb	r2, [r3, #0]
  AppData.BufferSize = 1;
 800b48c:	4b0a      	ldr	r3, [pc, #40]	; (800b4b8 <CertifSend+0x38>)
 800b48e:	2201      	movs	r2, #1
 800b490:	705a      	strb	r2, [r3, #1]
  AppData.Port = 99;
 800b492:	4b09      	ldr	r3, [pc, #36]	; (800b4b8 <CertifSend+0x38>)
 800b494:	2263      	movs	r2, #99	; 0x63
 800b496:	701a      	strb	r2, [r3, #0]

  /* Restart Tx to prevent a previous Join Failed */
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800b498:	f004 f91c 	bl	800f6d4 <LmHandlerJoinStatus>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d002      	beq.n	800b4a8 <CertifSend+0x28>
  {
    UTIL_TIMER_Start(&TxCertifTimer);
 800b4a2:	4806      	ldr	r0, [pc, #24]	; (800b4bc <CertifSend+0x3c>)
 800b4a4:	f014 fa4c 	bl	801f940 <UTIL_TIMER_Start>
  }
  LmHandlerSend(&AppData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, false);
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	4802      	ldr	r0, [pc, #8]	; (800b4b8 <CertifSend+0x38>)
 800b4b0:	f004 f92c 	bl	800f70c <LmHandlerSend>
}
 800b4b4:	bf00      	nop
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000054 	.word	0x20000054
 800b4bc:	20000d70 	.word	0x20000d70

0800b4c0 <CMD_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
void CMD_Init(void (*CmdProcessNotify)(void))
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_Init_1 */

  /* USER CODE END CMD_Init_1 */
  UTIL_ADV_TRACE_StartRxProcess(CMD_GetChar);
 800b4c8:	480d      	ldr	r0, [pc, #52]	; (800b500 <CMD_Init+0x40>)
 800b4ca:	f013 f9bf 	bl	801e84c <UTIL_ADV_TRACE_StartRxProcess>
  /* register call back*/
  if (CmdProcessNotify != NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <CMD_Init+0x1a>
  {
    NotifyCb = CmdProcessNotify;
 800b4d4:	4a0b      	ldr	r2, [pc, #44]	; (800b504 <CMD_Init+0x44>)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6013      	str	r3, [r2, #0]
  }
  widx = 0;
 800b4da:	4b0b      	ldr	r3, [pc, #44]	; (800b508 <CMD_Init+0x48>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
  ridx = 0;
 800b4e0:	4b0a      	ldr	r3, [pc, #40]	; (800b50c <CMD_Init+0x4c>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]
  charCount = 0;
 800b4e6:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <CMD_Init+0x50>)
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	601a      	str	r2, [r3, #0]
  i = 0;
 800b4ec:	4b09      	ldr	r3, [pc, #36]	; (800b514 <CMD_Init+0x54>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	601a      	str	r2, [r3, #0]
  circBuffOverflow = 0;
 800b4f2:	4b09      	ldr	r3, [pc, #36]	; (800b518 <CMD_Init+0x58>)
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN CMD_Init_2 */

  /* USER CODE END CMD_Init_2 */
}
 800b4f8:	bf00      	nop
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	0800b7c1 	.word	0x0800b7c1
 800b504:	20001008 	.word	0x20001008
 800b508:	20000ff8 	.word	0x20000ff8
 800b50c:	20000ffc 	.word	0x20000ffc
 800b510:	20001000 	.word	0x20001000
 800b514:	20000ff4 	.word	0x20000ff4
 800b518:	20001004 	.word	0x20001004

0800b51c <CMD_Process>:

void CMD_Process(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b090      	sub	sp, #64	; 0x40
 800b520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CMD_Process_1 */

  /* USER CODE END CMD_Process_1 */
  /* Process all commands */
  if (circBuffOverflow == 1)
 800b522:	4b6b      	ldr	r3, [pc, #428]	; (800b6d0 <CMD_Process+0x1b4>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b01      	cmp	r3, #1
 800b528:	f040 80c7 	bne.w	800b6ba <CMD_Process+0x19e>
  {
    com_error(AT_TEST_PARAM_OVERFLOW);
 800b52c:	2004      	movs	r0, #4
 800b52e:	f000 fa4d 	bl	800b9cc <com_error>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b532:	f3ef 8310 	mrs	r3, PRIMASK
 800b536:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800b538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /*Full flush in case of overflow */
    UTILS_ENTER_CRITICAL_SECTION();
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800b53c:	b672      	cpsid	i
}
 800b53e:	bf00      	nop
    ridx = widx;
 800b540:	4b64      	ldr	r3, [pc, #400]	; (800b6d4 <CMD_Process+0x1b8>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a64      	ldr	r2, [pc, #400]	; (800b6d8 <CMD_Process+0x1bc>)
 800b546:	6013      	str	r3, [r2, #0]
    charCount = 0;
 800b548:	4b64      	ldr	r3, [pc, #400]	; (800b6dc <CMD_Process+0x1c0>)
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]
    circBuffOverflow = 0;
 800b54e:	4b60      	ldr	r3, [pc, #384]	; (800b6d0 <CMD_Process+0x1b4>)
 800b550:	2200      	movs	r2, #0
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	f383 8810 	msr	PRIMASK, r3
}
 800b55e:	bf00      	nop
    UTILS_EXIT_CRITICAL_SECTION();
    i = 0;
 800b560:	4b5f      	ldr	r3, [pc, #380]	; (800b6e0 <CMD_Process+0x1c4>)
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
  }

  while (charCount != 0)
 800b566:	e0a8      	b.n	800b6ba <CMD_Process+0x19e>
  {
#if 0 /* echo On    */
    AT_PPRINTF("%c", circBuffer[ridx]);
#endif /* 0 */

    if (circBuffer[ridx] == AT_ERROR_RX_CHAR)
 800b568:	4b5b      	ldr	r3, [pc, #364]	; (800b6d8 <CMD_Process+0x1bc>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a5d      	ldr	r2, [pc, #372]	; (800b6e4 <CMD_Process+0x1c8>)
 800b56e:	5cd3      	ldrb	r3, [r2, r3]
 800b570:	2b01      	cmp	r3, #1
 800b572:	d124      	bne.n	800b5be <CMD_Process+0xa2>
    {
      ridx++;
 800b574:	4b58      	ldr	r3, [pc, #352]	; (800b6d8 <CMD_Process+0x1bc>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3301      	adds	r3, #1
 800b57a:	4a57      	ldr	r2, [pc, #348]	; (800b6d8 <CMD_Process+0x1bc>)
 800b57c:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800b57e:	4b56      	ldr	r3, [pc, #344]	; (800b6d8 <CMD_Process+0x1bc>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b50      	cmp	r3, #80	; 0x50
 800b584:	d102      	bne.n	800b58c <CMD_Process+0x70>
      {
        ridx = 0;
 800b586:	4b54      	ldr	r3, [pc, #336]	; (800b6d8 <CMD_Process+0x1bc>)
 800b588:	2200      	movs	r2, #0
 800b58a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b58c:	f3ef 8310 	mrs	r3, PRIMASK
 800b590:	61fb      	str	r3, [r7, #28]
  return(result);
 800b592:	69fb      	ldr	r3, [r7, #28]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800b596:	b672      	cpsid	i
}
 800b598:	bf00      	nop
      charCount--;
 800b59a:	4b50      	ldr	r3, [pc, #320]	; (800b6dc <CMD_Process+0x1c0>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	4a4e      	ldr	r2, [pc, #312]	; (800b6dc <CMD_Process+0x1c0>)
 800b5a2:	6013      	str	r3, [r2, #0]
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	f383 8810 	msr	PRIMASK, r3
}
 800b5ae:	bf00      	nop
      UTILS_EXIT_CRITICAL_SECTION();
      com_error(AT_RX_ERROR);
 800b5b0:	2006      	movs	r0, #6
 800b5b2:	f000 fa0b 	bl	800b9cc <com_error>
      i = 0;
 800b5b6:	4b4a      	ldr	r3, [pc, #296]	; (800b6e0 <CMD_Process+0x1c4>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	e07d      	b.n	800b6ba <CMD_Process+0x19e>
    }
    else if ((circBuffer[ridx] == '\r') || (circBuffer[ridx] == '\n'))
 800b5be:	4b46      	ldr	r3, [pc, #280]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a48      	ldr	r2, [pc, #288]	; (800b6e4 <CMD_Process+0x1c8>)
 800b5c4:	5cd3      	ldrb	r3, [r2, r3]
 800b5c6:	2b0d      	cmp	r3, #13
 800b5c8:	d005      	beq.n	800b5d6 <CMD_Process+0xba>
 800b5ca:	4b43      	ldr	r3, [pc, #268]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a45      	ldr	r2, [pc, #276]	; (800b6e4 <CMD_Process+0x1c8>)
 800b5d0:	5cd3      	ldrb	r3, [r2, r3]
 800b5d2:	2b0a      	cmp	r3, #10
 800b5d4:	d13d      	bne.n	800b652 <CMD_Process+0x136>
    {
      ridx++;
 800b5d6:	4b40      	ldr	r3, [pc, #256]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	4a3e      	ldr	r2, [pc, #248]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5de:	6013      	str	r3, [r2, #0]
      if (ridx == CIRC_BUFF_SIZE)
 800b5e0:	4b3d      	ldr	r3, [pc, #244]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b50      	cmp	r3, #80	; 0x50
 800b5e6:	d102      	bne.n	800b5ee <CMD_Process+0xd2>
      {
        ridx = 0;
 800b5e8:	4b3b      	ldr	r3, [pc, #236]	; (800b6d8 <CMD_Process+0x1bc>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5ee:	f3ef 8310 	mrs	r3, PRIMASK
 800b5f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b5f4:	697b      	ldr	r3, [r7, #20]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b5f6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800b5f8:	b672      	cpsid	i
}
 800b5fa:	bf00      	nop
      charCount--;
 800b5fc:	4b37      	ldr	r3, [pc, #220]	; (800b6dc <CMD_Process+0x1c0>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	3b01      	subs	r3, #1
 800b602:	4a36      	ldr	r2, [pc, #216]	; (800b6dc <CMD_Process+0x1c0>)
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b608:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	f383 8810 	msr	PRIMASK, r3
}
 800b610:	bf00      	nop
      UTILS_EXIT_CRITICAL_SECTION();

      if (i != 0)
 800b612:	4b33      	ldr	r3, [pc, #204]	; (800b6e0 <CMD_Process+0x1c4>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d04f      	beq.n	800b6ba <CMD_Process+0x19e>
      {
        command[i] = '\0';
 800b61a:	4b31      	ldr	r3, [pc, #196]	; (800b6e0 <CMD_Process+0x1c4>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a32      	ldr	r2, [pc, #200]	; (800b6e8 <CMD_Process+0x1cc>)
 800b620:	2100      	movs	r1, #0
 800b622:	54d1      	strb	r1, [r2, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b624:	f3ef 8310 	mrs	r3, PRIMASK
 800b628:	60fb      	str	r3, [r7, #12]
  return(result);
 800b62a:	68fb      	ldr	r3, [r7, #12]
        UTILS_ENTER_CRITICAL_SECTION();
 800b62c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 800b62e:	b672      	cpsid	i
}
 800b630:	bf00      	nop
        CMD_ProcessBackSpace(command);
 800b632:	482d      	ldr	r0, [pc, #180]	; (800b6e8 <CMD_Process+0x1cc>)
 800b634:	f000 f85a 	bl	800b6ec <CMD_ProcessBackSpace>
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	f383 8810 	msr	PRIMASK, r3
}
 800b642:	bf00      	nop
        UTILS_EXIT_CRITICAL_SECTION();
        parse_cmd(command);
 800b644:	4828      	ldr	r0, [pc, #160]	; (800b6e8 <CMD_Process+0x1cc>)
 800b646:	f000 f8fb 	bl	800b840 <parse_cmd>
        i = 0;
 800b64a:	4b25      	ldr	r3, [pc, #148]	; (800b6e0 <CMD_Process+0x1c4>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
    {
 800b650:	e033      	b.n	800b6ba <CMD_Process+0x19e>
      }
    }
    else if (i == (CMD_SIZE - 1))
 800b652:	4b23      	ldr	r3, [pc, #140]	; (800b6e0 <CMD_Process+0x1c4>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f240 221b 	movw	r2, #539	; 0x21b
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d106      	bne.n	800b66c <CMD_Process+0x150>
    {
      i = 0;
 800b65e:	4b20      	ldr	r3, [pc, #128]	; (800b6e0 <CMD_Process+0x1c4>)
 800b660:	2200      	movs	r2, #0
 800b662:	601a      	str	r2, [r3, #0]
      com_error(AT_TEST_PARAM_OVERFLOW);
 800b664:	2004      	movs	r0, #4
 800b666:	f000 f9b1 	bl	800b9cc <com_error>
 800b66a:	e026      	b.n	800b6ba <CMD_Process+0x19e>
    }
    else
    {
      command[i++] = circBuffer[ridx++];
 800b66c:	4b1a      	ldr	r3, [pc, #104]	; (800b6d8 <CMD_Process+0x1bc>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	1c53      	adds	r3, r2, #1
 800b672:	4919      	ldr	r1, [pc, #100]	; (800b6d8 <CMD_Process+0x1bc>)
 800b674:	600b      	str	r3, [r1, #0]
 800b676:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <CMD_Process+0x1c4>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	1c59      	adds	r1, r3, #1
 800b67c:	4818      	ldr	r0, [pc, #96]	; (800b6e0 <CMD_Process+0x1c4>)
 800b67e:	6001      	str	r1, [r0, #0]
 800b680:	4918      	ldr	r1, [pc, #96]	; (800b6e4 <CMD_Process+0x1c8>)
 800b682:	5c89      	ldrb	r1, [r1, r2]
 800b684:	4a18      	ldr	r2, [pc, #96]	; (800b6e8 <CMD_Process+0x1cc>)
 800b686:	54d1      	strb	r1, [r2, r3]
      if (ridx == CIRC_BUFF_SIZE)
 800b688:	4b13      	ldr	r3, [pc, #76]	; (800b6d8 <CMD_Process+0x1bc>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b50      	cmp	r3, #80	; 0x50
 800b68e:	d102      	bne.n	800b696 <CMD_Process+0x17a>
      {
        ridx = 0;
 800b690:	4b11      	ldr	r3, [pc, #68]	; (800b6d8 <CMD_Process+0x1bc>)
 800b692:	2200      	movs	r2, #0
 800b694:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b696:	f3ef 8310 	mrs	r3, PRIMASK
 800b69a:	607b      	str	r3, [r7, #4]
  return(result);
 800b69c:	687b      	ldr	r3, [r7, #4]
      }
      UTILS_ENTER_CRITICAL_SECTION();
 800b69e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 800b6a0:	b672      	cpsid	i
}
 800b6a2:	bf00      	nop
      charCount--;
 800b6a4:	4b0d      	ldr	r3, [pc, #52]	; (800b6dc <CMD_Process+0x1c0>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	4a0c      	ldr	r2, [pc, #48]	; (800b6dc <CMD_Process+0x1c0>)
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	f383 8810 	msr	PRIMASK, r3
}
 800b6b8:	bf00      	nop
  while (charCount != 0)
 800b6ba:	4b08      	ldr	r3, [pc, #32]	; (800b6dc <CMD_Process+0x1c0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f47f af52 	bne.w	800b568 <CMD_Process+0x4c>
    }
  }
  /* USER CODE BEGIN CMD_Process_2 */

  /* USER CODE END CMD_Process_2 */
}
 800b6c4:	bf00      	nop
 800b6c6:	bf00      	nop
 800b6c8:	3740      	adds	r7, #64	; 0x40
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20001004 	.word	0x20001004
 800b6d4:	20000ff8 	.word	0x20000ff8
 800b6d8:	20000ffc 	.word	0x20000ffc
 800b6dc:	20001000 	.word	0x20001000
 800b6e0:	20000ff4 	.word	0x20000ff4
 800b6e4:	20000d88 	.word	0x20000d88
 800b6e8:	20000dd8 	.word	0x20000dd8

0800b6ec <CMD_ProcessBackSpace>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t CMD_ProcessBackSpace(char *cmd)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b089      	sub	sp, #36	; 0x24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CMD_ProcessBackSpace_1 */

  /* USER CODE END CMD_ProcessBackSpace_1 */
  uint32_t i = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
  uint32_t bs_cnt = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61bb      	str	r3, [r7, #24]
  uint32_t cmd_len = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  /*get command length and number of backspace*/
  while (cmd[cmd_len] != '\0')
 800b700:	e00b      	b.n	800b71a <CMD_ProcessBackSpace+0x2e>
  {
    if (cmd[cmd_len] == '\b')
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	4413      	add	r3, r2
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b08      	cmp	r3, #8
 800b70c:	d102      	bne.n	800b714 <CMD_ProcessBackSpace+0x28>
    {
      bs_cnt++;
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	3301      	adds	r3, #1
 800b712:	61bb      	str	r3, [r7, #24]
    }
    cmd_len++;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	3301      	adds	r3, #1
 800b718:	617b      	str	r3, [r7, #20]
  while (cmd[cmd_len] != '\0')
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	4413      	add	r3, r2
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d1ed      	bne.n	800b702 <CMD_ProcessBackSpace+0x16>
  }
  /*for every backspace, remove backspace and its preceding character*/
  for (i = 0; i < bs_cnt; i++)
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
 800b72a:	e03f      	b.n	800b7ac <CMD_ProcessBackSpace+0xc0>
  {
    int curs = 0;
 800b72c:	2300      	movs	r3, #0
 800b72e:	613b      	str	r3, [r7, #16]
    int j = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	60fb      	str	r3, [r7, #12]

    /*set cursor to backspace*/
    while (cmd[curs] != '\b')
 800b734:	e002      	b.n	800b73c <CMD_ProcessBackSpace+0x50>
    {
      curs++;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	3301      	adds	r3, #1
 800b73a:	613b      	str	r3, [r7, #16]
    while (cmd[curs] != '\b')
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	4413      	add	r3, r2
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	2b08      	cmp	r3, #8
 800b746:	d1f6      	bne.n	800b736 <CMD_ProcessBackSpace+0x4a>
    }
    if (curs > 0)
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd28      	ble.n	800b7a0 <CMD_ProcessBackSpace+0xb4>
    {
      for (j = curs - 1; j < cmd_len - 2; j++)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	3b01      	subs	r3, #1
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	e00b      	b.n	800b76e <CMD_ProcessBackSpace+0x82>
      {
        cmd[j] = cmd[j + 2];
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3302      	adds	r3, #2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	441a      	add	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6879      	ldr	r1, [r7, #4]
 800b762:	440b      	add	r3, r1
 800b764:	7812      	ldrb	r2, [r2, #0]
 800b766:	701a      	strb	r2, [r3, #0]
      for (j = curs - 1; j < cmd_len - 2; j++)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	3301      	adds	r3, #1
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	1e9a      	subs	r2, r3, #2
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d8ee      	bhi.n	800b756 <CMD_ProcessBackSpace+0x6a>
      }
      cmd[j++] = '\0';
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	60fa      	str	r2, [r7, #12]
 800b77e:	461a      	mov	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4413      	add	r3, r2
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
      cmd[j++] = '\0';
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	60fa      	str	r2, [r7, #12]
 800b78e:	461a      	mov	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4413      	add	r3, r2
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
      cmd_len -= 2;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	3b02      	subs	r3, #2
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	e002      	b.n	800b7a6 <CMD_ProcessBackSpace+0xba>
    }
    else
    {
      return -1;
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a4:	e007      	b.n	800b7b6 <CMD_ProcessBackSpace+0xca>
  for (i = 0; i < bs_cnt; i++)
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	3301      	adds	r3, #1
 800b7aa:	61fb      	str	r3, [r7, #28]
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	69bb      	ldr	r3, [r7, #24]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d3bb      	bcc.n	800b72c <CMD_ProcessBackSpace+0x40>
    }
  }
  return 0;
 800b7b4:	2300      	movs	r3, #0
  /* USER CODE BEGIN CMD_ProcessBackSpace_2 */

  /* USER CODE END CMD_ProcessBackSpace_2 */
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3724      	adds	r7, #36	; 0x24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bc80      	pop	{r7}
 800b7be:	4770      	bx	lr

0800b7c0 <CMD_GetChar>:

static void CMD_GetChar(uint8_t *rxChar, uint16_t size, uint8_t error)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	807b      	strh	r3, [r7, #2]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	707b      	strb	r3, [r7, #1]
  /* USER CODE BEGIN CMD_GetChar_1 */

  /* USER CODE END CMD_GetChar_1 */
  charCount++;
 800b7d0:	4b16      	ldr	r3, [pc, #88]	; (800b82c <CMD_GetChar+0x6c>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4a15      	ldr	r2, [pc, #84]	; (800b82c <CMD_GetChar+0x6c>)
 800b7d8:	6013      	str	r3, [r2, #0]
  if (charCount == (CIRC_BUFF_SIZE + 1))
 800b7da:	4b14      	ldr	r3, [pc, #80]	; (800b82c <CMD_GetChar+0x6c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b51      	cmp	r3, #81	; 0x51
 800b7e0:	d108      	bne.n	800b7f4 <CMD_GetChar+0x34>
  {
    circBuffOverflow = 1;
 800b7e2:	4b13      	ldr	r3, [pc, #76]	; (800b830 <CMD_GetChar+0x70>)
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
    charCount--;
 800b7e8:	4b10      	ldr	r3, [pc, #64]	; (800b82c <CMD_GetChar+0x6c>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	3b01      	subs	r3, #1
 800b7ee:	4a0f      	ldr	r2, [pc, #60]	; (800b82c <CMD_GetChar+0x6c>)
 800b7f0:	6013      	str	r3, [r2, #0]
 800b7f2:	e00f      	b.n	800b814 <CMD_GetChar+0x54>
  }
  else
  {
    circBuffer[widx++] = *rxChar;
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <CMD_GetChar+0x74>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	490e      	ldr	r1, [pc, #56]	; (800b834 <CMD_GetChar+0x74>)
 800b7fc:	600a      	str	r2, [r1, #0]
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	7811      	ldrb	r1, [r2, #0]
 800b802:	4a0d      	ldr	r2, [pc, #52]	; (800b838 <CMD_GetChar+0x78>)
 800b804:	54d1      	strb	r1, [r2, r3]
    if (widx == CIRC_BUFF_SIZE)
 800b806:	4b0b      	ldr	r3, [pc, #44]	; (800b834 <CMD_GetChar+0x74>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b50      	cmp	r3, #80	; 0x50
 800b80c:	d102      	bne.n	800b814 <CMD_GetChar+0x54>
    {
      widx = 0;
 800b80e:	4b09      	ldr	r3, [pc, #36]	; (800b834 <CMD_GetChar+0x74>)
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
    }
  }

  if (NotifyCb != NULL)
 800b814:	4b09      	ldr	r3, [pc, #36]	; (800b83c <CMD_GetChar+0x7c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <CMD_GetChar+0x62>
  {
    NotifyCb();
 800b81c:	4b07      	ldr	r3, [pc, #28]	; (800b83c <CMD_GetChar+0x7c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4798      	blx	r3
  }
  /* USER CODE BEGIN CMD_GetChar_2 */

  /* USER CODE END CMD_GetChar_2 */
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	20001000 	.word	0x20001000
 800b830:	20001004 	.word	0x20001004
 800b834:	20000ff8 	.word	0x20000ff8
 800b838:	20000d88 	.word	0x20000d88
 800b83c:	20001008 	.word	0x20001008

0800b840 <parse_cmd>:

static void parse_cmd(const char *cmd)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN parse_cmd_1 */

  /* USER CODE END parse_cmd_1 */
  ATEerror_t status = AT_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	75fb      	strb	r3, [r7, #23]
  const struct ATCommand_s *Current_ATCommand;
  int32_t i;

  if ((cmd[0] != 'A') || (cmd[1] != 'T'))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b41      	cmp	r3, #65	; 0x41
 800b852:	d104      	bne.n	800b85e <parse_cmd+0x1e>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3301      	adds	r3, #1
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	2b54      	cmp	r3, #84	; 0x54
 800b85c:	d002      	beq.n	800b864 <parse_cmd+0x24>
  {
    status = AT_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	75fb      	strb	r3, [r7, #23]
 800b862:	e0a7      	b.n	800b9b4 <parse_cmd+0x174>
  }
  else if (cmd[2] == '\0')
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3302      	adds	r3, #2
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f000 80a2 	beq.w	800b9b4 <parse_cmd+0x174>
  {
    /* status = AT_OK; */
  }
  else if (cmd[2] == '?')
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	3302      	adds	r3, #2
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b3f      	cmp	r3, #63	; 0x3f
 800b878:	d129      	bne.n	800b8ce <parse_cmd+0x8e>
  {
#ifdef NO_HELP
#else
    AT_PPRINTF("AT+<CMD>?        : Help on <CMD>\r\n"
 800b87a:	4b52      	ldr	r3, [pc, #328]	; (800b9c4 <parse_cmd+0x184>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	2100      	movs	r1, #0
 800b880:	2000      	movs	r0, #0
 800b882:	f012 fff3 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1f6      	bne.n	800b87a <parse_cmd+0x3a>
               "AT+<CMD>         : Run <CMD>\r\n"
               "AT+<CMD>=<value> : Set the value\r\n"
               "AT+<CMD>=?       : Get the value\r\n");
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b88c:	2300      	movs	r3, #0
 800b88e:	613b      	str	r3, [r7, #16]
 800b890:	e013      	b.n	800b8ba <parse_cmd+0x7a>
    {
      AT_PPRINTF(ATCommand[i].help_string);
 800b892:	494d      	ldr	r1, [pc, #308]	; (800b9c8 <parse_cmd+0x188>)
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	4613      	mov	r3, r2
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	4413      	add	r3, r2
 800b89c:	00db      	lsls	r3, r3, #3
 800b89e:	440b      	add	r3, r1
 800b8a0:	3314      	adds	r3, #20
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	f012 ffdf 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d1ee      	bne.n	800b892 <parse_cmd+0x52>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	613b      	str	r3, [r7, #16]
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b24      	cmp	r3, #36	; 0x24
 800b8be:	d9e8      	bls.n	800b892 <parse_cmd+0x52>
    }

    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b8c0:	bf00      	nop
 800b8c2:	f012 ffb1 	bl	801e828 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d1fa      	bne.n	800b8c2 <parse_cmd+0x82>
 800b8cc:	e072      	b.n	800b9b4 <parse_cmd+0x174>
#endif /* !NO_HELP */
  }
  else
  {
    /* point to the start of the command, excluding AT */
    status = AT_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	75fb      	strb	r3, [r7, #23]
    cmd += 2;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3302      	adds	r3, #2
 800b8d6:	607b      	str	r3, [r7, #4]
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
 800b8dc:	e067      	b.n	800b9ae <parse_cmd+0x16e>
    {
      if (strncmp(cmd, ATCommand[i].string, ATCommand[i].size_string) == 0)
 800b8de:	493a      	ldr	r1, [pc, #232]	; (800b9c8 <parse_cmd+0x188>)
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	005b      	lsls	r3, r3, #1
 800b8e6:	4413      	add	r3, r2
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	440b      	add	r3, r1
 800b8ec:	6819      	ldr	r1, [r3, #0]
 800b8ee:	4836      	ldr	r0, [pc, #216]	; (800b9c8 <parse_cmd+0x188>)
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	005b      	lsls	r3, r3, #1
 800b8f6:	4413      	add	r3, r2
 800b8f8:	00db      	lsls	r3, r3, #3
 800b8fa:	4403      	add	r3, r0
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	461a      	mov	r2, r3
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f015 f8e4 	bl	8020ad0 <strncmp>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d14c      	bne.n	800b9a8 <parse_cmd+0x168>
      {
        Current_ATCommand = &(ATCommand[i]);
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4613      	mov	r3, r2
 800b912:	005b      	lsls	r3, r3, #1
 800b914:	4413      	add	r3, r2
 800b916:	00db      	lsls	r3, r3, #3
 800b918:	4a2b      	ldr	r2, [pc, #172]	; (800b9c8 <parse_cmd+0x188>)
 800b91a:	4413      	add	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]
        /* point to the string after the command to parse it */
        cmd += Current_ATCommand->size_string;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4413      	add	r3, r2
 800b928:	607b      	str	r3, [r7, #4]

        /* parse after the command */
        switch (cmd[0])
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	2b3f      	cmp	r3, #63	; 0x3f
 800b930:	d02b      	beq.n	800b98a <parse_cmd+0x14a>
 800b932:	2b3f      	cmp	r3, #63	; 0x3f
 800b934:	dc36      	bgt.n	800b9a4 <parse_cmd+0x164>
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <parse_cmd+0x100>
 800b93a:	2b3d      	cmp	r3, #61	; 0x3d
 800b93c:	d007      	beq.n	800b94e <parse_cmd+0x10e>
#endif /* !NO_HELP */
            status = AT_OK;
            break;
          default:
            /* not recognized */
            break;
 800b93e:	e031      	b.n	800b9a4 <parse_cmd+0x164>
            status = Current_ATCommand->run(cmd);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	691b      	ldr	r3, [r3, #16]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	4798      	blx	r3
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]
            break;
 800b94c:	e02b      	b.n	800b9a6 <parse_cmd+0x166>
            if ((cmd[1] == '?') && (cmd[2] == '\0'))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	3301      	adds	r3, #1
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b3f      	cmp	r3, #63	; 0x3f
 800b956:	d10e      	bne.n	800b976 <parse_cmd+0x136>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3302      	adds	r3, #2
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d109      	bne.n	800b976 <parse_cmd+0x136>
              status = Current_ATCommand->get(cmd + 1);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	3201      	adds	r2, #1
 800b96a:	4610      	mov	r0, r2
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	75fb      	strb	r3, [r7, #23]
 800b972:	bf00      	nop
            break;
 800b974:	e017      	b.n	800b9a6 <parse_cmd+0x166>
              status = Current_ATCommand->set(cmd + 1);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	3201      	adds	r2, #1
 800b97e:	4610      	mov	r0, r2
 800b980:	4798      	blx	r3
 800b982:	4603      	mov	r3, r0
 800b984:	75fb      	strb	r3, [r7, #23]
            break;
 800b986:	e00e      	b.n	800b9a6 <parse_cmd+0x166>
          case '?':
 800b988:	bf00      	nop
            AT_PPRINTF(Current_ATCommand->help_string);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	695b      	ldr	r3, [r3, #20]
 800b98e:	2200      	movs	r2, #0
 800b990:	2100      	movs	r1, #0
 800b992:	2000      	movs	r0, #0
 800b994:	f012 ff6a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1f4      	bne.n	800b988 <parse_cmd+0x148>
            status = AT_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	75fb      	strb	r3, [r7, #23]
            break;
 800b9a2:	e000      	b.n	800b9a6 <parse_cmd+0x166>
            break;
 800b9a4:	bf00      	nop
        }

        /* we end the loop as the command was found */
        break;
 800b9a6:	e005      	b.n	800b9b4 <parse_cmd+0x174>
    for (i = 0; i < (sizeof(ATCommand) / sizeof(struct ATCommand_s)); i++)
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	613b      	str	r3, [r7, #16]
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b24      	cmp	r3, #36	; 0x24
 800b9b2:	d994      	bls.n	800b8de <parse_cmd+0x9e>
      }
    }
  }

  com_error(status);
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 f808 	bl	800b9cc <com_error>
  /* USER CODE BEGIN parse_cmd_2 */

  /* USER CODE END parse_cmd_2 */
}
 800b9bc:	bf00      	nop
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	08022408 	.word	0x08022408
 800b9c8:	08022bf8 	.word	0x08022bf8

0800b9cc <com_error>:

static void com_error(ATEerror_t error_type)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN com_error_1 */

  /* USER CODE END com_error_1 */
  if (error_type > AT_MAX)
 800b9d6:	79fb      	ldrb	r3, [r7, #7]
 800b9d8:	2b0a      	cmp	r3, #10
 800b9da:	d901      	bls.n	800b9e0 <com_error+0x14>
  {
    error_type = AT_MAX;
 800b9dc:	230a      	movs	r3, #10
 800b9de:	71fb      	strb	r3, [r7, #7]
  }
  AT_PPRINTF(ATError_description[error_type]);
 800b9e0:	79fb      	ldrb	r3, [r7, #7]
 800b9e2:	4a08      	ldr	r2, [pc, #32]	; (800ba04 <com_error+0x38>)
 800b9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	f012 ff3d 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1f3      	bne.n	800b9e0 <com_error+0x14>
  /* USER CODE BEGIN com_error_2 */

  /* USER CODE END com_error_2 */
}
 800b9f8:	bf00      	nop
 800b9fa:	bf00      	nop
 800b9fc:	3708      	adds	r7, #8
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	08022bcc 	.word	0x08022bcc

0800ba08 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800ba0c:	4b18      	ldr	r3, [pc, #96]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800ba12:	4b17      	ldr	r3, [pc, #92]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800ba18:	4b15      	ldr	r3, [pc, #84]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800ba1e:	4b14      	ldr	r3, [pc, #80]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 800ba24:	4b12      	ldr	r3, [pc, #72]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f043 0320 	orr.w	r3, r3, #32
 800ba2c:	4a10      	ldr	r2, [pc, #64]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba2e:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865) ;
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915) ;
 800ba30:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba38:	4a0d      	ldr	r2, [pc, #52]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba3a:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864) ;
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800ba3c:	4b0c      	ldr	r3, [pc, #48]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10c      	bne.n	800ba5e <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800ba44:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <LoraInfo_Init+0x6c>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	2100      	movs	r1, #0
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	f012 ff0e 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800ba50:	bf00      	nop
 800ba52:	f012 fee9 	bl	801e828 <UTIL_ADV_TRACE_IsBufferEmpty>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d1fa      	bne.n	800ba52 <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800ba5c:	e7fe      	b.n	800ba5c <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba60:	2200      	movs	r2, #0
 800ba62:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800ba64:	4b02      	ldr	r3, [pc, #8]	; (800ba70 <LoraInfo_Init+0x68>)
 800ba66:	2203      	movs	r2, #3
 800ba68:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800ba6a:	bf00      	nop
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000100c 	.word	0x2000100c
 800ba74:	08022490 	.word	0x08022490

0800ba78 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <LoraInfo_GetPtr+0x10>)
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bc80      	pop	{r7}
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	2000100c 	.word	0x2000100c

0800ba8c <TST_TxTone>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t TST_TxTone(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_TxTone_1 */

  /* USER CODE END TST_TxTone_1 */
  if ((TestState & TX_TEST_TONE) != TX_TEST_TONE)
 800ba90:	4b11      	ldr	r3, [pc, #68]	; (800bad8 <TST_TxTone+0x4c>)
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d118      	bne.n	800bace <TST_TxTone+0x42>
  {
    TestState |= TX_TEST_TONE;
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	; (800bad8 <TST_TxTone+0x4c>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f043 0301 	orr.w	r3, r3, #1
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <TST_TxTone+0x4c>)
 800baa8:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx FSK Test\r\n");
 800baaa:	4b0c      	ldr	r3, [pc, #48]	; (800badc <TST_TxTone+0x50>)
 800baac:	2201      	movs	r2, #1
 800baae:	2100      	movs	r1, #0
 800bab0:	2000      	movs	r0, #0
 800bab2:	f012 fedb 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetTxContinuousWave(testParam.freq, testParam.power, CONTINUOUS_TIMEOUT);
 800bab6:	4b0a      	ldr	r3, [pc, #40]	; (800bae0 <TST_TxTone+0x54>)
 800bab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baba:	4a0a      	ldr	r2, [pc, #40]	; (800bae4 <TST_TxTone+0x58>)
 800babc:	6850      	ldr	r0, [r2, #4]
 800babe:	4a09      	ldr	r2, [pc, #36]	; (800bae4 <TST_TxTone+0x58>)
 800bac0:	6892      	ldr	r2, [r2, #8]
 800bac2:	b251      	sxtb	r1, r2
 800bac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bac8:	4798      	blx	r3

    return 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	e001      	b.n	800bad2 <TST_TxTone+0x46>
  }
  else
  {
    return -1;
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_TxTone_2 */

  /* USER CODE END TST_TxTone_2 */
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	2000101c 	.word	0x2000101c
 800badc:	080224e0 	.word	0x080224e0
 800bae0:	0802333c 	.word	0x0802333c
 800bae4:	2000005c 	.word	0x2000005c

0800bae8 <TST_RxRssi>:

int32_t TST_RxRssi(void)
{
 800bae8:	b590      	push	{r4, r7, lr}
 800baea:	b097      	sub	sp, #92	; 0x5c
 800baec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TST_RxRssi_1 */

  /* USER CODE END TST_RxRssi_1 */
  uint32_t timeout = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	64fb      	str	r3, [r7, #76]	; 0x4c
  int16_t rssiVal = 0;
 800baf2:	2300      	movs	r3, #0
 800baf4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  RxConfigGeneric_t RxConfig;
  /* Test with LNA */
  /* check that test is not already started*/
  if ((TestState & RX_TEST_RSSI) != RX_TEST_RSSI)
 800baf8:	4b43      	ldr	r3, [pc, #268]	; (800bc08 <TST_RxRssi+0x120>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	f003 0302 	and.w	r3, r3, #2
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d17a      	bne.n	800bbfa <TST_RxRssi+0x112>
  {
    TestState |= RX_TEST_RSSI;
 800bb04:	4b40      	ldr	r3, [pc, #256]	; (800bc08 <TST_RxRssi+0x120>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f043 0302 	orr.w	r3, r3, #2
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	4b3e      	ldr	r3, [pc, #248]	; (800bc08 <TST_RxRssi+0x120>)
 800bb10:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Rx FSK Test\r\n");
 800bb12:	4b3e      	ldr	r3, [pc, #248]	; (800bc0c <TST_RxRssi+0x124>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	2100      	movs	r1, #0
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f012 fea7 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    Radio.SetChannel(testParam.freq);
 800bb1e:	4b3c      	ldr	r3, [pc, #240]	; (800bc10 <TST_RxRssi+0x128>)
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	4a3c      	ldr	r2, [pc, #240]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb24:	6852      	ldr	r2, [r2, #4]
 800bb26:	4610      	mov	r0, r2
 800bb28:	4798      	blx	r3

    /* RX Continuous */
    uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bb2a:	4a3b      	ldr	r2, [pc, #236]	; (800bc18 <TST_RxRssi+0x130>)
 800bb2c:	1d3b      	adds	r3, r7, #4
 800bb2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb32:	e883 0003 	stmia.w	r3, {r0, r1}
    RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800bb36:	4b37      	ldr	r3, [pc, #220]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d004      	beq.n	800bb48 <TST_RxRssi+0x60>
 800bb3e:	4b35      	ldr	r3, [pc, #212]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb42:	3308      	adds	r3, #8
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	e000      	b.n	800bb4a <TST_RxRssi+0x62>
 800bb48:	2300      	movs	r3, #0
 800bb4a:	743b      	strb	r3, [r7, #16]
    RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bb4c:	4b31      	ldr	r3, [pc, #196]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	617b      	str	r3, [r7, #20]
    RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bb52:	4b30      	ldr	r3, [pc, #192]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	61bb      	str	r3, [r7, #24]
    RxConfig.fsk.PreambleLen = 3;   /*in Byte*/
 800bb58:	2303      	movs	r3, #3
 800bb5a:	61fb      	str	r3, [r7, #28]
    RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bb62:	1d3b      	adds	r3, r7, #4
 800bb64:	627b      	str	r3, [r7, #36]	; 0x24
    RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800bb66:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bb6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bb72:	23f2      	movs	r3, #242	; 0xf2
 800bb74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    RxConfig.fsk.CrcPolynomial = 0x1021;
 800bb78:	f241 0321 	movw	r3, #4129	; 0x1021
 800bb7c:	867b      	strh	r3, [r7, #50]	; 0x32
    RxConfig.fsk.Whitening = RADIO_FSK_DC_FREEWHITENING;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800bb84:	4b22      	ldr	r3, [pc, #136]	; (800bc10 <TST_RxRssi+0x128>)
 800bb86:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800bb88:	f107 010c 	add.w	r1, r7, #12
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	2201      	movs	r2, #1
 800bb90:	2000      	movs	r0, #0
 800bb92:	47a0      	blx	r4

    timeout = 0xFFFFFF; /* continuous Rx */
 800bb94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bb98:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (testParam.lna == 0)
 800bb9a:	4b1e      	ldr	r3, [pc, #120]	; (800bc14 <TST_RxRssi+0x12c>)
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <TST_RxRssi+0xc4>
    {
      Radio.Rx(timeout);
 800bba2:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <TST_RxRssi+0x128>)
 800bba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bba6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bba8:	4798      	blx	r3
 800bbaa:	e003      	b.n	800bbb4 <TST_RxRssi+0xcc>
    }
    else
    {
      Radio.RxBoosted(timeout);
 800bbac:	4b18      	ldr	r3, [pc, #96]	; (800bc10 <TST_RxRssi+0x128>)
 800bbae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbb0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bbb2:	4798      	blx	r3
    }

    HAL_Delay(Radio.GetWakeupTime());   /* Wait for 50ms */
 800bbb4:	4b16      	ldr	r3, [pc, #88]	; (800bc10 <TST_RxRssi+0x128>)
 800bbb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbb8:	4798      	blx	r3
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7f5 fe98 	bl	80018f2 <HAL_Delay>

    rssiVal = Radio.Rssi(MODEM_FSK);
 800bbc2:	4b13      	ldr	r3, [pc, #76]	; (800bc10 <TST_RxRssi+0x128>)
 800bbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	4798      	blx	r3
 800bbca:	4603      	mov	r3, r0
 800bbcc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    APP_TPRINTF(">>> RSSI Value= %d dBm\r\n", rssiVal);
 800bbd0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	4b11      	ldr	r3, [pc, #68]	; (800bc1c <TST_RxRssi+0x134>)
 800bbd8:	2201      	movs	r2, #1
 800bbda:	2100      	movs	r1, #0
 800bbdc:	2000      	movs	r0, #0
 800bbde:	f012 fe45 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    Radio.Sleep();
 800bbe2:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <TST_RxRssi+0x128>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	4798      	blx	r3
    TestState &= ~RX_TEST_RSSI;
 800bbe8:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <TST_RxRssi+0x120>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	f023 0302 	bic.w	r3, r3, #2
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <TST_RxRssi+0x120>)
 800bbf4:	701a      	strb	r2, [r3, #0]
    return 0;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	e001      	b.n	800bbfe <TST_RxRssi+0x116>
  }
  else
  {
    return -1;
 800bbfa:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_RxRssi_2 */

  /* USER CODE END TST_RxRssi_2 */
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3754      	adds	r7, #84	; 0x54
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd90      	pop	{r4, r7, pc}
 800bc06:	bf00      	nop
 800bc08:	2000101c 	.word	0x2000101c
 800bc0c:	080224f0 	.word	0x080224f0
 800bc10:	0802333c 	.word	0x0802333c
 800bc14:	2000005c 	.word	0x2000005c
 800bc18:	0802251c 	.word	0x0802251c
 800bc1c:	08022500 	.word	0x08022500

0800bc20 <TST_set_config>:

int32_t  TST_set_config(testParameter_t *Param)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_set_config_1 */

  /* USER CODE END TST_set_config_1 */
  UTIL_MEM_cpy_8(&testParam, Param, sizeof(testParameter_t));
 800bc28:	2230      	movs	r2, #48	; 0x30
 800bc2a:	6879      	ldr	r1, [r7, #4]
 800bc2c:	4803      	ldr	r0, [pc, #12]	; (800bc3c <TST_set_config+0x1c>)
 800bc2e:	f013 f90f 	bl	801ee50 <UTIL_MEM_cpy_8>

  return 0;
 800bc32:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_set_config_2 */

  /* USER CODE END TST_set_config_2 */
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	2000005c 	.word	0x2000005c

0800bc40 <TST_get_config>:

int32_t TST_get_config(testParameter_t *Param)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_get_config_1 */

  /* USER CODE END TST_get_config_1 */
  UTIL_MEM_cpy_8(Param, &testParam, sizeof(testParameter_t));
 800bc48:	2230      	movs	r2, #48	; 0x30
 800bc4a:	4904      	ldr	r1, [pc, #16]	; (800bc5c <TST_get_config+0x1c>)
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f013 f8ff 	bl	801ee50 <UTIL_MEM_cpy_8>
  return 0;
 800bc52:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_get_config_2 */

  /* USER CODE END TST_get_config_2 */
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3708      	adds	r7, #8
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	2000005c 	.word	0x2000005c

0800bc60 <TST_stop>:

int32_t TST_stop(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TST_stop_1 */

  /* USER CODE END TST_stop_1 */
  TestState = 0;
 800bc64:	4b04      	ldr	r3, [pc, #16]	; (800bc78 <TST_stop+0x18>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	701a      	strb	r2, [r3, #0]

  /* Set the radio in Sleep*/
  Radio.Sleep();
 800bc6a:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <TST_stop+0x1c>)
 800bc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6e:	4798      	blx	r3

  return 0;
 800bc70:	2300      	movs	r3, #0
  /* USER CODE BEGIN TST_stop_2 */

  /* USER CODE END TST_stop_2 */
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	2000101c 	.word	0x2000101c
 800bc7c:	0802333c 	.word	0x0802333c

0800bc80 <TST_TX_Start>:

int32_t TST_TX_Start(int32_t nb_packet)
{
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b097      	sub	sp, #92	; 0x5c
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	6078      	str	r0, [r7, #4]

  /* USER CODE END TST_TX_Start_1 */
  int32_t i;
  TxConfigGeneric_t TxConfig;

  if ((TestState & TX_TEST_LORA) != TX_TEST_LORA)
 800bc88:	4b8c      	ldr	r3, [pc, #560]	; (800bebc <TST_TX_Start+0x23c>)
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	f003 0304 	and.w	r3, r3, #4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f040 810c 	bne.w	800beae <TST_TX_Start+0x22e>
  {
    TestState |= TX_TEST_LORA;
 800bc96:	4b89      	ldr	r3, [pc, #548]	; (800bebc <TST_TX_Start+0x23c>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	f043 0304 	orr.w	r3, r3, #4
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	4b86      	ldr	r3, [pc, #536]	; (800bebc <TST_TX_Start+0x23c>)
 800bca2:	701a      	strb	r2, [r3, #0]

    APP_TPRINTF("Tx LoRa Test\r\n");
 800bca4:	4b86      	ldr	r3, [pc, #536]	; (800bec0 <TST_TX_Start+0x240>)
 800bca6:	2201      	movs	r2, #1
 800bca8:	2100      	movs	r1, #0
 800bcaa:	2000      	movs	r0, #0
 800bcac:	f012 fdde 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800bcb0:	4b84      	ldr	r3, [pc, #528]	; (800bec4 <TST_TX_Start+0x244>)
 800bcb2:	4a85      	ldr	r2, [pc, #532]	; (800bec8 <TST_TX_Start+0x248>)
 800bcb4:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800bcb6:	4b83      	ldr	r3, [pc, #524]	; (800bec4 <TST_TX_Start+0x244>)
 800bcb8:	4a84      	ldr	r2, [pc, #528]	; (800becc <TST_TX_Start+0x24c>)
 800bcba:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800bcbc:	4b81      	ldr	r3, [pc, #516]	; (800bec4 <TST_TX_Start+0x244>)
 800bcbe:	4a84      	ldr	r2, [pc, #528]	; (800bed0 <TST_TX_Start+0x250>)
 800bcc0:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800bcc2:	4b80      	ldr	r3, [pc, #512]	; (800bec4 <TST_TX_Start+0x244>)
 800bcc4:	4a83      	ldr	r2, [pc, #524]	; (800bed4 <TST_TX_Start+0x254>)
 800bcc6:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800bcc8:	4b7e      	ldr	r3, [pc, #504]	; (800bec4 <TST_TX_Start+0x244>)
 800bcca:	4a83      	ldr	r2, [pc, #524]	; (800bed8 <TST_TX_Start+0x258>)
 800bccc:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800bcce:	4b83      	ldr	r3, [pc, #524]	; (800bedc <TST_TX_Start+0x25c>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	487c      	ldr	r0, [pc, #496]	; (800bec4 <TST_TX_Start+0x244>)
 800bcd4:	4798      	blx	r3
    /*Fill payload with PRBS9 data*/
    Prbs9_generator(payload, testParam.payloadLen);
 800bcd6:	4b82      	ldr	r3, [pc, #520]	; (800bee0 <TST_TX_Start+0x260>)
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4881      	ldr	r0, [pc, #516]	; (800bee4 <TST_TX_Start+0x264>)
 800bce0:	f000 fada 	bl	800c298 <Prbs9_generator>

    /* Launch several times payload: nb times given by user */
    for (i = 1; i <= nb_packet; i++)
 800bce4:	2301      	movs	r3, #1
 800bce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bce8:	e0d3      	b.n	800be92 <TST_TX_Start+0x212>
    {
      APP_TPRINTF("Tx %d of %d\r\n", i, nb_packet);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	9301      	str	r3, [sp, #4]
 800bcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	4b7d      	ldr	r3, [pc, #500]	; (800bee8 <TST_TX_Start+0x268>)
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	f012 fdb7 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      Radio.SetChannel(testParam.freq);
 800bcfe:	4b77      	ldr	r3, [pc, #476]	; (800bedc <TST_TX_Start+0x25c>)
 800bd00:	68db      	ldr	r3, [r3, #12]
 800bd02:	4a77      	ldr	r2, [pc, #476]	; (800bee0 <TST_TX_Start+0x260>)
 800bd04:	6852      	ldr	r2, [r2, #4]
 800bd06:	4610      	mov	r0, r2
 800bd08:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800bd0a:	4b75      	ldr	r3, [pc, #468]	; (800bee0 <TST_TX_Start+0x260>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d13d      	bne.n	800bd8e <TST_TX_Start+0x10e>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bd12:	4a76      	ldr	r2, [pc, #472]	; (800beec <TST_TX_Start+0x26c>)
 800bd14:	f107 030c 	add.w	r3, r7, #12
 800bd18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd1c:	e883 0003 	stmia.w	r3, {r0, r1}
        TxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 7);
 800bd20:	4b6f      	ldr	r3, [pc, #444]	; (800bee0 <TST_TX_Start+0x260>)
 800bd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d004      	beq.n	800bd32 <TST_TX_Start+0xb2>
 800bd28:	4b6d      	ldr	r3, [pc, #436]	; (800bee0 <TST_TX_Start+0x260>)
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	3307      	adds	r3, #7
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	e000      	b.n	800bd34 <TST_TX_Start+0xb4>
 800bd32:	2300      	movs	r3, #0
 800bd34:	753b      	strb	r3, [r7, #20]
        TxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bd36:	4b6a      	ldr	r3, [pc, #424]	; (800bee0 <TST_TX_Start+0x260>)
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	61bb      	str	r3, [r7, #24]
        TxConfig.fsk.FrequencyDeviation = testParam.fskDev;
 800bd3c:	4b68      	ldr	r3, [pc, #416]	; (800bee0 <TST_TX_Start+0x260>)
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	623b      	str	r3, [r7, #32]
        TxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bd42:	4b67      	ldr	r3, [pc, #412]	; (800bee0 <TST_TX_Start+0x260>)
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	61fb      	str	r3, [r7, #28]
        TxConfig.fsk.PreambleLen = 3;   /*in Byte        */
 800bd48:	2303      	movs	r3, #3
 800bd4a:	627b      	str	r3, [r7, #36]	; 0x24
        TxConfig.fsk.SyncWordLength = 3; /*in Byte        */
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        TxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bd52:	f107 030c 	add.w	r3, r7, #12
 800bd56:	62fb      	str	r3, [r7, #44]	; 0x2c
        TxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed  */
 800bd58:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bd5c:	863b      	strh	r3, [r7, #48]	; 0x30
        TxConfig.fsk.HeaderType = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        TxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bd64:	23f2      	movs	r3, #242	; 0xf2
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        TxConfig.fsk.CrcPolynomial = 0x1021;
 800bd6a:	f241 0321 	movw	r3, #4129	; 0x1021
 800bd6e:	86bb      	strh	r3, [r7, #52]	; 0x34
        TxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        Radio.RadioSetTxGenericConfig(GENERIC_FSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bd76:	4b59      	ldr	r3, [pc, #356]	; (800bedc <TST_TX_Start+0x25c>)
 800bd78:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bd7a:	4b59      	ldr	r3, [pc, #356]	; (800bee0 <TST_TX_Start+0x260>)
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	b25a      	sxtb	r2, r3
 800bd80:	f107 0114 	add.w	r1, r7, #20
 800bd84:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bd88:	2000      	movs	r0, #0
 800bd8a:	47a0      	blx	r4
 800bd8c:	e045      	b.n	800be1a <TST_TX_Start+0x19a>
      }
      else if (testParam.modulation == TEST_LORA)
 800bd8e:	4b54      	ldr	r3, [pc, #336]	; (800bee0 <TST_TX_Start+0x260>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d12b      	bne.n	800bdee <TST_TX_Start+0x16e>
      {
        /*lora modulation*/
        TxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800bd96:	4b52      	ldr	r3, [pc, #328]	; (800bee0 <TST_TX_Start+0x260>)
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        TxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800bda0:	4b4f      	ldr	r3, [pc, #316]	; (800bee0 <TST_TX_Start+0x260>)
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        TxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800bdaa:	4b4d      	ldr	r3, [pc, #308]	; (800bee0 <TST_TX_Start+0x260>)
 800bdac:	695b      	ldr	r3, [r3, #20]
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        TxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800bdb4:	4b4a      	ldr	r3, [pc, #296]	; (800bee0 <TST_TX_Start+0x260>)
 800bdb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb8:	b2db      	uxtb	r3, r3
 800bdba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
        TxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        TxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        TxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
        Radio.RadioSetTxGenericConfig(GENERIC_LORA, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bdd6:	4b41      	ldr	r3, [pc, #260]	; (800bedc <TST_TX_Start+0x25c>)
 800bdd8:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800bdda:	4b41      	ldr	r3, [pc, #260]	; (800bee0 <TST_TX_Start+0x260>)
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	b25a      	sxtb	r2, r3
 800bde0:	f107 0114 	add.w	r1, r7, #20
 800bde4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800bde8:	2001      	movs	r0, #1
 800bdea:	47a0      	blx	r4
 800bdec:	e015      	b.n	800be1a <TST_TX_Start+0x19a>
      }
      else if (testParam.modulation == TEST_BPSK)
 800bdee:	4b3c      	ldr	r3, [pc, #240]	; (800bee0 <TST_TX_Start+0x260>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d10e      	bne.n	800be14 <TST_TX_Start+0x194>
      {
        TxConfig.bpsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bdf6:	4b3a      	ldr	r3, [pc, #232]	; (800bee0 <TST_TX_Start+0x260>)
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	64bb      	str	r3, [r7, #72]	; 0x48
        Radio.RadioSetTxGenericConfig(GENERIC_BPSK, &TxConfig, testParam.power, TX_TIMEOUT_VALUE);
 800bdfc:	4b37      	ldr	r3, [pc, #220]	; (800bedc <TST_TX_Start+0x25c>)
 800bdfe:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 800be00:	4b37      	ldr	r3, [pc, #220]	; (800bee0 <TST_TX_Start+0x260>)
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	b25a      	sxtb	r2, r3
 800be06:	f107 0114 	add.w	r1, r7, #20
 800be0a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800be0e:	2002      	movs	r0, #2
 800be10:	47a0      	blx	r4
 800be12:	e002      	b.n	800be1a <TST_TX_Start+0x19a>
      }
      else
      {
        return -1; /*error*/
 800be14:	f04f 33ff 	mov.w	r3, #4294967295
 800be18:	e04b      	b.n	800beb2 <TST_TX_Start+0x232>
      }
      /* Send payload once*/
      Radio.Send(payload, testParam.payloadLen);
 800be1a:	4b30      	ldr	r3, [pc, #192]	; (800bedc <TST_TX_Start+0x25c>)
 800be1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1e:	4a30      	ldr	r2, [pc, #192]	; (800bee0 <TST_TX_Start+0x260>)
 800be20:	6a12      	ldr	r2, [r2, #32]
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	4611      	mov	r1, r2
 800be26:	482f      	ldr	r0, [pc, #188]	; (800bee4 <TST_TX_Start+0x264>)
 800be28:	4798      	blx	r3
      /* Wait Tx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800be2a:	2001      	movs	r0, #1
 800be2c:	f013 f99a 	bl	801f164 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800be30:	4b2a      	ldr	r3, [pc, #168]	; (800bedc <TST_TX_Start+0x25c>)
 800be32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be34:	4798      	blx	r3

      if (RadioTxDone_flag == 1)
 800be36:	4b2e      	ldr	r3, [pc, #184]	; (800bef0 <TST_TX_Start+0x270>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d105      	bne.n	800be4a <TST_TX_Start+0x1ca>
      {
        APP_TPRINTF("OnTxDone\r\n");
 800be3e:	4b2d      	ldr	r3, [pc, #180]	; (800bef4 <TST_TX_Start+0x274>)
 800be40:	2201      	movs	r2, #1
 800be42:	2100      	movs	r1, #0
 800be44:	2000      	movs	r0, #0
 800be46:	f012 fd11 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioTxTimeout_flag == 1)
 800be4a:	4b2b      	ldr	r3, [pc, #172]	; (800bef8 <TST_TX_Start+0x278>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d105      	bne.n	800be5e <TST_TX_Start+0x1de>
      {
        APP_TPRINTF("OnTxTimeout\r\n");
 800be52:	4b2a      	ldr	r3, [pc, #168]	; (800befc <TST_TX_Start+0x27c>)
 800be54:	2201      	movs	r2, #1
 800be56:	2100      	movs	r1, #0
 800be58:	2000      	movs	r0, #0
 800be5a:	f012 fd07 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800be5e:	4b28      	ldr	r3, [pc, #160]	; (800bf00 <TST_TX_Start+0x280>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d105      	bne.n	800be72 <TST_TX_Start+0x1f2>
      {
        APP_TPRINTF("OnRxError\r\n");
 800be66:	4b27      	ldr	r3, [pc, #156]	; (800bf04 <TST_TX_Start+0x284>)
 800be68:	2201      	movs	r2, #1
 800be6a:	2100      	movs	r1, #0
 800be6c:	2000      	movs	r0, #0
 800be6e:	f012 fcfd 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      }

      /*Delay between 2 consecutive Tx*/
      HAL_Delay(500);
 800be72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800be76:	f7f5 fd3c 	bl	80018f2 <HAL_Delay>
      /* Reset TX Done or timeout flags */
      RadioTxDone_flag = 0;
 800be7a:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <TST_TX_Start+0x270>)
 800be7c:	2200      	movs	r2, #0
 800be7e:	601a      	str	r2, [r3, #0]
      RadioTxTimeout_flag = 0;
 800be80:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <TST_TX_Start+0x278>)
 800be82:	2200      	movs	r2, #0
 800be84:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800be86:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <TST_TX_Start+0x280>)
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
    for (i = 1; i <= nb_packet; i++)
 800be8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be8e:	3301      	adds	r3, #1
 800be90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	429a      	cmp	r2, r3
 800be98:	f77f af27 	ble.w	800bcea <TST_TX_Start+0x6a>
    }
    TestState &= ~TX_TEST_LORA;
 800be9c:	4b07      	ldr	r3, [pc, #28]	; (800bebc <TST_TX_Start+0x23c>)
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	f023 0304 	bic.w	r3, r3, #4
 800bea4:	b2da      	uxtb	r2, r3
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <TST_TX_Start+0x23c>)
 800bea8:	701a      	strb	r2, [r3, #0]
    return 0;
 800beaa:	2300      	movs	r3, #0
 800beac:	e001      	b.n	800beb2 <TST_TX_Start+0x232>
  }
  else
  {
    return -1;
 800beae:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_TX_Start_2 */

  /* USER CODE END TST_TX_Start_2 */
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3754      	adds	r7, #84	; 0x54
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd90      	pop	{r4, r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000101c 	.word	0x2000101c
 800bec0:	08022524 	.word	0x08022524
 800bec4:	20001038 	.word	0x20001038
 800bec8:	0800c1f1 	.word	0x0800c1f1
 800becc:	0800c209 	.word	0x0800c209
 800bed0:	0800c251 	.word	0x0800c251
 800bed4:	0800c269 	.word	0x0800c269
 800bed8:	0800c281 	.word	0x0800c281
 800bedc:	0802333c 	.word	0x0802333c
 800bee0:	2000005c 	.word	0x2000005c
 800bee4:	20001054 	.word	0x20001054
 800bee8:	08022534 	.word	0x08022534
 800beec:	0802251c 	.word	0x0802251c
 800bef0:	20001020 	.word	0x20001020
 800bef4:	08022544 	.word	0x08022544
 800bef8:	20001024 	.word	0x20001024
 800befc:	08022550 	.word	0x08022550
 800bf00:	20001030 	.word	0x20001030
 800bf04:	08022560 	.word	0x08022560

0800bf08 <TST_RX_Start>:

int32_t TST_RX_Start(int32_t nb_packet)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b09d      	sub	sp, #116	; 0x74
 800bf0c:	af04      	add	r7, sp, #16
 800bf0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TST_RX_Start_1 */

  /* USER CODE END TST_RX_Start_1 */
  int32_t i;
  /* init of PER counter */
  uint32_t count_RxOk = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	65bb      	str	r3, [r7, #88]	; 0x58
  uint32_t count_RxKo = 0;
 800bf14:	2300      	movs	r3, #0
 800bf16:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t PER = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	653b      	str	r3, [r7, #80]	; 0x50
  RxConfigGeneric_t RxConfig = {0};
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	223c      	movs	r2, #60	; 0x3c
 800bf22:	2100      	movs	r1, #0
 800bf24:	4618      	mov	r0, r3
 800bf26:	f014 fdcb 	bl	8020ac0 <memset>

  if (((TestState & RX_TEST_LORA) != RX_TEST_LORA) && (nb_packet > 0))
 800bf2a:	4b9c      	ldr	r3, [pc, #624]	; (800c19c <TST_RX_Start+0x294>)
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f040 812b 	bne.w	800c18e <TST_RX_Start+0x286>
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f340 8127 	ble.w	800c18e <TST_RX_Start+0x286>
  {
    TestState |= RX_TEST_LORA;
 800bf40:	4b96      	ldr	r3, [pc, #600]	; (800c19c <TST_RX_Start+0x294>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f043 0308 	orr.w	r3, r3, #8
 800bf48:	b2da      	uxtb	r2, r3
 800bf4a:	4b94      	ldr	r3, [pc, #592]	; (800c19c <TST_RX_Start+0x294>)
 800bf4c:	701a      	strb	r2, [r3, #0]

    /* Radio initialization */
    RadioEvents.TxDone = OnTxDone;
 800bf4e:	4b94      	ldr	r3, [pc, #592]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf50:	4a94      	ldr	r2, [pc, #592]	; (800c1a4 <TST_RX_Start+0x29c>)
 800bf52:	601a      	str	r2, [r3, #0]
    RadioEvents.RxDone = OnRxDone;
 800bf54:	4b92      	ldr	r3, [pc, #584]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf56:	4a94      	ldr	r2, [pc, #592]	; (800c1a8 <TST_RX_Start+0x2a0>)
 800bf58:	609a      	str	r2, [r3, #8]
    RadioEvents.TxTimeout = OnTxTimeout;
 800bf5a:	4b91      	ldr	r3, [pc, #580]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf5c:	4a93      	ldr	r2, [pc, #588]	; (800c1ac <TST_RX_Start+0x2a4>)
 800bf5e:	605a      	str	r2, [r3, #4]
    RadioEvents.RxTimeout = OnRxTimeout;
 800bf60:	4b8f      	ldr	r3, [pc, #572]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf62:	4a93      	ldr	r2, [pc, #588]	; (800c1b0 <TST_RX_Start+0x2a8>)
 800bf64:	60da      	str	r2, [r3, #12]
    RadioEvents.RxError = OnRxError;
 800bf66:	4b8e      	ldr	r3, [pc, #568]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf68:	4a92      	ldr	r2, [pc, #584]	; (800c1b4 <TST_RX_Start+0x2ac>)
 800bf6a:	611a      	str	r2, [r3, #16]
    Radio.Init(&RadioEvents);
 800bf6c:	4b92      	ldr	r3, [pc, #584]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	488b      	ldr	r0, [pc, #556]	; (800c1a0 <TST_RX_Start+0x298>)
 800bf72:	4798      	blx	r3

    for (i = 1; i <= nb_packet; i++)
 800bf74:	2301      	movs	r3, #1
 800bf76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf78:	e0fb      	b.n	800c172 <TST_RX_Start+0x26a>
    {
      /* Rx config */
      Radio.SetChannel(testParam.freq);
 800bf7a:	4b8f      	ldr	r3, [pc, #572]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800bf7c:	68db      	ldr	r3, [r3, #12]
 800bf7e:	4a8f      	ldr	r2, [pc, #572]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bf80:	6852      	ldr	r2, [r2, #4]
 800bf82:	4610      	mov	r0, r2
 800bf84:	4798      	blx	r3

      if (testParam.modulation == TEST_FSK)
 800bf86:	4b8d      	ldr	r3, [pc, #564]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d13f      	bne.n	800c00e <TST_RX_Start+0x106>
      {
        /*fsk modulation*/
        uint8_t syncword[] = { 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800bf8e:	4a8c      	ldr	r2, [pc, #560]	; (800c1c0 <TST_RX_Start+0x2b8>)
 800bf90:	f107 0308 	add.w	r3, r7, #8
 800bf94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf98:	e883 0003 	stmia.w	r3, {r0, r1}
        RxConfig.fsk.ModulationShaping = (RADIO_FSK_ModShapings_t)((testParam.BTproduct == 0) ? 0 : testParam.BTproduct + 8);
 800bf9c:	4b87      	ldr	r3, [pc, #540]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d004      	beq.n	800bfae <TST_RX_Start+0xa6>
 800bfa4:	4b85      	ldr	r3, [pc, #532]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bfa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa8:	3308      	adds	r3, #8
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	e000      	b.n	800bfb0 <TST_RX_Start+0xa8>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	753b      	strb	r3, [r7, #20]
        RxConfig.fsk.Bandwidth = testParam.bandwidth;
 800bfb2:	4b82      	ldr	r3, [pc, #520]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	61bb      	str	r3, [r7, #24]
        RxConfig.fsk.BitRate = testParam.loraSf_datarate; /*BitRate*/
 800bfb8:	4b80      	ldr	r3, [pc, #512]	; (800c1bc <TST_RX_Start+0x2b4>)
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	61fb      	str	r3, [r7, #28]
        RxConfig.fsk.PreambleLen = 3; /*in Byte*/
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	623b      	str	r3, [r7, #32]
        RxConfig.fsk.SyncWordLength = 3; /*in Byte*/
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        RxConfig.fsk.SyncWord = syncword; /*SyncWord Buffer*/
 800bfc8:	f107 0308 	add.w	r3, r7, #8
 800bfcc:	62bb      	str	r3, [r7, #40]	; 0x28
        RxConfig.fsk.PreambleMinDetect = RADIO_FSK_PREAMBLE_DETECTOR_08_BITS;
 800bfce:	2304      	movs	r3, #4
 800bfd0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        RxConfig.fsk.whiteSeed = 0x01FF ; /*WhiteningSeed*/
 800bfd4:	f240 13ff 	movw	r3, #511	; 0x1ff
 800bfd8:	863b      	strh	r3, [r7, #48]	; 0x30
        RxConfig.fsk.LengthMode = RADIO_FSK_PACKET_VARIABLE_LENGTH; /* If the header is explicit, it will be transmitted in the GFSK packet. If the header is implicit, it will not be transmitted*/
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        RxConfig.fsk.CrcLength = RADIO_FSK_CRC_2_BYTES_CCIT;       /* Size of the CRC block in the GFSK packet*/
 800bfe0:	23f2      	movs	r3, #242	; 0xf2
 800bfe2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        RxConfig.fsk.CrcPolynomial = 0x1021;
 800bfe6:	f241 0321 	movw	r3, #4129	; 0x1021
 800bfea:	86fb      	strh	r3, [r7, #54]	; 0x36
        RxConfig.fsk.Whitening = RADIO_FSK_DC_FREE_OFF;
 800bfec:	2300      	movs	r3, #0
 800bfee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
        RxConfig.fsk.MaxPayloadLength = 255;
 800bff2:	23ff      	movs	r3, #255	; 0xff
 800bff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        RxConfig.fsk.AddrComp = RADIO_FSK_ADDRESSCOMP_FILT_OFF;
 800bff6:	2300      	movs	r3, #0
 800bff8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        Radio.RadioSetRxGenericConfig(GENERIC_FSK, &RxConfig, RX_CONTINUOUS_ON, 0);
 800bffc:	4b6e      	ldr	r3, [pc, #440]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800bffe:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c000:	f107 0110 	add.w	r1, r7, #16
 800c004:	2300      	movs	r3, #0
 800c006:	2201      	movs	r2, #1
 800c008:	2000      	movs	r0, #0
 800c00a:	47a0      	blx	r4
 800c00c:	e02f      	b.n	800c06e <TST_RX_Start+0x166>
      }
      else if (testParam.modulation == TEST_LORA)
 800c00e:	4b6b      	ldr	r3, [pc, #428]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b01      	cmp	r3, #1
 800c014:	d128      	bne.n	800c068 <TST_RX_Start+0x160>
      {
        /*Lora*/
        RxConfig.lora.Bandwidth = (RADIO_LoRaBandwidths_t) testParam.bandwidth;
 800c016:	4b69      	ldr	r3, [pc, #420]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        RxConfig.lora.SpreadingFactor = (RADIO_LoRaSpreadingFactors_t) testParam.loraSf_datarate; /*BitRate*/
 800c020:	4b66      	ldr	r3, [pc, #408]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	b2db      	uxtb	r3, r3
 800c026:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        RxConfig.lora.Coderate = (RADIO_LoRaCodingRates_t)testParam.codingRate;
 800c02a:	4b64      	ldr	r3, [pc, #400]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        RxConfig.lora.LowDatarateOptimize = (RADIO_Ld_Opt_t)testParam.lowDrOpt; /*0 inactive, 1 active, 2: auto*/
 800c034:	4b61      	ldr	r3, [pc, #388]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        RxConfig.lora.PreambleLen = LORA_PREAMBLE_LENGTH;
 800c03e:	2308      	movs	r3, #8
 800c040:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
        RxConfig.lora.LengthMode = RADIO_LORA_PACKET_VARIABLE_LENGTH;
 800c044:	2300      	movs	r3, #0
 800c046:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        RxConfig.lora.CrcMode = RADIO_LORA_CRC_ON;
 800c04a:	2301      	movs	r3, #1
 800c04c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
        RxConfig.lora.IqInverted = RADIO_LORA_IQ_NORMAL;
 800c050:	2300      	movs	r3, #0
 800c052:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        Radio.RadioSetRxGenericConfig(GENERIC_LORA, &RxConfig, RX_CONTINUOUS_ON, LORA_SYMBOL_TIMEOUT);
 800c056:	4b58      	ldr	r3, [pc, #352]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800c058:	6f5c      	ldr	r4, [r3, #116]	; 0x74
 800c05a:	f107 0110 	add.w	r1, r7, #16
 800c05e:	231e      	movs	r3, #30
 800c060:	2201      	movs	r2, #1
 800c062:	2001      	movs	r0, #1
 800c064:	47a0      	blx	r4
 800c066:	e002      	b.n	800c06e <TST_RX_Start+0x166>
      }
      else
      {
        return -1; /*error*/
 800c068:	f04f 33ff 	mov.w	r3, #4294967295
 800c06c:	e091      	b.n	800c192 <TST_RX_Start+0x28a>
      }

      Radio.Rx(RX_TIMEOUT_VALUE);
 800c06e:	4b52      	ldr	r3, [pc, #328]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800c070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c072:	f241 3088 	movw	r0, #5000	; 0x1388
 800c076:	4798      	blx	r3

      /* Wait Rx done/timeout */
      UTIL_SEQ_WaitEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c078:	2001      	movs	r0, #1
 800c07a:	f013 f873 	bl	801f164 <UTIL_SEQ_WaitEvt>
      Radio.Sleep();
 800c07e:	4b4e      	ldr	r3, [pc, #312]	; (800c1b8 <TST_RX_Start+0x2b0>)
 800c080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c082:	4798      	blx	r3

      if (RadioRxDone_flag == 1)
 800c084:	4b4f      	ldr	r3, [pc, #316]	; (800c1c4 <TST_RX_Start+0x2bc>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d12a      	bne.n	800c0e2 <TST_RX_Start+0x1da>
      {
        int16_t rssi = last_rx_rssi;
 800c08c:	4b4e      	ldr	r3, [pc, #312]	; (800c1c8 <TST_RX_Start+0x2c0>)
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        int8_t LoraSnr_FskCfo = last_rx_LoraSnr_FskCfo;
 800c094:	4b4d      	ldr	r3, [pc, #308]	; (800c1cc <TST_RX_Start+0x2c4>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        APP_TPRINTF("OnRxDone\r\n");
 800c09c:	4b4c      	ldr	r3, [pc, #304]	; (800c1d0 <TST_RX_Start+0x2c8>)
 800c09e:	2201      	movs	r2, #1
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	2000      	movs	r0, #0
 800c0a4:	f012 fbe2 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        if (testParam.modulation == TEST_FSK)
 800c0a8:	4b44      	ldr	r3, [pc, #272]	; (800c1bc <TST_RX_Start+0x2b4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10c      	bne.n	800c0ca <TST_RX_Start+0x1c2>
        {
          APP_TPRINTF("RssiValue=%d dBm, cfo=%dkHz\r\n", rssi, LoraSnr_FskCfo);
 800c0b0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c0b4:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 800c0b8:	9201      	str	r2, [sp, #4]
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	4b45      	ldr	r3, [pc, #276]	; (800c1d4 <TST_RX_Start+0x2cc>)
 800c0be:	2201      	movs	r2, #1
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	2000      	movs	r0, #0
 800c0c4:	f012 fbd2 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800c0c8:	e00b      	b.n	800c0e2 <TST_RX_Start+0x1da>
        }
        else
        {
          APP_TPRINTF("RssiValue=%d dBm, SnrValue=%ddB\r\n", rssi, LoraSnr_FskCfo);
 800c0ca:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c0ce:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 800c0d2:	9201      	str	r2, [sp, #4]
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	4b40      	ldr	r3, [pc, #256]	; (800c1d8 <TST_RX_Start+0x2d0>)
 800c0d8:	2201      	movs	r2, #1
 800c0da:	2100      	movs	r1, #0
 800c0dc:	2000      	movs	r0, #0
 800c0de:	f012 fbc5 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        }
      }

      if (RadioRxTimeout_flag == 1)
 800c0e2:	4b3e      	ldr	r3, [pc, #248]	; (800c1dc <TST_RX_Start+0x2d4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d105      	bne.n	800c0f6 <TST_RX_Start+0x1ee>
      {
        APP_TPRINTF("OnRxTimeout\r\n");
 800c0ea:	4b3d      	ldr	r3, [pc, #244]	; (800c1e0 <TST_RX_Start+0x2d8>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	2100      	movs	r1, #0
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	f012 fbbb 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      }

      if (RadioError_flag == 1)
 800c0f6:	4b3b      	ldr	r3, [pc, #236]	; (800c1e4 <TST_RX_Start+0x2dc>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d105      	bne.n	800c10a <TST_RX_Start+0x202>
      {
        APP_TPRINTF("OnRxError\r\n");
 800c0fe:	4b3a      	ldr	r3, [pc, #232]	; (800c1e8 <TST_RX_Start+0x2e0>)
 800c100:	2201      	movs	r2, #1
 800c102:	2100      	movs	r1, #0
 800c104:	2000      	movs	r0, #0
 800c106:	f012 fbb1 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
      }

      /*check flag*/
      if ((RadioRxTimeout_flag == 1) || (RadioError_flag == 1))
 800c10a:	4b34      	ldr	r3, [pc, #208]	; (800c1dc <TST_RX_Start+0x2d4>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d003      	beq.n	800c11a <TST_RX_Start+0x212>
 800c112:	4b34      	ldr	r3, [pc, #208]	; (800c1e4 <TST_RX_Start+0x2dc>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d102      	bne.n	800c120 <TST_RX_Start+0x218>
      {
        count_RxKo++;
 800c11a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c11c:	3301      	adds	r3, #1
 800c11e:	657b      	str	r3, [r7, #84]	; 0x54
      }
      if (RadioRxDone_flag == 1)
 800c120:	4b28      	ldr	r3, [pc, #160]	; (800c1c4 <TST_RX_Start+0x2bc>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b01      	cmp	r3, #1
 800c126:	d102      	bne.n	800c12e <TST_RX_Start+0x226>
      {
        count_RxOk++;
 800c128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c12a:	3301      	adds	r3, #1
 800c12c:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* Reset timeout flag */
      RadioRxDone_flag = 0;
 800c12e:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <TST_RX_Start+0x2bc>)
 800c130:	2200      	movs	r2, #0
 800c132:	601a      	str	r2, [r3, #0]
      RadioRxTimeout_flag = 0;
 800c134:	4b29      	ldr	r3, [pc, #164]	; (800c1dc <TST_RX_Start+0x2d4>)
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
      RadioError_flag = 0;
 800c13a:	4b2a      	ldr	r3, [pc, #168]	; (800c1e4 <TST_RX_Start+0x2dc>)
 800c13c:	2200      	movs	r2, #0
 800c13e:	601a      	str	r2, [r3, #0]

      /* Compute PER */
      PER = (100 * (count_RxKo)) / (count_RxKo + count_RxOk);
 800c140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c142:	2264      	movs	r2, #100	; 0x64
 800c144:	fb03 f202 	mul.w	r2, r3, r2
 800c148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c14a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c14c:	440b      	add	r3, r1
 800c14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c152:	653b      	str	r3, [r7, #80]	; 0x50
      APP_TPRINTF("Rx %d of %d  >>> PER= %d %%\r\n", i, nb_packet, PER);
 800c154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c156:	9302      	str	r3, [sp, #8]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	9301      	str	r3, [sp, #4]
 800c15c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c15e:	9300      	str	r3, [sp, #0]
 800c160:	4b22      	ldr	r3, [pc, #136]	; (800c1ec <TST_RX_Start+0x2e4>)
 800c162:	2201      	movs	r2, #1
 800c164:	2100      	movs	r1, #0
 800c166:	2000      	movs	r0, #0
 800c168:	f012 fb80 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    for (i = 1; i <= nb_packet; i++)
 800c16c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c16e:	3301      	adds	r3, #1
 800c170:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	429a      	cmp	r2, r3
 800c178:	f77f aeff 	ble.w	800bf7a <TST_RX_Start+0x72>
    }
    TestState &= ~RX_TEST_LORA;
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <TST_RX_Start+0x294>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	f023 0308 	bic.w	r3, r3, #8
 800c184:	b2da      	uxtb	r2, r3
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <TST_RX_Start+0x294>)
 800c188:	701a      	strb	r2, [r3, #0]
    return 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	e001      	b.n	800c192 <TST_RX_Start+0x28a>
  }
  else
  {
    return -1;
 800c18e:	f04f 33ff 	mov.w	r3, #4294967295
  }
  /* USER CODE BEGIN TST_RX_Start_2 */

  /* USER CODE END TST_RX_Start_2 */
}
 800c192:	4618      	mov	r0, r3
 800c194:	3764      	adds	r7, #100	; 0x64
 800c196:	46bd      	mov	sp, r7
 800c198:	bd90      	pop	{r4, r7, pc}
 800c19a:	bf00      	nop
 800c19c:	2000101c 	.word	0x2000101c
 800c1a0:	20001038 	.word	0x20001038
 800c1a4:	0800c1f1 	.word	0x0800c1f1
 800c1a8:	0800c209 	.word	0x0800c209
 800c1ac:	0800c251 	.word	0x0800c251
 800c1b0:	0800c269 	.word	0x0800c269
 800c1b4:	0800c281 	.word	0x0800c281
 800c1b8:	0802333c 	.word	0x0802333c
 800c1bc:	2000005c 	.word	0x2000005c
 800c1c0:	0802251c 	.word	0x0802251c
 800c1c4:	20001028 	.word	0x20001028
 800c1c8:	20001034 	.word	0x20001034
 800c1cc:	20001036 	.word	0x20001036
 800c1d0:	0802256c 	.word	0x0802256c
 800c1d4:	08022578 	.word	0x08022578
 800c1d8:	08022598 	.word	0x08022598
 800c1dc:	2000102c 	.word	0x2000102c
 800c1e0:	080225bc 	.word	0x080225bc
 800c1e4:	20001030 	.word	0x20001030
 800c1e8:	08022560 	.word	0x08022560
 800c1ec:	080225cc 	.word	0x080225cc

0800c1f0 <OnTxDone>:
/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/

void OnTxDone(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone_1 */

  /* USER CODE END OnTxDone_1 */
  /* Set TxDone flag */
  RadioTxDone_flag = 1;
 800c1f4:	4b03      	ldr	r3, [pc, #12]	; (800c204 <OnTxDone+0x14>)
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c1fa:	2001      	movs	r0, #1
 800c1fc:	f012 ff94 	bl	801f128 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxDone_2 */

  /* USER CODE END OnTxDone_2 */
}
 800c200:	bf00      	nop
 800c202:	bd80      	pop	{r7, pc}
 800c204:	20001020 	.word	0x20001020

0800c208 <OnRxDone>:

void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	4608      	mov	r0, r1
 800c212:	4611      	mov	r1, r2
 800c214:	461a      	mov	r2, r3
 800c216:	4603      	mov	r3, r0
 800c218:	817b      	strh	r3, [r7, #10]
 800c21a:	460b      	mov	r3, r1
 800c21c:	813b      	strh	r3, [r7, #8]
 800c21e:	4613      	mov	r3, r2
 800c220:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone_1 */

  /* USER CODE END OnRxDone_1 */
  last_rx_rssi = rssi;
 800c222:	4a08      	ldr	r2, [pc, #32]	; (800c244 <OnRxDone+0x3c>)
 800c224:	893b      	ldrh	r3, [r7, #8]
 800c226:	8013      	strh	r3, [r2, #0]
  last_rx_LoraSnr_FskCfo = LoraSnr_FskCfo;
 800c228:	4a07      	ldr	r2, [pc, #28]	; (800c248 <OnRxDone+0x40>)
 800c22a:	79fb      	ldrb	r3, [r7, #7]
 800c22c:	7013      	strb	r3, [r2, #0]

  /* Set Rxdone flag */
  RadioRxDone_flag = 1;
 800c22e:	4b07      	ldr	r3, [pc, #28]	; (800c24c <OnRxDone+0x44>)
 800c230:	2201      	movs	r2, #1
 800c232:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c234:	2001      	movs	r0, #1
 800c236:	f012 ff77 	bl	801f128 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxDone_2 */

  /* USER CODE END OnRxDone_2 */
}
 800c23a:	bf00      	nop
 800c23c:	3710      	adds	r7, #16
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	20001034 	.word	0x20001034
 800c248:	20001036 	.word	0x20001036
 800c24c:	20001028 	.word	0x20001028

0800c250 <OnTxTimeout>:

void OnTxTimeout(void)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout_1 */

  /* USER CODE END OnTxTimeout_1 */
  /* Set timeout flag */
  RadioTxTimeout_flag = 1;
 800c254:	4b03      	ldr	r3, [pc, #12]	; (800c264 <OnTxTimeout+0x14>)
 800c256:	2201      	movs	r2, #1
 800c258:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c25a:	2001      	movs	r0, #1
 800c25c:	f012 ff64 	bl	801f128 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnTxTimeout_2 */

  /* USER CODE END OnTxTimeout_2 */
}
 800c260:	bf00      	nop
 800c262:	bd80      	pop	{r7, pc}
 800c264:	20001024 	.word	0x20001024

0800c268 <OnRxTimeout>:

void OnRxTimeout(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout_1 */

  /* USER CODE END OnRxTimeout_1 */
  /* Set timeout flag */
  RadioRxTimeout_flag = 1;
 800c26c:	4b03      	ldr	r3, [pc, #12]	; (800c27c <OnRxTimeout+0x14>)
 800c26e:	2201      	movs	r2, #1
 800c270:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c272:	2001      	movs	r0, #1
 800c274:	f012 ff58 	bl	801f128 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxTimeout_2 */

  /* USER CODE END OnRxTimeout_2 */
}
 800c278:	bf00      	nop
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	2000102c 	.word	0x2000102c

0800c280 <OnRxError>:

void OnRxError(void)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError_1 */

  /* USER CODE END OnRxError_1 */
  /* Set error flag */
  RadioError_flag = 1;
 800c284:	4b03      	ldr	r3, [pc, #12]	; (800c294 <OnRxError+0x14>)
 800c286:	2201      	movs	r2, #1
 800c288:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_SetEvt(1 << CFG_SEQ_Evt_RadioOnTstRF);
 800c28a:	2001      	movs	r0, #1
 800c28c:	f012 ff4c 	bl	801f128 <UTIL_SEQ_SetEvt>
  /* USER CODE BEGIN OnRxError_2 */

  /* USER CODE END OnRxError_2 */
}
 800c290:	bf00      	nop
 800c292:	bd80      	pop	{r7, pc}
 800c294:	20001030 	.word	0x20001030

0800c298 <Prbs9_generator>:

static int32_t Prbs9_generator(uint8_t *payload, uint8_t len)
{
 800c298:	b590      	push	{r4, r7, lr}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN Prbs9_generator_1 */

  /* USER CODE END Prbs9_generator_1 */
  uint16_t prbs9_val = PRBS9_INIT;
 800c2a4:	2302      	movs	r3, #2
 800c2a6:	82fb      	strh	r3, [r7, #22]
  /*init payload to 0*/
  UTIL_MEM_set_8(payload, 0, len);
 800c2a8:	78fb      	ldrb	r3, [r7, #3]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f012 fdec 	bl	801ee8e <UTIL_MEM_set_8>

  for (int32_t i = 0; i < len * 8; i++)
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	613b      	str	r3, [r7, #16]
 800c2ba:	e038      	b.n	800c32e <Prbs9_generator+0x96>
  {
    /*fill buffer with prbs9 sequence*/
    int32_t newbit = (((prbs9_val >> 8) ^ (prbs9_val >> 4)) & 1);
 800c2bc:	8afb      	ldrh	r3, [r7, #22]
 800c2be:	0a1b      	lsrs	r3, r3, #8
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	8afb      	ldrh	r3, [r7, #22]
 800c2c4:	091b      	lsrs	r3, r3, #4
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	4053      	eors	r3, r2
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	60fb      	str	r3, [r7, #12]
    prbs9_val = ((prbs9_val << 1) | newbit) & 0x01ff;
 800c2d2:	8afb      	ldrh	r3, [r7, #22]
 800c2d4:	005b      	lsls	r3, r3, #1
 800c2d6:	b21a      	sxth	r2, r3
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	b21b      	sxth	r3, r3
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b21b      	sxth	r3, r3
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e6:	82fb      	strh	r3, [r7, #22]
    payload[i / 8] |= ((prbs9_val & 0x1) << (i % 8));
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	da00      	bge.n	800c2f0 <Prbs9_generator+0x58>
 800c2ee:	3307      	adds	r3, #7
 800c2f0:	10db      	asrs	r3, r3, #3
 800c2f2:	461c      	mov	r4, r3
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	b25a      	sxtb	r2, r3
 800c2fe:	8afb      	ldrh	r3, [r7, #22]
 800c300:	f003 0101 	and.w	r1, r3, #1
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	4258      	negs	r0, r3
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	f000 0007 	and.w	r0, r0, #7
 800c310:	bf58      	it	pl
 800c312:	4243      	negpl	r3, r0
 800c314:	fa01 f303 	lsl.w	r3, r1, r3
 800c318:	b25b      	sxtb	r3, r3
 800c31a:	4313      	orrs	r3, r2
 800c31c:	b25a      	sxtb	r2, r3
 800c31e:	4621      	mov	r1, r4
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	440b      	add	r3, r1
 800c324:	b2d2      	uxtb	r2, r2
 800c326:	701a      	strb	r2, [r3, #0]
  for (int32_t i = 0; i < len * 8; i++)
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	3301      	adds	r3, #1
 800c32c:	613b      	str	r3, [r7, #16]
 800c32e:	78fb      	ldrb	r3, [r7, #3]
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	429a      	cmp	r2, r3
 800c336:	dbc1      	blt.n	800c2bc <Prbs9_generator+0x24>
  }
  return 0;
 800c338:	2300      	movs	r3, #0
  /* USER CODE BEGIN Prbs9_generator_2 */

  /* USER CODE END Prbs9_generator_2 */
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	371c      	adds	r7, #28
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd90      	pop	{r4, r7, pc}

0800c342 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800c342:	b580      	push	{r7, lr}
 800c344:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 800c346:	f7f6 f863 	bl	8002410 <BSP_RADIO_Init>
 800c34a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800c35a:	79fb      	ldrb	r3, [r7, #7]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f6 f88b 	bl	8002478 <BSP_RADIO_ConfigRFSwitch>
 800c362:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 800c370:	f7f6 f8d0 	bl	8002514 <BSP_RADIO_GetTxConfig>
 800c374:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800c376:	4618      	mov	r0, r3
 800c378:	bd80      	pop	{r7, pc}

0800c37a <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 800c37e:	f7f6 f8d0 	bl	8002522 <BSP_RADIO_IsTCXO>
 800c382:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c384:	4618      	mov	r0, r3
 800c386:	bd80      	pop	{r7, pc}

0800c388 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 800c38c:	f7f6 f8d0 	bl	8002530 <BSP_RADIO_IsDCDC>
 800c390:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800c392:	4618      	mov	r0, r3
 800c394:	bd80      	pop	{r7, pc}

0800c396 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c396:	b480      	push	{r7}
 800c398:	b085      	sub	sp, #20
 800c39a:	af00      	add	r7, sp, #0
 800c39c:	4603      	mov	r3, r0
 800c39e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c3a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c3a8:	2b84      	cmp	r3, #132	; 0x84
 800c3aa:	d005      	beq.n	800c3b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c3ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	3303      	adds	r3, #3
 800c3b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bc80      	pop	{r7}
 800c3c2:	4770      	bx	lr

0800c3c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c3c8:	f000 fada 	bl	800c980 <vTaskStartScheduler>
  
  return osOK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c3d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d4:	b089      	sub	sp, #36	; 0x24
 800c3d6:	af04      	add	r7, sp, #16
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d020      	beq.n	800c426 <osThreadCreate+0x54>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d01c      	beq.n	800c426 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685c      	ldr	r4, [r3, #4]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681d      	ldr	r5, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691e      	ldr	r6, [r3, #16]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff ffc9 	bl	800c396 <makeFreeRtosPriority>
 800c404:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c40e:	9202      	str	r2, [sp, #8]
 800c410:	9301      	str	r3, [sp, #4]
 800c412:	9100      	str	r1, [sp, #0]
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	4632      	mov	r2, r6
 800c418:	4629      	mov	r1, r5
 800c41a:	4620      	mov	r0, r4
 800c41c:	f000 f8e8 	bl	800c5f0 <xTaskCreateStatic>
 800c420:	4603      	mov	r3, r0
 800c422:	60fb      	str	r3, [r7, #12]
 800c424:	e01c      	b.n	800c460 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685c      	ldr	r4, [r3, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c432:	b29e      	uxth	r6, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7ff ffab 	bl	800c396 <makeFreeRtosPriority>
 800c440:	4602      	mov	r2, r0
 800c442:	f107 030c 	add.w	r3, r7, #12
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	9200      	str	r2, [sp, #0]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	4632      	mov	r2, r6
 800c44e:	4629      	mov	r1, r5
 800c450:	4620      	mov	r0, r4
 800c452:	f000 f92a 	bl	800c6aa <xTaskCreate>
 800c456:	4603      	mov	r3, r0
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d001      	beq.n	800c460 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e000      	b.n	800c462 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c460:	68fb      	ldr	r3, [r7, #12]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c46a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d001      	beq.n	800c480 <osDelay+0x16>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	e000      	b.n	800c482 <osDelay+0x18>
 800c480:	2301      	movs	r3, #1
 800c482:	4618      	mov	r0, r3
 800c484:	f000 fa48 	bl	800c918 <vTaskDelay>
  
  return osOK;
 800c488:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f103 0208 	add.w	r2, r3, #8
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f103 0208 	add.w	r2, r3, #8
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f103 0208 	add.w	r2, r3, #8
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4c6:	bf00      	nop
 800c4c8:	370c      	adds	r7, #12
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bc80      	pop	{r7}
 800c4ce:	4770      	bx	lr

0800c4d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4de:	bf00      	nop
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bc80      	pop	{r7}
 800c4e6:	4770      	bx	lr

0800c4e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	68fa      	ldr	r2, [r7, #12]
 800c4fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	689a      	ldr	r2, [r3, #8]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	1c5a      	adds	r2, r3, #1
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	601a      	str	r2, [r3, #0]
}
 800c524:	bf00      	nop
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr

0800c52e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d103      	bne.n	800c54e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	691b      	ldr	r3, [r3, #16]
 800c54a:	60fb      	str	r3, [r7, #12]
 800c54c:	e00c      	b.n	800c568 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	3308      	adds	r3, #8
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e002      	b.n	800c55c <vListInsert+0x2e>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	429a      	cmp	r2, r3
 800c566:	d2f6      	bcs.n	800c556 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	685a      	ldr	r2, [r3, #4]
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	685b      	ldr	r3, [r3, #4]
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	601a      	str	r2, [r3, #0]
}
 800c594:	bf00      	nop
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	bc80      	pop	{r7}
 800c59c:	4770      	bx	lr

0800c59e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c59e:	b480      	push	{r7}
 800c5a0:	b085      	sub	sp, #20
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	6892      	ldr	r2, [r2, #8]
 800c5b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	6852      	ldr	r2, [r2, #4]
 800c5be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d103      	bne.n	800c5d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	689a      	ldr	r2, [r3, #8]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	1e5a      	subs	r2, r3, #1
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bc80      	pop	{r7}
 800c5ee:	4770      	bx	lr

0800c5f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08e      	sub	sp, #56	; 0x38
 800c5f4:	af04      	add	r7, sp, #16
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10a      	bne.n	800c636 <xTaskCreateStatic+0x46>
	__asm volatile
 800c620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c624:	f383 8811 	msr	BASEPRI, r3
 800c628:	f3bf 8f6f 	isb	sy
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	61fb      	str	r3, [r7, #28]
}
 800c632:	bf00      	nop
 800c634:	e7fe      	b.n	800c634 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c636:	2354      	movs	r3, #84	; 0x54
 800c638:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	2b54      	cmp	r3, #84	; 0x54
 800c63e:	d00a      	beq.n	800c656 <xTaskCreateStatic+0x66>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	61bb      	str	r3, [r7, #24]
}
 800c652:	bf00      	nop
 800c654:	e7fe      	b.n	800c654 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c656:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d01e      	beq.n	800c69c <xTaskCreateStatic+0xac>
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	2b00      	cmp	r3, #0
 800c662:	d01b      	beq.n	800c69c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c666:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c66c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	2202      	movs	r2, #2
 800c672:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c676:	2300      	movs	r3, #0
 800c678:	9303      	str	r3, [sp, #12]
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	9302      	str	r3, [sp, #8]
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	9301      	str	r3, [sp, #4]
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	68b9      	ldr	r1, [r7, #8]
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f000 f850 	bl	800c734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c696:	f000 f8d5 	bl	800c844 <prvAddNewTaskToReadyList>
 800c69a:	e001      	b.n	800c6a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c69c:	2300      	movs	r3, #0
 800c69e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c6a0:	697b      	ldr	r3, [r7, #20]
	}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3728      	adds	r7, #40	; 0x28
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b08c      	sub	sp, #48	; 0x30
 800c6ae:	af04      	add	r7, sp, #16
 800c6b0:	60f8      	str	r0, [r7, #12]
 800c6b2:	60b9      	str	r1, [r7, #8]
 800c6b4:	603b      	str	r3, [r7, #0]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6ba:	88fb      	ldrh	r3, [r7, #6]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f001 f824 	bl	800d70c <pvPortMalloc>
 800c6c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00e      	beq.n	800c6ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6cc:	2054      	movs	r0, #84	; 0x54
 800c6ce:	f001 f81d 	bl	800d70c <pvPortMalloc>
 800c6d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	631a      	str	r2, [r3, #48]	; 0x30
 800c6e0:	e005      	b.n	800c6ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c6e2:	6978      	ldr	r0, [r7, #20]
 800c6e4:	f001 f8d6 	bl	800d894 <vPortFree>
 800c6e8:	e001      	b.n	800c6ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d017      	beq.n	800c724 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6fc:	88fa      	ldrh	r2, [r7, #6]
 800c6fe:	2300      	movs	r3, #0
 800c700:	9303      	str	r3, [sp, #12]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	9302      	str	r3, [sp, #8]
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	9301      	str	r3, [sp, #4]
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	68b9      	ldr	r1, [r7, #8]
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 f80e 	bl	800c734 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c718:	69f8      	ldr	r0, [r7, #28]
 800c71a:	f000 f893 	bl	800c844 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c71e:	2301      	movs	r3, #1
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e002      	b.n	800c72a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c724:	f04f 33ff 	mov.w	r3, #4294967295
 800c728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c72a:	69bb      	ldr	r3, [r7, #24]
	}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3720      	adds	r7, #32
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c74c:	3b01      	subs	r3, #1
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	f023 0307 	bic.w	r3, r3, #7
 800c75a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	f003 0307 	and.w	r3, r3, #7
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <prvInitialiseNewTask+0x48>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	617b      	str	r3, [r7, #20]
}
 800c778:	bf00      	nop
 800c77a:	e7fe      	b.n	800c77a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d01f      	beq.n	800c7c2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c782:	2300      	movs	r3, #0
 800c784:	61fb      	str	r3, [r7, #28]
 800c786:	e012      	b.n	800c7ae <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c788:	68ba      	ldr	r2, [r7, #8]
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	7819      	ldrb	r1, [r3, #0]
 800c790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4413      	add	r3, r2
 800c796:	3334      	adds	r3, #52	; 0x34
 800c798:	460a      	mov	r2, r1
 800c79a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d006      	beq.n	800c7b6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	61fb      	str	r3, [r7, #28]
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	2b0f      	cmp	r3, #15
 800c7b2:	d9e9      	bls.n	800c788 <prvInitialiseNewTask+0x54>
 800c7b4:	e000      	b.n	800c7b8 <prvInitialiseNewTask+0x84>
			{
				break;
 800c7b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7c0:	e003      	b.n	800c7ca <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7cc:	2b06      	cmp	r3, #6
 800c7ce:	d901      	bls.n	800c7d4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c7d0:	2306      	movs	r3, #6
 800c7d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7de:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff fe70 	bl	800c4d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f2:	3318      	adds	r3, #24
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f7ff fe6b 	bl	800c4d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	f1c3 0207 	rsb	r2, r3, #7
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c80e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c812:	2200      	movs	r2, #0
 800c814:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	68f9      	ldr	r1, [r7, #12]
 800c822:	69b8      	ldr	r0, [r7, #24]
 800c824:	f000 fcd8 	bl	800d1d8 <pxPortInitialiseStack>
 800c828:	4602      	mov	r2, r0
 800c82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c82c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c83a:	bf00      	nop
 800c83c:	3720      	adds	r7, #32
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c84c:	f000 fdb6 	bl	800d3bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c850:	4b2a      	ldr	r3, [pc, #168]	; (800c8fc <prvAddNewTaskToReadyList+0xb8>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3301      	adds	r3, #1
 800c856:	4a29      	ldr	r2, [pc, #164]	; (800c8fc <prvAddNewTaskToReadyList+0xb8>)
 800c858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c85a:	4b29      	ldr	r3, [pc, #164]	; (800c900 <prvAddNewTaskToReadyList+0xbc>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d109      	bne.n	800c876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c862:	4a27      	ldr	r2, [pc, #156]	; (800c900 <prvAddNewTaskToReadyList+0xbc>)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c868:	4b24      	ldr	r3, [pc, #144]	; (800c8fc <prvAddNewTaskToReadyList+0xb8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d110      	bne.n	800c892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c870:	f000 fb70 	bl	800cf54 <prvInitialiseTaskLists>
 800c874:	e00d      	b.n	800c892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c876:	4b23      	ldr	r3, [pc, #140]	; (800c904 <prvAddNewTaskToReadyList+0xc0>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c87e:	4b20      	ldr	r3, [pc, #128]	; (800c900 <prvAddNewTaskToReadyList+0xbc>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c888:	429a      	cmp	r2, r3
 800c88a:	d802      	bhi.n	800c892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c88c:	4a1c      	ldr	r2, [pc, #112]	; (800c900 <prvAddNewTaskToReadyList+0xbc>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c892:	4b1d      	ldr	r3, [pc, #116]	; (800c908 <prvAddNewTaskToReadyList+0xc4>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	3301      	adds	r3, #1
 800c898:	4a1b      	ldr	r2, [pc, #108]	; (800c908 <prvAddNewTaskToReadyList+0xc4>)
 800c89a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	409a      	lsls	r2, r3
 800c8a4:	4b19      	ldr	r3, [pc, #100]	; (800c90c <prvAddNewTaskToReadyList+0xc8>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	4a18      	ldr	r2, [pc, #96]	; (800c90c <prvAddNewTaskToReadyList+0xc8>)
 800c8ac:	6013      	str	r3, [r2, #0]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b2:	4613      	mov	r3, r2
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	009b      	lsls	r3, r3, #2
 800c8ba:	4a15      	ldr	r2, [pc, #84]	; (800c910 <prvAddNewTaskToReadyList+0xcc>)
 800c8bc:	441a      	add	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	4610      	mov	r0, r2
 800c8c6:	f7ff fe0f 	bl	800c4e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c8ca:	f000 fda7 	bl	800d41c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c8ce:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <prvAddNewTaskToReadyList+0xc0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00e      	beq.n	800c8f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c8d6:	4b0a      	ldr	r3, [pc, #40]	; (800c900 <prvAddNewTaskToReadyList+0xbc>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d207      	bcs.n	800c8f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8e4:	4b0b      	ldr	r3, [pc, #44]	; (800c914 <prvAddNewTaskToReadyList+0xd0>)
 800c8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f4:	bf00      	nop
 800c8f6:	3708      	adds	r7, #8
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}
 800c8fc:	20001254 	.word	0x20001254
 800c900:	20001154 	.word	0x20001154
 800c904:	20001260 	.word	0x20001260
 800c908:	20001270 	.word	0x20001270
 800c90c:	2000125c 	.word	0x2000125c
 800c910:	20001158 	.word	0x20001158
 800c914:	e000ed04 	.word	0xe000ed04

0800c918 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c920:	2300      	movs	r3, #0
 800c922:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d017      	beq.n	800c95a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c92a:	4b13      	ldr	r3, [pc, #76]	; (800c978 <vTaskDelay+0x60>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d00a      	beq.n	800c948 <vTaskDelay+0x30>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	60bb      	str	r3, [r7, #8]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c948:	f000 f87a 	bl	800ca40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c94c:	2100      	movs	r1, #0
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fbdc 	bl	800d10c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c954:	f000 f8bc 	bl	800cad0 <xTaskResumeAll>
 800c958:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d107      	bne.n	800c970 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c960:	4b06      	ldr	r3, [pc, #24]	; (800c97c <vTaskDelay+0x64>)
 800c962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c970:	bf00      	nop
 800c972:	3710      	adds	r7, #16
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	2000127c 	.word	0x2000127c
 800c97c:	e000ed04 	.word	0xe000ed04

0800c980 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b08a      	sub	sp, #40	; 0x28
 800c984:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c986:	2300      	movs	r3, #0
 800c988:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c98a:	2300      	movs	r3, #0
 800c98c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c98e:	463a      	mov	r2, r7
 800c990:	1d39      	adds	r1, r7, #4
 800c992:	f107 0308 	add.w	r3, r7, #8
 800c996:	4618      	mov	r0, r3
 800c998:	f7f4 fac6 	bl	8000f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c99c:	6839      	ldr	r1, [r7, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	68ba      	ldr	r2, [r7, #8]
 800c9a2:	9202      	str	r2, [sp, #8]
 800c9a4:	9301      	str	r3, [sp, #4]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	9300      	str	r3, [sp, #0]
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	460a      	mov	r2, r1
 800c9ae:	491e      	ldr	r1, [pc, #120]	; (800ca28 <vTaskStartScheduler+0xa8>)
 800c9b0:	481e      	ldr	r0, [pc, #120]	; (800ca2c <vTaskStartScheduler+0xac>)
 800c9b2:	f7ff fe1d 	bl	800c5f0 <xTaskCreateStatic>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	4a1d      	ldr	r2, [pc, #116]	; (800ca30 <vTaskStartScheduler+0xb0>)
 800c9ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9bc:	4b1c      	ldr	r3, [pc, #112]	; (800ca30 <vTaskStartScheduler+0xb0>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]
 800c9c8:	e001      	b.n	800c9ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d116      	bne.n	800ca02 <vTaskStartScheduler+0x82>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	613b      	str	r3, [r7, #16]
}
 800c9e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9e8:	4b12      	ldr	r3, [pc, #72]	; (800ca34 <vTaskStartScheduler+0xb4>)
 800c9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9f0:	4b11      	ldr	r3, [pc, #68]	; (800ca38 <vTaskStartScheduler+0xb8>)
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9f6:	4b11      	ldr	r3, [pc, #68]	; (800ca3c <vTaskStartScheduler+0xbc>)
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9fc:	f000 fc6c 	bl	800d2d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca00:	e00e      	b.n	800ca20 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca08:	d10a      	bne.n	800ca20 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60fb      	str	r3, [r7, #12]
}
 800ca1c:	bf00      	nop
 800ca1e:	e7fe      	b.n	800ca1e <vTaskStartScheduler+0x9e>
}
 800ca20:	bf00      	nop
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	080225ec 	.word	0x080225ec
 800ca2c:	0800ce79 	.word	0x0800ce79
 800ca30:	20001278 	.word	0x20001278
 800ca34:	20001274 	.word	0x20001274
 800ca38:	20001260 	.word	0x20001260
 800ca3c:	20001258 	.word	0x20001258

0800ca40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca40:	b480      	push	{r7}
 800ca42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <vTaskSuspendAll+0x18>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	3301      	adds	r3, #1
 800ca4a:	4a03      	ldr	r2, [pc, #12]	; (800ca58 <vTaskSuspendAll+0x18>)
 800ca4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca4e:	bf00      	nop
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bc80      	pop	{r7}
 800ca54:	4770      	bx	lr
 800ca56:	bf00      	nop
 800ca58:	2000127c 	.word	0x2000127c

0800ca5c <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b085      	sub	sp, #20
 800ca60:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 800ca66:	2301      	movs	r3, #1
 800ca68:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 800ca6a:	4b14      	ldr	r3, [pc, #80]	; (800cabc <prvGetExpectedIdleTime+0x60>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d201      	bcs.n	800ca78 <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 800ca74:	2301      	movs	r3, #1
 800ca76:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 800ca78:	4b11      	ldr	r3, [pc, #68]	; (800cac0 <prvGetExpectedIdleTime+0x64>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d002      	beq.n	800ca88 <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 800ca82:	2300      	movs	r3, #0
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e012      	b.n	800caae <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 800ca88:	4b0e      	ldr	r3, [pc, #56]	; (800cac4 <prvGetExpectedIdleTime+0x68>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d902      	bls.n	800ca96 <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	e00b      	b.n	800caae <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e005      	b.n	800caae <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 800caa2:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <prvGetExpectedIdleTime+0x6c>)
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <prvGetExpectedIdleTime+0x70>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 800caae:	68fb      	ldr	r3, [r7, #12]
	}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bc80      	pop	{r7}
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	2000125c 	.word	0x2000125c
 800cac0:	20001154 	.word	0x20001154
 800cac4:	20001158 	.word	0x20001158
 800cac8:	20001274 	.word	0x20001274
 800cacc:	20001258 	.word	0x20001258

0800cad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cada:	2300      	movs	r3, #0
 800cadc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cade:	4b41      	ldr	r3, [pc, #260]	; (800cbe4 <xTaskResumeAll+0x114>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10a      	bne.n	800cafc <xTaskResumeAll+0x2c>
	__asm volatile
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	603b      	str	r3, [r7, #0]
}
 800caf8:	bf00      	nop
 800cafa:	e7fe      	b.n	800cafa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cafc:	f000 fc5e 	bl	800d3bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb00:	4b38      	ldr	r3, [pc, #224]	; (800cbe4 <xTaskResumeAll+0x114>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	4a37      	ldr	r2, [pc, #220]	; (800cbe4 <xTaskResumeAll+0x114>)
 800cb08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb0a:	4b36      	ldr	r3, [pc, #216]	; (800cbe4 <xTaskResumeAll+0x114>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d161      	bne.n	800cbd6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb12:	4b35      	ldr	r3, [pc, #212]	; (800cbe8 <xTaskResumeAll+0x118>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d05d      	beq.n	800cbd6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb1a:	e02e      	b.n	800cb7a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb1c:	4b33      	ldr	r3, [pc, #204]	; (800cbec <xTaskResumeAll+0x11c>)
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	68db      	ldr	r3, [r3, #12]
 800cb22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	3318      	adds	r3, #24
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff fd38 	bl	800c59e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3304      	adds	r3, #4
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff fd33 	bl	800c59e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	409a      	lsls	r2, r3
 800cb40:	4b2b      	ldr	r3, [pc, #172]	; (800cbf0 <xTaskResumeAll+0x120>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	4a2a      	ldr	r2, [pc, #168]	; (800cbf0 <xTaskResumeAll+0x120>)
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb4e:	4613      	mov	r3, r2
 800cb50:	009b      	lsls	r3, r3, #2
 800cb52:	4413      	add	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4a27      	ldr	r2, [pc, #156]	; (800cbf4 <xTaskResumeAll+0x124>)
 800cb58:	441a      	add	r2, r3
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3304      	adds	r3, #4
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	f7ff fcc1 	bl	800c4e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb6a:	4b23      	ldr	r3, [pc, #140]	; (800cbf8 <xTaskResumeAll+0x128>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d302      	bcc.n	800cb7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cb74:	4b21      	ldr	r3, [pc, #132]	; (800cbfc <xTaskResumeAll+0x12c>)
 800cb76:	2201      	movs	r2, #1
 800cb78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <xTaskResumeAll+0x11c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1cc      	bne.n	800cb1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb88:	f000 fa82 	bl	800d090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb8c:	4b1c      	ldr	r3, [pc, #112]	; (800cc00 <xTaskResumeAll+0x130>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d010      	beq.n	800cbba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb98:	f000 f85c 	bl	800cc54 <xTaskIncrementTick>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cba2:	4b16      	ldr	r3, [pc, #88]	; (800cbfc <xTaskResumeAll+0x12c>)
 800cba4:	2201      	movs	r2, #1
 800cba6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d1f1      	bne.n	800cb98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800cbb4:	4b12      	ldr	r3, [pc, #72]	; (800cc00 <xTaskResumeAll+0x130>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbba:	4b10      	ldr	r3, [pc, #64]	; (800cbfc <xTaskResumeAll+0x12c>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d009      	beq.n	800cbd6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbc6:	4b0f      	ldr	r3, [pc, #60]	; (800cc04 <xTaskResumeAll+0x134>)
 800cbc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbd6:	f000 fc21 	bl	800d41c <vPortExitCritical>

	return xAlreadyYielded;
 800cbda:	68bb      	ldr	r3, [r7, #8]
}
 800cbdc:	4618      	mov	r0, r3
 800cbde:	3710      	adds	r7, #16
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	2000127c 	.word	0x2000127c
 800cbe8:	20001254 	.word	0x20001254
 800cbec:	20001214 	.word	0x20001214
 800cbf0:	2000125c 	.word	0x2000125c
 800cbf4:	20001158 	.word	0x20001158
 800cbf8:	20001154 	.word	0x20001154
 800cbfc:	20001268 	.word	0x20001268
 800cc00:	20001264 	.word	0x20001264
 800cc04:	e000ed04 	.word	0xe000ed04

0800cc08 <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 800cc10:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <vTaskStepTick+0x44>)
 800cc12:	681a      	ldr	r2, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	441a      	add	r2, r3
 800cc18:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <vTaskStepTick+0x48>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d90a      	bls.n	800cc36 <vTaskStepTick+0x2e>
	__asm volatile
 800cc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc24:	f383 8811 	msr	BASEPRI, r3
 800cc28:	f3bf 8f6f 	isb	sy
 800cc2c:	f3bf 8f4f 	dsb	sy
 800cc30:	60fb      	str	r3, [r7, #12]
}
 800cc32:	bf00      	nop
 800cc34:	e7fe      	b.n	800cc34 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800cc36:	4b05      	ldr	r3, [pc, #20]	; (800cc4c <vTaskStepTick+0x44>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	4413      	add	r3, r2
 800cc3e:	4a03      	ldr	r2, [pc, #12]	; (800cc4c <vTaskStepTick+0x44>)
 800cc40:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 800cc42:	bf00      	nop
 800cc44:	3714      	adds	r7, #20
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bc80      	pop	{r7}
 800cc4a:	4770      	bx	lr
 800cc4c:	20001258 	.word	0x20001258
 800cc50:	20001274 	.word	0x20001274

0800cc54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc5e:	4b4e      	ldr	r3, [pc, #312]	; (800cd98 <xTaskIncrementTick+0x144>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f040 8088 	bne.w	800cd78 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc68:	4b4c      	ldr	r3, [pc, #304]	; (800cd9c <xTaskIncrementTick+0x148>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc70:	4a4a      	ldr	r2, [pc, #296]	; (800cd9c <xTaskIncrementTick+0x148>)
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d120      	bne.n	800ccbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc7c:	4b48      	ldr	r3, [pc, #288]	; (800cda0 <xTaskIncrementTick+0x14c>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00a      	beq.n	800cc9c <xTaskIncrementTick+0x48>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	603b      	str	r3, [r7, #0]
}
 800cc98:	bf00      	nop
 800cc9a:	e7fe      	b.n	800cc9a <xTaskIncrementTick+0x46>
 800cc9c:	4b40      	ldr	r3, [pc, #256]	; (800cda0 <xTaskIncrementTick+0x14c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	60fb      	str	r3, [r7, #12]
 800cca2:	4b40      	ldr	r3, [pc, #256]	; (800cda4 <xTaskIncrementTick+0x150>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a3e      	ldr	r2, [pc, #248]	; (800cda0 <xTaskIncrementTick+0x14c>)
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	4a3e      	ldr	r2, [pc, #248]	; (800cda4 <xTaskIncrementTick+0x150>)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	4b3d      	ldr	r3, [pc, #244]	; (800cda8 <xTaskIncrementTick+0x154>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	4a3c      	ldr	r2, [pc, #240]	; (800cda8 <xTaskIncrementTick+0x154>)
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	f000 f9e9 	bl	800d090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccbe:	4b3b      	ldr	r3, [pc, #236]	; (800cdac <xTaskIncrementTick+0x158>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d348      	bcc.n	800cd5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccc8:	4b35      	ldr	r3, [pc, #212]	; (800cda0 <xTaskIncrementTick+0x14c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d104      	bne.n	800ccdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccd2:	4b36      	ldr	r3, [pc, #216]	; (800cdac <xTaskIncrementTick+0x158>)
 800ccd4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccd8:	601a      	str	r2, [r3, #0]
					break;
 800ccda:	e03e      	b.n	800cd5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccdc:	4b30      	ldr	r3, [pc, #192]	; (800cda0 <xTaskIncrementTick+0x14c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d203      	bcs.n	800ccfc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccf4:	4a2d      	ldr	r2, [pc, #180]	; (800cdac <xTaskIncrementTick+0x158>)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccfa:	e02e      	b.n	800cd5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	3304      	adds	r3, #4
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff fc4c 	bl	800c59e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d004      	beq.n	800cd18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	3318      	adds	r3, #24
 800cd12:	4618      	mov	r0, r3
 800cd14:	f7ff fc43 	bl	800c59e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	409a      	lsls	r2, r3
 800cd20:	4b23      	ldr	r3, [pc, #140]	; (800cdb0 <xTaskIncrementTick+0x15c>)
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	4a22      	ldr	r2, [pc, #136]	; (800cdb0 <xTaskIncrementTick+0x15c>)
 800cd28:	6013      	str	r3, [r2, #0]
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd2e:	4613      	mov	r3, r2
 800cd30:	009b      	lsls	r3, r3, #2
 800cd32:	4413      	add	r3, r2
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	4a1f      	ldr	r2, [pc, #124]	; (800cdb4 <xTaskIncrementTick+0x160>)
 800cd38:	441a      	add	r2, r3
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	3304      	adds	r3, #4
 800cd3e:	4619      	mov	r1, r3
 800cd40:	4610      	mov	r0, r2
 800cd42:	f7ff fbd1 	bl	800c4e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4a:	4b1b      	ldr	r3, [pc, #108]	; (800cdb8 <xTaskIncrementTick+0x164>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d3b9      	bcc.n	800ccc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd54:	2301      	movs	r3, #1
 800cd56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd58:	e7b6      	b.n	800ccc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd5a:	4b17      	ldr	r3, [pc, #92]	; (800cdb8 <xTaskIncrementTick+0x164>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd60:	4914      	ldr	r1, [pc, #80]	; (800cdb4 <xTaskIncrementTick+0x160>)
 800cd62:	4613      	mov	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	440b      	add	r3, r1
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d907      	bls.n	800cd82 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	617b      	str	r3, [r7, #20]
 800cd76:	e004      	b.n	800cd82 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd78:	4b10      	ldr	r3, [pc, #64]	; (800cdbc <xTaskIncrementTick+0x168>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	4a0f      	ldr	r2, [pc, #60]	; (800cdbc <xTaskIncrementTick+0x168>)
 800cd80:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd82:	4b0f      	ldr	r3, [pc, #60]	; (800cdc0 <xTaskIncrementTick+0x16c>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd8e:	697b      	ldr	r3, [r7, #20]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3718      	adds	r7, #24
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	2000127c 	.word	0x2000127c
 800cd9c:	20001258 	.word	0x20001258
 800cda0:	2000120c 	.word	0x2000120c
 800cda4:	20001210 	.word	0x20001210
 800cda8:	2000126c 	.word	0x2000126c
 800cdac:	20001274 	.word	0x20001274
 800cdb0:	2000125c 	.word	0x2000125c
 800cdb4:	20001158 	.word	0x20001158
 800cdb8:	20001154 	.word	0x20001154
 800cdbc:	20001264 	.word	0x20001264
 800cdc0:	20001268 	.word	0x20001268

0800cdc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdca:	4b26      	ldr	r3, [pc, #152]	; (800ce64 <vTaskSwitchContext+0xa0>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d003      	beq.n	800cdda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdd2:	4b25      	ldr	r3, [pc, #148]	; (800ce68 <vTaskSwitchContext+0xa4>)
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdd8:	e03f      	b.n	800ce5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cdda:	4b23      	ldr	r3, [pc, #140]	; (800ce68 <vTaskSwitchContext+0xa4>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde0:	4b22      	ldr	r3, [pc, #136]	; (800ce6c <vTaskSwitchContext+0xa8>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	fab3 f383 	clz	r3, r3
 800cdec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdee:	7afb      	ldrb	r3, [r7, #11]
 800cdf0:	f1c3 031f 	rsb	r3, r3, #31
 800cdf4:	617b      	str	r3, [r7, #20]
 800cdf6:	491e      	ldr	r1, [pc, #120]	; (800ce70 <vTaskSwitchContext+0xac>)
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	440b      	add	r3, r1
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d10a      	bne.n	800ce20 <vTaskSwitchContext+0x5c>
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
 800ce1e:	e7fe      	b.n	800ce1e <vTaskSwitchContext+0x5a>
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	4613      	mov	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4413      	add	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	4a11      	ldr	r2, [pc, #68]	; (800ce70 <vTaskSwitchContext+0xac>)
 800ce2c:	4413      	add	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	605a      	str	r2, [r3, #4]
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	685a      	ldr	r2, [r3, #4]
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	3308      	adds	r3, #8
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d104      	bne.n	800ce50 <vTaskSwitchContext+0x8c>
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	685a      	ldr	r2, [r3, #4]
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	605a      	str	r2, [r3, #4]
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	4a07      	ldr	r2, [pc, #28]	; (800ce74 <vTaskSwitchContext+0xb0>)
 800ce58:	6013      	str	r3, [r2, #0]
}
 800ce5a:	bf00      	nop
 800ce5c:	371c      	adds	r7, #28
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bc80      	pop	{r7}
 800ce62:	4770      	bx	lr
 800ce64:	2000127c 	.word	0x2000127c
 800ce68:	20001268 	.word	0x20001268
 800ce6c:	2000125c 	.word	0x2000125c
 800ce70:	20001158 	.word	0x20001158
 800ce74:	20001154 	.word	0x20001154

0800ce78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ce80:	f000 f8a8 	bl	800cfd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ce84:	4b18      	ldr	r3, [pc, #96]	; (800cee8 <prvIdleTask+0x70>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d907      	bls.n	800ce9c <prvIdleTask+0x24>
			{
				taskYIELD();
 800ce8c:	4b17      	ldr	r3, [pc, #92]	; (800ceec <prvIdleTask+0x74>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800ce9c:	f7ff fdde 	bl	800ca5c <prvGetExpectedIdleTime>
 800cea0:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d9eb      	bls.n	800ce80 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 800cea8:	f7ff fdca 	bl	800ca40 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <prvIdleTask+0x78>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	4b10      	ldr	r3, [pc, #64]	; (800cef4 <prvIdleTask+0x7c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d20a      	bcs.n	800cece <prvIdleTask+0x56>
	__asm volatile
 800ceb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	60bb      	str	r3, [r7, #8]
}
 800ceca:	bf00      	nop
 800cecc:	e7fe      	b.n	800cecc <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800cece:	f7ff fdc5 	bl	800ca5c <prvGetExpectedIdleTime>
 800ced2:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d902      	bls.n	800cee0 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 fb0e 	bl	800d4fc <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 800cee0:	f7ff fdf6 	bl	800cad0 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 800cee4:	e7cc      	b.n	800ce80 <prvIdleTask+0x8>
 800cee6:	bf00      	nop
 800cee8:	20001158 	.word	0x20001158
 800ceec:	e000ed04 	.word	0xe000ed04
 800cef0:	20001274 	.word	0x20001274
 800cef4:	20001258 	.word	0x20001258

0800cef8 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800cefe:	2301      	movs	r3, #1
 800cf00:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 800cf02:	2301      	movs	r3, #1
 800cf04:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800cf06:	4b0f      	ldr	r3, [pc, #60]	; (800cf44 <eTaskConfirmSleepModeStatus+0x4c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d002      	beq.n	800cf14 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	71fb      	strb	r3, [r7, #7]
 800cf12:	e010      	b.n	800cf36 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <eTaskConfirmSleepModeStatus+0x50>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d002      	beq.n	800cf22 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	71fb      	strb	r3, [r7, #7]
 800cf20:	e009      	b.n	800cf36 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 800cf22:	4b0a      	ldr	r3, [pc, #40]	; (800cf4c <eTaskConfirmSleepModeStatus+0x54>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <eTaskConfirmSleepModeStatus+0x58>)
 800cf28:	6819      	ldr	r1, [r3, #0]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	1acb      	subs	r3, r1, r3
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d101      	bne.n	800cf36 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 800cf32:	2302      	movs	r3, #2
 800cf34:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800cf36:	79fb      	ldrb	r3, [r7, #7]
	}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bc80      	pop	{r7}
 800cf40:	4770      	bx	lr
 800cf42:	bf00      	nop
 800cf44:	20001214 	.word	0x20001214
 800cf48:	20001268 	.word	0x20001268
 800cf4c:	20001240 	.word	0x20001240
 800cf50:	20001254 	.word	0x20001254

0800cf54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	607b      	str	r3, [r7, #4]
 800cf5e:	e00c      	b.n	800cf7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	4613      	mov	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	4413      	add	r3, r2
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4a12      	ldr	r2, [pc, #72]	; (800cfb4 <prvInitialiseTaskLists+0x60>)
 800cf6c:	4413      	add	r3, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fa8f 	bl	800c492 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3301      	adds	r3, #1
 800cf78:	607b      	str	r3, [r7, #4]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b06      	cmp	r3, #6
 800cf7e:	d9ef      	bls.n	800cf60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cf80:	480d      	ldr	r0, [pc, #52]	; (800cfb8 <prvInitialiseTaskLists+0x64>)
 800cf82:	f7ff fa86 	bl	800c492 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cf86:	480d      	ldr	r0, [pc, #52]	; (800cfbc <prvInitialiseTaskLists+0x68>)
 800cf88:	f7ff fa83 	bl	800c492 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cf8c:	480c      	ldr	r0, [pc, #48]	; (800cfc0 <prvInitialiseTaskLists+0x6c>)
 800cf8e:	f7ff fa80 	bl	800c492 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cf92:	480c      	ldr	r0, [pc, #48]	; (800cfc4 <prvInitialiseTaskLists+0x70>)
 800cf94:	f7ff fa7d 	bl	800c492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cf98:	480b      	ldr	r0, [pc, #44]	; (800cfc8 <prvInitialiseTaskLists+0x74>)
 800cf9a:	f7ff fa7a 	bl	800c492 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cf9e:	4b0b      	ldr	r3, [pc, #44]	; (800cfcc <prvInitialiseTaskLists+0x78>)
 800cfa0:	4a05      	ldr	r2, [pc, #20]	; (800cfb8 <prvInitialiseTaskLists+0x64>)
 800cfa2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <prvInitialiseTaskLists+0x7c>)
 800cfa6:	4a05      	ldr	r2, [pc, #20]	; (800cfbc <prvInitialiseTaskLists+0x68>)
 800cfa8:	601a      	str	r2, [r3, #0]
}
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20001158 	.word	0x20001158
 800cfb8:	200011e4 	.word	0x200011e4
 800cfbc:	200011f8 	.word	0x200011f8
 800cfc0:	20001214 	.word	0x20001214
 800cfc4:	20001228 	.word	0x20001228
 800cfc8:	20001240 	.word	0x20001240
 800cfcc:	2000120c 	.word	0x2000120c
 800cfd0:	20001210 	.word	0x20001210

0800cfd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cfda:	e019      	b.n	800d010 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cfdc:	f000 f9ee 	bl	800d3bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfe0:	4b10      	ldr	r3, [pc, #64]	; (800d024 <prvCheckTasksWaitingTermination+0x50>)
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	68db      	ldr	r3, [r3, #12]
 800cfe6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	3304      	adds	r3, #4
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7ff fad6 	bl	800c59e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <prvCheckTasksWaitingTermination+0x54>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4a0b      	ldr	r2, [pc, #44]	; (800d028 <prvCheckTasksWaitingTermination+0x54>)
 800cffa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cffc:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	3b01      	subs	r3, #1
 800d002:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800d004:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d006:	f000 fa09 	bl	800d41c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f810 	bl	800d030 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d010:	4b06      	ldr	r3, [pc, #24]	; (800d02c <prvCheckTasksWaitingTermination+0x58>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1e1      	bne.n	800cfdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d018:	bf00      	nop
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	20001228 	.word	0x20001228
 800d028:	20001254 	.word	0x20001254
 800d02c:	2000123c 	.word	0x2000123c

0800d030 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d108      	bne.n	800d054 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d046:	4618      	mov	r0, r3
 800d048:	f000 fc24 	bl	800d894 <vPortFree>
				vPortFree( pxTCB );
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fc21 	bl	800d894 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d052:	e018      	b.n	800d086 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d103      	bne.n	800d066 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fc18 	bl	800d894 <vPortFree>
	}
 800d064:	e00f      	b.n	800d086 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d06c:	2b02      	cmp	r3, #2
 800d06e:	d00a      	beq.n	800d086 <prvDeleteTCB+0x56>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	60fb      	str	r3, [r7, #12]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <prvDeleteTCB+0x54>
	}
 800d086:	bf00      	nop
 800d088:	3710      	adds	r7, #16
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
	...

0800d090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d096:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <prvResetNextTaskUnblockTime+0x38>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d104      	bne.n	800d0aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	; (800d0cc <prvResetNextTaskUnblockTime+0x3c>)
 800d0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d0a8:	e008      	b.n	800d0bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0aa:	4b07      	ldr	r3, [pc, #28]	; (800d0c8 <prvResetNextTaskUnblockTime+0x38>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	4a04      	ldr	r2, [pc, #16]	; (800d0cc <prvResetNextTaskUnblockTime+0x3c>)
 800d0ba:	6013      	str	r3, [r2, #0]
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bc80      	pop	{r7}
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	2000120c 	.word	0x2000120c
 800d0cc:	20001274 	.word	0x20001274

0800d0d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <xTaskGetSchedulerState+0x34>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	607b      	str	r3, [r7, #4]
 800d0e2:	e008      	b.n	800d0f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0e4:	4b08      	ldr	r3, [pc, #32]	; (800d108 <xTaskGetSchedulerState+0x38>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d102      	bne.n	800d0f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d0ec:	2302      	movs	r3, #2
 800d0ee:	607b      	str	r3, [r7, #4]
 800d0f0:	e001      	b.n	800d0f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d0f6:	687b      	ldr	r3, [r7, #4]
	}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bc80      	pop	{r7}
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	20001260 	.word	0x20001260
 800d108:	2000127c 	.word	0x2000127c

0800d10c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d116:	4b29      	ldr	r3, [pc, #164]	; (800d1bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d11c:	4b28      	ldr	r3, [pc, #160]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3304      	adds	r3, #4
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff fa3b 	bl	800c59e <uxListRemove>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10b      	bne.n	800d146 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d12e:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d134:	2201      	movs	r2, #1
 800d136:	fa02 f303 	lsl.w	r3, r2, r3
 800d13a:	43da      	mvns	r2, r3
 800d13c:	4b21      	ldr	r3, [pc, #132]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	4013      	ands	r3, r2
 800d142:	4a20      	ldr	r2, [pc, #128]	; (800d1c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d144:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d14c:	d10a      	bne.n	800d164 <prvAddCurrentTaskToDelayedList+0x58>
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d007      	beq.n	800d164 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d154:	4b1a      	ldr	r3, [pc, #104]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3304      	adds	r3, #4
 800d15a:	4619      	mov	r1, r3
 800d15c:	481a      	ldr	r0, [pc, #104]	; (800d1c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d15e:	f7ff f9c3 	bl	800c4e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d162:	e026      	b.n	800d1b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4413      	add	r3, r2
 800d16a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d16c:	4b14      	ldr	r3, [pc, #80]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d209      	bcs.n	800d190 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d17c:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	3304      	adds	r3, #4
 800d186:	4619      	mov	r1, r3
 800d188:	4610      	mov	r0, r2
 800d18a:	f7ff f9d0 	bl	800c52e <vListInsert>
}
 800d18e:	e010      	b.n	800d1b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	4b0a      	ldr	r3, [pc, #40]	; (800d1c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	3304      	adds	r3, #4
 800d19a:	4619      	mov	r1, r3
 800d19c:	4610      	mov	r0, r2
 800d19e:	f7ff f9c6 	bl	800c52e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1a2:	4b0c      	ldr	r3, [pc, #48]	; (800d1d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d202      	bcs.n	800d1b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d1ac:	4a09      	ldr	r2, [pc, #36]	; (800d1d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6013      	str	r3, [r2, #0]
}
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20001258 	.word	0x20001258
 800d1c0:	20001154 	.word	0x20001154
 800d1c4:	2000125c 	.word	0x2000125c
 800d1c8:	20001240 	.word	0x20001240
 800d1cc:	20001210 	.word	0x20001210
 800d1d0:	2000120c 	.word	0x2000120c
 800d1d4:	20001274 	.word	0x20001274

0800d1d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3b04      	subs	r3, #4
 800d1e8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	3b04      	subs	r3, #4
 800d1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	f023 0201 	bic.w	r2, r3, #1
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3b04      	subs	r3, #4
 800d206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d208:	4a08      	ldr	r2, [pc, #32]	; (800d22c <pxPortInitialiseStack+0x54>)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	3b14      	subs	r3, #20
 800d212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3b20      	subs	r3, #32
 800d21e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d220:	68fb      	ldr	r3, [r7, #12]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3714      	adds	r7, #20
 800d226:	46bd      	mov	sp, r7
 800d228:	bc80      	pop	{r7}
 800d22a:	4770      	bx	lr
 800d22c:	0800d231 	.word	0x0800d231

0800d230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d236:	2300      	movs	r3, #0
 800d238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <prvTaskExitError+0x54>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d242:	d00a      	beq.n	800d25a <prvTaskExitError+0x2a>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d248:	f383 8811 	msr	BASEPRI, r3
 800d24c:	f3bf 8f6f 	isb	sy
 800d250:	f3bf 8f4f 	dsb	sy
 800d254:	60fb      	str	r3, [r7, #12]
}
 800d256:	bf00      	nop
 800d258:	e7fe      	b.n	800d258 <prvTaskExitError+0x28>
	__asm volatile
 800d25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25e:	f383 8811 	msr	BASEPRI, r3
 800d262:	f3bf 8f6f 	isb	sy
 800d266:	f3bf 8f4f 	dsb	sy
 800d26a:	60bb      	str	r3, [r7, #8]
}
 800d26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d26e:	bf00      	nop
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d0fc      	beq.n	800d270 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d276:	bf00      	nop
 800d278:	bf00      	nop
 800d27a:	3714      	adds	r7, #20
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bc80      	pop	{r7}
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	2000008c 	.word	0x2000008c
	...

0800d290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d290:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <pxCurrentTCBConst2>)
 800d292:	6819      	ldr	r1, [r3, #0]
 800d294:	6808      	ldr	r0, [r1, #0]
 800d296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d29a:	f380 8809 	msr	PSP, r0
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f04f 0000 	mov.w	r0, #0
 800d2a6:	f380 8811 	msr	BASEPRI, r0
 800d2aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800d2ae:	4770      	bx	lr

0800d2b0 <pxCurrentTCBConst2>:
 800d2b0:	20001154 	.word	0x20001154
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop

0800d2b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800d2b8:	4806      	ldr	r0, [pc, #24]	; (800d2d4 <prvPortStartFirstTask+0x1c>)
 800d2ba:	6800      	ldr	r0, [r0, #0]
 800d2bc:	6800      	ldr	r0, [r0, #0]
 800d2be:	f380 8808 	msr	MSP, r0
 800d2c2:	b662      	cpsie	i
 800d2c4:	b661      	cpsie	f
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	df00      	svc	0
 800d2d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2d2:	bf00      	nop
 800d2d4:	e000ed08 	.word	0xe000ed08

0800d2d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2de:	4b32      	ldr	r3, [pc, #200]	; (800d3a8 <xPortStartScheduler+0xd0>)
 800d2e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	22ff      	movs	r2, #255	; 0xff
 800d2ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2f8:	78fb      	ldrb	r3, [r7, #3]
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d300:	b2da      	uxtb	r2, r3
 800d302:	4b2a      	ldr	r3, [pc, #168]	; (800d3ac <xPortStartScheduler+0xd4>)
 800d304:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d306:	4b2a      	ldr	r3, [pc, #168]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d308:	2207      	movs	r2, #7
 800d30a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d30c:	e009      	b.n	800d322 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d30e:	4b28      	ldr	r3, [pc, #160]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	3b01      	subs	r3, #1
 800d314:	4a26      	ldr	r2, [pc, #152]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d316:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d318:	78fb      	ldrb	r3, [r7, #3]
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d322:	78fb      	ldrb	r3, [r7, #3]
 800d324:	b2db      	uxtb	r3, r3
 800d326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d32a:	2b80      	cmp	r3, #128	; 0x80
 800d32c:	d0ef      	beq.n	800d30e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d32e:	4b20      	ldr	r3, [pc, #128]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f1c3 0307 	rsb	r3, r3, #7
 800d336:	2b04      	cmp	r3, #4
 800d338:	d00a      	beq.n	800d350 <xPortStartScheduler+0x78>
	__asm volatile
 800d33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d33e:	f383 8811 	msr	BASEPRI, r3
 800d342:	f3bf 8f6f 	isb	sy
 800d346:	f3bf 8f4f 	dsb	sy
 800d34a:	60bb      	str	r3, [r7, #8]
}
 800d34c:	bf00      	nop
 800d34e:	e7fe      	b.n	800d34e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d350:	4b17      	ldr	r3, [pc, #92]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	021b      	lsls	r3, r3, #8
 800d356:	4a16      	ldr	r2, [pc, #88]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d358:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d35a:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d362:	4a13      	ldr	r2, [pc, #76]	; (800d3b0 <xPortStartScheduler+0xd8>)
 800d364:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	b2da      	uxtb	r2, r3
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d36e:	4b11      	ldr	r3, [pc, #68]	; (800d3b4 <xPortStartScheduler+0xdc>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	4a10      	ldr	r2, [pc, #64]	; (800d3b4 <xPortStartScheduler+0xdc>)
 800d374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d378:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d37a:	4b0e      	ldr	r3, [pc, #56]	; (800d3b4 <xPortStartScheduler+0xdc>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a0d      	ldr	r2, [pc, #52]	; (800d3b4 <xPortStartScheduler+0xdc>)
 800d380:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d384:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d386:	f000 f985 	bl	800d694 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d38a:	4b0b      	ldr	r3, [pc, #44]	; (800d3b8 <xPortStartScheduler+0xe0>)
 800d38c:	2200      	movs	r2, #0
 800d38e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d390:	f7ff ff92 	bl	800d2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d394:	f7ff fd16 	bl	800cdc4 <vTaskSwitchContext>
	prvTaskExitError();
 800d398:	f7ff ff4a 	bl	800d230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	e000e400 	.word	0xe000e400
 800d3ac:	2000128c 	.word	0x2000128c
 800d3b0:	20001290 	.word	0x20001290
 800d3b4:	e000ed20 	.word	0xe000ed20
 800d3b8:	2000008c 	.word	0x2000008c

0800d3bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	607b      	str	r3, [r7, #4]
}
 800d3d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <vPortEnterCritical+0x58>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	3301      	adds	r3, #1
 800d3dc:	4a0d      	ldr	r2, [pc, #52]	; (800d414 <vPortEnterCritical+0x58>)
 800d3de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3e0:	4b0c      	ldr	r3, [pc, #48]	; (800d414 <vPortEnterCritical+0x58>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d10f      	bne.n	800d408 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3e8:	4b0b      	ldr	r3, [pc, #44]	; (800d418 <vPortEnterCritical+0x5c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <vPortEnterCritical+0x4c>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	603b      	str	r3, [r7, #0]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <vPortEnterCritical+0x4a>
	}
}
 800d408:	bf00      	nop
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bc80      	pop	{r7}
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	2000008c 	.word	0x2000008c
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d422:	4b11      	ldr	r3, [pc, #68]	; (800d468 <vPortExitCritical+0x4c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d10a      	bne.n	800d440 <vPortExitCritical+0x24>
	__asm volatile
 800d42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d42e:	f383 8811 	msr	BASEPRI, r3
 800d432:	f3bf 8f6f 	isb	sy
 800d436:	f3bf 8f4f 	dsb	sy
 800d43a:	607b      	str	r3, [r7, #4]
}
 800d43c:	bf00      	nop
 800d43e:	e7fe      	b.n	800d43e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d440:	4b09      	ldr	r3, [pc, #36]	; (800d468 <vPortExitCritical+0x4c>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	4a08      	ldr	r2, [pc, #32]	; (800d468 <vPortExitCritical+0x4c>)
 800d448:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d44a:	4b07      	ldr	r3, [pc, #28]	; (800d468 <vPortExitCritical+0x4c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d105      	bne.n	800d45e <vPortExitCritical+0x42>
 800d452:	2300      	movs	r3, #0
 800d454:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d45c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d45e:	bf00      	nop
 800d460:	370c      	adds	r7, #12
 800d462:	46bd      	mov	sp, r7
 800d464:	bc80      	pop	{r7}
 800d466:	4770      	bx	lr
 800d468:	2000008c 	.word	0x2000008c
 800d46c:	00000000 	.word	0x00000000

0800d470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d470:	f3ef 8009 	mrs	r0, PSP
 800d474:	f3bf 8f6f 	isb	sy
 800d478:	4b0d      	ldr	r3, [pc, #52]	; (800d4b0 <pxCurrentTCBConst>)
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d480:	6010      	str	r0, [r2, #0]
 800d482:	e92d 4008 	stmdb	sp!, {r3, lr}
 800d486:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d48a:	f380 8811 	msr	BASEPRI, r0
 800d48e:	f7ff fc99 	bl	800cdc4 <vTaskSwitchContext>
 800d492:	f04f 0000 	mov.w	r0, #0
 800d496:	f380 8811 	msr	BASEPRI, r0
 800d49a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d49e:	6819      	ldr	r1, [r3, #0]
 800d4a0:	6808      	ldr	r0, [r1, #0]
 800d4a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800d4a6:	f380 8809 	msr	PSP, r0
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	4770      	bx	lr

0800d4b0 <pxCurrentTCBConst>:
 800d4b0:	20001154 	.word	0x20001154
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop

0800d4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c2:	f383 8811 	msr	BASEPRI, r3
 800d4c6:	f3bf 8f6f 	isb	sy
 800d4ca:	f3bf 8f4f 	dsb	sy
 800d4ce:	607b      	str	r3, [r7, #4]
}
 800d4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d4d2:	f7ff fbbf 	bl	800cc54 <xTaskIncrementTick>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d003      	beq.n	800d4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d4dc:	4b06      	ldr	r3, [pc, #24]	; (800d4f8 <xPortSysTickHandler+0x40>)
 800d4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	f383 8811 	msr	BASEPRI, r3
}
 800d4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d4f0:	bf00      	nop
 800d4f2:	3708      	adds	r7, #8
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	e000ed04 	.word	0xe000ed04

0800d4fc <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b088      	sub	sp, #32
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	4b5d      	ldr	r3, [pc, #372]	; (800d67c <vPortSuppressTicksAndSleep+0x180>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d902      	bls.n	800d514 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800d50e:	4b5b      	ldr	r3, [pc, #364]	; (800d67c <vPortSuppressTicksAndSleep+0x180>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 800d514:	4b5a      	ldr	r3, [pc, #360]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a59      	ldr	r2, [pc, #356]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d51a:	f023 0301 	bic.w	r3, r3, #1
 800d51e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 800d520:	4b58      	ldr	r3, [pc, #352]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	3b01      	subs	r3, #1
 800d528:	4957      	ldr	r1, [pc, #348]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d52a:	6809      	ldr	r1, [r1, #0]
 800d52c:	fb01 f303 	mul.w	r3, r1, r3
 800d530:	4413      	add	r3, r2
 800d532:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 800d534:	4b55      	ldr	r3, [pc, #340]	; (800d68c <vPortSuppressTicksAndSleep+0x190>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	69fa      	ldr	r2, [r7, #28]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d904      	bls.n	800d548 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800d53e:	4b53      	ldr	r3, [pc, #332]	; (800d68c <vPortSuppressTicksAndSleep+0x190>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	69fa      	ldr	r2, [r7, #28]
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 800d548:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800d54a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800d54e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 800d552:	f7ff fcd1 	bl	800cef8 <eTaskConfirmSleepModeStatus>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d110      	bne.n	800d57e <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d55c:	4b49      	ldr	r3, [pc, #292]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d55e:	4a4c      	ldr	r2, [pc, #304]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d564:	4b46      	ldr	r3, [pc, #280]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a45      	ldr	r2, [pc, #276]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d56a:	f043 0301 	orr.w	r3, r3, #1
 800d56e:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d570:	4b45      	ldr	r3, [pc, #276]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a46      	ldr	r2, [pc, #280]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d576:	3b01      	subs	r3, #1
 800d578:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 800d57a:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 800d57c:	e07a      	b.n	800d674 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 800d57e:	4a44      	ldr	r2, [pc, #272]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d584:	4b3f      	ldr	r3, [pc, #252]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d586:	2200      	movs	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d58a:	4b3d      	ldr	r3, [pc, #244]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4a3c      	ldr	r2, [pc, #240]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d590:	f043 0301 	orr.w	r3, r3, #1
 800d594:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 800d59a:	f107 030c 	add.w	r3, r7, #12
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7f3 fc94 	bl	8000ecc <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d004      	beq.n	800d5b4 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 800d5aa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 800d5ae:	bf30      	wfi
				__asm volatile( "isb" );
 800d5b0:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 800d5b4:	1d3b      	adds	r3, r7, #4
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7f3 fca6 	bl	8000f08 <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800d5bc:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800d5be:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d5c2:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 800d5c6:	b672      	cpsid	i
			__asm volatile( "dsb" );
 800d5c8:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800d5cc:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800d5d0:	4b2b      	ldr	r3, [pc, #172]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d5d2:	2206      	movs	r2, #6
 800d5d4:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800d5d6:	4b2a      	ldr	r3, [pc, #168]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d01d      	beq.n	800d61e <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800d5e2:	4b29      	ldr	r3, [pc, #164]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b27      	ldr	r3, [pc, #156]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d5e8:	6819      	ldr	r1, [r3, #0]
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	1acb      	subs	r3, r1, r3
 800d5ee:	4413      	add	r3, r2
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800d5f4:	4b25      	ldr	r3, [pc, #148]	; (800d68c <vPortSuppressTicksAndSleep+0x190>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	697a      	ldr	r2, [r7, #20]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d304      	bcc.n	800d608 <vPortSuppressTicksAndSleep+0x10c>
 800d5fe:	4b22      	ldr	r3, [pc, #136]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	697a      	ldr	r2, [r7, #20]
 800d604:	429a      	cmp	r2, r3
 800d606:	d903      	bls.n	800d610 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 800d608:	4b1f      	ldr	r3, [pc, #124]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3b01      	subs	r3, #1
 800d60e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800d610:	4a1f      	ldr	r2, [pc, #124]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	3b01      	subs	r3, #1
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	e018      	b.n	800d650 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a19      	ldr	r2, [pc, #100]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d622:	6812      	ldr	r2, [r2, #0]
 800d624:	fb03 f202 	mul.w	r2, r3, r2
 800d628:	4b16      	ldr	r3, [pc, #88]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800d630:	4b15      	ldr	r3, [pc, #84]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	fbb2 f3f3 	udiv	r3, r2, r3
 800d63a:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	3301      	adds	r3, #1
 800d640:	4a11      	ldr	r2, [pc, #68]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	fb03 f202 	mul.w	r2, r3, r2
 800d648:	4911      	ldr	r1, [pc, #68]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d650:	4b0c      	ldr	r3, [pc, #48]	; (800d684 <vPortSuppressTicksAndSleep+0x188>)
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 800d656:	4b0a      	ldr	r3, [pc, #40]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a09      	ldr	r2, [pc, #36]	; (800d680 <vPortSuppressTicksAndSleep+0x184>)
 800d65c:	f043 0301 	orr.w	r3, r3, #1
 800d660:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 800d662:	69b8      	ldr	r0, [r7, #24]
 800d664:	f7ff fad0 	bl	800cc08 <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 800d668:	4b07      	ldr	r3, [pc, #28]	; (800d688 <vPortSuppressTicksAndSleep+0x18c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4a08      	ldr	r2, [pc, #32]	; (800d690 <vPortSuppressTicksAndSleep+0x194>)
 800d66e:	3b01      	subs	r3, #1
 800d670:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 800d672:	b662      	cpsie	i
	}
 800d674:	bf00      	nop
 800d676:	3720      	adds	r7, #32
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20001284 	.word	0x20001284
 800d680:	e000e010 	.word	0xe000e010
 800d684:	e000e018 	.word	0xe000e018
 800d688:	20001280 	.word	0x20001280
 800d68c:	20001288 	.word	0x20001288
 800d690:	e000e014 	.word	0xe000e014

0800d694 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d694:	b480      	push	{r7}
 800d696:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 800d698:	4b14      	ldr	r3, [pc, #80]	; (800d6ec <vPortSetupTimerInterrupt+0x58>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a14      	ldr	r2, [pc, #80]	; (800d6f0 <vPortSetupTimerInterrupt+0x5c>)
 800d69e:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a2:	099b      	lsrs	r3, r3, #6
 800d6a4:	4a13      	ldr	r2, [pc, #76]	; (800d6f4 <vPortSetupTimerInterrupt+0x60>)
 800d6a6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 800d6a8:	4b12      	ldr	r3, [pc, #72]	; (800d6f4 <vPortSetupTimerInterrupt+0x60>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d6b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6b4:	4a10      	ldr	r2, [pc, #64]	; (800d6f8 <vPortSetupTimerInterrupt+0x64>)
 800d6b6:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 800d6b8:	4b10      	ldr	r3, [pc, #64]	; (800d6fc <vPortSetupTimerInterrupt+0x68>)
 800d6ba:	222d      	movs	r2, #45	; 0x2d
 800d6bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6be:	4b10      	ldr	r3, [pc, #64]	; (800d700 <vPortSetupTimerInterrupt+0x6c>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6c4:	4b0f      	ldr	r3, [pc, #60]	; (800d704 <vPortSetupTimerInterrupt+0x70>)
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6ca:	4b08      	ldr	r3, [pc, #32]	; (800d6ec <vPortSetupTimerInterrupt+0x58>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a08      	ldr	r2, [pc, #32]	; (800d6f0 <vPortSetupTimerInterrupt+0x5c>)
 800d6d0:	fba2 2303 	umull	r2, r3, r2, r3
 800d6d4:	099b      	lsrs	r3, r3, #6
 800d6d6:	4a0c      	ldr	r2, [pc, #48]	; (800d708 <vPortSetupTimerInterrupt+0x74>)
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6dc:	4b08      	ldr	r3, [pc, #32]	; (800d700 <vPortSetupTimerInterrupt+0x6c>)
 800d6de:	2207      	movs	r2, #7
 800d6e0:	601a      	str	r2, [r3, #0]
}
 800d6e2:	bf00      	nop
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bc80      	pop	{r7}
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	20000000 	.word	0x20000000
 800d6f0:	10624dd3 	.word	0x10624dd3
 800d6f4:	20001280 	.word	0x20001280
 800d6f8:	20001284 	.word	0x20001284
 800d6fc:	20001288 	.word	0x20001288
 800d700:	e000e010 	.word	0xe000e010
 800d704:	e000e018 	.word	0xe000e018
 800d708:	e000e014 	.word	0xe000e014

0800d70c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08a      	sub	sp, #40	; 0x28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d714:	2300      	movs	r3, #0
 800d716:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d718:	f7ff f992 	bl	800ca40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d71c:	4b58      	ldr	r3, [pc, #352]	; (800d880 <pvPortMalloc+0x174>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d101      	bne.n	800d728 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d724:	f000 f910 	bl	800d948 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d728:	4b56      	ldr	r3, [pc, #344]	; (800d884 <pvPortMalloc+0x178>)
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4013      	ands	r3, r2
 800d730:	2b00      	cmp	r3, #0
 800d732:	f040 808e 	bne.w	800d852 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d01d      	beq.n	800d778 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d73c:	2208      	movs	r2, #8
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	4413      	add	r3, r2
 800d742:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d014      	beq.n	800d778 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f023 0307 	bic.w	r3, r3, #7
 800d754:	3308      	adds	r3, #8
 800d756:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f003 0307 	and.w	r3, r3, #7
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00a      	beq.n	800d778 <pvPortMalloc+0x6c>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	617b      	str	r3, [r7, #20]
}
 800d774:	bf00      	nop
 800d776:	e7fe      	b.n	800d776 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d069      	beq.n	800d852 <pvPortMalloc+0x146>
 800d77e:	4b42      	ldr	r3, [pc, #264]	; (800d888 <pvPortMalloc+0x17c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	429a      	cmp	r2, r3
 800d786:	d864      	bhi.n	800d852 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d788:	4b40      	ldr	r3, [pc, #256]	; (800d88c <pvPortMalloc+0x180>)
 800d78a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d78c:	4b3f      	ldr	r3, [pc, #252]	; (800d88c <pvPortMalloc+0x180>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d792:	e004      	b.n	800d79e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d796:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d903      	bls.n	800d7b0 <pvPortMalloc+0xa4>
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1f1      	bne.n	800d794 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7b0:	4b33      	ldr	r3, [pc, #204]	; (800d880 <pvPortMalloc+0x174>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d04b      	beq.n	800d852 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	2208      	movs	r2, #8
 800d7c0:	4413      	add	r3, r2
 800d7c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	6a3b      	ldr	r3, [r7, #32]
 800d7ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	685a      	ldr	r2, [r3, #4]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	1ad2      	subs	r2, r2, r3
 800d7d4:	2308      	movs	r3, #8
 800d7d6:	005b      	lsls	r3, r3, #1
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d91f      	bls.n	800d81c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	f003 0307 	and.w	r3, r3, #7
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <pvPortMalloc+0xf8>
	__asm volatile
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	613b      	str	r3, [r7, #16]
}
 800d800:	bf00      	nop
 800d802:	e7fe      	b.n	800d802 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	1ad2      	subs	r2, r2, r3
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d816:	69b8      	ldr	r0, [r7, #24]
 800d818:	f000 f8f8 	bl	800da0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d81c:	4b1a      	ldr	r3, [pc, #104]	; (800d888 <pvPortMalloc+0x17c>)
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	1ad3      	subs	r3, r2, r3
 800d826:	4a18      	ldr	r2, [pc, #96]	; (800d888 <pvPortMalloc+0x17c>)
 800d828:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d82a:	4b17      	ldr	r3, [pc, #92]	; (800d888 <pvPortMalloc+0x17c>)
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	4b18      	ldr	r3, [pc, #96]	; (800d890 <pvPortMalloc+0x184>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	429a      	cmp	r2, r3
 800d834:	d203      	bcs.n	800d83e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d836:	4b14      	ldr	r3, [pc, #80]	; (800d888 <pvPortMalloc+0x17c>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a15      	ldr	r2, [pc, #84]	; (800d890 <pvPortMalloc+0x184>)
 800d83c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	4b10      	ldr	r3, [pc, #64]	; (800d884 <pvPortMalloc+0x178>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	431a      	orrs	r2, r3
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84e:	2200      	movs	r2, #0
 800d850:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d852:	f7ff f93d 	bl	800cad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	f003 0307 	and.w	r3, r3, #7
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d00a      	beq.n	800d876 <pvPortMalloc+0x16a>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	f383 8811 	msr	BASEPRI, r3
 800d868:	f3bf 8f6f 	isb	sy
 800d86c:	f3bf 8f4f 	dsb	sy
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	e7fe      	b.n	800d874 <pvPortMalloc+0x168>
	return pvReturn;
 800d876:	69fb      	ldr	r3, [r7, #28]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3728      	adds	r7, #40	; 0x28
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20003254 	.word	0x20003254
 800d884:	20003260 	.word	0x20003260
 800d888:	20003258 	.word	0x20003258
 800d88c:	2000324c 	.word	0x2000324c
 800d890:	2000325c 	.word	0x2000325c

0800d894 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b086      	sub	sp, #24
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d048      	beq.n	800d938 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8a6:	2308      	movs	r3, #8
 800d8a8:	425b      	negs	r3, r3
 800d8aa:	697a      	ldr	r2, [r7, #20]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	4b21      	ldr	r3, [pc, #132]	; (800d940 <vPortFree+0xac>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4013      	ands	r3, r2
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10a      	bne.n	800d8d8 <vPortFree+0x44>
	__asm volatile
 800d8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c6:	f383 8811 	msr	BASEPRI, r3
 800d8ca:	f3bf 8f6f 	isb	sy
 800d8ce:	f3bf 8f4f 	dsb	sy
 800d8d2:	60fb      	str	r3, [r7, #12]
}
 800d8d4:	bf00      	nop
 800d8d6:	e7fe      	b.n	800d8d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00a      	beq.n	800d8f6 <vPortFree+0x62>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	60bb      	str	r3, [r7, #8]
}
 800d8f2:	bf00      	nop
 800d8f4:	e7fe      	b.n	800d8f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	4b11      	ldr	r3, [pc, #68]	; (800d940 <vPortFree+0xac>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4013      	ands	r3, r2
 800d900:	2b00      	cmp	r3, #0
 800d902:	d019      	beq.n	800d938 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d115      	bne.n	800d938 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <vPortFree+0xac>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	43db      	mvns	r3, r3
 800d916:	401a      	ands	r2, r3
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d91c:	f7ff f890 	bl	800ca40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	4b07      	ldr	r3, [pc, #28]	; (800d944 <vPortFree+0xb0>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4413      	add	r3, r2
 800d92a:	4a06      	ldr	r2, [pc, #24]	; (800d944 <vPortFree+0xb0>)
 800d92c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d92e:	6938      	ldr	r0, [r7, #16]
 800d930:	f000 f86c 	bl	800da0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d934:	f7ff f8cc 	bl	800cad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d938:	bf00      	nop
 800d93a:	3718      	adds	r7, #24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20003260 	.word	0x20003260
 800d944:	20003258 	.word	0x20003258

0800d948 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d94e:	f641 73b8 	movw	r3, #8120	; 0x1fb8
 800d952:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d954:	4b27      	ldr	r3, [pc, #156]	; (800d9f4 <prvHeapInit+0xac>)
 800d956:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3307      	adds	r3, #7
 800d966:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 0307 	bic.w	r3, r3, #7
 800d96e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d970:	68ba      	ldr	r2, [r7, #8]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	4a1f      	ldr	r2, [pc, #124]	; (800d9f4 <prvHeapInit+0xac>)
 800d978:	4413      	add	r3, r2
 800d97a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d980:	4a1d      	ldr	r2, [pc, #116]	; (800d9f8 <prvHeapInit+0xb0>)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d986:	4b1c      	ldr	r3, [pc, #112]	; (800d9f8 <prvHeapInit+0xb0>)
 800d988:	2200      	movs	r2, #0
 800d98a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	4413      	add	r3, r2
 800d992:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d994:	2208      	movs	r2, #8
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	1a9b      	subs	r3, r3, r2
 800d99a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f023 0307 	bic.w	r3, r3, #7
 800d9a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	4a15      	ldr	r2, [pc, #84]	; (800d9fc <prvHeapInit+0xb4>)
 800d9a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9aa:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <prvHeapInit+0xb4>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9b2:	4b12      	ldr	r3, [pc, #72]	; (800d9fc <prvHeapInit+0xb4>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	1ad2      	subs	r2, r2, r3
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9c8:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <prvHeapInit+0xb4>)
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	685b      	ldr	r3, [r3, #4]
 800d9d4:	4a0a      	ldr	r2, [pc, #40]	; (800da00 <prvHeapInit+0xb8>)
 800d9d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	4a09      	ldr	r2, [pc, #36]	; (800da04 <prvHeapInit+0xbc>)
 800d9de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d9e0:	4b09      	ldr	r3, [pc, #36]	; (800da08 <prvHeapInit+0xc0>)
 800d9e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d9e6:	601a      	str	r2, [r3, #0]
}
 800d9e8:	bf00      	nop
 800d9ea:	3714      	adds	r7, #20
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bc80      	pop	{r7}
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	20001294 	.word	0x20001294
 800d9f8:	2000324c 	.word	0x2000324c
 800d9fc:	20003254 	.word	0x20003254
 800da00:	2000325c 	.word	0x2000325c
 800da04:	20003258 	.word	0x20003258
 800da08:	20003260 	.word	0x20003260

0800da0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da14:	4b27      	ldr	r3, [pc, #156]	; (800dab4 <prvInsertBlockIntoFreeList+0xa8>)
 800da16:	60fb      	str	r3, [r7, #12]
 800da18:	e002      	b.n	800da20 <prvInsertBlockIntoFreeList+0x14>
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	429a      	cmp	r2, r3
 800da28:	d8f7      	bhi.n	800da1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	68ba      	ldr	r2, [r7, #8]
 800da34:	4413      	add	r3, r2
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d108      	bne.n	800da4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	685a      	ldr	r2, [r3, #4]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	441a      	add	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	441a      	add	r2, r3
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d118      	bne.n	800da94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681a      	ldr	r2, [r3, #0]
 800da66:	4b14      	ldr	r3, [pc, #80]	; (800dab8 <prvInsertBlockIntoFreeList+0xac>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d00d      	beq.n	800da8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685a      	ldr	r2, [r3, #4]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	441a      	add	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	e008      	b.n	800da9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da8a:	4b0b      	ldr	r3, [pc, #44]	; (800dab8 <prvInsertBlockIntoFreeList+0xac>)
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	e003      	b.n	800da9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681a      	ldr	r2, [r3, #0]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d002      	beq.n	800daaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800daaa:	bf00      	nop
 800daac:	3714      	adds	r7, #20
 800daae:	46bd      	mov	sp, r7
 800dab0:	bc80      	pop	{r7}
 800dab2:	4770      	bx	lr
 800dab4:	2000324c 	.word	0x2000324c
 800dab8:	20003254 	.word	0x20003254

0800dabc <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	33f1      	adds	r3, #241	; 0xf1
 800dac8:	2210      	movs	r2, #16
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f00d fda5 	bl	801b61c <memset1>
    ctx->M_n = 0;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	22f0      	movs	r2, #240	; 0xf0
 800dade:	2100      	movs	r1, #0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f00d fd9b 	bl	801b61c <memset1>
}
 800dae6:	bf00      	nop
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	461a      	mov	r2, r3
 800dafc:	2110      	movs	r1, #16
 800dafe:	6838      	ldr	r0, [r7, #0]
 800db00:	f000 fe5c 	bl	800e7bc <lorawan_aes_set_key>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08c      	sub	sp, #48	; 0x30
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f000 80a1 	beq.w	800dc66 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db2a:	f1c3 0310 	rsb	r3, r3, #16
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	4293      	cmp	r3, r2
 800db32:	bf28      	it	cs
 800db34:	4613      	movcs	r3, r2
 800db36:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db44:	4413      	add	r3, r2
 800db46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db48:	b292      	uxth	r2, r2
 800db4a:	68b9      	ldr	r1, [r7, #8]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f00d fd2a 	bl	801b5a6 <memcpy1>
        ctx->M_n += mlen;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	441a      	add	r2, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800db68:	2b0f      	cmp	r3, #15
 800db6a:	f240 808d 	bls.w	800dc88 <AES_CMAC_Update+0x17c>
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	429a      	cmp	r2, r3
 800db74:	f000 8088 	beq.w	800dc88 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800db78:	2300      	movs	r3, #0
 800db7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db7c:	e015      	b.n	800dbaa <AES_CMAC_Update+0x9e>
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	4413      	add	r3, r2
 800db84:	33f1      	adds	r3, #241	; 0xf1
 800db86:	781a      	ldrb	r2, [r3, #0]
 800db88:	68f9      	ldr	r1, [r7, #12]
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	440b      	add	r3, r1
 800db8e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	4053      	eors	r3, r2
 800db96:	b2d9      	uxtb	r1, r3
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db9c:	4413      	add	r3, r2
 800db9e:	33f1      	adds	r3, #241	; 0xf1
 800dba0:	460a      	mov	r2, r1
 800dba2:	701a      	strb	r2, [r3, #0]
 800dba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba6:	3301      	adds	r3, #1
 800dba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	2b0f      	cmp	r3, #15
 800dbae:	dde6      	ble.n	800db7e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dbb6:	f107 0314 	add.w	r3, r7, #20
 800dbba:	2210      	movs	r2, #16
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f00d fcf2 	bl	801b5a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	f107 0114 	add.w	r1, r7, #20
 800dbc8:	f107 0314 	add.w	r3, r7, #20
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f000 fed3 	bl	800e978 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	33f1      	adds	r3, #241	; 0xf1
 800dbd6:	f107 0114 	add.w	r1, r7, #20
 800dbda:	2210      	movs	r2, #16
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f00d fce2 	bl	801b5a6 <memcpy1>

        data += mlen;
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	4413      	add	r3, r2
 800dbe8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dbea:	687a      	ldr	r2, [r7, #4]
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	1ad3      	subs	r3, r2, r3
 800dbf0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dbf2:	e038      	b.n	800dc66 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbf8:	e013      	b.n	800dc22 <AES_CMAC_Update+0x116>
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfe:	4413      	add	r3, r2
 800dc00:	33f1      	adds	r3, #241	; 0xf1
 800dc02:	781a      	ldrb	r2, [r3, #0]
 800dc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc06:	68b9      	ldr	r1, [r7, #8]
 800dc08:	440b      	add	r3, r1
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	4053      	eors	r3, r2
 800dc0e:	b2d9      	uxtb	r1, r3
 800dc10:	68fa      	ldr	r2, [r7, #12]
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	4413      	add	r3, r2
 800dc16:	33f1      	adds	r3, #241	; 0xf1
 800dc18:	460a      	mov	r2, r1
 800dc1a:	701a      	strb	r2, [r3, #0]
 800dc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc1e:	3301      	adds	r3, #1
 800dc20:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc24:	2b0f      	cmp	r3, #15
 800dc26:	dde8      	ble.n	800dbfa <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dc2e:	f107 0314 	add.w	r3, r7, #20
 800dc32:	2210      	movs	r2, #16
 800dc34:	4618      	mov	r0, r3
 800dc36:	f00d fcb6 	bl	801b5a6 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800dc3a:	68fa      	ldr	r2, [r7, #12]
 800dc3c:	f107 0114 	add.w	r1, r7, #20
 800dc40:	f107 0314 	add.w	r3, r7, #20
 800dc44:	4618      	mov	r0, r3
 800dc46:	f000 fe97 	bl	800e978 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	33f1      	adds	r3, #241	; 0xf1
 800dc4e:	f107 0114 	add.w	r1, r7, #20
 800dc52:	2210      	movs	r2, #16
 800dc54:	4618      	mov	r0, r3
 800dc56:	f00d fca6 	bl	801b5a6 <memcpy1>

        data += 16;
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	3310      	adds	r3, #16
 800dc5e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	3b10      	subs	r3, #16
 800dc64:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b10      	cmp	r3, #16
 800dc6a:	d8c3      	bhi.n	800dbf4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	b292      	uxth	r2, r2
 800dc76:	68b9      	ldr	r1, [r7, #8]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f00d fc94 	bl	801b5a6 <memcpy1>
    ctx->M_n = len;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dc86:	e000      	b.n	800dc8a <AES_CMAC_Update+0x17e>
            return;
 800dc88:	bf00      	nop
}
 800dc8a:	3730      	adds	r7, #48	; 0x30
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b092      	sub	sp, #72	; 0x48
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800dc9a:	f107 031c 	add.w	r3, r7, #28
 800dc9e:	2210      	movs	r2, #16
 800dca0:	2100      	movs	r1, #0
 800dca2:	4618      	mov	r0, r3
 800dca4:	f00d fcba 	bl	801b61c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	f107 011c 	add.w	r1, r7, #28
 800dcae:	f107 031c 	add.w	r3, r7, #28
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 fe60 	bl	800e978 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800dcb8:	7f3b      	ldrb	r3, [r7, #28]
 800dcba:	b25b      	sxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	da30      	bge.n	800dd22 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	647b      	str	r3, [r7, #68]	; 0x44
 800dcc4:	e01b      	b.n	800dcfe <AES_CMAC_Final+0x6e>
 800dcc6:	f107 021c 	add.w	r2, r7, #28
 800dcca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dccc:	4413      	add	r3, r2
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	b25a      	sxtb	r2, r3
 800dcd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	3348      	adds	r3, #72	; 0x48
 800dcda:	443b      	add	r3, r7
 800dcdc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dce0:	09db      	lsrs	r3, r3, #7
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	b25b      	sxtb	r3, r3
 800dce6:	4313      	orrs	r3, r2
 800dce8:	b25b      	sxtb	r3, r3
 800dcea:	b2d9      	uxtb	r1, r3
 800dcec:	f107 021c 	add.w	r2, r7, #28
 800dcf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcf2:	4413      	add	r3, r2
 800dcf4:	460a      	mov	r2, r1
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	647b      	str	r3, [r7, #68]	; 0x44
 800dcfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd00:	2b0e      	cmp	r3, #14
 800dd02:	dde0      	ble.n	800dcc6 <AES_CMAC_Final+0x36>
 800dd04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd08:	005b      	lsls	r3, r3, #1
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dd10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd14:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dd18:	43db      	mvns	r3, r3
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dd20:	e027      	b.n	800dd72 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dd22:	2300      	movs	r3, #0
 800dd24:	643b      	str	r3, [r7, #64]	; 0x40
 800dd26:	e01b      	b.n	800dd60 <AES_CMAC_Final+0xd0>
 800dd28:	f107 021c 	add.w	r2, r7, #28
 800dd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd2e:	4413      	add	r3, r2
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	005b      	lsls	r3, r3, #1
 800dd34:	b25a      	sxtb	r2, r3
 800dd36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd38:	3301      	adds	r3, #1
 800dd3a:	3348      	adds	r3, #72	; 0x48
 800dd3c:	443b      	add	r3, r7
 800dd3e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dd42:	09db      	lsrs	r3, r3, #7
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	b25b      	sxtb	r3, r3
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	b25b      	sxtb	r3, r3
 800dd4c:	b2d9      	uxtb	r1, r3
 800dd4e:	f107 021c 	add.w	r2, r7, #28
 800dd52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd54:	4413      	add	r3, r2
 800dd56:	460a      	mov	r2, r1
 800dd58:	701a      	strb	r2, [r3, #0]
 800dd5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd5c:	3301      	adds	r3, #1
 800dd5e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd62:	2b0e      	cmp	r3, #14
 800dd64:	dde0      	ble.n	800dd28 <AES_CMAC_Final+0x98>
 800dd66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd6a:	005b      	lsls	r3, r3, #1
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dd78:	2b10      	cmp	r3, #16
 800dd7a:	d11d      	bne.n	800ddb8 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd80:	e016      	b.n	800ddb0 <AES_CMAC_Final+0x120>
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd86:	4413      	add	r3, r2
 800dd88:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dd8c:	781a      	ldrb	r2, [r3, #0]
 800dd8e:	f107 011c 	add.w	r1, r7, #28
 800dd92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd94:	440b      	add	r3, r1
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	4053      	eors	r3, r2
 800dd9a:	b2d9      	uxtb	r1, r3
 800dd9c:	683a      	ldr	r2, [r7, #0]
 800dd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda0:	4413      	add	r3, r2
 800dda2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800dda6:	460a      	mov	r2, r1
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddac:	3301      	adds	r3, #1
 800ddae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ddb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb2:	2b0f      	cmp	r3, #15
 800ddb4:	dde5      	ble.n	800dd82 <AES_CMAC_Final+0xf2>
 800ddb6:	e096      	b.n	800dee6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ddb8:	7f3b      	ldrb	r3, [r7, #28]
 800ddba:	b25b      	sxtb	r3, r3
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	da30      	bge.n	800de22 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddc4:	e01b      	b.n	800ddfe <AES_CMAC_Final+0x16e>
 800ddc6:	f107 021c 	add.w	r2, r7, #28
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	4413      	add	r3, r2
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	005b      	lsls	r3, r3, #1
 800ddd2:	b25a      	sxtb	r2, r3
 800ddd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd6:	3301      	adds	r3, #1
 800ddd8:	3348      	adds	r3, #72	; 0x48
 800ddda:	443b      	add	r3, r7
 800dddc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dde0:	09db      	lsrs	r3, r3, #7
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	b25b      	sxtb	r3, r3
 800dde6:	4313      	orrs	r3, r2
 800dde8:	b25b      	sxtb	r3, r3
 800ddea:	b2d9      	uxtb	r1, r3
 800ddec:	f107 021c 	add.w	r2, r7, #28
 800ddf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf2:	4413      	add	r3, r2
 800ddf4:	460a      	mov	r2, r1
 800ddf6:	701a      	strb	r2, [r3, #0]
 800ddf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	2b0e      	cmp	r3, #14
 800de02:	dde0      	ble.n	800ddc6 <AES_CMAC_Final+0x136>
 800de04:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800de10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de14:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800de18:	43db      	mvns	r3, r3
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800de20:	e027      	b.n	800de72 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800de22:	2300      	movs	r3, #0
 800de24:	637b      	str	r3, [r7, #52]	; 0x34
 800de26:	e01b      	b.n	800de60 <AES_CMAC_Final+0x1d0>
 800de28:	f107 021c 	add.w	r2, r7, #28
 800de2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de2e:	4413      	add	r3, r2
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	005b      	lsls	r3, r3, #1
 800de34:	b25a      	sxtb	r2, r3
 800de36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de38:	3301      	adds	r3, #1
 800de3a:	3348      	adds	r3, #72	; 0x48
 800de3c:	443b      	add	r3, r7
 800de3e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800de42:	09db      	lsrs	r3, r3, #7
 800de44:	b2db      	uxtb	r3, r3
 800de46:	b25b      	sxtb	r3, r3
 800de48:	4313      	orrs	r3, r2
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	b2d9      	uxtb	r1, r3
 800de4e:	f107 021c 	add.w	r2, r7, #28
 800de52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de54:	4413      	add	r3, r2
 800de56:	460a      	mov	r2, r1
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de5c:	3301      	adds	r3, #1
 800de5e:	637b      	str	r3, [r7, #52]	; 0x34
 800de60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de62:	2b0e      	cmp	r3, #14
 800de64:	dde0      	ble.n	800de28 <AES_CMAC_Final+0x198>
 800de66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de78:	683a      	ldr	r2, [r7, #0]
 800de7a:	4413      	add	r3, r2
 800de7c:	2280      	movs	r2, #128	; 0x80
 800de7e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800de82:	e007      	b.n	800de94 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de8a:	683a      	ldr	r2, [r7, #0]
 800de8c:	4413      	add	r3, r2
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dea8:	2b0f      	cmp	r3, #15
 800deaa:	d9eb      	bls.n	800de84 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800deac:	2300      	movs	r3, #0
 800deae:	633b      	str	r3, [r7, #48]	; 0x30
 800deb0:	e016      	b.n	800dee0 <AES_CMAC_Final+0x250>
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deb6:	4413      	add	r3, r2
 800deb8:	f203 1301 	addw	r3, r3, #257	; 0x101
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	f107 011c 	add.w	r1, r7, #28
 800dec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dec4:	440b      	add	r3, r1
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	4053      	eors	r3, r2
 800deca:	b2d9      	uxtb	r1, r3
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded0:	4413      	add	r3, r2
 800ded2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ded6:	460a      	mov	r2, r1
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dedc:	3301      	adds	r3, #1
 800dede:	633b      	str	r3, [r7, #48]	; 0x30
 800dee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee2:	2b0f      	cmp	r3, #15
 800dee4:	dde5      	ble.n	800deb2 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800dee6:	2300      	movs	r3, #0
 800dee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800deea:	e015      	b.n	800df18 <AES_CMAC_Final+0x288>
 800deec:	683a      	ldr	r2, [r7, #0]
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	4413      	add	r3, r2
 800def2:	33f1      	adds	r3, #241	; 0xf1
 800def4:	781a      	ldrb	r2, [r3, #0]
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	440b      	add	r3, r1
 800defc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	4053      	eors	r3, r2
 800df04:	b2d9      	uxtb	r1, r3
 800df06:	683a      	ldr	r2, [r7, #0]
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	4413      	add	r3, r2
 800df0c:	33f1      	adds	r3, #241	; 0xf1
 800df0e:	460a      	mov	r2, r1
 800df10:	701a      	strb	r2, [r3, #0]
 800df12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df14:	3301      	adds	r3, #1
 800df16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	2b0f      	cmp	r3, #15
 800df1c:	dde6      	ble.n	800deec <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800df24:	f107 030c 	add.w	r3, r7, #12
 800df28:	2210      	movs	r2, #16
 800df2a:	4618      	mov	r0, r3
 800df2c:	f00d fb3b 	bl	801b5a6 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	f107 030c 	add.w	r3, r7, #12
 800df36:	6879      	ldr	r1, [r7, #4]
 800df38:	4618      	mov	r0, r3
 800df3a:	f000 fd1d 	bl	800e978 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800df3e:	f107 031c 	add.w	r3, r7, #28
 800df42:	2210      	movs	r2, #16
 800df44:	2100      	movs	r1, #0
 800df46:	4618      	mov	r0, r3
 800df48:	f00d fb68 	bl	801b61c <memset1>
}
 800df4c:	bf00      	nop
 800df4e:	3748      	adds	r7, #72	; 0x48
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800df54:	b480      	push	{r7}
 800df56:	b083      	sub	sp, #12
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	781a      	ldrb	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	3301      	adds	r3, #1
 800df6a:	683a      	ldr	r2, [r7, #0]
 800df6c:	7852      	ldrb	r2, [r2, #1]
 800df6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	3302      	adds	r3, #2
 800df74:	683a      	ldr	r2, [r7, #0]
 800df76:	7892      	ldrb	r2, [r2, #2]
 800df78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	3303      	adds	r3, #3
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	78d2      	ldrb	r2, [r2, #3]
 800df82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	3304      	adds	r3, #4
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	7912      	ldrb	r2, [r2, #4]
 800df8c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	3305      	adds	r3, #5
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	7952      	ldrb	r2, [r2, #5]
 800df96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3306      	adds	r3, #6
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	7992      	ldrb	r2, [r2, #6]
 800dfa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3307      	adds	r3, #7
 800dfa6:	683a      	ldr	r2, [r7, #0]
 800dfa8:	79d2      	ldrb	r2, [r2, #7]
 800dfaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	7a12      	ldrb	r2, [r2, #8]
 800dfb4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	3309      	adds	r3, #9
 800dfba:	683a      	ldr	r2, [r7, #0]
 800dfbc:	7a52      	ldrb	r2, [r2, #9]
 800dfbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	330a      	adds	r3, #10
 800dfc4:	683a      	ldr	r2, [r7, #0]
 800dfc6:	7a92      	ldrb	r2, [r2, #10]
 800dfc8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	330b      	adds	r3, #11
 800dfce:	683a      	ldr	r2, [r7, #0]
 800dfd0:	7ad2      	ldrb	r2, [r2, #11]
 800dfd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	330c      	adds	r3, #12
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	7b12      	ldrb	r2, [r2, #12]
 800dfdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	330d      	adds	r3, #13
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	7b52      	ldrb	r2, [r2, #13]
 800dfe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	330e      	adds	r3, #14
 800dfec:	683a      	ldr	r2, [r7, #0]
 800dfee:	7b92      	ldrb	r2, [r2, #14]
 800dff0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	330f      	adds	r3, #15
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	7bd2      	ldrb	r2, [r2, #15]
 800dffa:	701a      	strb	r2, [r3, #0]
#endif
}
 800dffc:	bf00      	nop
 800dffe:	370c      	adds	r7, #12
 800e000:	46bd      	mov	sp, r7
 800e002:	bc80      	pop	{r7}
 800e004:	4770      	bx	lr

0800e006 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e006:	b480      	push	{r7}
 800e008:	b085      	sub	sp, #20
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	4613      	mov	r3, r2
 800e012:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e014:	e007      	b.n	800e026 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	1c53      	adds	r3, r2, #1
 800e01a:	60bb      	str	r3, [r7, #8]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	1c59      	adds	r1, r3, #1
 800e020:	60f9      	str	r1, [r7, #12]
 800e022:	7812      	ldrb	r2, [r2, #0]
 800e024:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	1e5a      	subs	r2, r3, #1
 800e02a:	71fa      	strb	r2, [r7, #7]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1f2      	bne.n	800e016 <copy_block_nn+0x10>
}
 800e030:	bf00      	nop
 800e032:	bf00      	nop
 800e034:	3714      	adds	r7, #20
 800e036:	46bd      	mov	sp, r7
 800e038:	bc80      	pop	{r7}
 800e03a:	4770      	bx	lr

0800e03c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	781a      	ldrb	r2, [r3, #0]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	4053      	eors	r3, r2
 800e050:	b2da      	uxtb	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	3301      	adds	r3, #1
 800e05a:	7819      	ldrb	r1, [r3, #0]
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	3301      	adds	r3, #1
 800e060:	781a      	ldrb	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3301      	adds	r3, #1
 800e066:	404a      	eors	r2, r1
 800e068:	b2d2      	uxtb	r2, r2
 800e06a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3302      	adds	r3, #2
 800e070:	7819      	ldrb	r1, [r3, #0]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	3302      	adds	r3, #2
 800e076:	781a      	ldrb	r2, [r3, #0]
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	3302      	adds	r3, #2
 800e07c:	404a      	eors	r2, r1
 800e07e:	b2d2      	uxtb	r2, r2
 800e080:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	3303      	adds	r3, #3
 800e086:	7819      	ldrb	r1, [r3, #0]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	3303      	adds	r3, #3
 800e08c:	781a      	ldrb	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	3303      	adds	r3, #3
 800e092:	404a      	eors	r2, r1
 800e094:	b2d2      	uxtb	r2, r2
 800e096:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	3304      	adds	r3, #4
 800e09c:	7819      	ldrb	r1, [r3, #0]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	781a      	ldrb	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	404a      	eors	r2, r1
 800e0aa:	b2d2      	uxtb	r2, r2
 800e0ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	3305      	adds	r3, #5
 800e0b2:	7819      	ldrb	r1, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	3305      	adds	r3, #5
 800e0b8:	781a      	ldrb	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	3305      	adds	r3, #5
 800e0be:	404a      	eors	r2, r1
 800e0c0:	b2d2      	uxtb	r2, r2
 800e0c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3306      	adds	r3, #6
 800e0c8:	7819      	ldrb	r1, [r3, #0]
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	3306      	adds	r3, #6
 800e0ce:	781a      	ldrb	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	3306      	adds	r3, #6
 800e0d4:	404a      	eors	r2, r1
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	3307      	adds	r3, #7
 800e0de:	7819      	ldrb	r1, [r3, #0]
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	3307      	adds	r3, #7
 800e0e4:	781a      	ldrb	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3307      	adds	r3, #7
 800e0ea:	404a      	eors	r2, r1
 800e0ec:	b2d2      	uxtb	r2, r2
 800e0ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	7819      	ldrb	r1, [r3, #0]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	3308      	adds	r3, #8
 800e0fa:	781a      	ldrb	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	3308      	adds	r3, #8
 800e100:	404a      	eors	r2, r1
 800e102:	b2d2      	uxtb	r2, r2
 800e104:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3309      	adds	r3, #9
 800e10a:	7819      	ldrb	r1, [r3, #0]
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	3309      	adds	r3, #9
 800e110:	781a      	ldrb	r2, [r3, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3309      	adds	r3, #9
 800e116:	404a      	eors	r2, r1
 800e118:	b2d2      	uxtb	r2, r2
 800e11a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	330a      	adds	r3, #10
 800e120:	7819      	ldrb	r1, [r3, #0]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	330a      	adds	r3, #10
 800e126:	781a      	ldrb	r2, [r3, #0]
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	330a      	adds	r3, #10
 800e12c:	404a      	eors	r2, r1
 800e12e:	b2d2      	uxtb	r2, r2
 800e130:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	330b      	adds	r3, #11
 800e136:	7819      	ldrb	r1, [r3, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	330b      	adds	r3, #11
 800e13c:	781a      	ldrb	r2, [r3, #0]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	330b      	adds	r3, #11
 800e142:	404a      	eors	r2, r1
 800e144:	b2d2      	uxtb	r2, r2
 800e146:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	330c      	adds	r3, #12
 800e14c:	7819      	ldrb	r1, [r3, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	330c      	adds	r3, #12
 800e152:	781a      	ldrb	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	330c      	adds	r3, #12
 800e158:	404a      	eors	r2, r1
 800e15a:	b2d2      	uxtb	r2, r2
 800e15c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	330d      	adds	r3, #13
 800e162:	7819      	ldrb	r1, [r3, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	330d      	adds	r3, #13
 800e168:	781a      	ldrb	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	330d      	adds	r3, #13
 800e16e:	404a      	eors	r2, r1
 800e170:	b2d2      	uxtb	r2, r2
 800e172:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	330e      	adds	r3, #14
 800e178:	7819      	ldrb	r1, [r3, #0]
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	330e      	adds	r3, #14
 800e17e:	781a      	ldrb	r2, [r3, #0]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	330e      	adds	r3, #14
 800e184:	404a      	eors	r2, r1
 800e186:	b2d2      	uxtb	r2, r2
 800e188:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	330f      	adds	r3, #15
 800e18e:	7819      	ldrb	r1, [r3, #0]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	330f      	adds	r3, #15
 800e194:	781a      	ldrb	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	330f      	adds	r3, #15
 800e19a:	404a      	eors	r2, r1
 800e19c:	b2d2      	uxtb	r2, r2
 800e19e:	701a      	strb	r2, [r3, #0]
#endif
}
 800e1a0:	bf00      	nop
 800e1a2:	370c      	adds	r7, #12
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bc80      	pop	{r7}
 800e1a8:	4770      	bx	lr

0800e1aa <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	b085      	sub	sp, #20
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	781a      	ldrb	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	4053      	eors	r3, r2
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	7819      	ldrb	r1, [r3, #0]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	781a      	ldrb	r2, [r3, #0]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	404a      	eors	r2, r1
 800e1d8:	b2d2      	uxtb	r2, r2
 800e1da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3302      	adds	r3, #2
 800e1e0:	7819      	ldrb	r1, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	3302      	adds	r3, #2
 800e1e6:	781a      	ldrb	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	404a      	eors	r2, r1
 800e1ee:	b2d2      	uxtb	r2, r2
 800e1f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	3303      	adds	r3, #3
 800e1f6:	7819      	ldrb	r1, [r3, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3303      	adds	r3, #3
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	3303      	adds	r3, #3
 800e202:	404a      	eors	r2, r1
 800e204:	b2d2      	uxtb	r2, r2
 800e206:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	3304      	adds	r3, #4
 800e20c:	7819      	ldrb	r1, [r3, #0]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	3304      	adds	r3, #4
 800e212:	781a      	ldrb	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	3304      	adds	r3, #4
 800e218:	404a      	eors	r2, r1
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	3305      	adds	r3, #5
 800e222:	7819      	ldrb	r1, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	3305      	adds	r3, #5
 800e228:	781a      	ldrb	r2, [r3, #0]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	3305      	adds	r3, #5
 800e22e:	404a      	eors	r2, r1
 800e230:	b2d2      	uxtb	r2, r2
 800e232:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	3306      	adds	r3, #6
 800e238:	7819      	ldrb	r1, [r3, #0]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	3306      	adds	r3, #6
 800e23e:	781a      	ldrb	r2, [r3, #0]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3306      	adds	r3, #6
 800e244:	404a      	eors	r2, r1
 800e246:	b2d2      	uxtb	r2, r2
 800e248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	3307      	adds	r3, #7
 800e24e:	7819      	ldrb	r1, [r3, #0]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3307      	adds	r3, #7
 800e254:	781a      	ldrb	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	3307      	adds	r3, #7
 800e25a:	404a      	eors	r2, r1
 800e25c:	b2d2      	uxtb	r2, r2
 800e25e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	3308      	adds	r3, #8
 800e264:	7819      	ldrb	r1, [r3, #0]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	3308      	adds	r3, #8
 800e26a:	781a      	ldrb	r2, [r3, #0]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	3308      	adds	r3, #8
 800e270:	404a      	eors	r2, r1
 800e272:	b2d2      	uxtb	r2, r2
 800e274:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	3309      	adds	r3, #9
 800e27a:	7819      	ldrb	r1, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3309      	adds	r3, #9
 800e280:	781a      	ldrb	r2, [r3, #0]
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3309      	adds	r3, #9
 800e286:	404a      	eors	r2, r1
 800e288:	b2d2      	uxtb	r2, r2
 800e28a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	330a      	adds	r3, #10
 800e290:	7819      	ldrb	r1, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	330a      	adds	r3, #10
 800e296:	781a      	ldrb	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	330a      	adds	r3, #10
 800e29c:	404a      	eors	r2, r1
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	330b      	adds	r3, #11
 800e2a6:	7819      	ldrb	r1, [r3, #0]
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	330b      	adds	r3, #11
 800e2ac:	781a      	ldrb	r2, [r3, #0]
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	330b      	adds	r3, #11
 800e2b2:	404a      	eors	r2, r1
 800e2b4:	b2d2      	uxtb	r2, r2
 800e2b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	330c      	adds	r3, #12
 800e2bc:	7819      	ldrb	r1, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	330c      	adds	r3, #12
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	330c      	adds	r3, #12
 800e2c8:	404a      	eors	r2, r1
 800e2ca:	b2d2      	uxtb	r2, r2
 800e2cc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	330d      	adds	r3, #13
 800e2d2:	7819      	ldrb	r1, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	330d      	adds	r3, #13
 800e2d8:	781a      	ldrb	r2, [r3, #0]
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	330d      	adds	r3, #13
 800e2de:	404a      	eors	r2, r1
 800e2e0:	b2d2      	uxtb	r2, r2
 800e2e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	330e      	adds	r3, #14
 800e2e8:	7819      	ldrb	r1, [r3, #0]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	330e      	adds	r3, #14
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	330e      	adds	r3, #14
 800e2f4:	404a      	eors	r2, r1
 800e2f6:	b2d2      	uxtb	r2, r2
 800e2f8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	330f      	adds	r3, #15
 800e2fe:	7819      	ldrb	r1, [r3, #0]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	330f      	adds	r3, #15
 800e304:	781a      	ldrb	r2, [r3, #0]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	330f      	adds	r3, #15
 800e30a:	404a      	eors	r2, r1
 800e30c:	b2d2      	uxtb	r2, r2
 800e30e:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e310:	bf00      	nop
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	bc80      	pop	{r7}
 800e318:	4770      	bx	lr

0800e31a <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fe88 	bl	800e03c <xor_block>
}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e334:	b480      	push	{r7}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	461a      	mov	r2, r3
 800e342:	4b48      	ldr	r3, [pc, #288]	; (800e464 <shift_sub_rows+0x130>)
 800e344:	5c9a      	ldrb	r2, [r3, r2]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	701a      	strb	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	3304      	adds	r3, #4
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	4619      	mov	r1, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	3304      	adds	r3, #4
 800e356:	4a43      	ldr	r2, [pc, #268]	; (800e464 <shift_sub_rows+0x130>)
 800e358:	5c52      	ldrb	r2, [r2, r1]
 800e35a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3308      	adds	r3, #8
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	4619      	mov	r1, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	3308      	adds	r3, #8
 800e368:	4a3e      	ldr	r2, [pc, #248]	; (800e464 <shift_sub_rows+0x130>)
 800e36a:	5c52      	ldrb	r2, [r2, r1]
 800e36c:	701a      	strb	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	330c      	adds	r3, #12
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	4619      	mov	r1, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	330c      	adds	r3, #12
 800e37a:	4a3a      	ldr	r2, [pc, #232]	; (800e464 <shift_sub_rows+0x130>)
 800e37c:	5c52      	ldrb	r2, [r2, r1]
 800e37e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	73fb      	strb	r3, [r7, #15]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3305      	adds	r3, #5
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	4619      	mov	r1, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	3301      	adds	r3, #1
 800e392:	4a34      	ldr	r2, [pc, #208]	; (800e464 <shift_sub_rows+0x130>)
 800e394:	5c52      	ldrb	r2, [r2, r1]
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	3309      	adds	r3, #9
 800e39c:	781b      	ldrb	r3, [r3, #0]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3305      	adds	r3, #5
 800e3a4:	4a2f      	ldr	r2, [pc, #188]	; (800e464 <shift_sub_rows+0x130>)
 800e3a6:	5c52      	ldrb	r2, [r2, r1]
 800e3a8:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	330d      	adds	r3, #13
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	3309      	adds	r3, #9
 800e3b6:	4a2b      	ldr	r2, [pc, #172]	; (800e464 <shift_sub_rows+0x130>)
 800e3b8:	5c52      	ldrb	r2, [r2, r1]
 800e3ba:	701a      	strb	r2, [r3, #0]
 800e3bc:	7bfa      	ldrb	r2, [r7, #15]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	330d      	adds	r3, #13
 800e3c2:	4928      	ldr	r1, [pc, #160]	; (800e464 <shift_sub_rows+0x130>)
 800e3c4:	5c8a      	ldrb	r2, [r1, r2]
 800e3c6:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	789b      	ldrb	r3, [r3, #2]
 800e3cc:	73fb      	strb	r3, [r7, #15]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	330a      	adds	r3, #10
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3302      	adds	r3, #2
 800e3da:	4a22      	ldr	r2, [pc, #136]	; (800e464 <shift_sub_rows+0x130>)
 800e3dc:	5c52      	ldrb	r2, [r2, r1]
 800e3de:	701a      	strb	r2, [r3, #0]
 800e3e0:	7bfa      	ldrb	r2, [r7, #15]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	330a      	adds	r3, #10
 800e3e6:	491f      	ldr	r1, [pc, #124]	; (800e464 <shift_sub_rows+0x130>)
 800e3e8:	5c8a      	ldrb	r2, [r1, r2]
 800e3ea:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	799b      	ldrb	r3, [r3, #6]
 800e3f0:	73fb      	strb	r3, [r7, #15]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	330e      	adds	r3, #14
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	3306      	adds	r3, #6
 800e3fe:	4a19      	ldr	r2, [pc, #100]	; (800e464 <shift_sub_rows+0x130>)
 800e400:	5c52      	ldrb	r2, [r2, r1]
 800e402:	701a      	strb	r2, [r3, #0]
 800e404:	7bfa      	ldrb	r2, [r7, #15]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	330e      	adds	r3, #14
 800e40a:	4916      	ldr	r1, [pc, #88]	; (800e464 <shift_sub_rows+0x130>)
 800e40c:	5c8a      	ldrb	r2, [r1, r2]
 800e40e:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	7bdb      	ldrb	r3, [r3, #15]
 800e414:	73fb      	strb	r3, [r7, #15]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	330b      	adds	r3, #11
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	4619      	mov	r1, r3
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	330f      	adds	r3, #15
 800e422:	4a10      	ldr	r2, [pc, #64]	; (800e464 <shift_sub_rows+0x130>)
 800e424:	5c52      	ldrb	r2, [r2, r1]
 800e426:	701a      	strb	r2, [r3, #0]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	3307      	adds	r3, #7
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	4619      	mov	r1, r3
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	330b      	adds	r3, #11
 800e434:	4a0b      	ldr	r2, [pc, #44]	; (800e464 <shift_sub_rows+0x130>)
 800e436:	5c52      	ldrb	r2, [r2, r1]
 800e438:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	3303      	adds	r3, #3
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	4619      	mov	r1, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	3307      	adds	r3, #7
 800e446:	4a07      	ldr	r2, [pc, #28]	; (800e464 <shift_sub_rows+0x130>)
 800e448:	5c52      	ldrb	r2, [r2, r1]
 800e44a:	701a      	strb	r2, [r3, #0]
 800e44c:	7bfa      	ldrb	r2, [r7, #15]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3303      	adds	r3, #3
 800e452:	4904      	ldr	r1, [pc, #16]	; (800e464 <shift_sub_rows+0x130>)
 800e454:	5c8a      	ldrb	r2, [r1, r2]
 800e456:	701a      	strb	r2, [r3, #0]
}
 800e458:	bf00      	nop
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bc80      	pop	{r7}
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	08022f70 	.word	0x08022f70

0800e468 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e470:	f107 0308 	add.w	r3, r7, #8
 800e474:	6879      	ldr	r1, [r7, #4]
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff fd6c 	bl	800df54 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e47c:	7a3b      	ldrb	r3, [r7, #8]
 800e47e:	461a      	mov	r2, r3
 800e480:	4b9a      	ldr	r3, [pc, #616]	; (800e6ec <mix_sub_columns+0x284>)
 800e482:	5c9a      	ldrb	r2, [r3, r2]
 800e484:	7b7b      	ldrb	r3, [r7, #13]
 800e486:	4619      	mov	r1, r3
 800e488:	4b99      	ldr	r3, [pc, #612]	; (800e6f0 <mix_sub_columns+0x288>)
 800e48a:	5c5b      	ldrb	r3, [r3, r1]
 800e48c:	4053      	eors	r3, r2
 800e48e:	b2da      	uxtb	r2, r3
 800e490:	7cbb      	ldrb	r3, [r7, #18]
 800e492:	4619      	mov	r1, r3
 800e494:	4b97      	ldr	r3, [pc, #604]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e496:	5c5b      	ldrb	r3, [r3, r1]
 800e498:	4053      	eors	r3, r2
 800e49a:	b2da      	uxtb	r2, r3
 800e49c:	7dfb      	ldrb	r3, [r7, #23]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	4b94      	ldr	r3, [pc, #592]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e4a2:	5c5b      	ldrb	r3, [r3, r1]
 800e4a4:	4053      	eors	r3, r2
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e4ac:	7a3b      	ldrb	r3, [r7, #8]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	4b90      	ldr	r3, [pc, #576]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e4b2:	5c9a      	ldrb	r2, [r3, r2]
 800e4b4:	7b7b      	ldrb	r3, [r7, #13]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	4b8c      	ldr	r3, [pc, #560]	; (800e6ec <mix_sub_columns+0x284>)
 800e4ba:	5c5b      	ldrb	r3, [r3, r1]
 800e4bc:	4053      	eors	r3, r2
 800e4be:	b2da      	uxtb	r2, r3
 800e4c0:	7cbb      	ldrb	r3, [r7, #18]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4b8a      	ldr	r3, [pc, #552]	; (800e6f0 <mix_sub_columns+0x288>)
 800e4c6:	5c5b      	ldrb	r3, [r3, r1]
 800e4c8:	4053      	eors	r3, r2
 800e4ca:	b2d9      	uxtb	r1, r3
 800e4cc:	7dfb      	ldrb	r3, [r7, #23]
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4b88      	ldr	r3, [pc, #544]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e4d2:	5c9a      	ldrb	r2, [r3, r2]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	404a      	eors	r2, r1
 800e4da:	b2d2      	uxtb	r2, r2
 800e4dc:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e4de:	7a3b      	ldrb	r3, [r7, #8]
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	4b84      	ldr	r3, [pc, #528]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e4e4:	5c9a      	ldrb	r2, [r3, r2]
 800e4e6:	7b7b      	ldrb	r3, [r7, #13]
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4b82      	ldr	r3, [pc, #520]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e4ec:	5c5b      	ldrb	r3, [r3, r1]
 800e4ee:	4053      	eors	r3, r2
 800e4f0:	b2da      	uxtb	r2, r3
 800e4f2:	7cbb      	ldrb	r3, [r7, #18]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4b7d      	ldr	r3, [pc, #500]	; (800e6ec <mix_sub_columns+0x284>)
 800e4f8:	5c5b      	ldrb	r3, [r3, r1]
 800e4fa:	4053      	eors	r3, r2
 800e4fc:	b2d9      	uxtb	r1, r3
 800e4fe:	7dfb      	ldrb	r3, [r7, #23]
 800e500:	461a      	mov	r2, r3
 800e502:	4b7b      	ldr	r3, [pc, #492]	; (800e6f0 <mix_sub_columns+0x288>)
 800e504:	5c9a      	ldrb	r2, [r3, r2]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3302      	adds	r3, #2
 800e50a:	404a      	eors	r2, r1
 800e50c:	b2d2      	uxtb	r2, r2
 800e50e:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e510:	7a3b      	ldrb	r3, [r7, #8]
 800e512:	461a      	mov	r2, r3
 800e514:	4b76      	ldr	r3, [pc, #472]	; (800e6f0 <mix_sub_columns+0x288>)
 800e516:	5c9a      	ldrb	r2, [r3, r2]
 800e518:	7b7b      	ldrb	r3, [r7, #13]
 800e51a:	4619      	mov	r1, r3
 800e51c:	4b75      	ldr	r3, [pc, #468]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e51e:	5c5b      	ldrb	r3, [r3, r1]
 800e520:	4053      	eors	r3, r2
 800e522:	b2da      	uxtb	r2, r3
 800e524:	7cbb      	ldrb	r3, [r7, #18]
 800e526:	4619      	mov	r1, r3
 800e528:	4b72      	ldr	r3, [pc, #456]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e52a:	5c5b      	ldrb	r3, [r3, r1]
 800e52c:	4053      	eors	r3, r2
 800e52e:	b2d9      	uxtb	r1, r3
 800e530:	7dfb      	ldrb	r3, [r7, #23]
 800e532:	461a      	mov	r2, r3
 800e534:	4b6d      	ldr	r3, [pc, #436]	; (800e6ec <mix_sub_columns+0x284>)
 800e536:	5c9a      	ldrb	r2, [r3, r2]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	3303      	adds	r3, #3
 800e53c:	404a      	eors	r2, r1
 800e53e:	b2d2      	uxtb	r2, r2
 800e540:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e542:	7b3b      	ldrb	r3, [r7, #12]
 800e544:	461a      	mov	r2, r3
 800e546:	4b69      	ldr	r3, [pc, #420]	; (800e6ec <mix_sub_columns+0x284>)
 800e548:	5c9a      	ldrb	r2, [r3, r2]
 800e54a:	7c7b      	ldrb	r3, [r7, #17]
 800e54c:	4619      	mov	r1, r3
 800e54e:	4b68      	ldr	r3, [pc, #416]	; (800e6f0 <mix_sub_columns+0x288>)
 800e550:	5c5b      	ldrb	r3, [r3, r1]
 800e552:	4053      	eors	r3, r2
 800e554:	b2da      	uxtb	r2, r3
 800e556:	7dbb      	ldrb	r3, [r7, #22]
 800e558:	4619      	mov	r1, r3
 800e55a:	4b66      	ldr	r3, [pc, #408]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e55c:	5c5b      	ldrb	r3, [r3, r1]
 800e55e:	4053      	eors	r3, r2
 800e560:	b2d9      	uxtb	r1, r3
 800e562:	7afb      	ldrb	r3, [r7, #11]
 800e564:	461a      	mov	r2, r3
 800e566:	4b63      	ldr	r3, [pc, #396]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e568:	5c9a      	ldrb	r2, [r3, r2]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	3304      	adds	r3, #4
 800e56e:	404a      	eors	r2, r1
 800e570:	b2d2      	uxtb	r2, r2
 800e572:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e574:	7b3b      	ldrb	r3, [r7, #12]
 800e576:	461a      	mov	r2, r3
 800e578:	4b5e      	ldr	r3, [pc, #376]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e57a:	5c9a      	ldrb	r2, [r3, r2]
 800e57c:	7c7b      	ldrb	r3, [r7, #17]
 800e57e:	4619      	mov	r1, r3
 800e580:	4b5a      	ldr	r3, [pc, #360]	; (800e6ec <mix_sub_columns+0x284>)
 800e582:	5c5b      	ldrb	r3, [r3, r1]
 800e584:	4053      	eors	r3, r2
 800e586:	b2da      	uxtb	r2, r3
 800e588:	7dbb      	ldrb	r3, [r7, #22]
 800e58a:	4619      	mov	r1, r3
 800e58c:	4b58      	ldr	r3, [pc, #352]	; (800e6f0 <mix_sub_columns+0x288>)
 800e58e:	5c5b      	ldrb	r3, [r3, r1]
 800e590:	4053      	eors	r3, r2
 800e592:	b2d9      	uxtb	r1, r3
 800e594:	7afb      	ldrb	r3, [r7, #11]
 800e596:	461a      	mov	r2, r3
 800e598:	4b56      	ldr	r3, [pc, #344]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e59a:	5c9a      	ldrb	r2, [r3, r2]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	3305      	adds	r3, #5
 800e5a0:	404a      	eors	r2, r1
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e5a6:	7b3b      	ldrb	r3, [r7, #12]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	4b52      	ldr	r3, [pc, #328]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e5ac:	5c9a      	ldrb	r2, [r3, r2]
 800e5ae:	7c7b      	ldrb	r3, [r7, #17]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	4b50      	ldr	r3, [pc, #320]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e5b4:	5c5b      	ldrb	r3, [r3, r1]
 800e5b6:	4053      	eors	r3, r2
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	7dbb      	ldrb	r3, [r7, #22]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4b4b      	ldr	r3, [pc, #300]	; (800e6ec <mix_sub_columns+0x284>)
 800e5c0:	5c5b      	ldrb	r3, [r3, r1]
 800e5c2:	4053      	eors	r3, r2
 800e5c4:	b2d9      	uxtb	r1, r3
 800e5c6:	7afb      	ldrb	r3, [r7, #11]
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	4b49      	ldr	r3, [pc, #292]	; (800e6f0 <mix_sub_columns+0x288>)
 800e5cc:	5c9a      	ldrb	r2, [r3, r2]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3306      	adds	r3, #6
 800e5d2:	404a      	eors	r2, r1
 800e5d4:	b2d2      	uxtb	r2, r2
 800e5d6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e5d8:	7b3b      	ldrb	r3, [r7, #12]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	4b44      	ldr	r3, [pc, #272]	; (800e6f0 <mix_sub_columns+0x288>)
 800e5de:	5c9a      	ldrb	r2, [r3, r2]
 800e5e0:	7c7b      	ldrb	r3, [r7, #17]
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	4b43      	ldr	r3, [pc, #268]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e5e6:	5c5b      	ldrb	r3, [r3, r1]
 800e5e8:	4053      	eors	r3, r2
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	7dbb      	ldrb	r3, [r7, #22]
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4b40      	ldr	r3, [pc, #256]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e5f2:	5c5b      	ldrb	r3, [r3, r1]
 800e5f4:	4053      	eors	r3, r2
 800e5f6:	b2d9      	uxtb	r1, r3
 800e5f8:	7afb      	ldrb	r3, [r7, #11]
 800e5fa:	461a      	mov	r2, r3
 800e5fc:	4b3b      	ldr	r3, [pc, #236]	; (800e6ec <mix_sub_columns+0x284>)
 800e5fe:	5c9a      	ldrb	r2, [r3, r2]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3307      	adds	r3, #7
 800e604:	404a      	eors	r2, r1
 800e606:	b2d2      	uxtb	r2, r2
 800e608:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e60a:	7c3b      	ldrb	r3, [r7, #16]
 800e60c:	461a      	mov	r2, r3
 800e60e:	4b37      	ldr	r3, [pc, #220]	; (800e6ec <mix_sub_columns+0x284>)
 800e610:	5c9a      	ldrb	r2, [r3, r2]
 800e612:	7d7b      	ldrb	r3, [r7, #21]
 800e614:	4619      	mov	r1, r3
 800e616:	4b36      	ldr	r3, [pc, #216]	; (800e6f0 <mix_sub_columns+0x288>)
 800e618:	5c5b      	ldrb	r3, [r3, r1]
 800e61a:	4053      	eors	r3, r2
 800e61c:	b2da      	uxtb	r2, r3
 800e61e:	7abb      	ldrb	r3, [r7, #10]
 800e620:	4619      	mov	r1, r3
 800e622:	4b34      	ldr	r3, [pc, #208]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e624:	5c5b      	ldrb	r3, [r3, r1]
 800e626:	4053      	eors	r3, r2
 800e628:	b2d9      	uxtb	r1, r3
 800e62a:	7bfb      	ldrb	r3, [r7, #15]
 800e62c:	461a      	mov	r2, r3
 800e62e:	4b31      	ldr	r3, [pc, #196]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e630:	5c9a      	ldrb	r2, [r3, r2]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	3308      	adds	r3, #8
 800e636:	404a      	eors	r2, r1
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e63c:	7c3b      	ldrb	r3, [r7, #16]
 800e63e:	461a      	mov	r2, r3
 800e640:	4b2c      	ldr	r3, [pc, #176]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e642:	5c9a      	ldrb	r2, [r3, r2]
 800e644:	7d7b      	ldrb	r3, [r7, #21]
 800e646:	4619      	mov	r1, r3
 800e648:	4b28      	ldr	r3, [pc, #160]	; (800e6ec <mix_sub_columns+0x284>)
 800e64a:	5c5b      	ldrb	r3, [r3, r1]
 800e64c:	4053      	eors	r3, r2
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	7abb      	ldrb	r3, [r7, #10]
 800e652:	4619      	mov	r1, r3
 800e654:	4b26      	ldr	r3, [pc, #152]	; (800e6f0 <mix_sub_columns+0x288>)
 800e656:	5c5b      	ldrb	r3, [r3, r1]
 800e658:	4053      	eors	r3, r2
 800e65a:	b2d9      	uxtb	r1, r3
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	461a      	mov	r2, r3
 800e660:	4b24      	ldr	r3, [pc, #144]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e662:	5c9a      	ldrb	r2, [r3, r2]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	3309      	adds	r3, #9
 800e668:	404a      	eors	r2, r1
 800e66a:	b2d2      	uxtb	r2, r2
 800e66c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e66e:	7c3b      	ldrb	r3, [r7, #16]
 800e670:	461a      	mov	r2, r3
 800e672:	4b20      	ldr	r3, [pc, #128]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e674:	5c9a      	ldrb	r2, [r3, r2]
 800e676:	7d7b      	ldrb	r3, [r7, #21]
 800e678:	4619      	mov	r1, r3
 800e67a:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e67c:	5c5b      	ldrb	r3, [r3, r1]
 800e67e:	4053      	eors	r3, r2
 800e680:	b2da      	uxtb	r2, r3
 800e682:	7abb      	ldrb	r3, [r7, #10]
 800e684:	4619      	mov	r1, r3
 800e686:	4b19      	ldr	r3, [pc, #100]	; (800e6ec <mix_sub_columns+0x284>)
 800e688:	5c5b      	ldrb	r3, [r3, r1]
 800e68a:	4053      	eors	r3, r2
 800e68c:	b2d9      	uxtb	r1, r3
 800e68e:	7bfb      	ldrb	r3, [r7, #15]
 800e690:	461a      	mov	r2, r3
 800e692:	4b17      	ldr	r3, [pc, #92]	; (800e6f0 <mix_sub_columns+0x288>)
 800e694:	5c9a      	ldrb	r2, [r3, r2]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	330a      	adds	r3, #10
 800e69a:	404a      	eors	r2, r1
 800e69c:	b2d2      	uxtb	r2, r2
 800e69e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e6a0:	7c3b      	ldrb	r3, [r7, #16]
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4b12      	ldr	r3, [pc, #72]	; (800e6f0 <mix_sub_columns+0x288>)
 800e6a6:	5c9a      	ldrb	r2, [r3, r2]
 800e6a8:	7d7b      	ldrb	r3, [r7, #21]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	4b11      	ldr	r3, [pc, #68]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e6ae:	5c5b      	ldrb	r3, [r3, r1]
 800e6b0:	4053      	eors	r3, r2
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	7abb      	ldrb	r3, [r7, #10]
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <mix_sub_columns+0x28c>)
 800e6ba:	5c5b      	ldrb	r3, [r3, r1]
 800e6bc:	4053      	eors	r3, r2
 800e6be:	b2d9      	uxtb	r1, r3
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <mix_sub_columns+0x284>)
 800e6c6:	5c9a      	ldrb	r2, [r3, r2]
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	330b      	adds	r3, #11
 800e6cc:	404a      	eors	r2, r1
 800e6ce:	b2d2      	uxtb	r2, r2
 800e6d0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e6d2:	7d3b      	ldrb	r3, [r7, #20]
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	4b05      	ldr	r3, [pc, #20]	; (800e6ec <mix_sub_columns+0x284>)
 800e6d8:	5c9a      	ldrb	r2, [r3, r2]
 800e6da:	7a7b      	ldrb	r3, [r7, #9]
 800e6dc:	4619      	mov	r1, r3
 800e6de:	4b04      	ldr	r3, [pc, #16]	; (800e6f0 <mix_sub_columns+0x288>)
 800e6e0:	5c5b      	ldrb	r3, [r3, r1]
 800e6e2:	4053      	eors	r3, r2
 800e6e4:	b2da      	uxtb	r2, r3
 800e6e6:	7bbb      	ldrb	r3, [r7, #14]
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	e005      	b.n	800e6f8 <mix_sub_columns+0x290>
 800e6ec:	08023070 	.word	0x08023070
 800e6f0:	08023170 	.word	0x08023170
 800e6f4:	08022f70 	.word	0x08022f70
 800e6f8:	4b2d      	ldr	r3, [pc, #180]	; (800e7b0 <mix_sub_columns+0x348>)
 800e6fa:	5c5b      	ldrb	r3, [r3, r1]
 800e6fc:	4053      	eors	r3, r2
 800e6fe:	b2d9      	uxtb	r1, r3
 800e700:	7cfb      	ldrb	r3, [r7, #19]
 800e702:	461a      	mov	r2, r3
 800e704:	4b2a      	ldr	r3, [pc, #168]	; (800e7b0 <mix_sub_columns+0x348>)
 800e706:	5c9a      	ldrb	r2, [r3, r2]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	330c      	adds	r3, #12
 800e70c:	404a      	eors	r2, r1
 800e70e:	b2d2      	uxtb	r2, r2
 800e710:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e712:	7d3b      	ldrb	r3, [r7, #20]
 800e714:	461a      	mov	r2, r3
 800e716:	4b26      	ldr	r3, [pc, #152]	; (800e7b0 <mix_sub_columns+0x348>)
 800e718:	5c9a      	ldrb	r2, [r3, r2]
 800e71a:	7a7b      	ldrb	r3, [r7, #9]
 800e71c:	4619      	mov	r1, r3
 800e71e:	4b25      	ldr	r3, [pc, #148]	; (800e7b4 <mix_sub_columns+0x34c>)
 800e720:	5c5b      	ldrb	r3, [r3, r1]
 800e722:	4053      	eors	r3, r2
 800e724:	b2da      	uxtb	r2, r3
 800e726:	7bbb      	ldrb	r3, [r7, #14]
 800e728:	4619      	mov	r1, r3
 800e72a:	4b23      	ldr	r3, [pc, #140]	; (800e7b8 <mix_sub_columns+0x350>)
 800e72c:	5c5b      	ldrb	r3, [r3, r1]
 800e72e:	4053      	eors	r3, r2
 800e730:	b2d9      	uxtb	r1, r3
 800e732:	7cfb      	ldrb	r3, [r7, #19]
 800e734:	461a      	mov	r2, r3
 800e736:	4b1e      	ldr	r3, [pc, #120]	; (800e7b0 <mix_sub_columns+0x348>)
 800e738:	5c9a      	ldrb	r2, [r3, r2]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	330d      	adds	r3, #13
 800e73e:	404a      	eors	r2, r1
 800e740:	b2d2      	uxtb	r2, r2
 800e742:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e744:	7d3b      	ldrb	r3, [r7, #20]
 800e746:	461a      	mov	r2, r3
 800e748:	4b19      	ldr	r3, [pc, #100]	; (800e7b0 <mix_sub_columns+0x348>)
 800e74a:	5c9a      	ldrb	r2, [r3, r2]
 800e74c:	7a7b      	ldrb	r3, [r7, #9]
 800e74e:	4619      	mov	r1, r3
 800e750:	4b17      	ldr	r3, [pc, #92]	; (800e7b0 <mix_sub_columns+0x348>)
 800e752:	5c5b      	ldrb	r3, [r3, r1]
 800e754:	4053      	eors	r3, r2
 800e756:	b2da      	uxtb	r2, r3
 800e758:	7bbb      	ldrb	r3, [r7, #14]
 800e75a:	4619      	mov	r1, r3
 800e75c:	4b15      	ldr	r3, [pc, #84]	; (800e7b4 <mix_sub_columns+0x34c>)
 800e75e:	5c5b      	ldrb	r3, [r3, r1]
 800e760:	4053      	eors	r3, r2
 800e762:	b2d9      	uxtb	r1, r3
 800e764:	7cfb      	ldrb	r3, [r7, #19]
 800e766:	461a      	mov	r2, r3
 800e768:	4b13      	ldr	r3, [pc, #76]	; (800e7b8 <mix_sub_columns+0x350>)
 800e76a:	5c9a      	ldrb	r2, [r3, r2]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	330e      	adds	r3, #14
 800e770:	404a      	eors	r2, r1
 800e772:	b2d2      	uxtb	r2, r2
 800e774:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800e776:	7d3b      	ldrb	r3, [r7, #20]
 800e778:	461a      	mov	r2, r3
 800e77a:	4b0f      	ldr	r3, [pc, #60]	; (800e7b8 <mix_sub_columns+0x350>)
 800e77c:	5c9a      	ldrb	r2, [r3, r2]
 800e77e:	7a7b      	ldrb	r3, [r7, #9]
 800e780:	4619      	mov	r1, r3
 800e782:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <mix_sub_columns+0x348>)
 800e784:	5c5b      	ldrb	r3, [r3, r1]
 800e786:	4053      	eors	r3, r2
 800e788:	b2da      	uxtb	r2, r3
 800e78a:	7bbb      	ldrb	r3, [r7, #14]
 800e78c:	4619      	mov	r1, r3
 800e78e:	4b08      	ldr	r3, [pc, #32]	; (800e7b0 <mix_sub_columns+0x348>)
 800e790:	5c5b      	ldrb	r3, [r3, r1]
 800e792:	4053      	eors	r3, r2
 800e794:	b2d9      	uxtb	r1, r3
 800e796:	7cfb      	ldrb	r3, [r7, #19]
 800e798:	461a      	mov	r2, r3
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <mix_sub_columns+0x34c>)
 800e79c:	5c9a      	ldrb	r2, [r3, r2]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	330f      	adds	r3, #15
 800e7a2:	404a      	eors	r2, r1
 800e7a4:	b2d2      	uxtb	r2, r2
 800e7a6:	701a      	strb	r2, [r3, #0]
  }
 800e7a8:	bf00      	nop
 800e7aa:	3718      	adds	r7, #24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	08022f70 	.word	0x08022f70
 800e7b4:	08023070 	.word	0x08023070
 800e7b8:	08023170 	.word	0x08023170

0800e7bc <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	607a      	str	r2, [r7, #4]
 800e7c8:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800e7ca:	7afb      	ldrb	r3, [r7, #11]
 800e7cc:	3b10      	subs	r3, #16
 800e7ce:	2b10      	cmp	r3, #16
 800e7d0:	bf8c      	ite	hi
 800e7d2:	2201      	movhi	r2, #1
 800e7d4:	2200      	movls	r2, #0
 800e7d6:	b2d2      	uxtb	r2, r2
 800e7d8:	2a00      	cmp	r2, #0
 800e7da:	d10d      	bne.n	800e7f8 <lorawan_aes_set_key+0x3c>
 800e7dc:	2201      	movs	r2, #1
 800e7de:	fa02 f303 	lsl.w	r3, r2, r3
 800e7e2:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800e7e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	bf14      	ite	ne
 800e7ee:	2301      	movne	r3, #1
 800e7f0:	2300      	moveq	r3, #0
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d105      	bne.n	800e804 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800e800:	23ff      	movs	r3, #255	; 0xff
 800e802:	e0b2      	b.n	800e96a <lorawan_aes_set_key+0x1ae>
        break;
 800e804:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	7afa      	ldrb	r2, [r7, #11]
 800e80a:	68f9      	ldr	r1, [r7, #12]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7ff fbfa 	bl	800e006 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800e812:	7afb      	ldrb	r3, [r7, #11]
 800e814:	331c      	adds	r3, #28
 800e816:	b2db      	uxtb	r3, r3
 800e818:	009b      	lsls	r3, r3, #2
 800e81a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800e81c:	7c7b      	ldrb	r3, [r7, #17]
 800e81e:	091b      	lsrs	r3, r3, #4
 800e820:	b2db      	uxtb	r3, r3
 800e822:	3b01      	subs	r3, #1
 800e824:	b2da      	uxtb	r2, r3
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e82c:	7afb      	ldrb	r3, [r7, #11]
 800e82e:	75fb      	strb	r3, [r7, #23]
 800e830:	2301      	movs	r3, #1
 800e832:	75bb      	strb	r3, [r7, #22]
 800e834:	e093      	b.n	800e95e <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	3b04      	subs	r3, #4
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	5cd3      	ldrb	r3, [r2, r3]
 800e83e:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	3b03      	subs	r3, #3
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	5cd3      	ldrb	r3, [r2, r3]
 800e848:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800e84a:	7dfb      	ldrb	r3, [r7, #23]
 800e84c:	3b02      	subs	r3, #2
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	5cd3      	ldrb	r3, [r2, r3]
 800e852:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	3b01      	subs	r3, #1
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	5cd3      	ldrb	r3, [r2, r3]
 800e85c:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800e85e:	7dfb      	ldrb	r3, [r7, #23]
 800e860:	7afa      	ldrb	r2, [r7, #11]
 800e862:	fbb3 f1f2 	udiv	r1, r3, r2
 800e866:	fb01 f202 	mul.w	r2, r1, r2
 800e86a:	1a9b      	subs	r3, r3, r2
 800e86c:	b2db      	uxtb	r3, r3
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d127      	bne.n	800e8c2 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800e872:	7d7b      	ldrb	r3, [r7, #21]
 800e874:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800e876:	7d3b      	ldrb	r3, [r7, #20]
 800e878:	4a3e      	ldr	r2, [pc, #248]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e87a:	5cd2      	ldrb	r2, [r2, r3]
 800e87c:	7dbb      	ldrb	r3, [r7, #22]
 800e87e:	4053      	eors	r3, r2
 800e880:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800e882:	7cfb      	ldrb	r3, [r7, #19]
 800e884:	4a3b      	ldr	r2, [pc, #236]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e886:	5cd3      	ldrb	r3, [r2, r3]
 800e888:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800e88a:	7cbb      	ldrb	r3, [r7, #18]
 800e88c:	4a39      	ldr	r2, [pc, #228]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e88e:	5cd3      	ldrb	r3, [r2, r3]
 800e890:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800e892:	7c3b      	ldrb	r3, [r7, #16]
 800e894:	4a37      	ldr	r2, [pc, #220]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e896:	5cd3      	ldrb	r3, [r2, r3]
 800e898:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800e89a:	7dbb      	ldrb	r3, [r7, #22]
 800e89c:	005b      	lsls	r3, r3, #1
 800e89e:	b25a      	sxtb	r2, r3
 800e8a0:	7dbb      	ldrb	r3, [r7, #22]
 800e8a2:	09db      	lsrs	r3, r3, #7
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	0049      	lsls	r1, r1, #1
 800e8aa:	440b      	add	r3, r1
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	00c8      	lsls	r0, r1, #3
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	440b      	add	r3, r1
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	b25b      	sxtb	r3, r3
 800e8ba:	4053      	eors	r3, r2
 800e8bc:	b25b      	sxtb	r3, r3
 800e8be:	75bb      	strb	r3, [r7, #22]
 800e8c0:	e01c      	b.n	800e8fc <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800e8c2:	7afb      	ldrb	r3, [r7, #11]
 800e8c4:	2b18      	cmp	r3, #24
 800e8c6:	d919      	bls.n	800e8fc <lorawan_aes_set_key+0x140>
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	7afa      	ldrb	r2, [r7, #11]
 800e8cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e8d0:	fb01 f202 	mul.w	r2, r1, r2
 800e8d4:	1a9b      	subs	r3, r3, r2
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b10      	cmp	r3, #16
 800e8da:	d10f      	bne.n	800e8fc <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800e8dc:	7d7b      	ldrb	r3, [r7, #21]
 800e8de:	4a25      	ldr	r2, [pc, #148]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e8e0:	5cd3      	ldrb	r3, [r2, r3]
 800e8e2:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800e8e4:	7d3b      	ldrb	r3, [r7, #20]
 800e8e6:	4a23      	ldr	r2, [pc, #140]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e8e8:	5cd3      	ldrb	r3, [r2, r3]
 800e8ea:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800e8ec:	7cfb      	ldrb	r3, [r7, #19]
 800e8ee:	4a21      	ldr	r2, [pc, #132]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e8f0:	5cd3      	ldrb	r3, [r2, r3]
 800e8f2:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800e8f4:	7cbb      	ldrb	r3, [r7, #18]
 800e8f6:	4a1f      	ldr	r2, [pc, #124]	; (800e974 <lorawan_aes_set_key+0x1b8>)
 800e8f8:	5cd3      	ldrb	r3, [r2, r3]
 800e8fa:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800e8fc:	7dfa      	ldrb	r2, [r7, #23]
 800e8fe:	7afb      	ldrb	r3, [r7, #11]
 800e900:	1ad3      	subs	r3, r2, r3
 800e902:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800e904:	7c3b      	ldrb	r3, [r7, #16]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	5cd1      	ldrb	r1, [r2, r3]
 800e90a:	7dfb      	ldrb	r3, [r7, #23]
 800e90c:	7d7a      	ldrb	r2, [r7, #21]
 800e90e:	404a      	eors	r2, r1
 800e910:	b2d1      	uxtb	r1, r2
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800e916:	7c3b      	ldrb	r3, [r7, #16]
 800e918:	3301      	adds	r3, #1
 800e91a:	687a      	ldr	r2, [r7, #4]
 800e91c:	5cd1      	ldrb	r1, [r2, r3]
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	3301      	adds	r3, #1
 800e922:	7d3a      	ldrb	r2, [r7, #20]
 800e924:	404a      	eors	r2, r1
 800e926:	b2d1      	uxtb	r1, r2
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800e92c:	7c3b      	ldrb	r3, [r7, #16]
 800e92e:	3302      	adds	r3, #2
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	5cd1      	ldrb	r1, [r2, r3]
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	3302      	adds	r3, #2
 800e938:	7cfa      	ldrb	r2, [r7, #19]
 800e93a:	404a      	eors	r2, r1
 800e93c:	b2d1      	uxtb	r1, r2
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800e942:	7c3b      	ldrb	r3, [r7, #16]
 800e944:	3303      	adds	r3, #3
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	5cd1      	ldrb	r1, [r2, r3]
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	3303      	adds	r3, #3
 800e94e:	7cba      	ldrb	r2, [r7, #18]
 800e950:	404a      	eors	r2, r1
 800e952:	b2d1      	uxtb	r1, r2
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	3304      	adds	r3, #4
 800e95c:	75fb      	strb	r3, [r7, #23]
 800e95e:	7dfa      	ldrb	r2, [r7, #23]
 800e960:	7c7b      	ldrb	r3, [r7, #17]
 800e962:	429a      	cmp	r2, r3
 800e964:	f4ff af67 	bcc.w	800e836 <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800e968:	2300      	movs	r3, #0
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	08022f70 	.word	0x08022f70

0800e978 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d038      	beq.n	800ea00 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	f107 0314 	add.w	r3, r7, #20
 800e994:	68f9      	ldr	r1, [r7, #12]
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff fc07 	bl	800e1aa <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800e99c:	2301      	movs	r3, #1
 800e99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9a2:	e014      	b.n	800e9ce <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800e9a4:	f107 0314 	add.w	r3, r7, #20
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff fd5d 	bl	800e468 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9b4:	0112      	lsls	r2, r2, #4
 800e9b6:	441a      	add	r2, r3
 800e9b8:	f107 0314 	add.w	r3, r7, #20
 800e9bc:	4611      	mov	r1, r2
 800e9be:	4618      	mov	r0, r3
 800e9c0:	f7ff fcab 	bl	800e31a <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800e9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800e9d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d3e3      	bcc.n	800e9a4 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800e9dc:	f107 0314 	add.w	r3, r7, #20
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7ff fca7 	bl	800e334 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e9ec:	0112      	lsls	r2, r2, #4
 800e9ee:	441a      	add	r2, r3
 800e9f0:	f107 0314 	add.w	r3, r7, #20
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	68b8      	ldr	r0, [r7, #8]
 800e9f8:	f7ff fbd7 	bl	800e1aa <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	e000      	b.n	800ea02 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ea00:	23ff      	movs	r3, #255	; 0xff
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3728      	adds	r7, #40	; 0x28
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}
	...

0800ea0c <PrintKey>:


/* Private functions ---------------------------------------------------------*/
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
static void PrintKey( KeyIdentifier_t key )
{
 800ea0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea0e:	b09d      	sub	sp, #116	; 0x74
 800ea10:	af10      	add	r7, sp, #64	; 0x40
 800ea12:	4603      	mov	r3, r0
 800ea14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800ea18:	2306      	movs	r3, #6
 800ea1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800ea1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ea22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea26:	4611      	mov	r1, r2
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f000 fa1b 	bl	800ee64 <SecureElementGetKeyByID>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (retval == SECURE_ELEMENT_SUCCESS)
 800ea34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f040 80b0 	bne.w	800eb9e <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800ea3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800ea46:	4b58      	ldr	r3, [pc, #352]	; (800eba8 <PrintKey+0x19c>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	2002      	movs	r0, #2
 800ea4e:	f00f ff0d 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ea52:	e056      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800ea54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d106      	bne.n	800ea6a <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800ea5c:	4b53      	ldr	r3, [pc, #332]	; (800ebac <PrintKey+0x1a0>)
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2100      	movs	r1, #0
 800ea62:	2002      	movs	r0, #2
 800ea64:	f00f ff02 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ea68:	e04b      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800ea6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea6e:	2b03      	cmp	r3, #3
 800ea70:	d106      	bne.n	800ea80 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800ea72:	4b4f      	ldr	r3, [pc, #316]	; (800ebb0 <PrintKey+0x1a4>)
 800ea74:	2200      	movs	r2, #0
 800ea76:	2100      	movs	r1, #0
 800ea78:	2002      	movs	r0, #2
 800ea7a:	f00f fef7 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ea7e:	e040      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800ea80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea84:	2b02      	cmp	r3, #2
 800ea86:	d106      	bne.n	800ea96 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800ea88:	4b4a      	ldr	r3, [pc, #296]	; (800ebb4 <PrintKey+0x1a8>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	2100      	movs	r1, #0
 800ea8e:	2002      	movs	r0, #2
 800ea90:	f00f feec 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ea94:	e035      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800ea96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea9a:	2b04      	cmp	r3, #4
 800ea9c:	d106      	bne.n	800eaac <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800ea9e:	4b46      	ldr	r3, [pc, #280]	; (800ebb8 <PrintKey+0x1ac>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	2100      	movs	r1, #0
 800eaa4:	2002      	movs	r0, #2
 800eaa6:	f00f fee1 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800eaaa:	e02a      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	2b7f      	cmp	r3, #127	; 0x7f
 800eab2:	d106      	bne.n	800eac2 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800eab4:	4b41      	ldr	r3, [pc, #260]	; (800ebbc <PrintKey+0x1b0>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	2100      	movs	r1, #0
 800eaba:	2002      	movs	r0, #2
 800eabc:	f00f fed6 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800eac0:	e01f      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800eac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eac6:	2b80      	cmp	r3, #128	; 0x80
 800eac8:	d106      	bne.n	800ead8 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800eaca:	4b3d      	ldr	r3, [pc, #244]	; (800ebc0 <PrintKey+0x1b4>)
 800eacc:	2200      	movs	r2, #0
 800eace:	2100      	movs	r1, #0
 800ead0:	2002      	movs	r0, #2
 800ead2:	f00f fecb 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800ead6:	e014      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800ead8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eadc:	2b81      	cmp	r3, #129	; 0x81
 800eade:	d106      	bne.n	800eaee <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800eae0:	4b38      	ldr	r3, [pc, #224]	; (800ebc4 <PrintKey+0x1b8>)
 800eae2:	2200      	movs	r2, #0
 800eae4:	2100      	movs	r1, #0
 800eae6:	2002      	movs	r0, #2
 800eae8:	f00f fec0 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 800eaec:	e009      	b.n	800eb02 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800eaee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf2:	2b82      	cmp	r3, #130	; 0x82
 800eaf4:	d105      	bne.n	800eb02 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800eaf6:	4b34      	ldr	r3, [pc, #208]	; (800ebc8 <PrintKey+0x1bc>)
 800eaf8:	2200      	movs	r2, #0
 800eafa:	2100      	movs	r1, #0
 800eafc:	2002      	movs	r0, #2
 800eafe:	f00f feb5 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        }
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	785b      	ldrb	r3, [r3, #1]
 800eb06:	4618      	mov	r0, r3
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	789b      	ldrb	r3, [r3, #2]
 800eb0c:	461c      	mov	r4, r3
 800eb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb10:	78db      	ldrb	r3, [r3, #3]
 800eb12:	461d      	mov	r5, r3
 800eb14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb16:	791b      	ldrb	r3, [r3, #4]
 800eb18:	461e      	mov	r6, r3
 800eb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1c:	795b      	ldrb	r3, [r3, #5]
 800eb1e:	623b      	str	r3, [r7, #32]
 800eb20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb22:	799b      	ldrb	r3, [r3, #6]
 800eb24:	61fb      	str	r3, [r7, #28]
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	79db      	ldrb	r3, [r3, #7]
 800eb2a:	61bb      	str	r3, [r7, #24]
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	7a1b      	ldrb	r3, [r3, #8]
 800eb30:	617b      	str	r3, [r7, #20]
 800eb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb34:	7a5b      	ldrb	r3, [r3, #9]
 800eb36:	613b      	str	r3, [r7, #16]
 800eb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3a:	7a9b      	ldrb	r3, [r3, #10]
 800eb3c:	60fb      	str	r3, [r7, #12]
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	7adb      	ldrb	r3, [r3, #11]
 800eb42:	60bb      	str	r3, [r7, #8]
 800eb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb46:	7b1b      	ldrb	r3, [r3, #12]
 800eb48:	607b      	str	r3, [r7, #4]
 800eb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4c:	7b5b      	ldrb	r3, [r3, #13]
 800eb4e:	603b      	str	r3, [r7, #0]
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	7b9b      	ldrb	r3, [r3, #14]
 800eb54:	4619      	mov	r1, r3
 800eb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb58:	7bdb      	ldrb	r3, [r3, #15]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	7c1b      	ldrb	r3, [r3, #16]
 800eb60:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb62:	920e      	str	r2, [sp, #56]	; 0x38
 800eb64:	910d      	str	r1, [sp, #52]	; 0x34
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	920c      	str	r2, [sp, #48]	; 0x30
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	920b      	str	r2, [sp, #44]	; 0x2c
 800eb6e:	68ba      	ldr	r2, [r7, #8]
 800eb70:	920a      	str	r2, [sp, #40]	; 0x28
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	9209      	str	r2, [sp, #36]	; 0x24
 800eb76:	693a      	ldr	r2, [r7, #16]
 800eb78:	9208      	str	r2, [sp, #32]
 800eb7a:	697a      	ldr	r2, [r7, #20]
 800eb7c:	9207      	str	r2, [sp, #28]
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	9206      	str	r2, [sp, #24]
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	9205      	str	r2, [sp, #20]
 800eb86:	6a3b      	ldr	r3, [r7, #32]
 800eb88:	9304      	str	r3, [sp, #16]
 800eb8a:	9603      	str	r6, [sp, #12]
 800eb8c:	9502      	str	r5, [sp, #8]
 800eb8e:	9401      	str	r4, [sp, #4]
 800eb90:	9000      	str	r0, [sp, #0]
 800eb92:	4b0e      	ldr	r3, [pc, #56]	; (800ebcc <PrintKey+0x1c0>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	2100      	movs	r1, #0
 800eb98:	2002      	movs	r0, #2
 800eb9a:	f00f fe67 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
               HEX16(keyItem->KeyValue));
    }
}
 800eb9e:	bf00      	nop
 800eba0:	3734      	adds	r7, #52	; 0x34
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eba6:	bf00      	nop
 800eba8:	080225f4 	.word	0x080225f4
 800ebac:	0802260c 	.word	0x0802260c
 800ebb0:	08022624 	.word	0x08022624
 800ebb4:	0802263c 	.word	0x0802263c
 800ebb8:	08022654 	.word	0x08022654
 800ebbc:	0802266c 	.word	0x0802266c
 800ebc0:	08022684 	.word	0x08022684
 800ebc4:	0802269c 	.word	0x0802269c
 800ebc8:	080226b4 	.word	0x080226b4
 800ebcc:	080226cc 	.word	0x080226cc

0800ebd0 <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	6039      	str	r1, [r7, #0]
 800ebda:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ebdc:	2300      	movs	r3, #0
 800ebde:	73fb      	strb	r3, [r7, #15]
 800ebe0:	e01a      	b.n	800ec18 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ebe2:	4b12      	ldr	r3, [pc, #72]	; (800ec2c <GetKeyByID+0x5c>)
 800ebe4:	6819      	ldr	r1, [r3, #0]
 800ebe6:	7bfa      	ldrb	r2, [r7, #15]
 800ebe8:	4613      	mov	r3, r2
 800ebea:	011b      	lsls	r3, r3, #4
 800ebec:	4413      	add	r3, r2
 800ebee:	440b      	add	r3, r1
 800ebf0:	3310      	adds	r3, #16
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	79fa      	ldrb	r2, [r7, #7]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d10b      	bne.n	800ec12 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800ebfa:	4b0c      	ldr	r3, [pc, #48]	; (800ec2c <GetKeyByID+0x5c>)
 800ebfc:	6819      	ldr	r1, [r3, #0]
 800ebfe:	7bfa      	ldrb	r2, [r7, #15]
 800ec00:	4613      	mov	r3, r2
 800ec02:	011b      	lsls	r3, r3, #4
 800ec04:	4413      	add	r3, r2
 800ec06:	3310      	adds	r3, #16
 800ec08:	18ca      	adds	r2, r1, r3
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	e006      	b.n	800ec20 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ec12:	7bfb      	ldrb	r3, [r7, #15]
 800ec14:	3301      	adds	r3, #1
 800ec16:	73fb      	strb	r3, [r7, #15]
 800ec18:	7bfb      	ldrb	r3, [r7, #15]
 800ec1a:	2b09      	cmp	r3, #9
 800ec1c:	d9e1      	bls.n	800ebe2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ec1e:	2303      	movs	r3, #3
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3714      	adds	r7, #20
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bc80      	pop	{r7}
 800ec28:	4770      	bx	lr
 800ec2a:	bf00      	nop
 800ec2c:	20003264 	.word	0x20003264

0800ec30 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	b0d1      	sub	sp, #324	; 0x144
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ec3a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ec3e:	6020      	str	r0, [r4, #0]
 800ec40:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ec44:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ec48:	6001      	str	r1, [r0, #0]
 800ec4a:	4619      	mov	r1, r3
 800ec4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec50:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ec54:	801a      	strh	r2, [r3, #0]
 800ec56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec5a:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ec5e:	460a      	mov	r2, r1
 800ec60:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ec62:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d003      	beq.n	800ec78 <ComputeCmac+0x48>
 800ec70:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	e05c      	b.n	800ed36 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ec7c:	f107 0314 	add.w	r3, r7, #20
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe ff1b 	bl	800dabc <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ec86:	f107 0210 	add.w	r2, r7, #16
 800ec8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ec8e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	4611      	mov	r1, r2
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7ff ff9a 	bl	800ebd0 <GetKeyByID>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800eca2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d143      	bne.n	800ed32 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ecaa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	f107 0314 	add.w	r3, r7, #20
 800ecba:	4611      	mov	r1, r2
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f7fe ff16 	bl	800daee <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800ecc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecc6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d009      	beq.n	800ece4 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800ecd0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecd4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ecd8:	f107 0014 	add.w	r0, r7, #20
 800ecdc:	2210      	movs	r2, #16
 800ecde:	6819      	ldr	r1, [r3, #0]
 800ece0:	f7fe ff14 	bl	800db0c <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800ece4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ece8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800ecec:	881a      	ldrh	r2, [r3, #0]
 800ecee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ecf2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ecf6:	f107 0014 	add.w	r0, r7, #20
 800ecfa:	6819      	ldr	r1, [r3, #0]
 800ecfc:	f7fe ff06 	bl	800db0c <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800ed00:	f107 0214 	add.w	r2, r7, #20
 800ed04:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe ffc0 	bl	800dc90 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ed10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800ed14:	061a      	lsls	r2, r3, #24
 800ed16:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800ed1a:	041b      	lsls	r3, r3, #16
 800ed1c:	431a      	orrs	r2, r3
 800ed1e:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800ed22:	021b      	lsls	r3, r3, #8
 800ed24:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800ed26:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800ed2a:	431a      	orrs	r2, r3
 800ed2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ed30:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ed32:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd90      	pop	{r4, r7, pc}

0800ed40 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ed40:	b5b0      	push	{r4, r5, r7, lr}
 800ed42:	b0b2      	sub	sp, #200	; 0xc8
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    SecureElementNvmData_t seNvmInit =
 800ed4a:	f107 0308 	add.w	r3, r7, #8
 800ed4e:	22c0      	movs	r2, #192	; 0xc0
 800ed50:	2100      	movs	r1, #0
 800ed52:	4618      	mov	r0, r3
 800ed54:	f011 feb4 	bl	8020ac0 <memset>
 800ed58:	4a3b      	ldr	r2, [pc, #236]	; (800ee48 <SecureElementInit+0x108>)
 800ed5a:	f107 0308 	add.w	r3, r7, #8
 800ed5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed62:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed66:	4a39      	ldr	r2, [pc, #228]	; (800ee4c <SecureElementInit+0x10c>)
 800ed68:	f107 0310 	add.w	r3, r7, #16
 800ed6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed70:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed74:	4b36      	ldr	r3, [pc, #216]	; (800ee50 <SecureElementInit+0x110>)
 800ed76:	f107 0419 	add.w	r4, r7, #25
 800ed7a:	461d      	mov	r5, r3
 800ed7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed7e:	6020      	str	r0, [r4, #0]
 800ed80:	6061      	str	r1, [r4, #4]
 800ed82:	60a2      	str	r2, [r4, #8]
 800ed84:	60e3      	str	r3, [r4, #12]
 800ed86:	2301      	movs	r3, #1
 800ed88:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800ed8c:	4b31      	ldr	r3, [pc, #196]	; (800ee54 <SecureElementInit+0x114>)
 800ed8e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 800ed92:	461d      	mov	r5, r3
 800ed94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed96:	6020      	str	r0, [r4, #0]
 800ed98:	6061      	str	r1, [r4, #4]
 800ed9a:	60a2      	str	r2, [r4, #8]
 800ed9c:	60e3      	str	r3, [r4, #12]
 800ed9e:	2302      	movs	r3, #2
 800eda0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800eda4:	4b2a      	ldr	r3, [pc, #168]	; (800ee50 <SecureElementInit+0x110>)
 800eda6:	f107 043b 	add.w	r4, r7, #59	; 0x3b
 800edaa:	461d      	mov	r5, r3
 800edac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edae:	6020      	str	r0, [r4, #0]
 800edb0:	6061      	str	r1, [r4, #4]
 800edb2:	60a2      	str	r2, [r4, #8]
 800edb4:	60e3      	str	r3, [r4, #12]
 800edb6:	2303      	movs	r3, #3
 800edb8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800edbc:	4b24      	ldr	r3, [pc, #144]	; (800ee50 <SecureElementInit+0x110>)
 800edbe:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800edc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800edc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800edc8:	2304      	movs	r3, #4
 800edca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800edce:	237f      	movs	r3, #127	; 0x7f
 800edd0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800edd4:	2380      	movs	r3, #128	; 0x80
 800edd6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800edda:	2381      	movs	r3, #129	; 0x81
 800eddc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800ede0:	2382      	movs	r3, #130	; 0x82
 800ede2:	f887 30a0 	strb.w	r3, [r7, #160]	; 0xa0
 800ede6:	2383      	movs	r3, #131	; 0x83
 800ede8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
        */
        .KeyList = SOFT_SE_KEY_LIST
    };


    if( nvm == NULL )
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d101      	bne.n	800edf6 <SecureElementInit+0xb6>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800edf2:	2302      	movs	r3, #2
 800edf4:	e023      	b.n	800ee3e <SecureElementInit+0xfe>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800edf6:	4a18      	ldr	r2, [pc, #96]	; (800ee58 <SecureElementInit+0x118>)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800edfc:	4b16      	ldr	r3, [pc, #88]	; (800ee58 <SecureElementInit+0x118>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f107 0108 	add.w	r1, r7, #8
 800ee04:	22c0      	movs	r2, #192	; 0xc0
 800ee06:	4618      	mov	r0, r3
 800ee08:	f00c fbcd 	bl	801b5a6 <memcpy1>
    SecureElementSetObjHandler(SLOT_RAND_ZERO_KEY, KMS_ZERO_KEY_OBJECT_HANDLE);
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ee0c:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <SecureElementInit+0x11c>)
 800ee0e:	2200      	movs	r2, #0
 800ee10:	2100      	movs	r1, #0
 800ee12:	2002      	movs	r0, #2
 800ee14:	f00f fd2a 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ee18:	2000      	movs	r0, #0
 800ee1a:	f7ff fdf7 	bl	800ea0c <PrintKey>
    PrintKey(NWK_KEY);
 800ee1e:	2001      	movs	r0, #1
 800ee20:	f7ff fdf4 	bl	800ea0c <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ee24:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <SecureElementInit+0x120>)
 800ee26:	2200      	movs	r2, #0
 800ee28:	2100      	movs	r1, #0
 800ee2a:	2002      	movs	r0, #2
 800ee2c:	f00f fd1e 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ee30:	2003      	movs	r0, #3
 800ee32:	f7ff fdeb 	bl	800ea0c <PrintKey>
    PrintKey(NWK_S_KEY);
 800ee36:	2002      	movs	r0, #2
 800ee38:	f7ff fde8 	bl	800ea0c <PrintKey>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	37c8      	adds	r7, #200	; 0xc8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bdb0      	pop	{r4, r5, r7, pc}
 800ee46:	bf00      	nop
 800ee48:	08022750 	.word	0x08022750
 800ee4c:	08022758 	.word	0x08022758
 800ee50:	08022760 	.word	0x08022760
 800ee54:	08022770 	.word	0x08022770
 800ee58:	20003264 	.word	0x20003264
 800ee5c:	08022720 	.word	0x08022720
 800ee60:	08022738 	.word	0x08022738

0800ee64 <SecureElementGetKeyByID>:

/* ST_WORKAROUND_BEGIN: Add KMS specific functions */
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ee64:	b480      	push	{r7}
 800ee66:	b085      	sub	sp, #20
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6039      	str	r1, [r7, #0]
 800ee6e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ee70:	2300      	movs	r3, #0
 800ee72:	73fb      	strb	r3, [r7, #15]
 800ee74:	e01a      	b.n	800eeac <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ee76:	4b12      	ldr	r3, [pc, #72]	; (800eec0 <SecureElementGetKeyByID+0x5c>)
 800ee78:	6819      	ldr	r1, [r3, #0]
 800ee7a:	7bfa      	ldrb	r2, [r7, #15]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	4413      	add	r3, r2
 800ee82:	440b      	add	r3, r1
 800ee84:	3310      	adds	r3, #16
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	79fa      	ldrb	r2, [r7, #7]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d10b      	bne.n	800eea6 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ee8e:	4b0c      	ldr	r3, [pc, #48]	; (800eec0 <SecureElementGetKeyByID+0x5c>)
 800ee90:	6819      	ldr	r1, [r3, #0]
 800ee92:	7bfa      	ldrb	r2, [r7, #15]
 800ee94:	4613      	mov	r3, r2
 800ee96:	011b      	lsls	r3, r3, #4
 800ee98:	4413      	add	r3, r2
 800ee9a:	3310      	adds	r3, #16
 800ee9c:	18ca      	adds	r2, r1, r3
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eea2:	2300      	movs	r3, #0
 800eea4:	e006      	b.n	800eeb4 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	73fb      	strb	r3, [r7, #15]
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	2b09      	cmp	r3, #9
 800eeb0:	d9e1      	bls.n	800ee76 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800eeb2:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bc80      	pop	{r7}
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	20003264 	.word	0x20003264

0800eec4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	4603      	mov	r3, r0
 800eecc:	6039      	str	r1, [r7, #0]
 800eece:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800eed6:	2302      	movs	r3, #2
 800eed8:	e04c      	b.n	800ef74 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eeda:	2300      	movs	r3, #0
 800eedc:	77fb      	strb	r3, [r7, #31]
 800eede:	e045      	b.n	800ef6c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eee0:	4b26      	ldr	r3, [pc, #152]	; (800ef7c <SecureElementSetKey+0xb8>)
 800eee2:	6819      	ldr	r1, [r3, #0]
 800eee4:	7ffa      	ldrb	r2, [r7, #31]
 800eee6:	4613      	mov	r3, r2
 800eee8:	011b      	lsls	r3, r3, #4
 800eeea:	4413      	add	r3, r2
 800eeec:	440b      	add	r3, r1
 800eeee:	3310      	adds	r3, #16
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	79fa      	ldrb	r2, [r7, #7]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d136      	bne.n	800ef66 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800eef8:	79fb      	ldrb	r3, [r7, #7]
 800eefa:	2b80      	cmp	r3, #128	; 0x80
 800eefc:	d123      	bne.n	800ef46 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800eefe:	2306      	movs	r3, #6
 800ef00:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800ef02:	2300      	movs	r3, #0
 800ef04:	60fb      	str	r3, [r7, #12]
 800ef06:	f107 0310 	add.w	r3, r7, #16
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	605a      	str	r2, [r3, #4]
 800ef10:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800ef12:	f107 030c 	add.w	r3, r7, #12
 800ef16:	227f      	movs	r2, #127	; 0x7f
 800ef18:	2110      	movs	r1, #16
 800ef1a:	6838      	ldr	r0, [r7, #0]
 800ef1c:	f000 f87d 	bl	800f01a <SecureElementAesEncrypt>
 800ef20:	4603      	mov	r3, r0
 800ef22:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800ef24:	4b15      	ldr	r3, [pc, #84]	; (800ef7c <SecureElementSetKey+0xb8>)
 800ef26:	6819      	ldr	r1, [r3, #0]
 800ef28:	7ffa      	ldrb	r2, [r7, #31]
 800ef2a:	4613      	mov	r3, r2
 800ef2c:	011b      	lsls	r3, r3, #4
 800ef2e:	4413      	add	r3, r2
 800ef30:	3310      	adds	r3, #16
 800ef32:	440b      	add	r3, r1
 800ef34:	3301      	adds	r3, #1
 800ef36:	f107 010c 	add.w	r1, r7, #12
 800ef3a:	2210      	movs	r2, #16
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f00c fb32 	bl	801b5a6 <memcpy1>
                return retval;
 800ef42:	7fbb      	ldrb	r3, [r7, #30]
 800ef44:	e016      	b.n	800ef74 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800ef46:	4b0d      	ldr	r3, [pc, #52]	; (800ef7c <SecureElementSetKey+0xb8>)
 800ef48:	6819      	ldr	r1, [r3, #0]
 800ef4a:	7ffa      	ldrb	r2, [r7, #31]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	011b      	lsls	r3, r3, #4
 800ef50:	4413      	add	r3, r2
 800ef52:	3310      	adds	r3, #16
 800ef54:	440b      	add	r3, r1
 800ef56:	3301      	adds	r3, #1
 800ef58:	2210      	movs	r2, #16
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f00c fb22 	bl	801b5a6 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e006      	b.n	800ef74 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef66:	7ffb      	ldrb	r3, [r7, #31]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	77fb      	strb	r3, [r7, #31]
 800ef6c:	7ffb      	ldrb	r3, [r7, #31]
 800ef6e:	2b09      	cmp	r3, #9
 800ef70:	d9b6      	bls.n	800eee0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef72:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3720      	adds	r7, #32
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20003264 	.word	0x20003264

0800ef80 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af02      	add	r7, sp, #8
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	460b      	mov	r3, r1
 800ef90:	80fb      	strh	r3, [r7, #6]
 800ef92:	4613      	mov	r3, r2
 800ef94:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ef96:	797b      	ldrb	r3, [r7, #5]
 800ef98:	2b7e      	cmp	r3, #126	; 0x7e
 800ef9a:	d901      	bls.n	800efa0 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e009      	b.n	800efb4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800efa0:	7979      	ldrb	r1, [r7, #5]
 800efa2:	88fa      	ldrh	r2, [r7, #6]
 800efa4:	69bb      	ldr	r3, [r7, #24]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	460b      	mov	r3, r1
 800efaa:	68b9      	ldr	r1, [r7, #8]
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f7ff fe3f 	bl	800ec30 <ComputeCmac>
 800efb2:	4603      	mov	r3, r0
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3710      	adds	r7, #16
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af02      	add	r7, sp, #8
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	607a      	str	r2, [r7, #4]
 800efc6:	461a      	mov	r2, r3
 800efc8:	460b      	mov	r3, r1
 800efca:	817b      	strh	r3, [r7, #10]
 800efcc:	4613      	mov	r3, r2
 800efce:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800efd6:	2302      	movs	r3, #2
 800efd8:	e01b      	b.n	800f012 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800efda:	2306      	movs	r3, #6
 800efdc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800efde:	2300      	movs	r3, #0
 800efe0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800efe2:	7a79      	ldrb	r1, [r7, #9]
 800efe4:	897a      	ldrh	r2, [r7, #10]
 800efe6:	f107 0310 	add.w	r3, r7, #16
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	460b      	mov	r3, r1
 800efee:	68f9      	ldr	r1, [r7, #12]
 800eff0:	2000      	movs	r0, #0
 800eff2:	f7ff fe1d 	bl	800ec30 <ComputeCmac>
 800eff6:	4603      	mov	r3, r0
 800eff8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800effa:	7dfb      	ldrb	r3, [r7, #23]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800f000:	7dfb      	ldrb	r3, [r7, #23]
 800f002:	e006      	b.n	800f012 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	429a      	cmp	r2, r3
 800f00a:	d001      	beq.n	800f010 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f00c:	2301      	movs	r3, #1
 800f00e:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f010:	7dfb      	ldrb	r3, [r7, #23]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3718      	adds	r7, #24
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b0c2      	sub	sp, #264	; 0x108
 800f01e:	af00      	add	r7, sp, #0
 800f020:	60f8      	str	r0, [r7, #12]
 800f022:	4608      	mov	r0, r1
 800f024:	4611      	mov	r1, r2
 800f026:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f02a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f02e:	6013      	str	r3, [r2, #0]
 800f030:	4603      	mov	r3, r0
 800f032:	817b      	strh	r3, [r7, #10]
 800f034:	460b      	mov	r3, r1
 800f036:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d006      	beq.n	800f04c <SecureElementAesEncrypt+0x32>
 800f03e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d101      	bne.n	800f050 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f04c:	2302      	movs	r3, #2
 800f04e:	e046      	b.n	800f0de <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800f050:	897b      	ldrh	r3, [r7, #10]
 800f052:	f003 030f 	and.w	r3, r3, #15
 800f056:	b29b      	uxth	r3, r3
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f05c:	2305      	movs	r3, #5
 800f05e:	e03e      	b.n	800f0de <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f060:	f107 0314 	add.w	r3, r7, #20
 800f064:	22f0      	movs	r2, #240	; 0xf0
 800f066:	2100      	movs	r1, #0
 800f068:	4618      	mov	r0, r3
 800f06a:	f00c fad7 	bl	801b61c <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f06e:	f107 0210 	add.w	r2, r7, #16
 800f072:	7a7b      	ldrb	r3, [r7, #9]
 800f074:	4611      	mov	r1, r2
 800f076:	4618      	mov	r0, r3
 800f078:	f7ff fdaa 	bl	800ebd0 <GetKeyByID>
 800f07c:	4603      	mov	r3, r0
 800f07e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f082:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f086:	2b00      	cmp	r3, #0
 800f088:	d127      	bne.n	800f0da <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	3301      	adds	r3, #1
 800f08e:	f107 0214 	add.w	r2, r7, #20
 800f092:	2110      	movs	r1, #16
 800f094:	4618      	mov	r0, r3
 800f096:	f7ff fb91 	bl	800e7bc <lorawan_aes_set_key>

        uint8_t block = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f0a0:	e018      	b.n	800f0d4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800f0a2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	18d0      	adds	r0, r2, r3
 800f0aa:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f0ae:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f0b2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800f0b6:	6812      	ldr	r2, [r2, #0]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f107 0214 	add.w	r2, r7, #20
 800f0be:	4619      	mov	r1, r3
 800f0c0:	f7ff fc5a 	bl	800e978 <lorawan_aes_encrypt>
            block = block + 16;
 800f0c4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f0c8:	3310      	adds	r3, #16
 800f0ca:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f0ce:	897b      	ldrh	r3, [r7, #10]
 800f0d0:	3b10      	subs	r3, #16
 800f0d2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800f0d4:	897b      	ldrh	r3, [r7, #10]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1e3      	bne.n	800f0a2 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f0da:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b088      	sub	sp, #32
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	70fb      	strb	r3, [r7, #3]
 800f0f4:	4613      	mov	r3, r2
 800f0f6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f0fe:	2302      	movs	r3, #2
 800f100:	e02e      	b.n	800f160 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f102:	2306      	movs	r3, #6
 800f104:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800f106:	78bb      	ldrb	r3, [r7, #2]
 800f108:	2b7f      	cmp	r3, #127	; 0x7f
 800f10a:	d104      	bne.n	800f116 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f10c:	78fb      	ldrb	r3, [r7, #3]
 800f10e:	2b04      	cmp	r3, #4
 800f110:	d001      	beq.n	800f116 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f112:	2303      	movs	r3, #3
 800f114:	e024      	b.n	800f160 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800f116:	2300      	movs	r3, #0
 800f118:	60fb      	str	r3, [r7, #12]
 800f11a:	f107 0310 	add.w	r3, r7, #16
 800f11e:	2200      	movs	r2, #0
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	605a      	str	r2, [r3, #4]
 800f124:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800f126:	f107 030c 	add.w	r3, r7, #12
 800f12a:	78fa      	ldrb	r2, [r7, #3]
 800f12c:	2110      	movs	r1, #16
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff ff73 	bl	800f01a <SecureElementAesEncrypt>
 800f134:	4603      	mov	r3, r0
 800f136:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f138:	7ffb      	ldrb	r3, [r7, #31]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f13e:	7ffb      	ldrb	r3, [r7, #31]
 800f140:	e00e      	b.n	800f160 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800f142:	f107 020c 	add.w	r2, r7, #12
 800f146:	78bb      	ldrb	r3, [r7, #2]
 800f148:	4611      	mov	r1, r2
 800f14a:	4618      	mov	r0, r3
 800f14c:	f7ff feba 	bl	800eec4 <SecureElementSetKey>
 800f150:	4603      	mov	r3, r0
 800f152:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f154:	7ffb      	ldrb	r3, [r7, #31]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f15a:	7ffb      	ldrb	r3, [r7, #31]
 800f15c:	e000      	b.n	800f160 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f15e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f160:	4618      	mov	r0, r3
 800f162:	3720      	adds	r7, #32
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b086      	sub	sp, #24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	60b9      	str	r1, [r7, #8]
 800f170:	607b      	str	r3, [r7, #4]
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]
 800f176:	4613      	mov	r3, r2
 800f178:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d005      	beq.n	800f18c <SecureElementProcessJoinAccept+0x24>
 800f180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f182:	2b00      	cmp	r3, #0
 800f184:	d002      	beq.n	800f18c <SecureElementProcessJoinAccept+0x24>
 800f186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d101      	bne.n	800f190 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f18c:	2302      	movs	r3, #2
 800f18e:	e064      	b.n	800f25a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f190:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f194:	2b21      	cmp	r3, #33	; 0x21
 800f196:	d901      	bls.n	800f19c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f198:	2305      	movs	r3, #5
 800f19a:	e05e      	b.n	800f25a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f19c:	2301      	movs	r3, #1
 800f19e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f1a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	461a      	mov	r2, r3
 800f1a8:	6879      	ldr	r1, [r7, #4]
 800f1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1ac:	f00c f9fb 	bl	801b5a6 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	1c58      	adds	r0, r3, #1
 800f1b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	b299      	uxth	r1, r3
 800f1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	7dfa      	ldrb	r2, [r7, #23]
 800f1c4:	f7ff ff29 	bl	800f01a <SecureElementAesEncrypt>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f1ce:	2307      	movs	r3, #7
 800f1d0:	e043      	b.n	800f25a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d4:	330b      	adds	r3, #11
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	09db      	lsrs	r3, r3, #7
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1de:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800f1e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1e8:	3b04      	subs	r3, #4
 800f1ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1ec:	4413      	add	r3, r2
 800f1ee:	781b      	ldrb	r3, [r3, #0]
 800f1f0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800f1f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1f6:	3b03      	subs	r3, #3
 800f1f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1fa:	4413      	add	r3, r2
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	021b      	lsls	r3, r3, #8
 800f200:	693a      	ldr	r2, [r7, #16]
 800f202:	4313      	orrs	r3, r2
 800f204:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800f206:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f20a:	3b02      	subs	r3, #2
 800f20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f20e:	4413      	add	r3, r2
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	041b      	lsls	r3, r3, #16
 800f214:	693a      	ldr	r2, [r7, #16]
 800f216:	4313      	orrs	r3, r2
 800f218:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800f21a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f21e:	3b01      	subs	r3, #1
 800f220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f222:	4413      	add	r3, r2
 800f224:	781b      	ldrb	r3, [r3, #0]
 800f226:	061b      	lsls	r3, r3, #24
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	781b      	ldrb	r3, [r3, #0]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d10e      	bne.n	800f254 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f236:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	3b04      	subs	r3, #4
 800f23e:	b299      	uxth	r1, r3
 800f240:	2301      	movs	r3, #1
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f246:	f7ff feb9 	bl	800efbc <SecureElementVerifyAesCmac>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d003      	beq.n	800f258 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f250:	2301      	movs	r3, #1
 800f252:	e002      	b.n	800f25a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f254:	2304      	movs	r3, #4
 800f256:	e000      	b.n	800f25a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3718      	adds	r7, #24
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
	...

0800f264 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d101      	bne.n	800f276 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f272:	2302      	movs	r3, #2
 800f274:	e006      	b.n	800f284 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f276:	4b05      	ldr	r3, [pc, #20]	; (800f28c <SecureElementRandomNumber+0x28>)
 800f278:	695b      	ldr	r3, [r3, #20]
 800f27a:	4798      	blx	r3
 800f27c:	4602      	mov	r2, r0
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	0802333c 	.word	0x0802333c

0800f290 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d101      	bne.n	800f2a2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f29e:	2302      	movs	r3, #2
 800f2a0:	e007      	b.n	800f2b2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800f2a2:	4b06      	ldr	r3, [pc, #24]	; (800f2bc <SecureElementSetDevEui+0x2c>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2208      	movs	r2, #8
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f00c f97b 	bl	801b5a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3708      	adds	r7, #8
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20003264 	.word	0x20003264

0800f2c0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800f2c4:	4b02      	ldr	r3, [pc, #8]	; (800f2d0 <SecureElementGetDevEui+0x10>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bc80      	pop	{r7}
 800f2ce:	4770      	bx	lr
 800f2d0:	20003264 	.word	0x20003264

0800f2d4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d101      	bne.n	800f2e6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2e2:	2302      	movs	r3, #2
 800f2e4:	e008      	b.n	800f2f8 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800f2e6:	4b06      	ldr	r3, [pc, #24]	; (800f300 <SecureElementSetJoinEui+0x2c>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	3308      	adds	r3, #8
 800f2ec:	2208      	movs	r2, #8
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f00c f958 	bl	801b5a6 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f2f6:	2300      	movs	r3, #0
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	20003264 	.word	0x20003264

0800f304 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800f304:	b480      	push	{r7}
 800f306:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800f308:	4b03      	ldr	r3, [pc, #12]	; (800f318 <SecureElementGetJoinEui+0x14>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3308      	adds	r3, #8
}
 800f30e:	4618      	mov	r0, r3
 800f310:	46bd      	mov	sp, r7
 800f312:	bc80      	pop	{r7}
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	20003264 	.word	0x20003264

0800f31c <LmHandlerInit>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs );

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800f324:	4a1a      	ldr	r2, [pc, #104]	; (800f390 <LmHandlerInit+0x74>)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f32a:	4b1a      	ldr	r3, [pc, #104]	; (800f394 <LmHandlerInit+0x78>)
 800f32c:	4a1a      	ldr	r2, [pc, #104]	; (800f398 <LmHandlerInit+0x7c>)
 800f32e:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f330:	4b18      	ldr	r3, [pc, #96]	; (800f394 <LmHandlerInit+0x78>)
 800f332:	4a1a      	ldr	r2, [pc, #104]	; (800f39c <LmHandlerInit+0x80>)
 800f334:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f336:	4b17      	ldr	r3, [pc, #92]	; (800f394 <LmHandlerInit+0x78>)
 800f338:	4a19      	ldr	r2, [pc, #100]	; (800f3a0 <LmHandlerInit+0x84>)
 800f33a:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f33c:	4b15      	ldr	r3, [pc, #84]	; (800f394 <LmHandlerInit+0x78>)
 800f33e:	4a19      	ldr	r2, [pc, #100]	; (800f3a4 <LmHandlerInit+0x88>)
 800f340:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f342:	4b13      	ldr	r3, [pc, #76]	; (800f390 <LmHandlerInit+0x74>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4a17      	ldr	r2, [pc, #92]	; (800f3a8 <LmHandlerInit+0x8c>)
 800f34a:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f34c:	4b10      	ldr	r3, [pc, #64]	; (800f390 <LmHandlerInit+0x74>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4a15      	ldr	r2, [pc, #84]	; (800f3a8 <LmHandlerInit+0x8c>)
 800f354:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f356:	4b0e      	ldr	r3, [pc, #56]	; (800f390 <LmHandlerInit+0x74>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	4a12      	ldr	r2, [pc, #72]	; (800f3a8 <LmHandlerInit+0x8c>)
 800f35e:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f360:	4b11      	ldr	r3, [pc, #68]	; (800f3a8 <LmHandlerInit+0x8c>)
 800f362:	4a12      	ldr	r2, [pc, #72]	; (800f3ac <LmHandlerInit+0x90>)
 800f364:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f366:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <LmHandlerInit+0x74>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	691b      	ldr	r3, [r3, #16]
 800f36c:	4a0e      	ldr	r2, [pc, #56]	; (800f3a8 <LmHandlerInit+0x8c>)
 800f36e:	6113      	str	r3, [r2, #16]

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800f370:	490f      	ldr	r1, [pc, #60]	; (800f3b0 <LmHandlerInit+0x94>)
 800f372:	2000      	movs	r0, #0
 800f374:	f000 fd2a 	bl	800fdcc <LmHandlerPackageRegister>
 800f378:	4603      	mov	r3, r0
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d002      	beq.n	800f384 <LmHandlerInit+0x68>
    {
        return LORAMAC_HANDLER_ERROR;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	e000      	b.n	800f386 <LmHandlerInit+0x6a>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800f384:	2300      	movs	r3, #0
}
 800f386:	4618      	mov	r0, r3
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	2000328c 	.word	0x2000328c
 800f394:	20003290 	.word	0x20003290
 800f398:	0800fb21 	.word	0x0800fb21
 800f39c:	0800fb89 	.word	0x0800fb89
 800f3a0:	0800fc69 	.word	0x0800fc69
 800f3a4:	0800fd2d 	.word	0x0800fd2d
 800f3a8:	200032a0 	.word	0x200032a0
 800f3ac:	08010851 	.word	0x08010851
 800f3b0:	200000a8 	.word	0x200000a8

0800f3b4 <LmHandlerConfigure>:

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3b6:	b099      	sub	sp, #100	; 0x64
 800f3b8:	af08      	add	r7, sp, #32
 800f3ba:	6078      	str	r0, [r7, #4]
    uint16_t nbNvmData = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	87fb      	strh	r3, [r7, #62]	; 0x3e
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800f3c0:	2210      	movs	r2, #16
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	4882      	ldr	r0, [pc, #520]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f3c6:	f00f fd43 	bl	801ee50 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

    loraInfo = LoraInfo_GetPtr();
 800f3ca:	f7fc fb55 	bl	800ba78 <LoraInfo_GetPtr>
 800f3ce:	63b8      	str	r0, [r7, #56]	; 0x38

    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800f3d0:	4b7f      	ldr	r3, [pc, #508]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	4093      	lsls	r3, r2
 800f3da:	461a      	mov	r2, r3
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3de:	685b      	ldr	r3, [r3, #4]
 800f3e0:	4013      	ands	r3, r2
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d00c      	beq.n	800f400 <LmHandlerConfigure+0x4c>
    {
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800f3e6:	4b7a      	ldr	r3, [pc, #488]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4979      	ldr	r1, [pc, #484]	; (800f5d4 <LmHandlerConfigure+0x220>)
 800f3ee:	487a      	ldr	r0, [pc, #488]	; (800f5d8 <LmHandlerConfigure+0x224>)
 800f3f0:	f004 ff50 	bl	8014294 <LoRaMacInitialization>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d009      	beq.n	800f40e <LmHandlerConfigure+0x5a>
        {
            return LORAMAC_HANDLER_ERROR;
 800f3fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f3fe:	e0e2      	b.n	800f5c6 <LmHandlerConfigure+0x212>
        }
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800f400:	4b76      	ldr	r3, [pc, #472]	; (800f5dc <LmHandlerConfigure+0x228>)
 800f402:	2201      	movs	r2, #1
 800f404:	2100      	movs	r1, #0
 800f406:	2000      	movs	r0, #0
 800f408:	f00f fa30 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800f40c:	e7fe      	b.n	800f40c <LmHandlerConfigure+0x58>
    }

    // Restore data if required
    nbNvmData = NvmDataMgmtRestore( );
 800f40e:	f001 fa30 	bl	8010872 <NvmDataMgmtRestore>
 800f412:	4603      	mov	r3, r0
 800f414:	87fb      	strh	r3, [r7, #62]	; 0x3e

    // Try to restore from NVM and query the mac if possible.
    if( nbNvmData > 0 )
 800f416:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d003      	beq.n	800f424 <LmHandlerConfigure+0x70>
    {
        CtxRestoreDone = true;
 800f41c:	4b70      	ldr	r3, [pc, #448]	; (800f5e0 <LmHandlerConfigure+0x22c>)
 800f41e:	2201      	movs	r2, #1
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	e002      	b.n	800f42a <LmHandlerConfigure+0x76>
    }
    else
    {
        CtxRestoreDone = false;
 800f424:	4b6e      	ldr	r3, [pc, #440]	; (800f5e0 <LmHandlerConfigure+0x22c>)
 800f426:	2200      	movs	r2, #0
 800f428:	701a      	strb	r2, [r3, #0]
    }

    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800f42a:	2302      	movs	r3, #2
 800f42c:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f42e:	f107 0314 	add.w	r3, r7, #20
 800f432:	4618      	mov	r0, r3
 800f434:	f005 fa78 	bl	8014928 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800f438:	69bb      	ldr	r3, [r7, #24]
 800f43a:	2208      	movs	r2, #8
 800f43c:	4619      	mov	r1, r3
 800f43e:	4869      	ldr	r0, [pc, #420]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f440:	f00c f8b1 	bl	801b5a6 <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800f444:	2303      	movs	r3, #3
 800f446:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f448:	f107 0314 	add.w	r3, r7, #20
 800f44c:	4618      	mov	r0, r3
 800f44e:	f005 fa6b 	bl	8014928 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	2208      	movs	r2, #8
 800f456:	4619      	mov	r1, r3
 800f458:	4863      	ldr	r0, [pc, #396]	; (800f5e8 <LmHandlerConfigure+0x234>)
 800f45a:	f00c f8a4 	bl	801b5a6 <memcpy1>

#if ( STATIC_DEVICE_ADDRESS != 1 )
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800f45e:	4b63      	ldr	r3, [pc, #396]	; (800f5ec <LmHandlerConfigure+0x238>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	4798      	blx	r3
 800f466:	4603      	mov	r3, r0
 800f468:	4a5e      	ldr	r2, [pc, #376]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f46a:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

    mibReq.Type = MIB_DEV_ADDR;
 800f46c:	2306      	movs	r3, #6
 800f46e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800f470:	4b5c      	ldr	r3, [pc, #368]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f472:	695b      	ldr	r3, [r3, #20]
 800f474:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f476:	f107 0314 	add.w	r3, r7, #20
 800f47a:	4618      	mov	r0, r3
 800f47c:	f005 fbb2 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f480:	4b58      	ldr	r3, [pc, #352]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f482:	781b      	ldrb	r3, [r3, #0]
 800f484:	461a      	mov	r2, r3
 800f486:	4b57      	ldr	r3, [pc, #348]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f488:	785b      	ldrb	r3, [r3, #1]
 800f48a:	4619      	mov	r1, r3
 800f48c:	4b55      	ldr	r3, [pc, #340]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f48e:	789b      	ldrb	r3, [r3, #2]
 800f490:	4618      	mov	r0, r3
 800f492:	4b54      	ldr	r3, [pc, #336]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f494:	78db      	ldrb	r3, [r3, #3]
 800f496:	461c      	mov	r4, r3
 800f498:	4b52      	ldr	r3, [pc, #328]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f49a:	791b      	ldrb	r3, [r3, #4]
 800f49c:	461d      	mov	r5, r3
 800f49e:	4b51      	ldr	r3, [pc, #324]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4a0:	795b      	ldrb	r3, [r3, #5]
 800f4a2:	461e      	mov	r6, r3
 800f4a4:	4b4f      	ldr	r3, [pc, #316]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4a6:	799b      	ldrb	r3, [r3, #6]
 800f4a8:	603b      	str	r3, [r7, #0]
 800f4aa:	4b4e      	ldr	r3, [pc, #312]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4ac:	79db      	ldrb	r3, [r3, #7]
 800f4ae:	9307      	str	r3, [sp, #28]
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	9306      	str	r3, [sp, #24]
 800f4b4:	9605      	str	r6, [sp, #20]
 800f4b6:	9504      	str	r5, [sp, #16]
 800f4b8:	9403      	str	r4, [sp, #12]
 800f4ba:	9002      	str	r0, [sp, #8]
 800f4bc:	9101      	str	r1, [sp, #4]
 800f4be:	9200      	str	r2, [sp, #0]
 800f4c0:	4b4b      	ldr	r3, [pc, #300]	; (800f5f0 <LmHandlerConfigure+0x23c>)
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	2100      	movs	r1, #0
 800f4c6:	2002      	movs	r0, #2
 800f4c8:	f00f f9d0 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800f4cc:	4b45      	ldr	r3, [pc, #276]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4ce:	7a1b      	ldrb	r3, [r3, #8]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4b44      	ldr	r3, [pc, #272]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4d4:	7a5b      	ldrb	r3, [r3, #9]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4b42      	ldr	r3, [pc, #264]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4da:	7a9b      	ldrb	r3, [r3, #10]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	4b41      	ldr	r3, [pc, #260]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4e0:	7adb      	ldrb	r3, [r3, #11]
 800f4e2:	461c      	mov	r4, r3
 800f4e4:	4b3f      	ldr	r3, [pc, #252]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4e6:	7b1b      	ldrb	r3, [r3, #12]
 800f4e8:	461d      	mov	r5, r3
 800f4ea:	4b3e      	ldr	r3, [pc, #248]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4ec:	7b5b      	ldrb	r3, [r3, #13]
 800f4ee:	461e      	mov	r6, r3
 800f4f0:	4b3c      	ldr	r3, [pc, #240]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4f2:	7b9b      	ldrb	r3, [r3, #14]
 800f4f4:	603b      	str	r3, [r7, #0]
 800f4f6:	4b3b      	ldr	r3, [pc, #236]	; (800f5e4 <LmHandlerConfigure+0x230>)
 800f4f8:	7bdb      	ldrb	r3, [r3, #15]
 800f4fa:	9307      	str	r3, [sp, #28]
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	9306      	str	r3, [sp, #24]
 800f500:	9605      	str	r6, [sp, #20]
 800f502:	9504      	str	r5, [sp, #16]
 800f504:	9403      	str	r4, [sp, #12]
 800f506:	9002      	str	r0, [sp, #8]
 800f508:	9101      	str	r1, [sp, #4]
 800f50a:	9200      	str	r2, [sp, #0]
 800f50c:	4b39      	ldr	r3, [pc, #228]	; (800f5f4 <LmHandlerConfigure+0x240>)
 800f50e:	2200      	movs	r2, #0
 800f510:	2100      	movs	r1, #0
 800f512:	2002      	movs	r0, #2
 800f514:	f00f f9aa 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
           HEX8(CommissioningParams.JoinEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 800f518:	4b37      	ldr	r3, [pc, #220]	; (800f5f8 <LmHandlerConfigure+0x244>)
 800f51a:	781b      	ldrb	r3, [r3, #0]
 800f51c:	461a      	mov	r2, r3
 800f51e:	4b37      	ldr	r3, [pc, #220]	; (800f5fc <LmHandlerConfigure+0x248>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	4619      	mov	r1, r3
 800f524:	4b36      	ldr	r3, [pc, #216]	; (800f600 <LmHandlerConfigure+0x24c>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	4618      	mov	r0, r3
 800f52a:	4b36      	ldr	r3, [pc, #216]	; (800f604 <LmHandlerConfigure+0x250>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	9303      	str	r3, [sp, #12]
 800f530:	9002      	str	r0, [sp, #8]
 800f532:	9101      	str	r1, [sp, #4]
 800f534:	9200      	str	r2, [sp, #0]
 800f536:	4b34      	ldr	r3, [pc, #208]	; (800f608 <LmHandlerConfigure+0x254>)
 800f538:	2200      	movs	r2, #0
 800f53a:	2100      	movs	r1, #0
 800f53c:	2002      	movs	r0, #2
 800f53e:	f00f f995 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f542:	230f      	movs	r3, #15
 800f544:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f546:	2301      	movs	r3, #1
 800f548:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f54a:	f107 0314 	add.w	r3, r7, #20
 800f54e:	4618      	mov	r0, r3
 800f550:	f005 fb48 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NET_ID;
 800f554:	2305      	movs	r3, #5
 800f556:	753b      	strb	r3, [r7, #20]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f558:	2300      	movs	r3, #0
 800f55a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800f55c:	f107 0314 	add.w	r3, r7, #20
 800f560:	4618      	mov	r0, r3
 800f562:	f005 fb3f 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f566:	2310      	movs	r3, #16
 800f568:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f56a:	2300      	movs	r3, #0
 800f56c:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f56e:	f107 0314 	add.w	r3, r7, #20
 800f572:	4618      	mov	r0, r3
 800f574:	f005 fb36 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f578:	2304      	movs	r3, #4
 800f57a:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f57c:	4b14      	ldr	r3, [pc, #80]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f57e:	789b      	ldrb	r3, [r3, #2]
 800f580:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f582:	f107 0314 	add.w	r3, r7, #20
 800f586:	4618      	mov	r0, r3
 800f588:	f005 fb2c 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f58c:	230f      	movs	r3, #15
 800f58e:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f590:	4b0f      	ldr	r3, [pc, #60]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	f107 020c 	add.w	r2, r7, #12
 800f598:	4611      	mov	r1, r2
 800f59a:	4618      	mov	r0, r3
 800f59c:	f008 f933 	bl	8017806 <RegionGetPhyParam>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bf14      	ite	ne
 800f5aa:	2301      	movne	r3, #1
 800f5ac:	2300      	moveq	r3, #0
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f5b2:	715a      	strb	r2, [r3, #5]

    LmHandlerSetSystemMaxRxError( 20 );
 800f5b4:	2014      	movs	r0, #20
 800f5b6:	f000 fa9b 	bl	800faf0 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <LmHandlerConfigure+0x21c>)
 800f5bc:	795b      	ldrb	r3, [r3, #5]
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f006 f884 	bl	80156cc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	3744      	adds	r7, #68	; 0x44
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	2000327c 	.word	0x2000327c
 800f5d4:	200032a0 	.word	0x200032a0
 800f5d8:	20003290 	.word	0x20003290
 800f5dc:	08022780 	.word	0x08022780
 800f5e0:	200033be 	.word	0x200033be
 800f5e4:	20000090 	.word	0x20000090
 800f5e8:	20000098 	.word	0x20000098
 800f5ec:	2000328c 	.word	0x2000328c
 800f5f0:	080227cc 	.word	0x080227cc
 800f5f4:	08022808 	.word	0x08022808
 800f5f8:	200000a7 	.word	0x200000a7
 800f5fc:	200000a6 	.word	0x200000a6
 800f600:	200000a5 	.word	0x200000a5
 800f604:	200000a4 	.word	0x200000a4
 800f608:	08022844 	.word	0x08022844

0800f60c <LmHandlerProcess>:
    }
    return false;
}

void LmHandlerProcess( void )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800f610:	f002 fdee 	bl	80121f0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800f614:	f000 fcc6 	bl	800ffa4 <LmHandlerPackagesProcess>

    // Store to NVM if required
    NvmDataMgmtStore( );
 800f618:	f001 f924 	bl	8010864 <NvmDataMgmtStore>
}
 800f61c:	bf00      	nop
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b090      	sub	sp, #64	; 0x40
 800f624:	af00      	add	r7, sp, #0
 800f626:	4603      	mov	r3, r0
 800f628:	71fb      	strb	r3, [r7, #7]
        while (1);
    }
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    if ( mode == ACTIVATION_TYPE_OTAA )
 800f62a:	79fb      	ldrb	r3, [r7, #7]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d111      	bne.n	800f654 <LmHandlerJoin+0x34>
    {
        MlmeReq_t mlmeReq;
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f630:	4b23      	ldr	r3, [pc, #140]	; (800f6c0 <LmHandlerJoin+0xa0>)
 800f632:	2202      	movs	r2, #2
 800f634:	709a      	strb	r2, [r3, #2]

        LoRaMacStart();
 800f636:	f005 f8e1 	bl	80147fc <LoRaMacStart>

        mlmeReq.Type = MLME_JOIN;
 800f63a:	2301      	movs	r3, #1
 800f63c:	723b      	strb	r3, [r7, #8]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f63e:	4b21      	ldr	r3, [pc, #132]	; (800f6c4 <LmHandlerJoin+0xa4>)
 800f640:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f644:	b2db      	uxtb	r3, r3
 800f646:	733b      	strb	r3, [r7, #12]

        // Starts the OTAA join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800f648:	f107 0308 	add.w	r3, r7, #8
 800f64c:	4618      	mov	r0, r3
 800f64e:	f005 fe07 	bl	8015260 <LoRaMacMlmeRequest>

        // Notify upper layer
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
    }
}
 800f652:	e030      	b.n	800f6b6 <LmHandlerJoin+0x96>
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f654:	4b1a      	ldr	r3, [pc, #104]	; (800f6c0 <LmHandlerJoin+0xa0>)
 800f656:	2201      	movs	r2, #1
 800f658:	709a      	strb	r2, [r3, #2]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f65a:	4b1a      	ldr	r3, [pc, #104]	; (800f6c4 <LmHandlerJoin+0xa4>)
 800f65c:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f660:	4b17      	ldr	r3, [pc, #92]	; (800f6c0 <LmHandlerJoin+0xa0>)
 800f662:	701a      	strb	r2, [r3, #0]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f664:	4b16      	ldr	r3, [pc, #88]	; (800f6c0 <LmHandlerJoin+0xa0>)
 800f666:	2200      	movs	r2, #0
 800f668:	705a      	strb	r2, [r3, #1]
        if (CtxRestoreDone == false)
 800f66a:	4b17      	ldr	r3, [pc, #92]	; (800f6c8 <LmHandlerJoin+0xa8>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	f083 0301 	eor.w	r3, r3, #1
 800f672:	b2db      	uxtb	r3, r3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d008      	beq.n	800f68a <LmHandlerJoin+0x6a>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800f678:	2327      	movs	r3, #39	; 0x27
 800f67a:	773b      	strb	r3, [r7, #28]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800f67c:	4b13      	ldr	r3, [pc, #76]	; (800f6cc <LmHandlerJoin+0xac>)
 800f67e:	623b      	str	r3, [r7, #32]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800f680:	f107 031c 	add.w	r3, r7, #28
 800f684:	4618      	mov	r0, r3
 800f686:	f005 faad 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800f68a:	f005 f8b7 	bl	80147fc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f68e:	2301      	movs	r3, #1
 800f690:	773b      	strb	r3, [r7, #28]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f692:	2301      	movs	r3, #1
 800f694:	f887 3020 	strb.w	r3, [r7, #32]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f698:	f107 031c 	add.w	r3, r7, #28
 800f69c:	4618      	mov	r0, r3
 800f69e:	f005 faa1 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800f6a2:	4b0b      	ldr	r3, [pc, #44]	; (800f6d0 <LmHandlerJoin+0xb0>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	4805      	ldr	r0, [pc, #20]	; (800f6c0 <LmHandlerJoin+0xa0>)
 800f6aa:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800f6ac:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <LmHandlerJoin+0xa4>)
 800f6ae:	785b      	ldrb	r3, [r3, #1]
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 f92d 	bl	800f910 <LmHandlerRequestClass>
}
 800f6b6:	bf00      	nop
 800f6b8:	3740      	adds	r7, #64	; 0x40
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
 800f6be:	bf00      	nop
 800f6c0:	200000b4 	.word	0x200000b4
 800f6c4:	2000327c 	.word	0x2000327c
 800f6c8:	200033be 	.word	0x200033be
 800f6cc:	01000300 	.word	0x01000300
 800f6d0:	2000328c 	.word	0x2000328c

0800f6d4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b08a      	sub	sp, #40	; 0x28
 800f6d8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800f6de:	463b      	mov	r3, r7
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f005 f921 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800f6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d106      	bne.n	800f702 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f6f4:	793b      	ldrb	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d101      	bne.n	800f6fe <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e002      	b.n	800f704 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800f6fe:	2301      	movs	r3, #1
 800f700:	e000      	b.n	800f704 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800f702:	2300      	movs	r3, #0
    }
}
 800f704:	4618      	mov	r0, r3
 800f706:	3728      	adds	r7, #40	; 0x28
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <LmHandlerSend>:
    }
}

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      TimerTime_t *nextTxIn, bool allowDelayedTx )
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08c      	sub	sp, #48	; 0x30
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	607a      	str	r2, [r7, #4]
 800f716:	461a      	mov	r2, r3
 800f718:	460b      	mov	r3, r1
 800f71a:	72fb      	strb	r3, [r7, #11]
 800f71c:	4613      	mov	r3, r2
 800f71e:	72bb      	strb	r3, [r7, #10]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800f720:	23ff      	movs	r3, #255	; 0xff
 800f722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800f726:	f002 facd 	bl	8011cc4 <LoRaMacIsBusy>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d002      	beq.n	800f736 <LmHandlerSend+0x2a>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f730:	f06f 0301 	mvn.w	r3, #1
 800f734:	e0b4      	b.n	800f8a0 <LmHandlerSend+0x194>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800f736:	f7ff ffcd 	bl	800f6d4 <LmHandlerJoinStatus>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d007      	beq.n	800f750 <LmHandlerSend+0x44>
    {
        // The network isn't joined, try again.
        LmHandlerJoin(JoinParams.Mode);
 800f740:	4b59      	ldr	r3, [pc, #356]	; (800f8a8 <LmHandlerSend+0x19c>)
 800f742:	789b      	ldrb	r3, [r3, #2]
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff ff6b 	bl	800f620 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f74a:	f06f 0302 	mvn.w	r3, #2
 800f74e:	e0a7      	b.n	800f8a0 <LmHandlerSend+0x194>
    }

    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800f750:	4b56      	ldr	r3, [pc, #344]	; (800f8ac <LmHandlerSend+0x1a0>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	4798      	blx	r3
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00d      	beq.n	800f77a <LmHandlerSend+0x6e>
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	781a      	ldrb	r2, [r3, #0]
 800f762:	4b52      	ldr	r3, [pc, #328]	; (800f8ac <LmHandlerSend+0x1a0>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d006      	beq.n	800f77a <LmHandlerSend+0x6e>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	781b      	ldrb	r3, [r3, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d002      	beq.n	800f77a <LmHandlerSend+0x6e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800f774:	f06f 0303 	mvn.w	r3, #3
 800f778:	e092      	b.n	800f8a0 <LmHandlerSend+0x194>
    }

    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800f77a:	4b4d      	ldr	r3, [pc, #308]	; (800f8b0 <LmHandlerSend+0x1a4>)
 800f77c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800f780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	f107 0214 	add.w	r2, r7, #20
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f005 f842 	bl	8014818 <LoRaMacQueryTxPossible>
 800f794:	4603      	mov	r3, r0
 800f796:	2b00      	cmp	r3, #0
 800f798:	d009      	beq.n	800f7ae <LmHandlerSend+0xa2>
    {
        // Send empty frame in order to flush MAC commands
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800f79a:	4b46      	ldr	r3, [pc, #280]	; (800f8b4 <LmHandlerSend+0x1a8>)
 800f79c:	2200      	movs	r2, #0
 800f79e:	709a      	strb	r2, [r3, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	763b      	strb	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	623b      	str	r3, [r7, #32]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f7ac:	e017      	b.n	800f7de <LmHandlerSend+0xd2>
    }
    else
    {
        TxParams.MsgType = isTxConfirmed;
 800f7ae:	4a41      	ldr	r2, [pc, #260]	; (800f8b4 <LmHandlerSend+0x1a8>)
 800f7b0:	7afb      	ldrb	r3, [r7, #11]
 800f7b2:	7093      	strb	r3, [r2, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	773b      	strb	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	785b      	ldrb	r3, [r3, #1]
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	84bb      	strh	r3, [r7, #36]	; 0x24
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	623b      	str	r3, [r7, #32]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d102      	bne.n	800f7d4 <LmHandlerSend+0xc8>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	763b      	strb	r3, [r7, #24]
 800f7d2:	e004      	b.n	800f7de <LmHandlerSend+0xd2>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	763b      	strb	r3, [r7, #24]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 800f7d8:	2308      	movs	r3, #8
 800f7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    TxParams.AppData = *appData;
 800f7de:	4b35      	ldr	r3, [pc, #212]	; (800f8b4 <LmHandlerSend+0x1a8>)
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	330c      	adds	r3, #12
 800f7e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f7e8:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800f7ec:	4b30      	ldr	r3, [pc, #192]	; (800f8b0 <LmHandlerSend+0x1a4>)
 800f7ee:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800f7f2:	4b30      	ldr	r3, [pc, #192]	; (800f8b4 <LmHandlerSend+0x1a8>)
 800f7f4:	711a      	strb	r2, [r3, #4]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800f7f6:	7aba      	ldrb	r2, [r7, #10]
 800f7f8:	f107 0318 	add.w	r3, r7, #24
 800f7fc:	4611      	mov	r1, r2
 800f7fe:	4618      	mov	r0, r3
 800f800:	f005 fe6e 	bl	80154e0 <LoRaMacMcpsRequest>
 800f804:	4603      	mov	r3, r0
 800f806:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    if (nextTxIn != NULL)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d002      	beq.n	800f816 <LmHandlerSend+0x10a>
    {
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800f810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	601a      	str	r2, [r3, #0]
    }

    switch (status)
 800f816:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f81a:	2b11      	cmp	r3, #17
 800f81c:	d83a      	bhi.n	800f894 <LmHandlerSend+0x188>
 800f81e:	a201      	add	r2, pc, #4	; (adr r2, 800f824 <LmHandlerSend+0x118>)
 800f820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f824:	0800f86d 	.word	0x0800f86d
 800f828:	0800f875 	.word	0x0800f875
 800f82c:	0800f895 	.word	0x0800f895
 800f830:	0800f895 	.word	0x0800f895
 800f834:	0800f895 	.word	0x0800f895
 800f838:	0800f895 	.word	0x0800f895
 800f83c:	0800f895 	.word	0x0800f895
 800f840:	0800f87d 	.word	0x0800f87d
 800f844:	0800f895 	.word	0x0800f895
 800f848:	0800f895 	.word	0x0800f895
 800f84c:	0800f895 	.word	0x0800f895
 800f850:	0800f88d 	.word	0x0800f88d
 800f854:	0800f895 	.word	0x0800f895
 800f858:	0800f895 	.word	0x0800f895
 800f85c:	0800f875 	.word	0x0800f875
 800f860:	0800f875 	.word	0x0800f875
 800f864:	0800f875 	.word	0x0800f875
 800f868:	0800f885 	.word	0x0800f885
    {
        case LORAMAC_STATUS_OK:
            lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800f86c:	2300      	movs	r3, #0
 800f86e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f872:	e013      	b.n	800f89c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800f874:	23fe      	movs	r3, #254	; 0xfe
 800f876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f87a:	e00f      	b.n	800f89c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f87c:	23fd      	movs	r3, #253	; 0xfd
 800f87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f882:	e00b      	b.n	800f89c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800f884:	23fb      	movs	r3, #251	; 0xfb
 800f886:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f88a:	e007      	b.n	800f89c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800f88c:	23fa      	movs	r3, #250	; 0xfa
 800f88e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f892:	e003      	b.n	800f89c <LmHandlerSend+0x190>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800f894:	23ff      	movs	r3, #255	; 0xff
 800f896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f89a:	bf00      	nop
    }

    return lmhStatus;
 800f89c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3730      	adds	r7, #48	; 0x30
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	200000b4 	.word	0x200000b4
 800f8ac:	20003268 	.word	0x20003268
 800f8b0:	2000327c 	.word	0x2000327c
 800f8b4:	200032b4 	.word	0x200032b4

0800f8b8 <LmHandlerLinkCheckReq>:

LmHandlerErrorStatus_t LmHandlerLinkCheckReq( void )
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b086      	sub	sp, #24
 800f8bc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_LINK_CHECK;
 800f8be:	2304      	movs	r3, #4
 800f8c0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f8c2:	463b      	mov	r3, r7
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f005 fccb 	bl	8015260 <LoRaMacMlmeRequest>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800f8ce:	7dfb      	ldrb	r3, [r7, #23]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <LmHandlerLinkCheckReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	e001      	b.n	800f8dc <LmHandlerLinkCheckReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f8d8:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3718      	adds	r7, #24
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800f8ea:	230a      	movs	r3, #10
 800f8ec:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800f8ee:	463b      	mov	r3, r7
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f005 fcb5 	bl	8015260 <LoRaMacMlmeRequest>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	75fb      	strb	r3, [r7, #23]

    if( status == LORAMAC_STATUS_OK )
 800f8fa:	7dfb      	ldrb	r3, [r7, #23]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d101      	bne.n	800f904 <LmHandlerDeviceTimeReq+0x20>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800f900:	2300      	movs	r3, #0
 800f902:	e001      	b.n	800f908 <LmHandlerDeviceTimeReq+0x24>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800f904:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3718      	adds	r7, #24
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <LmHandlerRequestClass>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08c      	sub	sp, #48	; 0x30
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800f91a:	2300      	movs	r3, #0
 800f91c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800f920:	f002 f9d0 	bl	8011cc4 <LoRaMacIsBusy>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d002      	beq.n	800f930 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800f92a:	f06f 0301 	mvn.w	r3, #1
 800f92e:	e07b      	b.n	800fa28 <LmHandlerRequestClass+0x118>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800f930:	f7ff fed0 	bl	800f6d4 <LmHandlerJoinStatus>
 800f934:	4603      	mov	r3, r0
 800f936:	2b01      	cmp	r3, #1
 800f938:	d002      	beq.n	800f940 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800f93a:	f06f 0302 	mvn.w	r3, #2
 800f93e:	e073      	b.n	800fa28 <LmHandlerRequestClass+0x118>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800f940:	2300      	movs	r3, #0
 800f942:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800f944:	f107 0308 	add.w	r3, r7, #8
 800f948:	4618      	mov	r0, r3
 800f94a:	f004 ffed 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d002      	beq.n	800f95a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800f954:	f04f 33ff 	mov.w	r3, #4294967295
 800f958:	e066      	b.n	800fa28 <LmHandlerRequestClass+0x118>
    }
    currentClass = mibReq.Param.Class;
 800f95a:	7b3b      	ldrb	r3, [r7, #12]
 800f95c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800f960:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	429a      	cmp	r2, r3
 800f968:	d055      	beq.n	800fa16 <LmHandlerRequestClass+0x106>
    {
        switch( newClass )
 800f96a:	79fb      	ldrb	r3, [r7, #7]
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d02c      	beq.n	800f9ca <LmHandlerRequestClass+0xba>
 800f970:	2b02      	cmp	r3, #2
 800f972:	dc52      	bgt.n	800fa1a <LmHandlerRequestClass+0x10a>
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <LmHandlerRequestClass+0x6e>
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d022      	beq.n	800f9c2 <LmHandlerRequestClass+0xb2>
                    }
                }
            }
            break;
        default:
            break;
 800f97c:	e04d      	b.n	800fa1a <LmHandlerRequestClass+0x10a>
                if( currentClass != CLASS_A )
 800f97e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f982:	2b00      	cmp	r3, #0
 800f984:	d04b      	beq.n	800fa1e <LmHandlerRequestClass+0x10e>
                    mibReq.Param.Class = newClass;
 800f986:	79fb      	ldrb	r3, [r7, #7]
 800f988:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800f98a:	f107 0308 	add.w	r3, r7, #8
 800f98e:	4618      	mov	r0, r3
 800f990:	f005 f928 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	d10f      	bne.n	800f9ba <LmHandlerRequestClass+0xaa>
                        DisplayClassUpdate(newClass);
 800f99a:	79fb      	ldrb	r3, [r7, #7]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f000 ff3f 	bl	8010820 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f9a2:	4b23      	ldr	r3, [pc, #140]	; (800fa30 <LmHandlerRequestClass+0x120>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d038      	beq.n	800fa1e <LmHandlerRequestClass+0x10e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800f9ac:	4b20      	ldr	r3, [pc, #128]	; (800fa30 <LmHandlerRequestClass+0x120>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9b2:	79fa      	ldrb	r2, [r7, #7]
 800f9b4:	4610      	mov	r0, r2
 800f9b6:	4798      	blx	r3
            break;
 800f9b8:	e031      	b.n	800fa1e <LmHandlerRequestClass+0x10e>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800f9ba:	23ff      	movs	r3, #255	; 0xff
 800f9bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9c0:	e02d      	b.n	800fa1e <LmHandlerRequestClass+0x10e>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800f9c2:	23ff      	movs	r3, #255	; 0xff
 800f9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9c8:	e02c      	b.n	800fa24 <LmHandlerRequestClass+0x114>
                if( currentClass != CLASS_A )
 800f9ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d003      	beq.n	800f9da <LmHandlerRequestClass+0xca>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800f9d2:	23ff      	movs	r3, #255	; 0xff
 800f9d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800f9d8:	e023      	b.n	800fa22 <LmHandlerRequestClass+0x112>
                    mibReq.Param.Class = newClass;
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800f9de:	f107 0308 	add.w	r3, r7, #8
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f005 f8fe 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d10f      	bne.n	800fa0e <LmHandlerRequestClass+0xfe>
                        DisplayClassUpdate(newClass);
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 ff15 	bl	8010820 <DisplayClassUpdate>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800f9f6:	4b0e      	ldr	r3, [pc, #56]	; (800fa30 <LmHandlerRequestClass+0x120>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d010      	beq.n	800fa22 <LmHandlerRequestClass+0x112>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800fa00:	4b0b      	ldr	r3, [pc, #44]	; (800fa30 <LmHandlerRequestClass+0x120>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa06:	79fa      	ldrb	r2, [r7, #7]
 800fa08:	4610      	mov	r0, r2
 800fa0a:	4798      	blx	r3
            break;
 800fa0c:	e009      	b.n	800fa22 <LmHandlerRequestClass+0x112>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fa0e:	23ff      	movs	r3, #255	; 0xff
 800fa10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800fa14:	e005      	b.n	800fa22 <LmHandlerRequestClass+0x112>
        }
    }
 800fa16:	bf00      	nop
 800fa18:	e004      	b.n	800fa24 <LmHandlerRequestClass+0x114>
            break;
 800fa1a:	bf00      	nop
 800fa1c:	e002      	b.n	800fa24 <LmHandlerRequestClass+0x114>
            break;
 800fa1e:	bf00      	nop
 800fa20:	e000      	b.n	800fa24 <LmHandlerRequestClass+0x114>
            break;
 800fa22:	bf00      	nop
    return errorStatus;
 800fa24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3730      	adds	r7, #48	; 0x30
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	2000328c 	.word	0x2000328c

0800fa34 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08c      	sub	sp, #48	; 0x30
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d102      	bne.n	800fa48 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa42:	f04f 33ff 	mov.w	r3, #4294967295
 800fa46:	e010      	b.n	800fa6a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800fa4c:	f107 030c 	add.w	r3, r7, #12
 800fa50:	4618      	mov	r0, r3
 800fa52:	f004 ff69 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa60:	e003      	b.n	800fa6a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fa62:	7c3a      	ldrb	r2, [r7, #16]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3730      	adds	r7, #48	; 0x30
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
	...

0800fa74 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b08c      	sub	sp, #48	; 0x30
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d102      	bne.n	800fa88 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa82:	f04f 33ff 	mov.w	r3, #4294967295
 800fa86:	e016      	b.n	800fab6 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fa88:	231f      	movs	r3, #31
 800fa8a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800fa8c:	f107 030c 	add.w	r3, r7, #12
 800fa90:	4618      	mov	r0, r3
 800fa92:	f004 ff49 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d002      	beq.n	800faa2 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fa9c:	f04f 33ff 	mov.w	r3, #4294967295
 800faa0:	e009      	b.n	800fab6 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800faa2:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f993 2000 	ldrsb.w	r2, [r3]
 800fab0:	4b03      	ldr	r3, [pc, #12]	; (800fac0 <LmHandlerGetTxDatarate+0x4c>)
 800fab2:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3730      	adds	r7, #48	; 0x30
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	2000327c 	.word	0x2000327c

0800fac4 <LmHandlerGetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerGetActiveRegion( LoRaMacRegion_t *region )
{
 800fac4:	b480      	push	{r7}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
    if (region == NULL)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d102      	bne.n	800fad8 <LmHandlerGetActiveRegion+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fad2:	f04f 33ff 	mov.w	r3, #4294967295
 800fad6:	e004      	b.n	800fae2 <LmHandlerGetActiveRegion+0x1e>
    }

    *region = LmHandlerParams.ActiveRegion;
 800fad8:	4b04      	ldr	r3, [pc, #16]	; (800faec <LmHandlerGetActiveRegion+0x28>)
 800fada:	781a      	ldrb	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fae0:	2300      	movs	r3, #0
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	370c      	adds	r7, #12
 800fae6:	46bd      	mov	sp, r7
 800fae8:	bc80      	pop	{r7}
 800faea:	4770      	bx	lr
 800faec:	2000327c 	.word	0x2000327c

0800faf0 <LmHandlerSetSystemMaxRxError>:

static LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b08c      	sub	sp, #48	; 0x30
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800faf8:	2322      	movs	r3, #34	; 0x22
 800fafa:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fb00:	f107 030c 	add.w	r3, r7, #12
 800fb04:	4618      	mov	r0, r3
 800fb06:	f005 f86d 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d002      	beq.n	800fb16 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fb10:	f04f 33ff 	mov.w	r3, #4294967295
 800fb14:	e000      	b.n	800fb18 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3730      	adds	r7, #48	; 0x30
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b082      	sub	sp, #8
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fb28:	4b15      	ldr	r3, [pc, #84]	; (800fb80 <McpsConfirm+0x60>)
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	785a      	ldrb	r2, [r3, #1]
 800fb32:	4b13      	ldr	r3, [pc, #76]	; (800fb80 <McpsConfirm+0x60>)
 800fb34:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	789b      	ldrb	r3, [r3, #2]
 800fb3a:	b25a      	sxtb	r2, r3
 800fb3c:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <McpsConfirm+0x60>)
 800fb3e:	711a      	strb	r2, [r3, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68db      	ldr	r3, [r3, #12]
 800fb44:	4a0e      	ldr	r2, [pc, #56]	; (800fb80 <McpsConfirm+0x60>)
 800fb46:	6093      	str	r3, [r2, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fb4e:	4b0c      	ldr	r3, [pc, #48]	; (800fb80 <McpsConfirm+0x60>)
 800fb50:	751a      	strb	r2, [r3, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	4b09      	ldr	r3, [pc, #36]	; (800fb80 <McpsConfirm+0x60>)
 800fb5a:	755a      	strb	r2, [r3, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	791b      	ldrb	r3, [r3, #4]
 800fb60:	461a      	mov	r2, r3
 800fb62:	4b07      	ldr	r3, [pc, #28]	; (800fb80 <McpsConfirm+0x60>)
 800fb64:	70da      	strb	r2, [r3, #3]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800fb66:	4b07      	ldr	r3, [pc, #28]	; (800fb84 <McpsConfirm+0x64>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	6a1b      	ldr	r3, [r3, #32]
 800fb6c:	4804      	ldr	r0, [pc, #16]	; (800fb80 <McpsConfirm+0x60>)
 800fb6e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800fb70:	6879      	ldr	r1, [r7, #4]
 800fb72:	2000      	movs	r0, #0
 800fb74:	f000 f99a 	bl	800feac <LmHandlerPackagesNotify>
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}
 800fb80:	200032b4 	.word	0x200032b4
 800fb84:	2000328c 	.word	0x2000328c

0800fb88 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *RxStatus )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800fb92:	2300      	movs	r3, #0
 800fb94:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800fb96:	4b32      	ldr	r3, [pc, #200]	; (800fc60 <McpsIndication+0xd8>)
 800fb98:	2201      	movs	r2, #1
 800fb9a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	785a      	ldrb	r2, [r3, #1]
 800fba0:	4b2f      	ldr	r3, [pc, #188]	; (800fc60 <McpsIndication+0xd8>)
 800fba2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800fba4:	4b2e      	ldr	r3, [pc, #184]	; (800fc60 <McpsIndication+0xd8>)
 800fba6:	785b      	ldrb	r3, [r3, #1]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d154      	bne.n	800fc56 <McpsIndication+0xce>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	791b      	ldrb	r3, [r3, #4]
 800fbb0:	b25a      	sxtb	r2, r3
 800fbb2:	4b2b      	ldr	r3, [pc, #172]	; (800fc60 <McpsIndication+0xd8>)
 800fbb4:	709a      	strb	r2, [r3, #2]
    RxParams.Rssi = RxStatus->Rssi;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fbbc:	b25a      	sxtb	r2, r3
 800fbbe:	4b28      	ldr	r3, [pc, #160]	; (800fc60 <McpsIndication+0xd8>)
 800fbc0:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fbc8:	4b25      	ldr	r3, [pc, #148]	; (800fc60 <McpsIndication+0xd8>)
 800fbca:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	78db      	ldrb	r3, [r3, #3]
 800fbd0:	b25a      	sxtb	r2, r3
 800fbd2:	4b23      	ldr	r3, [pc, #140]	; (800fc60 <McpsIndication+0xd8>)
 800fbd4:	731a      	strb	r2, [r3, #12]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	691b      	ldr	r3, [r3, #16]
 800fbda:	4a21      	ldr	r2, [pc, #132]	; (800fc60 <McpsIndication+0xd8>)
 800fbdc:	6093      	str	r3, [r2, #8]

    appData.Port = mcpsIndication->Port;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	78db      	ldrb	r3, [r3, #3]
 800fbe2:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	7b1b      	ldrb	r3, [r3, #12]
 800fbe8:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	61fb      	str	r3, [r7, #28]

    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800fbf0:	4b1c      	ldr	r3, [pc, #112]	; (800fc64 <McpsIndication+0xdc>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf6:	f107 0218 	add.w	r2, r7, #24
 800fbfa:	4919      	ldr	r1, [pc, #100]	; (800fc60 <McpsIndication+0xd8>)
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800fc00:	4b18      	ldr	r3, [pc, #96]	; (800fc64 <McpsIndication+0xdc>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d007      	beq.n	800fc1a <McpsIndication+0x92>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	7e1b      	ldrb	r3, [r3, #24]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d003      	beq.n	800fc1a <McpsIndication+0x92>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800fc12:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <McpsIndication+0xdc>)
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc18:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800fc1a:	6879      	ldr	r1, [r7, #4]
 800fc1c:	2001      	movs	r0, #1
 800fc1e:	f000 f945 	bl	800feac <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass(&deviceClass);
 800fc22:	f107 0317 	add.w	r3, r7, #23
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7ff ff04 	bl	800fa34 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	795b      	ldrb	r3, [r3, #5]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d111      	bne.n	800fc58 <McpsIndication+0xd0>
 800fc34:	7dfb      	ldrb	r3, [r7, #23]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10e      	bne.n	800fc58 <McpsIndication+0xd0>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.

        // Send an empty message
        LmHandlerAppData_t appData =
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	733b      	strb	r3, [r7, #12]
 800fc3e:	2300      	movs	r3, #0
 800fc40:	737b      	strb	r3, [r7, #13]
 800fc42:	2300      	movs	r3, #0
 800fc44:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800fc46:	f107 000c 	add.w	r0, r7, #12
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f7ff fd5c 	bl	800f70c <LmHandlerSend>
 800fc54:	e000      	b.n	800fc58 <McpsIndication+0xd0>
        return;
 800fc56:	bf00      	nop
    }
}
 800fc58:	3720      	adds	r7, #32
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	200000b8 	.word	0x200000b8
 800fc64:	2000328c 	.word	0x2000328c

0800fc68 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b08c      	sub	sp, #48	; 0x30
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fc70:	4b28      	ldr	r3, [pc, #160]	; (800fd14 <MlmeConfirm+0xac>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	785a      	ldrb	r2, [r3, #1]
 800fc7a:	4b26      	ldr	r3, [pc, #152]	; (800fd14 <MlmeConfirm+0xac>)
 800fc7c:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800fc7e:	4b26      	ldr	r3, [pc, #152]	; (800fd18 <MlmeConfirm+0xb0>)
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	6a1b      	ldr	r3, [r3, #32]
 800fc84:	4823      	ldr	r0, [pc, #140]	; (800fd14 <MlmeConfirm+0xac>)
 800fc86:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800fc88:	6879      	ldr	r1, [r7, #4]
 800fc8a:	2002      	movs	r0, #2
 800fc8c:	f000 f90e 	bl	800feac <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b0a      	cmp	r3, #10
 800fc96:	d035      	beq.n	800fd04 <MlmeConfirm+0x9c>
 800fc98:	2b0a      	cmp	r3, #10
 800fc9a:	dc35      	bgt.n	800fd08 <MlmeConfirm+0xa0>
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d002      	beq.n	800fca6 <MlmeConfirm+0x3e>
 800fca0:	2b04      	cmp	r3, #4
 800fca2:	d023      	beq.n	800fcec <MlmeConfirm+0x84>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800fca4:	e030      	b.n	800fd08 <MlmeConfirm+0xa0>
            mibReq.Type = MIB_DEV_ADDR;
 800fca6:	2306      	movs	r3, #6
 800fca8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800fcaa:	f107 030c 	add.w	r3, r7, #12
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f004 fe3a 	bl	8014928 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	4a19      	ldr	r2, [pc, #100]	; (800fd1c <MlmeConfirm+0xb4>)
 800fcb8:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800fcba:	4819      	ldr	r0, [pc, #100]	; (800fd20 <MlmeConfirm+0xb8>)
 800fcbc:	f7ff feda 	bl	800fa74 <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	785b      	ldrb	r3, [r3, #1]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d108      	bne.n	800fcda <MlmeConfirm+0x72>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800fcc8:	4b15      	ldr	r3, [pc, #84]	; (800fd20 <MlmeConfirm+0xb8>)
 800fcca:	2200      	movs	r2, #0
 800fccc:	705a      	strb	r2, [r3, #1]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800fcce:	4b15      	ldr	r3, [pc, #84]	; (800fd24 <MlmeConfirm+0xbc>)
 800fcd0:	785b      	ldrb	r3, [r3, #1]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fe1c 	bl	800f910 <LmHandlerRequestClass>
 800fcd8:	e002      	b.n	800fce0 <MlmeConfirm+0x78>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800fcda:	4b11      	ldr	r3, [pc, #68]	; (800fd20 <MlmeConfirm+0xb8>)
 800fcdc:	22ff      	movs	r2, #255	; 0xff
 800fcde:	705a      	strb	r2, [r3, #1]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fce0:	4b0d      	ldr	r3, [pc, #52]	; (800fd18 <MlmeConfirm+0xb0>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	69db      	ldr	r3, [r3, #28]
 800fce6:	480e      	ldr	r0, [pc, #56]	; (800fd20 <MlmeConfirm+0xb8>)
 800fce8:	4798      	blx	r3
        break;
 800fcea:	e00e      	b.n	800fd0a <MlmeConfirm+0xa2>
            RxParams.LinkCheck = true;
 800fcec:	4b0e      	ldr	r3, [pc, #56]	; (800fd28 <MlmeConfirm+0xc0>)
 800fcee:	2201      	movs	r2, #1
 800fcf0:	735a      	strb	r2, [r3, #13]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	7a1a      	ldrb	r2, [r3, #8]
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	; (800fd28 <MlmeConfirm+0xc0>)
 800fcf8:	739a      	strb	r2, [r3, #14]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	7a5a      	ldrb	r2, [r3, #9]
 800fcfe:	4b0a      	ldr	r3, [pc, #40]	; (800fd28 <MlmeConfirm+0xc0>)
 800fd00:	73da      	strb	r2, [r3, #15]
        break;
 800fd02:	e002      	b.n	800fd0a <MlmeConfirm+0xa2>
        break;
 800fd04:	bf00      	nop
 800fd06:	e000      	b.n	800fd0a <MlmeConfirm+0xa2>
        break;
 800fd08:	bf00      	nop
    }
}
 800fd0a:	bf00      	nop
 800fd0c:	3730      	adds	r7, #48	; 0x30
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
 800fd12:	bf00      	nop
 800fd14:	200032b4 	.word	0x200032b4
 800fd18:	2000328c 	.word	0x2000328c
 800fd1c:	20000090 	.word	0x20000090
 800fd20:	200000b4 	.word	0x200000b4
 800fd24:	2000327c 	.word	0x2000327c
 800fd28:	200000b8 	.word	0x200000b8

0800fd2c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *RxStatus )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800fd36:	4b22      	ldr	r3, [pc, #136]	; (800fdc0 <MlmeIndication+0x94>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	785a      	ldrb	r2, [r3, #1]
 800fd40:	4b1f      	ldr	r3, [pc, #124]	; (800fdc0 <MlmeIndication+0x94>)
 800fd42:	705a      	strb	r2, [r3, #1]
    RxParams.Rssi = RxStatus->Rssi;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fd4a:	b25a      	sxtb	r2, r3
 800fd4c:	4b1c      	ldr	r3, [pc, #112]	; (800fdc0 <MlmeIndication+0x94>)
 800fd4e:	70da      	strb	r2, [r3, #3]
    RxParams.Snr = RxStatus->Snr;
 800fd50:	683b      	ldr	r3, [r7, #0]
 800fd52:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800fd56:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <MlmeIndication+0x94>)
 800fd58:	711a      	strb	r2, [r3, #4]
    RxParams.RxSlot = RxStatus->RxSlot;
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	78db      	ldrb	r3, [r3, #3]
 800fd5e:	b25a      	sxtb	r2, r3
 800fd60:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <MlmeIndication+0x94>)
 800fd62:	731a      	strb	r2, [r3, #12]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 800fd64:	4b16      	ldr	r3, [pc, #88]	; (800fdc0 <MlmeIndication+0x94>)
 800fd66:	785b      	ldrb	r3, [r3, #1]
 800fd68:	2b0e      	cmp	r3, #14
 800fd6a:	d005      	beq.n	800fd78 <MlmeIndication+0x4c>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800fd6c:	4b15      	ldr	r3, [pc, #84]	; (800fdc4 <MlmeIndication+0x98>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	4913      	ldr	r1, [pc, #76]	; (800fdc0 <MlmeIndication+0x94>)
 800fd74:	2000      	movs	r0, #0
 800fd76:	4798      	blx	r3
    }

    switch( mlmeIndication->MlmeIndication )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	2b07      	cmp	r3, #7
 800fd7e:	d117      	bne.n	800fdb0 <MlmeIndication+0x84>
    {
    case MLME_SCHEDULE_UPLINK:
        {// The MAC signals that we shall provide an uplink as soon as possible
            // Send an empty message
            LmHandlerAppData_t appData =
 800fd80:	2300      	movs	r3, #0
 800fd82:	723b      	strb	r3, [r7, #8]
 800fd84:	2300      	movs	r3, #0
 800fd86:	727b      	strb	r3, [r7, #9]
 800fd88:	2300      	movs	r3, #0
 800fd8a:	60fb      	str	r3, [r7, #12]
                .Buffer = NULL,
                .BufferSize = 0,
                .Port = 0
            };

            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 800fd8c:	4b0e      	ldr	r3, [pc, #56]	; (800fdc8 <MlmeIndication+0x9c>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	4798      	blx	r3
 800fd94:	4603      	mov	r3, r0
 800fd96:	f083 0301 	eor.w	r3, r3, #1
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d009      	beq.n	800fdb4 <MlmeIndication+0x88>
            {
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 800fda0:	f107 0008 	add.w	r0, r7, #8
 800fda4:	2301      	movs	r3, #1
 800fda6:	2200      	movs	r2, #0
 800fda8:	2100      	movs	r1, #0
 800fdaa:	f7ff fcaf 	bl	800f70c <LmHandlerSend>
            }
        }
        break;
 800fdae:	e001      	b.n	800fdb4 <MlmeIndication+0x88>
            }
        }
        break;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
        break;
 800fdb0:	bf00      	nop
 800fdb2:	e000      	b.n	800fdb6 <MlmeIndication+0x8a>
        break;
 800fdb4:	bf00      	nop
    }
}
 800fdb6:	bf00      	nop
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	200000b8 	.word	0x200000b8
 800fdc4:	2000328c 	.word	0x2000328c
 800fdc8:	20003268 	.word	0x20003268

0800fdcc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b084      	sub	sp, #16
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	6039      	str	r1, [r7, #0]
 800fdd6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	60fb      	str	r3, [r7, #12]
    switch( id )
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d103      	bne.n	800fdea <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800fde2:	f000 fd4d 	bl	8010880 <LmhpCompliancePackageFactory>
 800fde6:	60f8      	str	r0, [r7, #12]
            break;
 800fde8:	e000      	b.n	800fdec <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister(id, &package);
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800fdea:	bf00      	nop
        }
    }
    if( package != NULL )
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d02b      	beq.n	800fe4a <LmHandlerPackageRegister+0x7e>
    {
        LmHandlerPackages[id] = package;
 800fdf2:	79fb      	ldrb	r3, [r7, #7]
 800fdf4:	4918      	ldr	r1, [pc, #96]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800fdfc:	79fb      	ldrb	r3, [r7, #7]
 800fdfe:	4a16      	ldr	r2, [pc, #88]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fe00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe04:	4a15      	ldr	r2, [pc, #84]	; (800fe5c <LmHandlerPackageRegister+0x90>)
 800fe06:	625a      	str	r2, [r3, #36]	; 0x24
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	4a13      	ldr	r2, [pc, #76]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fe0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe10:	4a13      	ldr	r2, [pc, #76]	; (800fe60 <LmHandlerPackageRegister+0x94>)
 800fe12:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800fe14:	79fb      	ldrb	r3, [r7, #7]
 800fe16:	4a10      	ldr	r2, [pc, #64]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fe18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe1c:	4a11      	ldr	r2, [pc, #68]	; (800fe64 <LmHandlerPackageRegister+0x98>)
 800fe1e:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800fe20:	4b11      	ldr	r3, [pc, #68]	; (800fe68 <LmHandlerPackageRegister+0x9c>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	490c      	ldr	r1, [pc, #48]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fe28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fe2c:	6912      	ldr	r2, [r2, #16]
 800fe2e:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	4a09      	ldr	r2, [pc, #36]	; (800fe58 <LmHandlerPackageRegister+0x8c>)
 800fe34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	4a0c      	ldr	r2, [pc, #48]	; (800fe6c <LmHandlerPackageRegister+0xa0>)
 800fe3c:	6851      	ldr	r1, [r2, #4]
 800fe3e:	4a0b      	ldr	r2, [pc, #44]	; (800fe6c <LmHandlerPackageRegister+0xa0>)
 800fe40:	7852      	ldrb	r2, [r2, #1]
 800fe42:	6838      	ldr	r0, [r7, #0]
 800fe44:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800fe46:	2300      	movs	r3, #0
 800fe48:	e001      	b.n	800fe4e <LmHandlerPackageRegister+0x82>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fe4a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3710      	adds	r7, #16
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20003268 	.word	0x20003268
 800fe5c:	0800f621 	.word	0x0800f621
 800fe60:	0800f70d 	.word	0x0800f70d
 800fe64:	0800f8e5 	.word	0x0800f8e5
 800fe68:	2000328c 	.word	0x2000328c
 800fe6c:	200000c8 	.word	0x200000c8

0800fe70 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b082      	sub	sp, #8
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	71fb      	strb	r3, [r7, #7]
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800fe7a:	79fb      	ldrb	r3, [r7, #7]
 800fe7c:	2b04      	cmp	r3, #4
 800fe7e:	d80e      	bhi.n	800fe9e <LmHandlerPackageIsInitialized+0x2e>
 800fe80:	79fb      	ldrb	r3, [r7, #7]
 800fe82:	4a09      	ldr	r2, [pc, #36]	; (800fea8 <LmHandlerPackageIsInitialized+0x38>)
 800fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe88:	689b      	ldr	r3, [r3, #8]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d007      	beq.n	800fe9e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800fe8e:	79fb      	ldrb	r3, [r7, #7]
 800fe90:	4a05      	ldr	r2, [pc, #20]	; (800fea8 <LmHandlerPackageIsInitialized+0x38>)
 800fe92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	4798      	blx	r3
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	e000      	b.n	800fea0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800fe9e:	2300      	movs	r3, #0
    }
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	20003268 	.word	0x20003268

0800feac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	4603      	mov	r3, r0
 800feb4:	6039      	str	r1, [r7, #0]
 800feb6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800feb8:	2300      	movs	r3, #0
 800feba:	73fb      	strb	r3, [r7, #15]
 800febc:	e067      	b.n	800ff8e <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800febe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fec2:	4a37      	ldr	r2, [pc, #220]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800fec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d051      	beq.n	800ff70 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800fecc:	79fb      	ldrb	r3, [r7, #7]
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d03d      	beq.n	800ff4e <LmHandlerPackagesNotify+0xa2>
 800fed2:	2b02      	cmp	r3, #2
 800fed4:	dc4e      	bgt.n	800ff74 <LmHandlerPackagesNotify+0xc8>
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d002      	beq.n	800fee0 <LmHandlerPackagesNotify+0x34>
 800feda:	2b01      	cmp	r3, #1
 800fedc:	d011      	beq.n	800ff02 <LmHandlerPackagesNotify+0x56>
                    }
                    break;
                }
                default:
                {
                    break;
 800fede:	e049      	b.n	800ff74 <LmHandlerPackagesNotify+0xc8>
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800fee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fee4:	4a2e      	ldr	r2, [pc, #184]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800fee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d043      	beq.n	800ff78 <LmHandlerPackagesNotify+0xcc>
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800fef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fef4:	4a2a      	ldr	r2, [pc, #168]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800fef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fefa:	699b      	ldr	r3, [r3, #24]
 800fefc:	6838      	ldr	r0, [r7, #0]
 800fefe:	4798      	blx	r3
                    break;
 800ff00:	e03a      	b.n	800ff78 <LmHandlerPackagesNotify+0xcc>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ff02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff06:	4a26      	ldr	r2, [pc, #152]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff0c:	69db      	ldr	r3, [r3, #28]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d034      	beq.n	800ff7c <LmHandlerPackagesNotify+0xd0>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ff12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff16:	4a22      	ldr	r2, [pc, #136]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff1c:	781a      	ldrb	r2, [r3, #0]
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	78db      	ldrb	r3, [r3, #3]
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d00a      	beq.n	800ff3c <LmHandlerPackagesNotify+0x90>
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 800ff26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d126      	bne.n	800ff7c <LmHandlerPackagesNotify+0xd0>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 800ff2e:	4b1c      	ldr	r3, [pc, #112]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	4798      	blx	r3
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01f      	beq.n	800ff7c <LmHandlerPackagesNotify+0xd0>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ff3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff40:	4a17      	ldr	r2, [pc, #92]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff46:	69db      	ldr	r3, [r3, #28]
 800ff48:	6838      	ldr	r0, [r7, #0]
 800ff4a:	4798      	blx	r3
                    break;
 800ff4c:	e016      	b.n	800ff7c <LmHandlerPackagesNotify+0xd0>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ff4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff52:	4a13      	ldr	r2, [pc, #76]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff58:	6a1b      	ldr	r3, [r3, #32]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d010      	beq.n	800ff80 <LmHandlerPackagesNotify+0xd4>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800ff5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff62:	4a0f      	ldr	r2, [pc, #60]	; (800ffa0 <LmHandlerPackagesNotify+0xf4>)
 800ff64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	6838      	ldr	r0, [r7, #0]
 800ff6c:	4798      	blx	r3
                    break;
 800ff6e:	e007      	b.n	800ff80 <LmHandlerPackagesNotify+0xd4>
                }
            }
        }
 800ff70:	bf00      	nop
 800ff72:	e006      	b.n	800ff82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ff74:	bf00      	nop
 800ff76:	e004      	b.n	800ff82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ff78:	bf00      	nop
 800ff7a:	e002      	b.n	800ff82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ff7c:	bf00      	nop
 800ff7e:	e000      	b.n	800ff82 <LmHandlerPackagesNotify+0xd6>
                    break;
 800ff80:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ff82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	3301      	adds	r3, #1
 800ff8a:	b2db      	uxtb	r3, r3
 800ff8c:	73fb      	strb	r3, [r7, #15]
 800ff8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff92:	2b04      	cmp	r3, #4
 800ff94:	dd93      	ble.n	800febe <LmHandlerPackagesNotify+0x12>
    }
}
 800ff96:	bf00      	nop
 800ff98:	bf00      	nop
 800ff9a:	3710      	adds	r7, #16
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20003268 	.word	0x20003268

0800ffa4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffaa:	2300      	movs	r3, #0
 800ffac:	71fb      	strb	r3, [r7, #7]
 800ffae:	e022      	b.n	800fff6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ffb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffb4:	4a14      	ldr	r2, [pc, #80]	; (8010008 <LmHandlerPackagesProcess+0x64>)
 800ffb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d015      	beq.n	800ffea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ffbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffc2:	4a11      	ldr	r2, [pc, #68]	; (8010008 <LmHandlerPackagesProcess+0x64>)
 800ffc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffc8:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00d      	beq.n	800ffea <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ffce:	79fb      	ldrb	r3, [r7, #7]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff4d 	bl	800fe70 <LmHandlerPackageIsInitialized>
 800ffd6:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ffdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffe0:	4a09      	ldr	r2, [pc, #36]	; (8010008 <LmHandlerPackagesProcess+0x64>)
 800ffe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ffe6:	691b      	ldr	r3, [r3, #16]
 800ffe8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ffea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	3301      	adds	r3, #1
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	71fb      	strb	r3, [r7, #7]
 800fff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fffa:	2b04      	cmp	r3, #4
 800fffc:	ddd8      	ble.n	800ffb0 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800fffe:	bf00      	nop
 8010000:	bf00      	nop
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	20003268 	.word	0x20003268

0801000c <LmHandlerGetDevEUI>:

LmHandlerErrorStatus_t LmHandlerGetDevEUI(uint8_t *devEUI)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08c      	sub	sp, #48	; 0x30
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (devEUI == NULL)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <LmHandlerGetDevEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	e013      	b.n	8010048 <LmHandlerGetDevEUI+0x3c>
    }

    mibReq.Type = MIB_DEV_EUI;
 8010020:	2302      	movs	r3, #2
 8010022:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010024:	f107 030c 	add.w	r3, r7, #12
 8010028:	4618      	mov	r0, r3
 801002a:	f004 fc7d 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d002      	beq.n	801003a <LmHandlerGetDevEUI+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010034:	f04f 33ff 	mov.w	r3, #4294967295
 8010038:	e006      	b.n	8010048 <LmHandlerGetDevEUI+0x3c>
    }
    UTIL_MEM_cpy_8(devEUI, mibReq.Param.DevEui, SE_EUI_SIZE);
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	2208      	movs	r2, #8
 801003e:	4619      	mov	r1, r3
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f00e ff05 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3730      	adds	r7, #48	; 0x30
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <LmHandlerSetDevEUI>:

LmHandlerErrorStatus_t LmHandlerSetDevEUI(uint8_t *devEUI)
{
 8010050:	b480      	push	{r7}
 8010052:	b083      	sub	sp, #12
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
    }
#else /* STATIC_DEVICE_EUI == 1 */
    return LORAMAC_HANDLER_ERROR;
 8010058:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* STATIC_DEVICE_EUI */
}
 801005c:	4618      	mov	r0, r3
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	bc80      	pop	{r7}
 8010064:	4770      	bx	lr

08010066 <LmHandlerGetAppEUI>:

LmHandlerErrorStatus_t LmHandlerGetAppEUI(uint8_t *appEUI)
{
 8010066:	b580      	push	{r7, lr}
 8010068:	b08c      	sub	sp, #48	; 0x30
 801006a:	af00      	add	r7, sp, #0
 801006c:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (appEUI == NULL)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <LmHandlerGetAppEUI+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010074:	f04f 33ff 	mov.w	r3, #4294967295
 8010078:	e013      	b.n	80100a2 <LmHandlerGetAppEUI+0x3c>
    }

    mibReq.Type = MIB_JOIN_EUI;
 801007a:	2303      	movs	r3, #3
 801007c:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801007e:	f107 030c 	add.w	r3, r7, #12
 8010082:	4618      	mov	r0, r3
 8010084:	f004 fc50 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d002      	beq.n	8010094 <LmHandlerGetAppEUI+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801008e:	f04f 33ff 	mov.w	r3, #4294967295
 8010092:	e006      	b.n	80100a2 <LmHandlerGetAppEUI+0x3c>
    }
    UTIL_MEM_cpy_8(appEUI, mibReq.Param.JoinEui, SE_EUI_SIZE);
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	2208      	movs	r2, #8
 8010098:	4619      	mov	r1, r3
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f00e fed8 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80100a0:	2300      	movs	r3, #0
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3730      	adds	r7, #48	; 0x30
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}

080100aa <LmHandlerSetAppEUI>:

LmHandlerErrorStatus_t LmHandlerSetAppEUI(uint8_t *appEUI)
{
 80100aa:	b580      	push	{r7, lr}
 80100ac:	b08c      	sub	sp, #48	; 0x30
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80100b2:	f7ff fb0f 	bl	800f6d4 <LmHandlerJoinStatus>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d010      	beq.n	80100de <LmHandlerSetAppEUI+0x34>
    {
        mibReq.Type = MIB_JOIN_EUI;
 80100bc:	2303      	movs	r3, #3
 80100be:	733b      	strb	r3, [r7, #12]
        mibReq.Param.JoinEui = appEUI;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80100c4:	f107 030c 	add.w	r3, r7, #12
 80100c8:	4618      	mov	r0, r3
 80100ca:	f004 fd8b 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80100ce:	4603      	mov	r3, r0
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <LmHandlerSetAppEUI+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 80100d4:	f04f 33ff 	mov.w	r3, #4294967295
 80100d8:	e003      	b.n	80100e2 <LmHandlerSetAppEUI+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 80100da:	2300      	movs	r3, #0
 80100dc:	e001      	b.n	80100e2 <LmHandlerSetAppEUI+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 80100de:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80100e2:	4618      	mov	r0, r3
 80100e4:	3730      	adds	r7, #48	; 0x30
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}

080100ea <LmHandlerGetNetworkID>:

LmHandlerErrorStatus_t LmHandlerGetNetworkID(uint32_t *networkId)
{
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b08c      	sub	sp, #48	; 0x30
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (networkId == NULL)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d102      	bne.n	80100fe <LmHandlerGetNetworkID+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80100f8:	f04f 33ff 	mov.w	r3, #4294967295
 80100fc:	e010      	b.n	8010120 <LmHandlerGetNetworkID+0x36>
    }

    mibReq.Type = MIB_NET_ID;
 80100fe:	2305      	movs	r3, #5
 8010100:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010102:	f107 030c 	add.w	r3, r7, #12
 8010106:	4618      	mov	r0, r3
 8010108:	f004 fc0e 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d002      	beq.n	8010118 <LmHandlerGetNetworkID+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010112:	f04f 33ff 	mov.w	r3, #4294967295
 8010116:	e003      	b.n	8010120 <LmHandlerGetNetworkID+0x36>
    }
    *networkId = mibReq.Param.NetID;
 8010118:	693a      	ldr	r2, [r7, #16]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3730      	adds	r7, #48	; 0x30
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <LmHandlerSetNetworkID>:

LmHandlerErrorStatus_t LmHandlerSetNetworkID(uint32_t networkId)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b08c      	sub	sp, #48	; 0x30
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8010130:	f7ff fad0 	bl	800f6d4 <LmHandlerJoinStatus>
 8010134:	4603      	mov	r3, r0
 8010136:	2b01      	cmp	r3, #1
 8010138:	d010      	beq.n	801015c <LmHandlerSetNetworkID+0x34>
    {
        mibReq.Type = MIB_NET_ID;
 801013a:	2305      	movs	r3, #5
 801013c:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetID = networkId;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010142:	f107 030c 	add.w	r3, r7, #12
 8010146:	4618      	mov	r0, r3
 8010148:	f004 fd4c 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <LmHandlerSetNetworkID+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010152:	f04f 33ff 	mov.w	r3, #4294967295
 8010156:	e003      	b.n	8010160 <LmHandlerSetNetworkID+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8010158:	2300      	movs	r3, #0
 801015a:	e001      	b.n	8010160 <LmHandlerSetNetworkID+0x38>
    }
    else
    {
        /* Cannot change NetworkID in running state */
        return LORAMAC_HANDLER_ERROR;
 801015c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010160:	4618      	mov	r0, r3
 8010162:	3730      	adds	r7, #48	; 0x30
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <LmHandlerGetDevAddr>:

LmHandlerErrorStatus_t LmHandlerGetDevAddr(uint32_t *devAddr)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b08c      	sub	sp, #48	; 0x30
 801016c:	af00      	add	r7, sp, #0
 801016e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    if (devAddr == NULL)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d102      	bne.n	801017c <LmHandlerGetDevAddr+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010176:	f04f 33ff 	mov.w	r3, #4294967295
 801017a:	e010      	b.n	801019e <LmHandlerGetDevAddr+0x36>
    }

    mibReq.Type = MIB_DEV_ADDR;
 801017c:	2306      	movs	r3, #6
 801017e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010180:	f107 030c 	add.w	r3, r7, #12
 8010184:	4618      	mov	r0, r3
 8010186:	f004 fbcf 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d002      	beq.n	8010196 <LmHandlerGetDevAddr+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010190:	f04f 33ff 	mov.w	r3, #4294967295
 8010194:	e003      	b.n	801019e <LmHandlerGetDevAddr+0x36>
    }
    *devAddr = mibReq.Param.DevAddr;
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801019c:	2300      	movs	r3, #0
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3730      	adds	r7, #48	; 0x30
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <LmHandlerSetDevAddr>:

LmHandlerErrorStatus_t LmHandlerSetDevAddr(uint32_t devAddr)
{
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b08c      	sub	sp, #48	; 0x30
 80101aa:	af00      	add	r7, sp, #0
 80101ac:	6078      	str	r0, [r7, #4]
#if ( STATIC_DEVICE_ADDRESS != 1 )
    MibRequestConfirm_t mibReq;

    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80101ae:	f7ff fa91 	bl	800f6d4 <LmHandlerJoinStatus>
 80101b2:	4603      	mov	r3, r0
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d010      	beq.n	80101da <LmHandlerSetDevAddr+0x34>
    {
        mibReq.Type = MIB_DEV_ADDR;
 80101b8:	2306      	movs	r3, #6
 80101ba:	733b      	strb	r3, [r7, #12]
        mibReq.Param.DevAddr = devAddr;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80101c0:	f107 030c 	add.w	r3, r7, #12
 80101c4:	4618      	mov	r0, r3
 80101c6:	f004 fd0d 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <LmHandlerSetDevAddr+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 80101d0:	f04f 33ff 	mov.w	r3, #4294967295
 80101d4:	e003      	b.n	80101de <LmHandlerSetDevAddr+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 80101d6:	2300      	movs	r3, #0
 80101d8:	e001      	b.n	80101de <LmHandlerSetDevAddr+0x38>
    }
    else
    {
        /* Cannot change DevAddr in running state */
        return LORAMAC_HANDLER_ERROR;
 80101da:	f04f 33ff 	mov.w	r3, #4294967295
    }
#else /* STATIC_DEVICE_ADDRESS == 1 */
    return LORAMAC_HANDLER_ERROR;
#endif /* STATIC_DEVICE_ADDRESS */
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3730      	adds	r7, #48	; 0x30
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}
	...

080101e8 <LmHandlerSetActiveRegion>:

LmHandlerErrorStatus_t LmHandlerSetActiveRegion(LoRaMacRegion_t region)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	71fb      	strb	r3, [r7, #7]
    /* Not yet joined */
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80101f2:	f7ff fa6f 	bl	800f6d4 <LmHandlerJoinStatus>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d007      	beq.n	801020c <LmHandlerSetActiveRegion+0x24>
    {
        LmHandlerParams.ActiveRegion = region;
 80101fc:	4a06      	ldr	r2, [pc, #24]	; (8010218 <LmHandlerSetActiveRegion+0x30>)
 80101fe:	79fb      	ldrb	r3, [r7, #7]
 8010200:	7013      	strb	r3, [r2, #0]
        return LmHandlerConfigure( &LmHandlerParams );
 8010202:	4805      	ldr	r0, [pc, #20]	; (8010218 <LmHandlerSetActiveRegion+0x30>)
 8010204:	f7ff f8d6 	bl	800f3b4 <LmHandlerConfigure>
 8010208:	4603      	mov	r3, r0
 801020a:	e001      	b.n	8010210 <LmHandlerSetActiveRegion+0x28>
    }
    else
    {
        /* Cannot change Region in running state */
        return LORAMAC_HANDLER_ERROR;
 801020c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010210:	4618      	mov	r0, r3
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	2000327c 	.word	0x2000327c

0801021c <LmHandlerGetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerGetAdrEnable(bool *adrEnable)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
    if (adrEnable == NULL)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d102      	bne.n	8010230 <LmHandlerGetAdrEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801022a:	f04f 33ff 	mov.w	r3, #4294967295
 801022e:	e004      	b.n	801023a <LmHandlerGetAdrEnable+0x1e>
    }

    *adrEnable = LmHandlerParams.AdrEnable;
 8010230:	4b04      	ldr	r3, [pc, #16]	; (8010244 <LmHandlerGetAdrEnable+0x28>)
 8010232:	789a      	ldrb	r2, [r3, #2]
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	370c      	adds	r7, #12
 801023e:	46bd      	mov	sp, r7
 8010240:	bc80      	pop	{r7}
 8010242:	4770      	bx	lr
 8010244:	2000327c 	.word	0x2000327c

08010248 <LmHandlerSetAdrEnable>:

LmHandlerErrorStatus_t LmHandlerSetAdrEnable(bool adrEnable)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b08c      	sub	sp, #48	; 0x30
 801024c:	af00      	add	r7, sp, #0
 801024e:	4603      	mov	r3, r0
 8010250:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_ADR;
 8010252:	2304      	movs	r3, #4
 8010254:	733b      	strb	r3, [r7, #12]
    mibReq.Param.AdrEnable = adrEnable;
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801025a:	f107 030c 	add.w	r3, r7, #12
 801025e:	4618      	mov	r0, r3
 8010260:	f004 fcc0 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010264:	4603      	mov	r3, r0
 8010266:	2b00      	cmp	r3, #0
 8010268:	d002      	beq.n	8010270 <LmHandlerSetAdrEnable+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 801026a:	f04f 33ff 	mov.w	r3, #4294967295
 801026e:	e003      	b.n	8010278 <LmHandlerSetAdrEnable+0x30>
    }
    LmHandlerParams.AdrEnable = adrEnable;
 8010270:	4a03      	ldr	r2, [pc, #12]	; (8010280 <LmHandlerSetAdrEnable+0x38>)
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	7093      	strb	r3, [r2, #2]

    return LORAMAC_HANDLER_SUCCESS;
 8010276:	2300      	movs	r3, #0
}
 8010278:	4618      	mov	r0, r3
 801027a:	3730      	adds	r7, #48	; 0x30
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2000327c 	.word	0x2000327c

08010284 <LmHandlerSetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerSetTxDatarate(int8_t txDatarate)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b08c      	sub	sp, #48	; 0x30
 8010288:	af00      	add	r7, sp, #0
 801028a:	4603      	mov	r3, r0
 801028c:	71fb      	strb	r3, [r7, #7]
    if (LmHandlerParams.AdrEnable == true)
 801028e:	4b0f      	ldr	r3, [pc, #60]	; (80102cc <LmHandlerSetTxDatarate+0x48>)
 8010290:	789b      	ldrb	r3, [r3, #2]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d002      	beq.n	801029c <LmHandlerSetTxDatarate+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 8010296:	f04f 33ff 	mov.w	r3, #4294967295
 801029a:	e012      	b.n	80102c2 <LmHandlerSetTxDatarate+0x3e>
    }

    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_CHANNELS_DATARATE;
 801029c:	231f      	movs	r3, #31
 801029e:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ChannelsDatarate = txDatarate;
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80102a4:	f107 030c 	add.w	r3, r7, #12
 80102a8:	4618      	mov	r0, r3
 80102aa:	f004 fc9b 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d002      	beq.n	80102ba <LmHandlerSetTxDatarate+0x36>
    {
        return LORAMAC_HANDLER_ERROR;
 80102b4:	f04f 33ff 	mov.w	r3, #4294967295
 80102b8:	e003      	b.n	80102c2 <LmHandlerSetTxDatarate+0x3e>
    }

    LmHandlerParams.TxDatarate = txDatarate;
 80102ba:	4a04      	ldr	r2, [pc, #16]	; (80102cc <LmHandlerSetTxDatarate+0x48>)
 80102bc:	79fb      	ldrb	r3, [r7, #7]
 80102be:	70d3      	strb	r3, [r2, #3]

    return LORAMAC_HANDLER_SUCCESS;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3730      	adds	r7, #48	; 0x30
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	2000327c 	.word	0x2000327c

080102d0 <LmHandlerGetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerGetDutyCycleEnable(bool *dutyCycleEnable)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
    if (dutyCycleEnable == NULL)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d102      	bne.n	80102e4 <LmHandlerGetDutyCycleEnable+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80102de:	f04f 33ff 	mov.w	r3, #4294967295
 80102e2:	e004      	b.n	80102ee <LmHandlerGetDutyCycleEnable+0x1e>
    }

    *dutyCycleEnable = LmHandlerParams.DutyCycleEnabled;
 80102e4:	4b04      	ldr	r3, [pc, #16]	; (80102f8 <LmHandlerGetDutyCycleEnable+0x28>)
 80102e6:	795a      	ldrb	r2, [r3, #5]
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	370c      	adds	r7, #12
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bc80      	pop	{r7}
 80102f6:	4770      	bx	lr
 80102f8:	2000327c 	.word	0x2000327c

080102fc <LmHandlerSetDutyCycleEnable>:

LmHandlerErrorStatus_t LmHandlerSetDutyCycleEnable(bool dutyCycleEnable)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	4603      	mov	r3, r0
 8010304:	71fb      	strb	r3, [r7, #7]
    LmHandlerParams.DutyCycleEnabled = dutyCycleEnable;
 8010306:	4a06      	ldr	r2, [pc, #24]	; (8010320 <LmHandlerSetDutyCycleEnable+0x24>)
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	7153      	strb	r3, [r2, #5]
    LoRaMacTestSetDutyCycleOn(dutyCycleEnable);
 801030c:	79fb      	ldrb	r3, [r7, #7]
 801030e:	4618      	mov	r0, r3
 8010310:	f005 f9dc 	bl	80156cc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8010314:	2300      	movs	r3, #0
}
 8010316:	4618      	mov	r0, r3
 8010318:	3708      	adds	r7, #8
 801031a:	46bd      	mov	sp, r7
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop
 8010320:	2000327c 	.word	0x2000327c

08010324 <LmHandlerGetRX2Params>:

LmHandlerErrorStatus_t LmHandlerGetRX2Params(RxChannelParams_t *rxParams)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08c      	sub	sp, #48	; 0x30
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
    if (rxParams == NULL)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d102      	bne.n	8010338 <LmHandlerGetRX2Params+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010332:	f04f 33ff 	mov.w	r3, #4294967295
 8010336:	e013      	b.n	8010360 <LmHandlerGetRX2Params+0x3c>
    }

    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 8010338:	2312      	movs	r3, #18
 801033a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801033c:	f107 030c 	add.w	r3, r7, #12
 8010340:	4618      	mov	r0, r3
 8010342:	f004 faf1 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d002      	beq.n	8010352 <LmHandlerGetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801034c:	f04f 33ff 	mov.w	r3, #4294967295
 8010350:	e006      	b.n	8010360 <LmHandlerGetRX2Params+0x3c>
    }

    rxParams->Frequency = mibReq.Param.Rx2Channel.Frequency;
 8010352:	693a      	ldr	r2, [r7, #16]
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	601a      	str	r2, [r3, #0]
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
 8010358:	7d3a      	ldrb	r2, [r7, #20]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3730      	adds	r7, #48	; 0x30
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <LmHandlerGetTxPower>:

LmHandlerErrorStatus_t LmHandlerGetTxPower(int8_t *txPower)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b08c      	sub	sp, #48	; 0x30
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (txPower == NULL)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d102      	bne.n	801037c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010376:	f04f 33ff 	mov.w	r3, #4294967295
 801037a:	e011      	b.n	80103a0 <LmHandlerGetTxPower+0x38>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 801037c:	2320      	movs	r3, #32
 801037e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010380:	f107 030c 	add.w	r3, r7, #12
 8010384:	4618      	mov	r0, r3
 8010386:	f004 facf 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d002      	beq.n	8010396 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010390:	f04f 33ff 	mov.w	r3, #4294967295
 8010394:	e004      	b.n	80103a0 <LmHandlerGetTxPower+0x38>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8010396:	f997 2010 	ldrsb.w	r2, [r7, #16]
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801039e:	2300      	movs	r3, #0
}
 80103a0:	4618      	mov	r0, r3
 80103a2:	3730      	adds	r7, #48	; 0x30
 80103a4:	46bd      	mov	sp, r7
 80103a6:	bd80      	pop	{r7, pc}

080103a8 <LmHandlerGetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx1Delay(uint32_t *rxDelay)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b08c      	sub	sp, #48	; 0x30
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d102      	bne.n	80103bc <LmHandlerGetRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80103b6:	f04f 33ff 	mov.w	r3, #4294967295
 80103ba:	e010      	b.n	80103de <LmHandlerGetRx1Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_1;
 80103bc:	231a      	movs	r3, #26
 80103be:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80103c0:	f107 030c 	add.w	r3, r7, #12
 80103c4:	4618      	mov	r0, r3
 80103c6:	f004 faaf 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <LmHandlerGetRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80103d0:	f04f 33ff 	mov.w	r3, #4294967295
 80103d4:	e003      	b.n	80103de <LmHandlerGetRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay1;
 80103d6:	693a      	ldr	r2, [r7, #16]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3730      	adds	r7, #48	; 0x30
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <LmHandlerGetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetRx2Delay(uint32_t *rxDelay)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b08c      	sub	sp, #48	; 0x30
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d102      	bne.n	80103fa <LmHandlerGetRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80103f4:	f04f 33ff 	mov.w	r3, #4294967295
 80103f8:	e010      	b.n	801041c <LmHandlerGetRx2Delay+0x36>
    }

    mibReq.Type = MIB_RECEIVE_DELAY_2;
 80103fa:	231b      	movs	r3, #27
 80103fc:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80103fe:	f107 030c 	add.w	r3, r7, #12
 8010402:	4618      	mov	r0, r3
 8010404:	f004 fa90 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d002      	beq.n	8010414 <LmHandlerGetRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801040e:	f04f 33ff 	mov.w	r3, #4294967295
 8010412:	e003      	b.n	801041c <LmHandlerGetRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.ReceiveDelay2;
 8010414:	693a      	ldr	r2, [r7, #16]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 801041a:	2300      	movs	r3, #0
}
 801041c:	4618      	mov	r0, r3
 801041e:	3730      	adds	r7, #48	; 0x30
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}

08010424 <LmHandlerGetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx1Delay(uint32_t *rxDelay)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08c      	sub	sp, #48	; 0x30
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d102      	bne.n	8010438 <LmHandlerGetJoinRx1Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010432:	f04f 33ff 	mov.w	r3, #4294967295
 8010436:	e010      	b.n	801045a <LmHandlerGetJoinRx1Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8010438:	231c      	movs	r3, #28
 801043a:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801043c:	f107 030c 	add.w	r3, r7, #12
 8010440:	4618      	mov	r0, r3
 8010442:	f004 fa71 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d002      	beq.n	8010452 <LmHandlerGetJoinRx1Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801044c:	f04f 33ff 	mov.w	r3, #4294967295
 8010450:	e003      	b.n	801045a <LmHandlerGetJoinRx1Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay1;
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010458:	2300      	movs	r3, #0
}
 801045a:	4618      	mov	r0, r3
 801045c:	3730      	adds	r7, #48	; 0x30
 801045e:	46bd      	mov	sp, r7
 8010460:	bd80      	pop	{r7, pc}

08010462 <LmHandlerGetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerGetJoinRx2Delay(uint32_t *rxDelay)
{
 8010462:	b580      	push	{r7, lr}
 8010464:	b08c      	sub	sp, #48	; 0x30
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (rxDelay == NULL)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <LmHandlerGetJoinRx2Delay+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010470:	f04f 33ff 	mov.w	r3, #4294967295
 8010474:	e010      	b.n	8010498 <LmHandlerGetJoinRx2Delay+0x36>
    }

    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 8010476:	231d      	movs	r3, #29
 8010478:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801047a:	f107 030c 	add.w	r3, r7, #12
 801047e:	4618      	mov	r0, r3
 8010480:	f004 fa52 	bl	8014928 <LoRaMacMibGetRequestConfirm>
 8010484:	4603      	mov	r3, r0
 8010486:	2b00      	cmp	r3, #0
 8010488:	d002      	beq.n	8010490 <LmHandlerGetJoinRx2Delay+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 801048a:	f04f 33ff 	mov.w	r3, #4294967295
 801048e:	e003      	b.n	8010498 <LmHandlerGetJoinRx2Delay+0x36>
    }

    *rxDelay = mibReq.Param.JoinAcceptDelay2;
 8010490:	693a      	ldr	r2, [r7, #16]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	601a      	str	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 8010496:	2300      	movs	r3, #0
}
 8010498:	4618      	mov	r0, r3
 801049a:	3730      	adds	r7, #48	; 0x30
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}

080104a0 <LmHandlerSetTxPower>:

LmHandlerErrorStatus_t LmHandlerSetTxPower(int8_t txPower)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b08c      	sub	sp, #48	; 0x30
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 80104aa:	2320      	movs	r3, #32
 80104ac:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ChannelsTxPower = txPower;
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	743b      	strb	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80104b2:	f107 030c 	add.w	r3, r7, #12
 80104b6:	4618      	mov	r0, r3
 80104b8:	f004 fb94 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d002      	beq.n	80104c8 <LmHandlerSetTxPower+0x28>
    {
        return LORAMAC_HANDLER_ERROR;
 80104c2:	f04f 33ff 	mov.w	r3, #4294967295
 80104c6:	e000      	b.n	80104ca <LmHandlerSetTxPower+0x2a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3730      	adds	r7, #48	; 0x30
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}

080104d2 <LmHandlerSetRX2Params>:

LmHandlerErrorStatus_t LmHandlerSetRX2Params(RxChannelParams_t *rxParams)
{
 80104d2:	b580      	push	{r7, lr}
 80104d4:	b08c      	sub	sp, #48	; 0x30
 80104d6:	af00      	add	r7, sp, #0
 80104d8:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_RX2_CHANNEL;
 80104da:	2312      	movs	r3, #18
 80104dc:	733b      	strb	r3, [r7, #12]
    mibReq.Param.Rx2Channel.Frequency = rxParams->Frequency;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	613b      	str	r3, [r7, #16]
    mibReq.Param.Rx2Channel.Datarate = rxParams->Datarate;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	791b      	ldrb	r3, [r3, #4]
 80104e8:	753b      	strb	r3, [r7, #20]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80104ea:	f107 030c 	add.w	r3, r7, #12
 80104ee:	4618      	mov	r0, r3
 80104f0:	f004 fb78 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d002      	beq.n	8010500 <LmHandlerSetRX2Params+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 80104fa:	f04f 33ff 	mov.w	r3, #4294967295
 80104fe:	e000      	b.n	8010502 <LmHandlerSetRX2Params+0x30>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010500:	2300      	movs	r3, #0
}
 8010502:	4618      	mov	r0, r3
 8010504:	3730      	adds	r7, #48	; 0x30
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <LmHandlerSetRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx1Delay(uint32_t rxDelay)
{
 801050a:	b580      	push	{r7, lr}
 801050c:	b08c      	sub	sp, #48	; 0x30
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_1;
 8010512:	231a      	movs	r3, #26
 8010514:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ReceiveDelay1 = rxDelay;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801051a:	f107 030c 	add.w	r3, r7, #12
 801051e:	4618      	mov	r0, r3
 8010520:	f004 fb60 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <LmHandlerSetRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
 801052e:	e000      	b.n	8010532 <LmHandlerSetRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010530:	2300      	movs	r3, #0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3730      	adds	r7, #48	; 0x30
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <LmHandlerSetRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetRx2Delay(uint32_t rxDelay)
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b08c      	sub	sp, #48	; 0x30
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_RECEIVE_DELAY_2;
 8010542:	231b      	movs	r3, #27
 8010544:	733b      	strb	r3, [r7, #12]
    mibReq.Param.ReceiveDelay2 = rxDelay;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801054a:	f107 030c 	add.w	r3, r7, #12
 801054e:	4618      	mov	r0, r3
 8010550:	f004 fb48 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d002      	beq.n	8010560 <LmHandlerSetRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801055a:	f04f 33ff 	mov.w	r3, #4294967295
 801055e:	e000      	b.n	8010562 <LmHandlerSetRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010560:	2300      	movs	r3, #0
}
 8010562:	4618      	mov	r0, r3
 8010564:	3730      	adds	r7, #48	; 0x30
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}

0801056a <LmHandlerSetJoinRx1Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx1Delay(uint32_t rxDelay)
{
 801056a:	b580      	push	{r7, lr}
 801056c:	b08c      	sub	sp, #48	; 0x30
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_1;
 8010572:	231c      	movs	r3, #28
 8010574:	733b      	strb	r3, [r7, #12]
    mibReq.Param.JoinAcceptDelay1 = rxDelay;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801057a:	f107 030c 	add.w	r3, r7, #12
 801057e:	4618      	mov	r0, r3
 8010580:	f004 fb30 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d002      	beq.n	8010590 <LmHandlerSetJoinRx1Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295
 801058e:	e000      	b.n	8010592 <LmHandlerSetJoinRx1Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010590:	2300      	movs	r3, #0
}
 8010592:	4618      	mov	r0, r3
 8010594:	3730      	adds	r7, #48	; 0x30
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <LmHandlerSetJoinRx2Delay>:

LmHandlerErrorStatus_t LmHandlerSetJoinRx2Delay(uint32_t rxDelay)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b08c      	sub	sp, #48	; 0x30
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    mibReq.Type = MIB_JOIN_ACCEPT_DELAY_2;
 80105a2:	231d      	movs	r3, #29
 80105a4:	733b      	strb	r3, [r7, #12]
    mibReq.Param.JoinAcceptDelay2 = rxDelay;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	613b      	str	r3, [r7, #16]
    if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80105aa:	f107 030c 	add.w	r3, r7, #12
 80105ae:	4618      	mov	r0, r3
 80105b0:	f004 fb18 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <LmHandlerSetJoinRx2Delay+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 80105ba:	f04f 33ff 	mov.w	r3, #4294967295
 80105be:	e000      	b.n	80105c2 <LmHandlerSetJoinRx2Delay+0x28>
    }

    return LORAMAC_HANDLER_SUCCESS;
 80105c0:	2300      	movs	r3, #0
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	3730      	adds	r7, #48	; 0x30
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}

080105ca <LmHandlerGetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerGetPingPeriodicity(uint8_t *pingPeriodicity)
{
 80105ca:	b480      	push	{r7}
 80105cc:	b083      	sub	sp, #12
 80105ce:	af00      	add	r7, sp, #0
 80105d0:	6078      	str	r0, [r7, #4]
    }

    *pingPeriodicity = LmHandlerParams.PingPeriodicity;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 80105d2:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	370c      	adds	r7, #12
 80105da:	46bd      	mov	sp, r7
 80105dc:	bc80      	pop	{r7}
 80105de:	4770      	bx	lr

080105e0 <LmHandlerSetPingPeriodicity>:

LmHandlerErrorStatus_t LmHandlerSetPingPeriodicity(uint8_t pingPeriodicity)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	4603      	mov	r3, r0
 80105e8:	71fb      	strb	r3, [r7, #7]
    {
        /* Cannot change Region in running state */
        return LmHandlerPingSlotReq(pingPeriodicity);
    }
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 80105ea:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	370c      	adds	r7, #12
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bc80      	pop	{r7}
 80105f6:	4770      	bx	lr

080105f8 <LmHandlerGetBeaconState>:

LmHandlerErrorStatus_t LmHandlerGetBeaconState(BeaconState_t *beaconState)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
    *beaconState =  mibReq.Param.BeaconState;
    return LORAMAC_HANDLER_SUCCESS;
#else /* LORAMAC_CLASSB_ENABLED == 0 */
    return LORAMAC_HANDLER_ERROR;
 8010600:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8010604:	4618      	mov	r0, r3
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	bc80      	pop	{r7}
 801060c:	4770      	bx	lr

0801060e <LmHandlerGetNwkKey>:

LmHandlerErrorStatus_t LmHandlerGetNwkKey( uint8_t *nwkKey )
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b084      	sub	sp, #16
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (nwkKey == NULL)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d102      	bne.n	8010622 <LmHandlerGetNwkKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801061c:	f04f 33ff 	mov.w	r3, #4294967295
 8010620:	e013      	b.n	801064a <LmHandlerGetNwkKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_KEY, &keyItem))
 8010622:	f107 030c 	add.w	r3, r7, #12
 8010626:	4619      	mov	r1, r3
 8010628:	2001      	movs	r0, #1
 801062a:	f7fe fc1b 	bl	800ee64 <SecureElementGetKeyByID>
 801062e:	4603      	mov	r3, r0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d002      	beq.n	801063a <LmHandlerGetNwkKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 8010634:	f04f 33ff 	mov.w	r3, #4294967295
 8010638:	e007      	b.n	801064a <LmHandlerGetNwkKey+0x3c>
    }
    UTIL_MEM_cpy_8( nwkKey, keyItem->KeyValue, 16 );
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	3301      	adds	r3, #1
 801063e:	2210      	movs	r2, #16
 8010640:	4619      	mov	r1, r3
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f00e fc04 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <LmHandlerSetNwkKey>:

LmHandlerErrorStatus_t LmHandlerSetNwkKey( uint8_t *nwkKey )
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b08c      	sub	sp, #48	; 0x30
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 801065a:	f7ff f83b 	bl	800f6d4 <LmHandlerJoinStatus>
 801065e:	4603      	mov	r3, r0
 8010660:	2b01      	cmp	r3, #1
 8010662:	d010      	beq.n	8010686 <LmHandlerSetNwkKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_NWK_KEY;
 8010664:	2308      	movs	r3, #8
 8010666:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NwkKey = nwkKey;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 801066c:	f107 030c 	add.w	r3, r7, #12
 8010670:	4618      	mov	r0, r3
 8010672:	f004 fab7 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010676:	4603      	mov	r3, r0
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <LmHandlerSetNwkKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 801067c:	f04f 33ff 	mov.w	r3, #4294967295
 8010680:	e003      	b.n	801068a <LmHandlerSetNwkKey+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8010682:	2300      	movs	r3, #0
 8010684:	e001      	b.n	801068a <LmHandlerSetNwkKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 8010686:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801068a:	4618      	mov	r0, r3
 801068c:	3730      	adds	r7, #48	; 0x30
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <LmHandlerGetAppKey>:

LmHandlerErrorStatus_t LmHandlerGetAppKey( uint8_t *appKey )
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (appKey == NULL)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d102      	bne.n	80106a6 <LmHandlerGetAppKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80106a0:	f04f 33ff 	mov.w	r3, #4294967295
 80106a4:	e013      	b.n	80106ce <LmHandlerGetAppKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_KEY, &keyItem))
 80106a6:	f107 030c 	add.w	r3, r7, #12
 80106aa:	4619      	mov	r1, r3
 80106ac:	2000      	movs	r0, #0
 80106ae:	f7fe fbd9 	bl	800ee64 <SecureElementGetKeyByID>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d002      	beq.n	80106be <LmHandlerGetAppKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 80106b8:	f04f 33ff 	mov.w	r3, #4294967295
 80106bc:	e007      	b.n	80106ce <LmHandlerGetAppKey+0x3c>
    }
    UTIL_MEM_cpy_8( appKey, keyItem->KeyValue, 16 );
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3301      	adds	r3, #1
 80106c2:	2210      	movs	r2, #16
 80106c4:	4619      	mov	r1, r3
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f00e fbc2 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <LmHandlerSetAppKey>:

LmHandlerErrorStatus_t LmHandlerSetAppKey( uint8_t *appKey )
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b08c      	sub	sp, #48	; 0x30
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80106de:	f7fe fff9 	bl	800f6d4 <LmHandlerJoinStatus>
 80106e2:	4603      	mov	r3, r0
 80106e4:	2b01      	cmp	r3, #1
 80106e6:	d010      	beq.n	801070a <LmHandlerSetAppKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_APP_KEY;
 80106e8:	2307      	movs	r3, #7
 80106ea:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AppKey = appKey;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80106f0:	f107 030c 	add.w	r3, r7, #12
 80106f4:	4618      	mov	r0, r3
 80106f6:	f004 fa75 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <LmHandlerSetAppKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010700:	f04f 33ff 	mov.w	r3, #4294967295
 8010704:	e003      	b.n	801070e <LmHandlerSetAppKey+0x38>
        }
        return LORAMAC_HANDLER_SUCCESS;
 8010706:	2300      	movs	r3, #0
 8010708:	e001      	b.n	801070e <LmHandlerSetAppKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 801070a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801070e:	4618      	mov	r0, r3
 8010710:	3730      	adds	r7, #48	; 0x30
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <LmHandlerGetNwkSKey>:

LmHandlerErrorStatus_t LmHandlerGetNwkSKey( uint8_t *nwkSKey )
{
 8010716:	b580      	push	{r7, lr}
 8010718:	b084      	sub	sp, #16
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (nwkSKey == NULL)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d102      	bne.n	801072a <LmHandlerGetNwkSKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010724:	f04f 33ff 	mov.w	r3, #4294967295
 8010728:	e013      	b.n	8010752 <LmHandlerGetNwkSKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(NWK_S_KEY, &keyItem))
 801072a:	f107 030c 	add.w	r3, r7, #12
 801072e:	4619      	mov	r1, r3
 8010730:	2002      	movs	r0, #2
 8010732:	f7fe fb97 	bl	800ee64 <SecureElementGetKeyByID>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <LmHandlerGetNwkSKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 801073c:	f04f 33ff 	mov.w	r3, #4294967295
 8010740:	e007      	b.n	8010752 <LmHandlerGetNwkSKey+0x3c>
    }
    UTIL_MEM_cpy_8( nwkSKey, keyItem->KeyValue, 16 );
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	3301      	adds	r3, #1
 8010746:	2210      	movs	r2, #16
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f00e fb80 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 8010750:	2300      	movs	r3, #0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <LmHandlerSetNwkSKey>:

LmHandlerErrorStatus_t LmHandlerSetNwkSKey( uint8_t *nwkSKey )
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b08c      	sub	sp, #48	; 0x30
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8010762:	f7fe ffb7 	bl	800f6d4 <LmHandlerJoinStatus>
 8010766:	4603      	mov	r3, r0
 8010768:	2b01      	cmp	r3, #1
 801076a:	d010      	beq.n	801078e <LmHandlerSetNwkSKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_NWK_S_KEY;
 801076c:	2309      	movs	r3, #9
 801076e:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NwkSKey = nwkSKey;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8010774:	f107 030c 	add.w	r3, r7, #12
 8010778:	4618      	mov	r0, r3
 801077a:	f004 fa33 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <LmHandlerSetNwkSKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295
 8010788:	e003      	b.n	8010792 <LmHandlerSetNwkSKey+0x38>
        }

        return LORAMAC_HANDLER_SUCCESS;
 801078a:	2300      	movs	r3, #0
 801078c:	e001      	b.n	8010792 <LmHandlerSetNwkSKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 801078e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010792:	4618      	mov	r0, r3
 8010794:	3730      	adds	r7, #48	; 0x30
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}

0801079a <LmHandlerGetAppSKey>:

LmHandlerErrorStatus_t LmHandlerGetAppSKey( uint8_t *appSKey )
{
 801079a:	b580      	push	{r7, lr}
 801079c:	b084      	sub	sp, #16
 801079e:	af00      	add	r7, sp, #0
 80107a0:	6078      	str	r0, [r7, #4]
    Key_t *keyItem;
    if (appSKey == NULL)
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d102      	bne.n	80107ae <LmHandlerGetAppSKey+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 80107a8:	f04f 33ff 	mov.w	r3, #4294967295
 80107ac:	e013      	b.n	80107d6 <LmHandlerGetAppSKey+0x3c>
    }

    if (SECURE_ELEMENT_SUCCESS != SecureElementGetKeyByID(APP_S_KEY, &keyItem))
 80107ae:	f107 030c 	add.w	r3, r7, #12
 80107b2:	4619      	mov	r1, r3
 80107b4:	2003      	movs	r0, #3
 80107b6:	f7fe fb55 	bl	800ee64 <SecureElementGetKeyByID>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d002      	beq.n	80107c6 <LmHandlerGetAppSKey+0x2c>
    {
        return LORAMAC_HANDLER_ERROR;
 80107c0:	f04f 33ff 	mov.w	r3, #4294967295
 80107c4:	e007      	b.n	80107d6 <LmHandlerGetAppSKey+0x3c>
    }
    UTIL_MEM_cpy_8( appSKey, keyItem->KeyValue, 16 );
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	3301      	adds	r3, #1
 80107ca:	2210      	movs	r2, #16
 80107cc:	4619      	mov	r1, r3
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f00e fb3e 	bl	801ee50 <UTIL_MEM_cpy_8>
    return LORAMAC_HANDLER_SUCCESS;
 80107d4:	2300      	movs	r3, #0
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3710      	adds	r7, #16
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}

080107de <LmHandlerSetAppSKey>:

LmHandlerErrorStatus_t LmHandlerSetAppSKey( uint8_t *appSKey )
{
 80107de:	b580      	push	{r7, lr}
 80107e0:	b08c      	sub	sp, #48	; 0x30
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
    /* Not yet joined */
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80107e6:	f7fe ff75 	bl	800f6d4 <LmHandlerJoinStatus>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d010      	beq.n	8010812 <LmHandlerSetAppSKey+0x34>
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type = MIB_APP_S_KEY;
 80107f0:	230a      	movs	r3, #10
 80107f2:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AppSKey = appSKey;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	613b      	str	r3, [r7, #16]
        if (LoRaMacMibSetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 80107f8:	f107 030c 	add.w	r3, r7, #12
 80107fc:	4618      	mov	r0, r3
 80107fe:	f004 f9f1 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
 8010802:	4603      	mov	r3, r0
 8010804:	2b00      	cmp	r3, #0
 8010806:	d002      	beq.n	801080e <LmHandlerSetAppSKey+0x30>
        {
            return LORAMAC_HANDLER_ERROR;
 8010808:	f04f 33ff 	mov.w	r3, #4294967295
 801080c:	e003      	b.n	8010816 <LmHandlerSetAppSKey+0x38>
        }

        return LORAMAC_HANDLER_SUCCESS;
 801080e:	2300      	movs	r3, #0
 8010810:	e001      	b.n	8010816 <LmHandlerSetAppSKey+0x38>
    }
    else
    {
        /* Cannot change Keys in running state */
        return LORAMAC_HANDLER_ERROR;
 8010812:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010816:	4618      	mov	r0, r3
 8010818:	3730      	adds	r7, #48	; 0x30
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}
	...

08010820 <DisplayClassUpdate>:

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af02      	add	r7, sp, #8
 8010826:	4603      	mov	r3, r0
 8010828:	71fb      	strb	r3, [r7, #7]
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 801082a:	79fb      	ldrb	r3, [r7, #7]
 801082c:	4a06      	ldr	r2, [pc, #24]	; (8010848 <DisplayClassUpdate+0x28>)
 801082e:	5cd3      	ldrb	r3, [r2, r3]
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	4b06      	ldr	r3, [pc, #24]	; (801084c <DisplayClassUpdate+0x2c>)
 8010834:	2200      	movs	r2, #0
 8010836:	2100      	movs	r1, #0
 8010838:	2002      	movs	r0, #2
 801083a:	f00e f817 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 801083e:	bf00      	nop
 8010840:	3708      	adds	r7, #8
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}
 8010846:	bf00      	nop
 8010848:	08022888 	.word	0x08022888
 801084c:	0802286c 	.word	0x0802286c

08010850 <NvmDataMgmtEvent>:

static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	4603      	mov	r3, r0
 8010858:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801085a:	bf00      	nop
 801085c:	370c      	adds	r7, #12
 801085e:	46bd      	mov	sp, r7
 8010860:	bc80      	pop	{r7}
 8010862:	4770      	bx	lr

08010864 <NvmDataMgmtStore>:

uint16_t NvmDataMgmtStore( void )
{
 8010864:	b480      	push	{r7}
 8010866:	af00      	add	r7, sp, #0

    // Resume LoRaMac
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
 8010868:	2300      	movs	r3, #0
#endif
}
 801086a:	4618      	mov	r0, r3
 801086c:	46bd      	mov	sp, r7
 801086e:	bc80      	pop	{r7}
 8010870:	4770      	bx	lr

08010872 <NvmDataMgmtRestore>:

uint16_t NvmDataMgmtRestore( void )
{
 8010872:	b480      	push	{r7}
 8010874:	af00      	add	r7, sp, #0
                  sizeof( LoRaMacNvmData_t ) )
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	46bd      	mov	sp, r7
 801087c:	bc80      	pop	{r7}
 801087e:	4770      	bx	lr

08010880 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   // To be initialized by LmHandler
    .OnPackageProcessEvent = NULL,                             // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 8010880:	b480      	push	{r7}
 8010882:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 8010884:	4b02      	ldr	r3, [pc, #8]	; (8010890 <LmhpCompliancePackageFactory+0x10>)
}
 8010886:	4618      	mov	r0, r3
 8010888:	46bd      	mov	sp, r7
 801088a:	bc80      	pop	{r7}
 801088c:	4770      	bx	lr
 801088e:	bf00      	nop
 8010890:	200000d0 	.word	0x200000d0

08010894 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 8010894:	b480      	push	{r7}
 8010896:	b085      	sub	sp, #20
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	4613      	mov	r3, r2
 80108a0:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00f      	beq.n	80108c8 <LmhpComplianceInit+0x34>
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d00c      	beq.n	80108c8 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 80108ae:	4a0c      	ldr	r2, [pc, #48]	; (80108e0 <LmhpComplianceInit+0x4c>)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80108b4:	4a0b      	ldr	r2, [pc, #44]	; (80108e4 <LmhpComplianceInit+0x50>)
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80108ba:	4a0a      	ldr	r2, [pc, #40]	; (80108e4 <LmhpComplianceInit+0x50>)
 80108bc:	79fb      	ldrb	r3, [r7, #7]
 80108be:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80108c0:	4b08      	ldr	r3, [pc, #32]	; (80108e4 <LmhpComplianceInit+0x50>)
 80108c2:	2201      	movs	r2, #1
 80108c4:	701a      	strb	r2, [r3, #0]
 80108c6:	e006      	b.n	80108d6 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 80108c8:	4b05      	ldr	r3, [pc, #20]	; (80108e0 <LmhpComplianceInit+0x4c>)
 80108ca:	2200      	movs	r2, #0
 80108cc:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80108ce:	4b05      	ldr	r3, [pc, #20]	; (80108e4 <LmhpComplianceInit+0x50>)
 80108d0:	2200      	movs	r2, #0
 80108d2:	701a      	strb	r2, [r3, #0]
    }
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	bc80      	pop	{r7}
 80108de:	4770      	bx	lr
 80108e0:	200033ec 	.word	0x200033ec
 80108e4:	200033d8 	.word	0x200033d8

080108e8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 80108ec:	4b02      	ldr	r3, [pc, #8]	; (80108f8 <LmhpComplianceIsInitialized+0x10>)
 80108ee:	781b      	ldrb	r3, [r3, #0]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bc80      	pop	{r7}
 80108f6:	4770      	bx	lr
 80108f8:	200033d8 	.word	0x200033d8

080108fc <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 80108fc:	b480      	push	{r7}
 80108fe:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010900:	4b07      	ldr	r3, [pc, #28]	; (8010920 <LmhpComplianceIsRunning+0x24>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f083 0301 	eor.w	r3, r3, #1
 8010908:	b2db      	uxtb	r3, r3
 801090a:	2b00      	cmp	r3, #0
 801090c:	d001      	beq.n	8010912 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 801090e:	2300      	movs	r3, #0
 8010910:	e001      	b.n	8010916 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8010912:	4b03      	ldr	r3, [pc, #12]	; (8010920 <LmhpComplianceIsRunning+0x24>)
 8010914:	785b      	ldrb	r3, [r3, #1]
}
 8010916:	4618      	mov	r0, r3
 8010918:	46bd      	mov	sp, r7
 801091a:	bc80      	pop	{r7}
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	200033d8 	.word	0x200033d8

08010924 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm(McpsConfirm_t *mcpsConfirm)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
    if (ComplianceTestState.Initialized == false)
 801092c:	4b0f      	ldr	r3, [pc, #60]	; (801096c <LmhpComplianceOnMcpsConfirm+0x48>)
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	f083 0301 	eor.w	r3, r3, #1
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d112      	bne.n	8010960 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 801093a:	4b0c      	ldr	r3, [pc, #48]	; (801096c <LmhpComplianceOnMcpsConfirm+0x48>)
 801093c:	785b      	ldrb	r3, [r3, #1]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00f      	beq.n	8010962 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	781b      	ldrb	r3, [r3, #0]
    if ((ComplianceTestState.IsRunning == true) &&
 8010946:	2b01      	cmp	r3, #1
 8010948:	d10b      	bne.n	8010962 <LmhpComplianceOnMcpsConfirm+0x3e>
        (mcpsConfirm->AckReceived != 0))
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	791b      	ldrb	r3, [r3, #4]
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 801094e:	2b00      	cmp	r3, #0
 8010950:	d007      	beq.n	8010962 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010952:	4b06      	ldr	r3, [pc, #24]	; (801096c <LmhpComplianceOnMcpsConfirm+0x48>)
 8010954:	899b      	ldrh	r3, [r3, #12]
 8010956:	3301      	adds	r3, #1
 8010958:	b29a      	uxth	r2, r3
 801095a:	4b04      	ldr	r3, [pc, #16]	; (801096c <LmhpComplianceOnMcpsConfirm+0x48>)
 801095c:	819a      	strh	r2, [r3, #12]
 801095e:	e000      	b.n	8010962 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010960:	bf00      	nop
    }
}
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	bc80      	pop	{r7}
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	200033d8 	.word	0x200033d8

08010970 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010978:	4b12      	ldr	r3, [pc, #72]	; (80109c4 <LmhpComplianceOnMlmeConfirm+0x54>)
 801097a:	781b      	ldrb	r3, [r3, #0]
 801097c:	f083 0301 	eor.w	r3, r3, #1
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b00      	cmp	r3, #0
 8010984:	d116      	bne.n	80109b4 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010986:	4b0f      	ldr	r3, [pc, #60]	; (80109c4 <LmhpComplianceOnMlmeConfirm+0x54>)
 8010988:	785b      	ldrb	r3, [r3, #1]
 801098a:	f083 0301 	eor.w	r3, r3, #1
 801098e:	b2db      	uxtb	r3, r3
 8010990:	2b00      	cmp	r3, #0
 8010992:	d111      	bne.n	80109b8 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	2b04      	cmp	r3, #4
 801099a:	d10e      	bne.n	80109ba <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 801099c:	4b09      	ldr	r3, [pc, #36]	; (80109c4 <LmhpComplianceOnMlmeConfirm+0x54>)
 801099e:	2201      	movs	r2, #1
 80109a0:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	7a1a      	ldrb	r2, [r3, #8]
 80109a6:	4b07      	ldr	r3, [pc, #28]	; (80109c4 <LmhpComplianceOnMlmeConfirm+0x54>)
 80109a8:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	7a5a      	ldrb	r2, [r3, #9]
 80109ae:	4b05      	ldr	r3, [pc, #20]	; (80109c4 <LmhpComplianceOnMlmeConfirm+0x54>)
 80109b0:	741a      	strb	r2, [r3, #16]
 80109b2:	e002      	b.n	80109ba <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80109b4:	bf00      	nop
 80109b6:	e000      	b.n	80109ba <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80109b8:	bf00      	nop
    }
}
 80109ba:	370c      	adds	r7, #12
 80109bc:	46bd      	mov	sp, r7
 80109be:	bc80      	pop	{r7}
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	200033d8 	.word	0x200033d8

080109c8 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 80109c8:	b590      	push	{r4, r7, lr}
 80109ca:	b083      	sub	sp, #12
 80109cc:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80109ce:	4b33      	ldr	r3, [pc, #204]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	f083 0301 	eor.w	r3, r3, #1
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d002      	beq.n	80109e2 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 80109dc:	f04f 33ff 	mov.w	r3, #4294967295
 80109e0:	e058      	b.n	8010a94 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.IsRunning == false )
 80109e2:	4b2e      	ldr	r3, [pc, #184]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	f083 0301 	eor.w	r3, r3, #1
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d001      	beq.n	80109f4 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 80109f0:	2300      	movs	r3, #0
 80109f2:	e04f      	b.n	8010a94 <LmhpComplianceTxProcess+0xcc>
    }

    if( ComplianceTestState.LinkCheck == true )
 80109f4:	4b29      	ldr	r3, [pc, #164]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 80109f6:	7b9b      	ldrb	r3, [r3, #14]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d019      	beq.n	8010a30 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 80109fc:	4b27      	ldr	r3, [pc, #156]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 80109fe:	2200      	movs	r2, #0
 8010a00:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8010a02:	4b26      	ldr	r3, [pc, #152]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a04:	2203      	movs	r2, #3
 8010a06:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010a08:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a0a:	689b      	ldr	r3, [r3, #8]
 8010a0c:	2205      	movs	r2, #5
 8010a0e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010a10:	4b22      	ldr	r3, [pc, #136]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	3301      	adds	r3, #1
 8010a16:	4a21      	ldr	r2, [pc, #132]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a18:	7bd2      	ldrb	r2, [r2, #15]
 8010a1a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010a1c:	4b1f      	ldr	r3, [pc, #124]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	3302      	adds	r3, #2
 8010a22:	4a1e      	ldr	r2, [pc, #120]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a24:	7c12      	ldrb	r2, [r2, #16]
 8010a26:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010a28:	4b1c      	ldr	r3, [pc, #112]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	709a      	strb	r2, [r3, #2]
 8010a2e:	e01c      	b.n	8010a6a <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010a30:	4b1a      	ldr	r3, [pc, #104]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a32:	789b      	ldrb	r3, [r3, #2]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d005      	beq.n	8010a44 <LmhpComplianceTxProcess+0x7c>
 8010a38:	2b04      	cmp	r3, #4
 8010a3a:	d116      	bne.n	8010a6a <LmhpComplianceTxProcess+0xa2>
        {
        case 4:
            ComplianceTestState.State = 1;
 8010a3c:	4b17      	ldr	r3, [pc, #92]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a3e:	2201      	movs	r2, #1
 8010a40:	709a      	strb	r2, [r3, #2]
            break;
 8010a42:	e012      	b.n	8010a6a <LmhpComplianceTxProcess+0xa2>
        case 1:
            ComplianceTestState.DataBufferSize = 2;
 8010a44:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a46:	2202      	movs	r2, #2
 8010a48:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010a4a:	4b14      	ldr	r3, [pc, #80]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a4c:	899b      	ldrh	r3, [r3, #12]
 8010a4e:	0a1b      	lsrs	r3, r3, #8
 8010a50:	b29a      	uxth	r2, r3
 8010a52:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	b2d2      	uxtb	r2, r2
 8010a58:	701a      	strb	r2, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010a5a:	4b10      	ldr	r3, [pc, #64]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a5c:	899a      	ldrh	r2, [r3, #12]
 8010a5e:	4b0f      	ldr	r3, [pc, #60]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	3301      	adds	r3, #1
 8010a64:	b2d2      	uxtb	r2, r2
 8010a66:	701a      	strb	r2, [r3, #0]
            break;
 8010a68:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 8010a6a:	23e0      	movs	r3, #224	; 0xe0
 8010a6c:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a70:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010a72:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010a74:	4b09      	ldr	r3, [pc, #36]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a76:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 8010a78:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    // Schedule next transmission
    TimerStart( &ComplianceTxNextPacketTimer );
 8010a7a:	4809      	ldr	r0, [pc, #36]	; (8010aa0 <LmhpComplianceTxProcess+0xd8>)
 8010a7c:	f00e ff60 	bl	801f940 <UTIL_TIMER_Start>

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8010a80:	4b08      	ldr	r3, [pc, #32]	; (8010aa4 <LmhpComplianceTxProcess+0xdc>)
 8010a82:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8010a84:	4b05      	ldr	r3, [pc, #20]	; (8010a9c <LmhpComplianceTxProcess+0xd4>)
 8010a86:	78db      	ldrb	r3, [r3, #3]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	4638      	mov	r0, r7
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	2200      	movs	r2, #0
 8010a90:	47a0      	blx	r4
 8010a92:	4603      	mov	r3, r0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd90      	pop	{r4, r7, pc}
 8010a9c:	200033d8 	.word	0x200033d8
 8010aa0:	200033c0 	.word	0x200033c0
 8010aa4:	200000d0 	.word	0x200000d0

08010aa8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b0a2      	sub	sp, #136	; 0x88
 8010aac:	af02      	add	r7, sp, #8
 8010aae:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010ab0:	4ba2      	ldr	r3, [pc, #648]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f083 0301 	eor.w	r3, r3, #1
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f040 81c0 	bne.w	8010e40 <LmhpComplianceOnMcpsIndication+0x398>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	7b5b      	ldrb	r3, [r3, #13]
 8010ac4:	f083 0301 	eor.w	r3, r3, #1
 8010ac8:	b2db      	uxtb	r3, r3
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f040 81ba 	bne.w	8010e44 <LmhpComplianceOnMcpsIndication+0x39c>
    {
        return;
    }

    if ((ComplianceTestState.IsRunning == true) &&
 8010ad0:	4b9a      	ldr	r3, [pc, #616]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010ad2:	785b      	ldrb	r3, [r3, #1]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d00c      	beq.n	8010af2 <LmhpComplianceOnMcpsIndication+0x4a>
        (mcpsIndication->AckReceived == 0))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	7b9b      	ldrb	r3, [r3, #14]
 8010adc:	f083 0301 	eor.w	r3, r3, #1
 8010ae0:	b2db      	uxtb	r3, r3
    if ((ComplianceTestState.IsRunning == true) &&
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d005      	beq.n	8010af2 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010ae6:	4b95      	ldr	r3, [pc, #596]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010ae8:	899b      	ldrh	r3, [r3, #12]
 8010aea:	3301      	adds	r3, #1
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	4b93      	ldr	r3, [pc, #588]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010af0:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	78db      	ldrb	r3, [r3, #3]
 8010af6:	2be0      	cmp	r3, #224	; 0xe0
 8010af8:	f040 81a6 	bne.w	8010e48 <LmhpComplianceOnMcpsIndication+0x3a0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010afc:	4b8f      	ldr	r3, [pc, #572]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010afe:	785b      	ldrb	r3, [r3, #1]
 8010b00:	f083 0301 	eor.w	r3, r3, #1
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d060      	beq.n	8010bcc <LmhpComplianceOnMcpsIndication+0x124>
    {
        // Check compliance test enable command (i)
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	7b1b      	ldrb	r3, [r3, #12]
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	f040 819f 	bne.w	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	f040 8199 	bne.w	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	689b      	ldr	r3, [r3, #8]
 8010b24:	3301      	adds	r3, #1
 8010b26:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	f040 8192 	bne.w	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	3302      	adds	r3, #2
 8010b34:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010b36:	2b01      	cmp	r3, #1
 8010b38:	f040 818b 	bne.w	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	689b      	ldr	r3, [r3, #8]
 8010b40:	3303      	adds	r3, #3
 8010b42:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	f040 8184 	bne.w	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        {
            MibRequestConfirm_t mibReq;

            // Initialize compliance test mode context
            ComplianceTestState.IsTxConfirmed = false;
 8010b4a:	4b7c      	ldr	r3, [pc, #496]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010b50:	4b7a      	ldr	r3, [pc, #488]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b52:	22e0      	movs	r2, #224	; 0xe0
 8010b54:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010b56:	4b79      	ldr	r3, [pc, #484]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b58:	2202      	movs	r2, #2
 8010b5a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 8010b5c:	4b77      	ldr	r3, [pc, #476]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b5e:	2200      	movs	r2, #0
 8010b60:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8010b62:	4b76      	ldr	r3, [pc, #472]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b64:	2200      	movs	r2, #0
 8010b66:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010b68:	4b74      	ldr	r3, [pc, #464]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 8010b6e:	4b73      	ldr	r3, [pc, #460]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 8010b74:	4b71      	ldr	r3, [pc, #452]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b76:	2201      	movs	r2, #1
 8010b78:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 8010b7a:	4b70      	ldr	r3, [pc, #448]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	709a      	strb	r2, [r3, #2]

            // Enable ADR while in compliance test mode
            mibReq.Type = MIB_ADR;
 8010b80:	2304      	movs	r3, #4
 8010b82:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AdrEnable = true;
 8010b84:	2301      	movs	r3, #1
 8010b86:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8010b88:	f107 0308 	add.w	r3, r7, #8
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f004 f829 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

            // Disable duty cycle enforcement while in compliance test mode
            LoRaMacTestSetDutyCycleOn( false );
 8010b92:	2000      	movs	r0, #0
 8010b94:	f004 fd9a 	bl	80156cc <LoRaMacTestSetDutyCycleOn>

            // Stop peripherals
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8010b98:	4b69      	ldr	r3, [pc, #420]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d003      	beq.n	8010baa <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 8010ba2:	4b67      	ldr	r3, [pc, #412]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	685b      	ldr	r3, [r3, #4]
 8010ba8:	4798      	blx	r3
            }
            // Initialize compliance protocol transmission timer
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 8010baa:	2300      	movs	r3, #0
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	4b65      	ldr	r3, [pc, #404]	; (8010d44 <LmhpComplianceOnMcpsIndication+0x29c>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8010bb6:	4864      	ldr	r0, [pc, #400]	; (8010d48 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010bb8:	f00e fe8c 	bl	801f8d4 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010bbc:	f241 3188 	movw	r1, #5000	; 0x1388
 8010bc0:	4861      	ldr	r0, [pc, #388]	; (8010d48 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010bc2:	f00e ff9b 	bl	801fafc <UTIL_TIMER_SetPeriod>

            // Confirm compliance test protocol activation
            LmhpComplianceTxProcess( );
 8010bc6:	f7ff feff 	bl	80109c8 <LmhpComplianceTxProcess>
 8010bca:	e142      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
    }
    else
    {

        // Parse compliance test protocol
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	781a      	ldrb	r2, [r3, #0]
 8010bd2:	4b5a      	ldr	r3, [pc, #360]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010bd4:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8010bd6:	4b59      	ldr	r3, [pc, #356]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010bd8:	789b      	ldrb	r3, [r3, #2]
 8010bda:	2b0a      	cmp	r3, #10
 8010bdc:	f200 8136 	bhi.w	8010e4c <LmhpComplianceOnMcpsIndication+0x3a4>
 8010be0:	a201      	add	r2, pc, #4	; (adr r2, 8010be8 <LmhpComplianceOnMcpsIndication+0x140>)
 8010be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010be6:	bf00      	nop
 8010be8:	08010c15 	.word	0x08010c15
 8010bec:	08010c5f 	.word	0x08010c5f
 8010bf0:	08010c67 	.word	0x08010c67
 8010bf4:	08010c75 	.word	0x08010c75
 8010bf8:	08010c83 	.word	0x08010c83
 8010bfc:	08010cdb 	.word	0x08010cdb
 8010c00:	08010ced 	.word	0x08010ced
 8010c04:	08010d51 	.word	0x08010d51
 8010c08:	08010df9 	.word	0x08010df9
 8010c0c:	08010e0b 	.word	0x08010e0b
 8010c10:	08010e25 	.word	0x08010e25
        {
        case 0: // Check compliance test disable command (ii)
            {
                MibRequestConfirm_t mibReq;

                TimerStop( &ComplianceTxNextPacketTimer );
 8010c14:	484c      	ldr	r0, [pc, #304]	; (8010d48 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010c16:	f00e ff01 	bl	801fa1c <UTIL_TIMER_Stop>

                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010c1a:	4b48      	ldr	r3, [pc, #288]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010c20:	4b46      	ldr	r3, [pc, #280]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 8010c26:	2304      	movs	r3, #4
 8010c28:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010c2a:	4b45      	ldr	r3, [pc, #276]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010c32:	f107 0308 	add.w	r3, r7, #8
 8010c36:	4618      	mov	r0, r3
 8010c38:	f003 ffd4 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010c3c:	4b40      	ldr	r3, [pc, #256]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	785b      	ldrb	r3, [r3, #1]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f004 fd42 	bl	80156cc <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010c48:	4b3d      	ldr	r3, [pc, #244]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f000 80fe 	beq.w	8010e50 <LmhpComplianceOnMcpsIndication+0x3a8>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010c54:	4b3a      	ldr	r3, [pc, #232]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	4798      	blx	r3
                }
            }
            break;
 8010c5c:	e0f8      	b.n	8010e50 <LmhpComplianceOnMcpsIndication+0x3a8>
        case 1: // (iii, iv)
            ComplianceTestState.DataBufferSize = 2;
 8010c5e:	4b37      	ldr	r3, [pc, #220]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c60:	2202      	movs	r2, #2
 8010c62:	719a      	strb	r2, [r3, #6]
            break;
 8010c64:	e0f5      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 2: // Enable confirmed messages (v)
            ComplianceTestState.IsTxConfirmed = true;
 8010c66:	4b35      	ldr	r3, [pc, #212]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c68:	2201      	movs	r2, #1
 8010c6a:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c6c:	4b33      	ldr	r3, [pc, #204]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c6e:	2201      	movs	r2, #1
 8010c70:	709a      	strb	r2, [r3, #2]
            break;
 8010c72:	e0ee      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 3:  // Disable confirmed messages (vi)
            ComplianceTestState.IsTxConfirmed = false;
 8010c74:	4b31      	ldr	r3, [pc, #196]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c76:	2200      	movs	r2, #0
 8010c78:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.State = 1;
 8010c7a:	4b30      	ldr	r3, [pc, #192]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c7c:	2201      	movs	r2, #1
 8010c7e:	709a      	strb	r2, [r3, #2]
            break;
 8010c80:	e0e7      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 4: // (vii)
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	7b1a      	ldrb	r2, [r3, #12]
 8010c86:	4b2d      	ldr	r3, [pc, #180]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c88:	719a      	strb	r2, [r3, #6]

            ComplianceTestState.DataBuffer[0] = 4;
 8010c8a:	4b2c      	ldr	r3, [pc, #176]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010c8c:	689b      	ldr	r3, [r3, #8]
 8010c8e:	2204      	movs	r2, #4
 8010c90:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010c92:	2301      	movs	r3, #1
 8010c94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010c98:	e012      	b.n	8010cc0 <LmhpComplianceOnMcpsIndication+0x218>
            {
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	689a      	ldr	r2, [r3, #8]
 8010c9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010ca2:	4413      	add	r3, r2
 8010ca4:	781a      	ldrb	r2, [r3, #0]
 8010ca6:	4b25      	ldr	r3, [pc, #148]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010ca8:	6899      	ldr	r1, [r3, #8]
 8010caa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010cae:	440b      	add	r3, r1
 8010cb0:	3201      	adds	r2, #1
 8010cb2:	b2d2      	uxtb	r2, r2
 8010cb4:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8010cb6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010cba:	3301      	adds	r3, #1
 8010cbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010cc0:	4b1e      	ldr	r3, [pc, #120]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010cc2:	795a      	ldrb	r2, [r3, #5]
 8010cc4:	4b1d      	ldr	r3, [pc, #116]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010cc6:	799b      	ldrb	r3, [r3, #6]
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	bf28      	it	cs
 8010ccc:	4613      	movcs	r3, r2
 8010cce:	b2db      	uxtb	r3, r3
 8010cd0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d3e0      	bcc.n	8010c9a <LmhpComplianceOnMcpsIndication+0x1f2>
            }
            break;
 8010cd8:	e0bb      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 5: // (viii)
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_LINK_CHECK;
 8010cda:	2304      	movs	r3, #4
 8010cdc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

                LoRaMacMlmeRequest( &mlmeReq );
 8010ce0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f004 fabb 	bl	8015260 <LoRaMacMlmeRequest>
            }
            break;
 8010cea:	e0b2      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 6: // (ix)
            {
                MibRequestConfirm_t mibReq;

                TimerStop(&ComplianceTxNextPacketTimer);
 8010cec:	4816      	ldr	r0, [pc, #88]	; (8010d48 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010cee:	f00e fe95 	bl	801fa1c <UTIL_TIMER_Stop>

                // Disable TestMode and revert back to normal operation
                // Disable compliance test mode and reset the downlink counter.
                ComplianceTestState.DownLinkCounter = 0;
 8010cf2:	4b12      	ldr	r3, [pc, #72]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	819a      	strh	r2, [r3, #12]
                ComplianceTestState.IsRunning = false;
 8010cf8:	4b10      	ldr	r3, [pc, #64]	; (8010d3c <LmhpComplianceOnMcpsIndication+0x294>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	705a      	strb	r2, [r3, #1]

                // Restore previous ADR seeting
                mibReq.Type = MIB_ADR;
 8010cfe:	2304      	movs	r3, #4
 8010d00:	723b      	strb	r3, [r7, #8]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010d02:	4b0f      	ldr	r3, [pc, #60]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010d0a:	f107 0308 	add.w	r3, r7, #8
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f003 ff68 	bl	8014be4 <LoRaMacMibSetRequestConfirm>

                // Enable duty cycle enforcement
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010d14:	4b0a      	ldr	r3, [pc, #40]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	785b      	ldrb	r3, [r3, #1]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f004 fcd6 	bl	80156cc <LoRaMacTestSetDutyCycleOn>

                // Restart peripherals
                if( LmhpComplianceParams->StartPeripherals != NULL )
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	689b      	ldr	r3, [r3, #8]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d003      	beq.n	8010d32 <LmhpComplianceOnMcpsIndication+0x28a>
                {
                    LmhpComplianceParams->StartPeripherals( );
 8010d2a:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <LmhpComplianceOnMcpsIndication+0x298>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	689b      	ldr	r3, [r3, #8]
 8010d30:	4798      	blx	r3
                }

                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 8010d32:	4b06      	ldr	r3, [pc, #24]	; (8010d4c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d36:	2002      	movs	r0, #2
 8010d38:	4798      	blx	r3
            }
            break;
 8010d3a:	e08a      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
 8010d3c:	200033d8 	.word	0x200033d8
 8010d40:	200033ec 	.word	0x200033ec
 8010d44:	08010e69 	.word	0x08010e69
 8010d48:	200033c0 	.word	0x200033c0
 8010d4c:	200000d0 	.word	0x200000d0
        case 7: // (x)
            {
                MlmeReq_t mlmeReq;
                if( mcpsIndication->BufferSize == 3 )
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	7b1b      	ldrb	r3, [r3, #12]
 8010d54:	2b03      	cmp	r3, #3
 8010d56:	d113      	bne.n	8010d80 <LmhpComplianceOnMcpsIndication+0x2d8>
                {
                    mlmeReq.Type = MLME_TXCW;
 8010d58:	2305      	movs	r3, #5
 8010d5a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	3301      	adds	r3, #1
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	021b      	lsls	r3, r3, #8
 8010d68:	b21a      	sxth	r2, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	3302      	adds	r3, #2
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	b21b      	sxth	r3, r3
 8010d74:	4313      	orrs	r3, r2
 8010d76:	b21b      	sxth	r3, r3
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010d7e:	e032      	b.n	8010de6 <LmhpComplianceOnMcpsIndication+0x33e>
                }
                else if( mcpsIndication->BufferSize == 7 )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	7b1b      	ldrb	r3, [r3, #12]
 8010d84:	2b07      	cmp	r3, #7
 8010d86:	d12e      	bne.n	8010de6 <LmhpComplianceOnMcpsIndication+0x33e>
                {
                    mlmeReq.Type = MLME_TXCW_1;
 8010d88:	2306      	movs	r3, #6
 8010d8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	3301      	adds	r3, #1
 8010d94:	781b      	ldrb	r3, [r3, #0]
 8010d96:	021b      	lsls	r3, r3, #8
 8010d98:	b21a      	sxth	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	689b      	ldr	r3, [r3, #8]
 8010d9e:	3302      	adds	r3, #2
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	b21b      	sxth	r3, r3
 8010da4:	4313      	orrs	r3, r2
 8010da6:	b21b      	sxth	r3, r3
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	689b      	ldr	r3, [r3, #8]
 8010db2:	3303      	adds	r3, #3
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	041a      	lsls	r2, r3, #16
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	3304      	adds	r3, #4
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	021b      	lsls	r3, r3, #8
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	6892      	ldr	r2, [r2, #8]
 8010dc8:	3205      	adds	r2, #5
 8010dca:	7812      	ldrb	r2, [r2, #0]
 8010dcc:	4313      	orrs	r3, r2
 8010dce:	461a      	mov	r2, r3
 8010dd0:	2364      	movs	r3, #100	; 0x64
 8010dd2:	fb02 f303 	mul.w	r3, r2, r3
 8010dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	689b      	ldr	r3, [r3, #8]
 8010ddc:	3306      	adds	r3, #6
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	b25b      	sxtb	r3, r3
 8010de2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                }
                LoRaMacMlmeRequest( &mlmeReq );
 8010de6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010dea:	4618      	mov	r0, r3
 8010dec:	f004 fa38 	bl	8015260 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 8010df0:	4b19      	ldr	r3, [pc, #100]	; (8010e58 <LmhpComplianceOnMcpsIndication+0x3b0>)
 8010df2:	2201      	movs	r2, #1
 8010df4:	709a      	strb	r2, [r3, #2]
            }
            break;
 8010df6:	e02c      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 8: // Send DeviceTimeReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_DEVICE_TIME;
 8010df8:	230a      	movs	r3, #10
 8010dfa:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                LoRaMacMlmeRequest( &mlmeReq );
 8010dfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010e02:	4618      	mov	r0, r3
 8010e04:	f004 fa2c 	bl	8015260 <LoRaMacMlmeRequest>
            }
            break;
 8010e08:	e023      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 9: // Switch end device Class
            {
                MibRequestConfirm_t mibReq;

                mibReq.Type = MIB_DEVICE_CLASS;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	723b      	strb	r3, [r7, #8]
                // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	689b      	ldr	r3, [r3, #8]
 8010e12:	3301      	adds	r3, #1
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	733b      	strb	r3, [r7, #12]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8010e18:	f107 0308 	add.w	r3, r7, #8
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f003 fee1 	bl	8014be4 <LoRaMacMibSetRequestConfirm>
            }
            break;
 8010e22:	e016      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        case 10: // Send PingSlotInfoReq
            {
                MlmeReq_t mlmeReq;

                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010e24:	230d      	movs	r3, #13
 8010e26:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	689b      	ldr	r3, [r3, #8]
 8010e2e:	785b      	ldrb	r3, [r3, #1]
 8010e30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

                LoRaMacMlmeRequest( &mlmeReq );
 8010e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f004 fa11 	bl	8015260 <LoRaMacMlmeRequest>
            }
            break;
 8010e3e:	e008      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e40:	bf00      	nop
 8010e42:	e006      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e44:	bf00      	nop
 8010e46:	e004      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        return;
 8010e48:	bf00      	nop
 8010e4a:	e002      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
        default:
            break;
 8010e4c:	bf00      	nop
 8010e4e:	e000      	b.n	8010e52 <LmhpComplianceOnMcpsIndication+0x3aa>
            break;
 8010e50:	bf00      	nop
        }
    }
}
 8010e52:	3780      	adds	r7, #128	; 0x80
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	200033d8 	.word	0x200033d8

08010e5c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010e60:	bf00      	nop
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bc80      	pop	{r7}
 8010e66:	4770      	bx	lr

08010e68 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010e70:	f7ff fdaa 	bl	80109c8 <LmhpComplianceTxProcess>
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 8010e7c:	b590      	push	{r4, r7, lr}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010e82:	f00e fee5 	bl	801fc50 <UTIL_TIMER_GetCurrentTime>
 8010e86:	4603      	mov	r3, r0
 8010e88:	4a16      	ldr	r2, [pc, #88]	; (8010ee4 <OnRadioTxDone+0x68>)
 8010e8a:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010e8c:	4c16      	ldr	r4, [pc, #88]	; (8010ee8 <OnRadioTxDone+0x6c>)
 8010e8e:	463b      	mov	r3, r7
 8010e90:	4618      	mov	r0, r3
 8010e92:	f00e fa9b 	bl	801f3cc <SysTimeGet>
 8010e96:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010e9a:	463a      	mov	r2, r7
 8010e9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ea0:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010ea4:	4a11      	ldr	r2, [pc, #68]	; (8010eec <OnRadioTxDone+0x70>)
 8010ea6:	7813      	ldrb	r3, [r2, #0]
 8010ea8:	f043 0310 	orr.w	r3, r3, #16
 8010eac:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010eae:	4b0e      	ldr	r3, [pc, #56]	; (8010ee8 <OnRadioTxDone+0x6c>)
 8010eb0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d00a      	beq.n	8010ece <OnRadioTxDone+0x52>
 8010eb8:	4b0b      	ldr	r3, [pc, #44]	; (8010ee8 <OnRadioTxDone+0x6c>)
 8010eba:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ebe:	691b      	ldr	r3, [r3, #16]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010ec4:	4b08      	ldr	r3, [pc, #32]	; (8010ee8 <OnRadioTxDone+0x6c>)
 8010ec6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010eca:	691b      	ldr	r3, [r3, #16]
 8010ecc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010ece:	4b08      	ldr	r3, [pc, #32]	; (8010ef0 <OnRadioTxDone+0x74>)
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	2002      	movs	r0, #2
 8010ed6:	f00d fcc9 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8010eda:	bf00      	nop
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd90      	pop	{r4, r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20003f0c 	.word	0x20003f0c
 8010ee8:	200033f0 	.word	0x200033f0
 8010eec:	20003f08 	.word	0x20003f08
 8010ef0:	0802288c 	.word	0x0802288c

08010ef4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b084      	sub	sp, #16
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	60f8      	str	r0, [r7, #12]
 8010efc:	4608      	mov	r0, r1
 8010efe:	4611      	mov	r1, r2
 8010f00:	461a      	mov	r2, r3
 8010f02:	4603      	mov	r3, r0
 8010f04:	817b      	strh	r3, [r7, #10]
 8010f06:	460b      	mov	r3, r1
 8010f08:	813b      	strh	r3, [r7, #8]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010f0e:	f00e fe9f 	bl	801fc50 <UTIL_TIMER_GetCurrentTime>
 8010f12:	4603      	mov	r3, r0
 8010f14:	4a16      	ldr	r2, [pc, #88]	; (8010f70 <OnRadioRxDone+0x7c>)
 8010f16:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010f18:	4a15      	ldr	r2, [pc, #84]	; (8010f70 <OnRadioRxDone+0x7c>)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010f1e:	4a14      	ldr	r2, [pc, #80]	; (8010f70 <OnRadioRxDone+0x7c>)
 8010f20:	897b      	ldrh	r3, [r7, #10]
 8010f22:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010f24:	4a12      	ldr	r2, [pc, #72]	; (8010f70 <OnRadioRxDone+0x7c>)
 8010f26:	893b      	ldrh	r3, [r7, #8]
 8010f28:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010f2a:	4a11      	ldr	r2, [pc, #68]	; (8010f70 <OnRadioRxDone+0x7c>)
 8010f2c:	79fb      	ldrb	r3, [r7, #7]
 8010f2e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010f30:	4a10      	ldr	r2, [pc, #64]	; (8010f74 <OnRadioRxDone+0x80>)
 8010f32:	7813      	ldrb	r3, [r2, #0]
 8010f34:	f043 0308 	orr.w	r3, r3, #8
 8010f38:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f3a:	4b0f      	ldr	r3, [pc, #60]	; (8010f78 <OnRadioRxDone+0x84>)
 8010f3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00a      	beq.n	8010f5a <OnRadioRxDone+0x66>
 8010f44:	4b0c      	ldr	r3, [pc, #48]	; (8010f78 <OnRadioRxDone+0x84>)
 8010f46:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d004      	beq.n	8010f5a <OnRadioRxDone+0x66>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010f50:	4b09      	ldr	r3, [pc, #36]	; (8010f78 <OnRadioRxDone+0x84>)
 8010f52:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f56:	691b      	ldr	r3, [r3, #16]
 8010f58:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010f5a:	4b08      	ldr	r3, [pc, #32]	; (8010f7c <OnRadioRxDone+0x88>)
 8010f5c:	2201      	movs	r2, #1
 8010f5e:	2100      	movs	r1, #0
 8010f60:	2002      	movs	r0, #2
 8010f62:	f00d fc83 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8010f66:	bf00      	nop
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	20003f10 	.word	0x20003f10
 8010f74:	20003f08 	.word	0x20003f08
 8010f78:	200033f0 	.word	0x200033f0
 8010f7c:	0802289c 	.word	0x0802289c

08010f80 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010f84:	4a0e      	ldr	r2, [pc, #56]	; (8010fc0 <OnRadioTxTimeout+0x40>)
 8010f86:	7813      	ldrb	r3, [r2, #0]
 8010f88:	f043 0304 	orr.w	r3, r3, #4
 8010f8c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010f8e:	4b0d      	ldr	r3, [pc, #52]	; (8010fc4 <OnRadioTxTimeout+0x44>)
 8010f90:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d00a      	beq.n	8010fae <OnRadioTxTimeout+0x2e>
 8010f98:	4b0a      	ldr	r3, [pc, #40]	; (8010fc4 <OnRadioTxTimeout+0x44>)
 8010f9a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010f9e:	691b      	ldr	r3, [r3, #16]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d004      	beq.n	8010fae <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010fa4:	4b07      	ldr	r3, [pc, #28]	; (8010fc4 <OnRadioTxTimeout+0x44>)
 8010fa6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010fae:	4b06      	ldr	r3, [pc, #24]	; (8010fc8 <OnRadioTxTimeout+0x48>)
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	2100      	movs	r1, #0
 8010fb4:	2002      	movs	r0, #2
 8010fb6:	f00d fc59 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8010fba:	bf00      	nop
 8010fbc:	bd80      	pop	{r7, pc}
 8010fbe:	bf00      	nop
 8010fc0:	20003f08 	.word	0x20003f08
 8010fc4:	200033f0 	.word	0x200033f0
 8010fc8:	080228ac 	.word	0x080228ac

08010fcc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010fd0:	4a0b      	ldr	r2, [pc, #44]	; (8011000 <OnRadioRxError+0x34>)
 8010fd2:	7813      	ldrb	r3, [r2, #0]
 8010fd4:	f043 0302 	orr.w	r3, r3, #2
 8010fd8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010fda:	4b0a      	ldr	r3, [pc, #40]	; (8011004 <OnRadioRxError+0x38>)
 8010fdc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00a      	beq.n	8010ffa <OnRadioRxError+0x2e>
 8010fe4:	4b07      	ldr	r3, [pc, #28]	; (8011004 <OnRadioRxError+0x38>)
 8010fe6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d004      	beq.n	8010ffa <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8010ff0:	4b04      	ldr	r3, [pc, #16]	; (8011004 <OnRadioRxError+0x38>)
 8010ff2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	4798      	blx	r3
    }
}
 8010ffa:	bf00      	nop
 8010ffc:	bd80      	pop	{r7, pc}
 8010ffe:	bf00      	nop
 8011000:	20003f08 	.word	0x20003f08
 8011004:	200033f0 	.word	0x200033f0

08011008 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 801100c:	4a0e      	ldr	r2, [pc, #56]	; (8011048 <OnRadioRxTimeout+0x40>)
 801100e:	7813      	ldrb	r3, [r2, #0]
 8011010:	f043 0301 	orr.w	r3, r3, #1
 8011014:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8011016:	4b0d      	ldr	r3, [pc, #52]	; (801104c <OnRadioRxTimeout+0x44>)
 8011018:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00a      	beq.n	8011036 <OnRadioRxTimeout+0x2e>
 8011020:	4b0a      	ldr	r3, [pc, #40]	; (801104c <OnRadioRxTimeout+0x44>)
 8011022:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011026:	691b      	ldr	r3, [r3, #16]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801102c:	4b07      	ldr	r3, [pc, #28]	; (801104c <OnRadioRxTimeout+0x44>)
 801102e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8011036:	4b06      	ldr	r3, [pc, #24]	; (8011050 <OnRadioRxTimeout+0x48>)
 8011038:	2201      	movs	r2, #1
 801103a:	2100      	movs	r1, #0
 801103c:	2002      	movs	r0, #2
 801103e:	f00d fc15 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8011042:	bf00      	nop
 8011044:	bd80      	pop	{r7, pc}
 8011046:	bf00      	nop
 8011048:	20003f08 	.word	0x20003f08
 801104c:	200033f0 	.word	0x200033f0
 8011050:	080228bc 	.word	0x080228bc

08011054 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8011054:	b480      	push	{r7}
 8011056:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011058:	4b08      	ldr	r3, [pc, #32]	; (801107c <UpdateRxSlotIdleState+0x28>)
 801105a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 801105e:	2b02      	cmp	r3, #2
 8011060:	d004      	beq.n	801106c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8011062:	4b07      	ldr	r3, [pc, #28]	; (8011080 <UpdateRxSlotIdleState+0x2c>)
 8011064:	2206      	movs	r2, #6
 8011066:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 801106a:	e003      	b.n	8011074 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 801106c:	4b04      	ldr	r3, [pc, #16]	; (8011080 <UpdateRxSlotIdleState+0x2c>)
 801106e:	2202      	movs	r2, #2
 8011070:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8011074:	bf00      	nop
 8011076:	46bd      	mov	sp, r7
 8011078:	bc80      	pop	{r7}
 801107a:	4770      	bx	lr
 801107c:	200038f8 	.word	0x200038f8
 8011080:	200033f0 	.word	0x200033f0

08011084 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b08e      	sub	sp, #56	; 0x38
 8011088:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 801108a:	4b44      	ldr	r3, [pc, #272]	; (801119c <ProcessRadioTxDone+0x118>)
 801108c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011090:	2b02      	cmp	r3, #2
 8011092:	d002      	beq.n	801109a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8011094:	4b42      	ldr	r3, [pc, #264]	; (80111a0 <ProcessRadioTxDone+0x11c>)
 8011096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011098:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 801109a:	4b42      	ldr	r3, [pc, #264]	; (80111a4 <ProcessRadioTxDone+0x120>)
 801109c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 80110a0:	4619      	mov	r1, r3
 80110a2:	4841      	ldr	r0, [pc, #260]	; (80111a8 <ProcessRadioTxDone+0x124>)
 80110a4:	f00e fd2a 	bl	801fafc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80110a8:	483f      	ldr	r0, [pc, #252]	; (80111a8 <ProcessRadioTxDone+0x124>)
 80110aa:	f00e fc49 	bl	801f940 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 80110ae:	4b3d      	ldr	r3, [pc, #244]	; (80111a4 <ProcessRadioTxDone+0x120>)
 80110b0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 80110b4:	4619      	mov	r1, r3
 80110b6:	483d      	ldr	r0, [pc, #244]	; (80111ac <ProcessRadioTxDone+0x128>)
 80110b8:	f00e fd20 	bl	801fafc <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80110bc:	483b      	ldr	r0, [pc, #236]	; (80111ac <ProcessRadioTxDone+0x128>)
 80110be:	f00e fc3f 	bl	801f940 <UTIL_TIMER_Start>

    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 80110c2:	4b36      	ldr	r3, [pc, #216]	; (801119c <ProcessRadioTxDone+0x118>)
 80110c4:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80110c8:	2b02      	cmp	r3, #2
 80110ca:	d004      	beq.n	80110d6 <ProcessRadioTxDone+0x52>
 80110cc:	4b35      	ldr	r3, [pc, #212]	; (80111a4 <ProcessRadioTxDone+0x120>)
 80110ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d019      	beq.n	801110a <ProcessRadioTxDone+0x86>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 80110d6:	2316      	movs	r3, #22
 80110d8:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110dc:	4b2f      	ldr	r3, [pc, #188]	; (801119c <ProcessRadioTxDone+0x118>)
 80110de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110e2:	f107 0220 	add.w	r2, r7, #32
 80110e6:	4611      	mov	r1, r2
 80110e8:	4618      	mov	r0, r3
 80110ea:	f006 fb8c 	bl	8017806 <RegionGetPhyParam>
 80110ee:	4603      	mov	r3, r0
 80110f0:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 80110f2:	4b2c      	ldr	r3, [pc, #176]	; (80111a4 <ProcessRadioTxDone+0x120>)
 80110f4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	4413      	add	r3, r2
 80110fc:	4619      	mov	r1, r3
 80110fe:	482c      	ldr	r0, [pc, #176]	; (80111b0 <ProcessRadioTxDone+0x12c>)
 8011100:	f00e fcfc 	bl	801fafc <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8011104:	482a      	ldr	r0, [pc, #168]	; (80111b0 <ProcessRadioTxDone+0x12c>)
 8011106:	f00e fc1b 	bl	801f940 <UTIL_TIMER_Start>
    }

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 801110a:	4b2a      	ldr	r3, [pc, #168]	; (80111b4 <ProcessRadioTxDone+0x130>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	4a23      	ldr	r2, [pc, #140]	; (801119c <ProcessRadioTxDone+0x118>)
 8011110:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8011112:	4b24      	ldr	r3, [pc, #144]	; (80111a4 <ProcessRadioTxDone+0x120>)
 8011114:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8011118:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 801111a:	4b26      	ldr	r3, [pc, #152]	; (80111b4 <ProcessRadioTxDone+0x130>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8011120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011124:	4618      	mov	r0, r3
 8011126:	f00e f989 	bl	801f43c <SysTimeGetMcuTime>
 801112a:	4638      	mov	r0, r7
 801112c:	4b1b      	ldr	r3, [pc, #108]	; (801119c <ProcessRadioTxDone+0x118>)
 801112e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8011132:	9200      	str	r2, [sp, #0]
 8011134:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8011138:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801113c:	ca06      	ldmia	r2, {r1, r2}
 801113e:	f00e f8de 	bl	801f2fe <SysTimeSub>
 8011142:	f107 0314 	add.w	r3, r7, #20
 8011146:	463a      	mov	r2, r7
 8011148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801114c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8011150:	4b14      	ldr	r3, [pc, #80]	; (80111a4 <ProcessRadioTxDone+0x120>)
 8011152:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8011156:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8011158:	2301      	movs	r3, #1
 801115a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801115c:	4b0f      	ldr	r3, [pc, #60]	; (801119c <ProcessRadioTxDone+0x118>)
 801115e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 8011166:	2300      	movs	r3, #0
 8011168:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 801116a:	4b0c      	ldr	r3, [pc, #48]	; (801119c <ProcessRadioTxDone+0x118>)
 801116c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011170:	f107 0208 	add.w	r2, r7, #8
 8011174:	4611      	mov	r1, r2
 8011176:	4618      	mov	r0, r3
 8011178:	f006 fb66 	bl	8017848 <RegionSetBandTxDone>

    if( MacCtx.NodeAckRequested == false )
 801117c:	4b09      	ldr	r3, [pc, #36]	; (80111a4 <ProcessRadioTxDone+0x120>)
 801117e:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011182:	f083 0301 	eor.w	r3, r3, #1
 8011186:	b2db      	uxtb	r3, r3
 8011188:	2b00      	cmp	r3, #0
 801118a:	d003      	beq.n	8011194 <ProcessRadioTxDone+0x110>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801118c:	4b05      	ldr	r3, [pc, #20]	; (80111a4 <ProcessRadioTxDone+0x120>)
 801118e:	2200      	movs	r2, #0
 8011190:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    }
}
 8011194:	bf00      	nop
 8011196:	3730      	adds	r7, #48	; 0x30
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}
 801119c:	200038f8 	.word	0x200038f8
 80111a0:	0802333c 	.word	0x0802333c
 80111a4:	200033f0 	.word	0x200033f0
 80111a8:	20003770 	.word	0x20003770
 80111ac:	20003788 	.word	0x20003788
 80111b0:	200037e8 	.word	0x200037e8
 80111b4:	20003f0c 	.word	0x20003f0c

080111b8 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80111bc:	4b10      	ldr	r3, [pc, #64]	; (8011200 <PrepareRxDoneAbort+0x48>)
 80111be:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80111c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c6:	4a0e      	ldr	r2, [pc, #56]	; (8011200 <PrepareRxDoneAbort+0x48>)
 80111c8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 80111cc:	4b0c      	ldr	r3, [pc, #48]	; (8011200 <PrepareRxDoneAbort+0x48>)
 80111ce:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d002      	beq.n	80111dc <PrepareRxDoneAbort+0x24>
    {
        OnAckTimeoutTimerEvent( NULL );
 80111d6:	2000      	movs	r0, #0
 80111d8:	f001 f8f8 	bl	80123cc <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 80111dc:	4a08      	ldr	r2, [pc, #32]	; (8011200 <PrepareRxDoneAbort+0x48>)
 80111de:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80111e2:	f043 0302 	orr.w	r3, r3, #2
 80111e6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 80111ea:	4a05      	ldr	r2, [pc, #20]	; (8011200 <PrepareRxDoneAbort+0x48>)
 80111ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80111f0:	f043 0320 	orr.w	r3, r3, #32
 80111f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 80111f8:	f7ff ff2c 	bl	8011054 <UpdateRxSlotIdleState>
}
 80111fc:	bf00      	nop
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	200033f0 	.word	0x200033f0

08011204 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8011204:	b5b0      	push	{r4, r5, r7, lr}
 8011206:	b0a6      	sub	sp, #152	; 0x98
 8011208:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801120a:	2313      	movs	r3, #19
 801120c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8011210:	4bb9      	ldr	r3, [pc, #740]	; (80114f8 <ProcessRadioRxDone+0x2f4>)
 8011212:	685b      	ldr	r3, [r3, #4]
 8011214:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 8011216:	4bb8      	ldr	r3, [pc, #736]	; (80114f8 <ProcessRadioRxDone+0x2f4>)
 8011218:	891b      	ldrh	r3, [r3, #8]
 801121a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    int16_t rssi = RxDoneParams.Rssi;
 801121e:	4bb6      	ldr	r3, [pc, #728]	; (80114f8 <ProcessRadioRxDone+0x2f4>)
 8011220:	895b      	ldrh	r3, [r3, #10]
 8011222:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
    int8_t snr = RxDoneParams.Snr;
 8011226:	4bb4      	ldr	r3, [pc, #720]	; (80114f8 <ProcessRadioRxDone+0x2f4>)
 8011228:	7b1b      	ldrb	r3, [r3, #12]
 801122a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

    uint8_t pktHeaderLen = 0;
 801122e:	2300      	movs	r3, #0
 8011230:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    uint32_t downLinkCounter = 0;
 8011234:	2300      	movs	r3, #0
 8011236:	607b      	str	r3, [r7, #4]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8011238:	4bb0      	ldr	r3, [pc, #704]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801123a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint8_t multicast = 0;
 8011242:	2300      	movs	r3, #0
 8011244:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8011248:	2301      	movs	r3, #1
 801124a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 801124e:	4bac      	ldr	r3, [pc, #688]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011250:	2200      	movs	r2, #0
 8011252:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    MacCtx.RxStatus.Rssi = rssi;
 8011256:	4aaa      	ldr	r2, [pc, #680]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011258:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 801125c:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8011260:	4aa7      	ldr	r2, [pc, #668]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011262:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011266:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 801126a:	4ba5      	ldr	r3, [pc, #660]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 801126c:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8011270:	4ba3      	ldr	r3, [pc, #652]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011272:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8011276:	4ba2      	ldr	r3, [pc, #648]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011278:	2200      	movs	r2, #0
 801127a:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
    MacCtx.McpsIndication.Multicast = 0;
 801127e:	4ba0      	ldr	r3, [pc, #640]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011280:	2200      	movs	r2, #0
 8011282:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    MacCtx.McpsIndication.FramePending = 0;
 8011286:	4b9e      	ldr	r3, [pc, #632]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011288:	2200      	movs	r2, #0
 801128a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
    MacCtx.McpsIndication.Buffer = NULL;
 801128e:	4b9c      	ldr	r3, [pc, #624]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011290:	2200      	movs	r2, #0
 8011292:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.BufferSize = 0;
 8011296:	4b9a      	ldr	r3, [pc, #616]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011298:	2200      	movs	r2, #0
 801129a:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.RxData = false;
 801129e:	4b98      	ldr	r3, [pc, #608]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112a0:	2200      	movs	r2, #0
 80112a2:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.AckReceived = false;
 80112a6:	4b96      	ldr	r3, [pc, #600]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112a8:	2200      	movs	r2, #0
 80112aa:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80112ae:	4b94      	ldr	r3, [pc, #592]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112b0:	2200      	movs	r2, #0
 80112b2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80112b6:	4b92      	ldr	r3, [pc, #584]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsIndication.DevAddress = 0;
 80112be:	4b90      	ldr	r3, [pc, #576]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80112c6:	4b8e      	ldr	r3, [pc, #568]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434

    Radio.Sleep( );
 80112ce:	4b8d      	ldr	r3, [pc, #564]	; (8011504 <ProcessRadioRxDone+0x300>)
 80112d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112d2:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 80112d4:	488c      	ldr	r0, [pc, #560]	; (8011508 <ProcessRadioRxDone+0x304>)
 80112d6:	f00e fba1 	bl	801fa1c <UTIL_TIMER_Stop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 80112da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80112de:	4619      	mov	r1, r3
 80112e0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80112e2:	f004 fb28 	bl	8015936 <LoRaMacClassBRxBeacon>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d00a      	beq.n	8011302 <ProcessRadioRxDone+0xfe>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 80112ec:	4a84      	ldr	r2, [pc, #528]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80112f2:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 80112f6:	4a82      	ldr	r2, [pc, #520]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80112f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80112fc:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8011300:	e3bf      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011302:	4b7e      	ldr	r3, [pc, #504]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011304:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011308:	2b01      	cmp	r3, #1
 801130a:	d11e      	bne.n	801134a <ProcessRadioRxDone+0x146>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801130c:	f004 fb26 	bl	801595c <LoRaMacClassBIsPingExpected>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d00a      	beq.n	801132c <ProcessRadioRxDone+0x128>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011316:	2000      	movs	r0, #0
 8011318:	f004 fad7 	bl	80158ca <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801131c:	2000      	movs	r0, #0
 801131e:	f004 faf8 	bl	8015912 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011322:	4b77      	ldr	r3, [pc, #476]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011324:	2204      	movs	r2, #4
 8011326:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 801132a:	e00e      	b.n	801134a <ProcessRadioRxDone+0x146>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801132c:	f004 fb1d 	bl	801596a <LoRaMacClassBIsMulticastExpected>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d009      	beq.n	801134a <ProcessRadioRxDone+0x146>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011336:	2000      	movs	r0, #0
 8011338:	f004 fad1 	bl	80158de <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801133c:	2000      	movs	r0, #0
 801133e:	f004 faf1 	bl	8015924 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011342:	4b6f      	ldr	r3, [pc, #444]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 8011344:	2205      	movs	r2, #5
 8011346:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 801134a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	f887 2076 	strb.w	r2, [r7, #118]	; 0x76
 8011354:	461a      	mov	r2, r3
 8011356:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011358:	4413      	add	r3, r2
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74

    switch( macHdr.Bits.MType )
 8011360:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011364:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011368:	b2db      	uxtb	r3, r3
 801136a:	3b01      	subs	r3, #1
 801136c:	2b06      	cmp	r3, #6
 801136e:	f200 8362 	bhi.w	8011a36 <ProcessRadioRxDone+0x832>
 8011372:	a201      	add	r2, pc, #4	; (adr r2, 8011378 <ProcessRadioRxDone+0x174>)
 8011374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011378:	08011395 	.word	0x08011395
 801137c:	08011a37 	.word	0x08011a37
 8011380:	08011515 	.word	0x08011515
 8011384:	08011a37 	.word	0x08011a37
 8011388:	0801150d 	.word	0x0801150d
 801138c:	08011a37 	.word	0x08011a37
 8011390:	080119dd 	.word	0x080119dd
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8011394:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011398:	2b10      	cmp	r3, #16
 801139a:	d806      	bhi.n	80113aa <ProcessRadioRxDone+0x1a6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801139c:	4b58      	ldr	r3, [pc, #352]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 801139e:	2201      	movs	r2, #1
 80113a0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80113a4:	f7ff ff08 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80113a8:	e36b      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }
            macMsgJoinAccept.Buffer = payload;
 80113aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80113ac:	60bb      	str	r3, [r7, #8]
            macMsgJoinAccept.BufSize = size;
 80113ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80113b2:	b2db      	uxtb	r3, r3
 80113b4:	733b      	strb	r3, [r7, #12]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80113b6:	4b51      	ldr	r3, [pc, #324]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 80113b8:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d006      	beq.n	80113ce <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80113c0:	4b4f      	ldr	r3, [pc, #316]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80113c2:	2201      	movs	r2, #1
 80113c4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80113c8:	f7ff fef6 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80113cc:	e359      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80113ce:	f7fd ff99 	bl	800f304 <SecureElementGetJoinEui>
 80113d2:	4601      	mov	r1, r0
 80113d4:	f107 0308 	add.w	r3, r7, #8
 80113d8:	461a      	mov	r2, r3
 80113da:	20ff      	movs	r0, #255	; 0xff
 80113dc:	f005 fc92 	bl	8016d04 <LoRaMacCryptoHandleJoinAccept>
 80113e0:	4603      	mov	r3, r0
 80113e2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80113e6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d172      	bne.n	80114d4 <ProcessRadioRxDone+0x2d0>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80113ee:	7c7b      	ldrb	r3, [r7, #17]
 80113f0:	461a      	mov	r2, r3
 80113f2:	4b42      	ldr	r3, [pc, #264]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 80113f4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80113f8:	4b40      	ldr	r3, [pc, #256]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 80113fa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80113fe:	7cbb      	ldrb	r3, [r7, #18]
 8011400:	021b      	lsls	r3, r3, #8
 8011402:	4313      	orrs	r3, r2
 8011404:	4a3d      	ldr	r2, [pc, #244]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011406:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801140a:	4b3c      	ldr	r3, [pc, #240]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801140c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8011410:	7cfb      	ldrb	r3, [r7, #19]
 8011412:	041b      	lsls	r3, r3, #16
 8011414:	4313      	orrs	r3, r2
 8011416:	4a39      	ldr	r2, [pc, #228]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011418:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	4a37      	ldr	r2, [pc, #220]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011420:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8011424:	7e3b      	ldrb	r3, [r7, #24]
 8011426:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801142a:	b2db      	uxtb	r3, r3
 801142c:	461a      	mov	r2, r3
 801142e:	4b33      	ldr	r3, [pc, #204]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011430:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011434:	7e3b      	ldrb	r3, [r7, #24]
 8011436:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801143a:	b2db      	uxtb	r3, r3
 801143c:	461a      	mov	r2, r3
 801143e:	4b2f      	ldr	r3, [pc, #188]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011440:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011444:	7e3b      	ldrb	r3, [r7, #24]
 8011446:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801144a:	b2db      	uxtb	r3, r3
 801144c:	461a      	mov	r2, r3
 801144e:	4b2b      	ldr	r3, [pc, #172]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011454:	7e7b      	ldrb	r3, [r7, #25]
 8011456:	461a      	mov	r2, r3
 8011458:	4b28      	ldr	r3, [pc, #160]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801145a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801145c:	4b27      	ldr	r3, [pc, #156]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801145e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011460:	2b00      	cmp	r3, #0
 8011462:	d102      	bne.n	801146a <ProcessRadioRxDone+0x266>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011464:	4b25      	ldr	r3, [pc, #148]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011466:	2201      	movs	r2, #1
 8011468:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 801146a:	4b24      	ldr	r3, [pc, #144]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801146e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011472:	fb02 f303 	mul.w	r3, r2, r3
 8011476:	4a21      	ldr	r2, [pc, #132]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011478:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801147a:	4b20      	ldr	r3, [pc, #128]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 801147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801147e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011482:	4a1e      	ldr	r2, [pc, #120]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011484:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011486:	4b1d      	ldr	r3, [pc, #116]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 8011488:	2200      	movs	r2, #0
 801148a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801148e:	f107 0308 	add.w	r3, r7, #8
 8011492:	3312      	adds	r3, #18
 8011494:	66fb      	str	r3, [r7, #108]	; 0x6c
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011496:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801149a:	b2db      	uxtb	r3, r3
 801149c:	3b11      	subs	r3, #17
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 80114a4:	4b15      	ldr	r3, [pc, #84]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 80114a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114aa:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80114ae:	4611      	mov	r1, r2
 80114b0:	4618      	mov	r0, r3
 80114b2:	f006 fa19 	bl	80178e8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 80114b6:	4b11      	ldr	r3, [pc, #68]	; (80114fc <ProcessRadioRxDone+0x2f8>)
 80114b8:	2202      	movs	r2, #2
 80114ba:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80114be:	2001      	movs	r0, #1
 80114c0:	f004 ff18 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00e      	beq.n	80114e8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80114ca:	2101      	movs	r1, #1
 80114cc:	2000      	movs	r0, #0
 80114ce:	f004 fe85 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
 80114d2:	e009      	b.n	80114e8 <ProcessRadioRxDone+0x2e4>
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80114d4:	2001      	movs	r0, #1
 80114d6:	f004 ff0d 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d003      	beq.n	80114e8 <ProcessRadioRxDone+0x2e4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80114e0:	2101      	movs	r1, #1
 80114e2:	2007      	movs	r0, #7
 80114e4:	f004 fe7a 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 80114e8:	4a05      	ldr	r2, [pc, #20]	; (8011500 <ProcessRadioRxDone+0x2fc>)
 80114ea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80114ee:	f043 0308 	orr.w	r3, r3, #8
 80114f2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 80114f6:	e2a5      	b.n	8011a44 <ProcessRadioRxDone+0x840>
 80114f8:	20003f10 	.word	0x20003f10
 80114fc:	200038f8 	.word	0x200038f8
 8011500:	200033f0 	.word	0x200033f0
 8011504:	0802333c 	.word	0x0802333c
 8011508:	20003788 	.word	0x20003788
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801150c:	4bae      	ldr	r3, [pc, #696]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 801150e:	2201      	movs	r2, #1
 8011510:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011514:	4bad      	ldr	r3, [pc, #692]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011516:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801151a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 801151e:	4baa      	ldr	r3, [pc, #680]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011520:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8011524:	b25b      	sxtb	r3, r3
 8011526:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 801152a:	230d      	movs	r3, #13
 801152c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8011530:	4ba6      	ldr	r3, [pc, #664]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011532:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011536:	2b00      	cmp	r3, #0
 8011538:	d002      	beq.n	8011540 <ProcessRadioRxDone+0x33c>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 801153a:	230e      	movs	r3, #14
 801153c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011540:	4ba2      	ldr	r3, [pc, #648]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011542:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011546:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f006 f95a 	bl	8017806 <RegionGetPhyParam>
 8011552:	4603      	mov	r3, r0
 8011554:	663b      	str	r3, [r7, #96]	; 0x60
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8011556:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801155a:	3b0d      	subs	r3, #13
 801155c:	b29b      	uxth	r3, r3
 801155e:	b21b      	sxth	r3, r3
 8011560:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011564:	b21a      	sxth	r2, r3
 8011566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011568:	b21b      	sxth	r3, r3
 801156a:	429a      	cmp	r2, r3
 801156c:	dc03      	bgt.n	8011576 <ProcessRadioRxDone+0x372>
 801156e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011572:	2b0b      	cmp	r3, #11
 8011574:	d806      	bhi.n	8011584 <ProcessRadioRxDone+0x380>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011576:	4b94      	ldr	r3, [pc, #592]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011578:	2201      	movs	r2, #1
 801157a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 801157e:	f7ff fe1b 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 8011582:	e27e      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }
            macMsgData.Buffer = payload;
 8011584:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011586:	633b      	str	r3, [r7, #48]	; 0x30
            macMsgData.BufSize = size;
 8011588:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801158c:	b2db      	uxtb	r3, r3
 801158e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011592:	4b8f      	ldr	r3, [pc, #572]	; (80117d0 <ProcessRadioRxDone+0x5cc>)
 8011594:	657b      	str	r3, [r7, #84]	; 0x54
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011596:	23ff      	movs	r3, #255	; 0xff
 8011598:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801159c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115a0:	4618      	mov	r0, r3
 80115a2:	f005 feae 	bl	8017302 <LoRaMacParserData>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d006      	beq.n	80115ba <ProcessRadioRxDone+0x3b6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80115ac:	4b86      	ldr	r3, [pc, #536]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80115ae:	2201      	movs	r2, #1
 80115b0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80115b4:	f7ff fe00 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80115b8:	e263      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 80115ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115bc:	4a82      	ldr	r2, [pc, #520]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80115be:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 80115c2:	1cba      	adds	r2, r7, #2
 80115c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80115c8:	4611      	mov	r1, r2
 80115ca:	4618      	mov	r0, r3
 80115cc:	f002 fcde 	bl	8013f8c <DetermineFrameType>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d006      	beq.n	80115e4 <ProcessRadioRxDone+0x3e0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80115d6:	4b7c      	ldr	r3, [pc, #496]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80115d8:	2201      	movs	r2, #1
 80115da:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80115de:	f7ff fdeb 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80115e2:	e24e      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }

            //Check if it is a multicast message
            multicast = 0;
 80115e4:	2300      	movs	r3, #0
 80115e6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
            downLinkCounter = 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	607b      	str	r3, [r7, #4]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80115ee:	2300      	movs	r3, #0
 80115f0:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 80115f4:	e049      	b.n	801168a <ProcessRadioRxDone+0x486>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80115f6:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 80115fa:	4a74      	ldr	r2, [pc, #464]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 80115fc:	212c      	movs	r1, #44	; 0x2c
 80115fe:	fb01 f303 	mul.w	r3, r1, r3
 8011602:	4413      	add	r3, r2
 8011604:	33d4      	adds	r3, #212	; 0xd4
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160a:	429a      	cmp	r2, r3
 801160c:	d138      	bne.n	8011680 <ProcessRadioRxDone+0x47c>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801160e:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011612:	4a6e      	ldr	r2, [pc, #440]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011614:	212c      	movs	r1, #44	; 0x2c
 8011616:	fb01 f303 	mul.w	r3, r1, r3
 801161a:	4413      	add	r3, r2
 801161c:	33d2      	adds	r3, #210	; 0xd2
 801161e:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011620:	2b00      	cmp	r3, #0
 8011622:	d02d      	beq.n	8011680 <ProcessRadioRxDone+0x47c>
                {
                    multicast = 1;
 8011624:	2301      	movs	r3, #1
 8011626:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 801162a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801162e:	4a67      	ldr	r2, [pc, #412]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011630:	212c      	movs	r1, #44	; 0x2c
 8011632:	fb01 f303 	mul.w	r3, r1, r3
 8011636:	4413      	add	r3, r2
 8011638:	33d3      	adds	r3, #211	; 0xd3
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8011640:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011644:	4a61      	ldr	r2, [pc, #388]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011646:	212c      	movs	r1, #44	; 0x2c
 8011648:	fb01 f303 	mul.w	r3, r1, r3
 801164c:	4413      	add	r3, r2
 801164e:	33f0      	adds	r3, #240	; 0xf0
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	607b      	str	r3, [r7, #4]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011656:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801165a:	4a5c      	ldr	r2, [pc, #368]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 801165c:	212c      	movs	r1, #44	; 0x2c
 801165e:	fb01 f303 	mul.w	r3, r1, r3
 8011662:	4413      	add	r3, r2
 8011664:	33d4      	adds	r3, #212	; 0xd4
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801166c:	4b57      	ldr	r3, [pc, #348]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 801166e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011672:	2b02      	cmp	r3, #2
 8011674:	d10e      	bne.n	8011694 <ProcessRadioRxDone+0x490>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011676:	4b54      	ldr	r3, [pc, #336]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011678:	2203      	movs	r2, #3
 801167a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 801167e:	e009      	b.n	8011694 <ProcessRadioRxDone+0x490>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011680:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8011684:	3301      	adds	r3, #1
 8011686:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
 801168a:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 801168e:	2b00      	cmp	r3, #0
 8011690:	d0b1      	beq.n	80115f6 <ProcessRadioRxDone+0x3f2>
 8011692:	e000      	b.n	8011696 <ProcessRadioRxDone+0x492>
                    break;
 8011694:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011696:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801169a:	2b01      	cmp	r3, #1
 801169c:	d117      	bne.n	80116ce <ProcessRadioRxDone+0x4ca>
 801169e:	78bb      	ldrb	r3, [r7, #2]
 80116a0:	2b03      	cmp	r3, #3
 80116a2:	d10d      	bne.n	80116c0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80116a4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80116a8:	f003 0320 	and.w	r3, r3, #32
 80116ac:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d106      	bne.n	80116c0 <ProcessRadioRxDone+0x4bc>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 80116b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80116b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116ba:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d006      	beq.n	80116ce <ProcessRadioRxDone+0x4ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80116c0:	4b41      	ldr	r3, [pc, #260]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80116c2:	2201      	movs	r2, #1
 80116c4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                PrepareRxDoneAbort( );
 80116c8:	f7ff fd76 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80116cc:	e1d9      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 80116ce:	2315      	movs	r3, #21
 80116d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116d4:	4b3d      	ldr	r3, [pc, #244]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 80116d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80116de:	4611      	mov	r1, r2
 80116e0:	4618      	mov	r0, r3
 80116e2:	f006 f890 	bl	8017806 <RegionGetPhyParam>
 80116e6:	4603      	mov	r3, r0
 80116e8:	663b      	str	r3, [r7, #96]	; 0x60

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80116ea:	78b9      	ldrb	r1, [r7, #2]
 80116ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116ee:	b29b      	uxth	r3, r3
 80116f0:	4d36      	ldr	r5, [pc, #216]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 80116f2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80116f6:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 80116fa:	1d3a      	adds	r2, r7, #4
 80116fc:	9202      	str	r2, [sp, #8]
 80116fe:	1cfa      	adds	r2, r7, #3
 8011700:	9201      	str	r2, [sp, #4]
 8011702:	9300      	str	r3, [sp, #0]
 8011704:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 8011708:	4622      	mov	r2, r4
 801170a:	f000 fe95 	bl	8012438 <GetFCntDown>
 801170e:	4603      	mov	r3, r0
 8011710:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011714:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011718:	2b00      	cmp	r3, #0
 801171a:	d031      	beq.n	8011780 <ProcessRadioRxDone+0x57c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 801171c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011720:	2b07      	cmp	r3, #7
 8011722:	d119      	bne.n	8011758 <ProcessRadioRxDone+0x554>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8011724:	4b28      	ldr	r3, [pc, #160]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011726:	2208      	movs	r2, #8
 8011728:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 801172c:	4b27      	ldr	r3, [pc, #156]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 801172e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8011732:	2b00      	cmp	r3, #0
 8011734:	d11d      	bne.n	8011772 <ProcessRadioRxDone+0x56e>
 8011736:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801173a:	f023 031f 	bic.w	r3, r3, #31
 801173e:	b2db      	uxtb	r3, r3
 8011740:	2ba0      	cmp	r3, #160	; 0xa0
 8011742:	d116      	bne.n	8011772 <ProcessRadioRxDone+0x56e>
 8011744:	4b21      	ldr	r3, [pc, #132]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801174a:	429a      	cmp	r2, r3
 801174c:	d111      	bne.n	8011772 <ProcessRadioRxDone+0x56e>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801174e:	4b1f      	ldr	r3, [pc, #124]	; (80117cc <ProcessRadioRxDone+0x5c8>)
 8011750:	2201      	movs	r2, #1
 8011752:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011756:	e00c      	b.n	8011772 <ProcessRadioRxDone+0x56e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011758:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801175c:	2b08      	cmp	r3, #8
 801175e:	d104      	bne.n	801176a <ProcessRadioRxDone+0x566>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011760:	4b19      	ldr	r3, [pc, #100]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011762:	220a      	movs	r2, #10
 8011764:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 8011768:	e003      	b.n	8011772 <ProcessRadioRxDone+0x56e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801176a:	4b17      	ldr	r3, [pc, #92]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 801176c:	2201      	movs	r2, #1
 801176e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	4a14      	ldr	r2, [pc, #80]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 8011776:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                PrepareRxDoneAbort( );
 801177a:	f7ff fd1d 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 801177e:	e180      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011780:	78fa      	ldrb	r2, [r7, #3]
 8011782:	6879      	ldr	r1, [r7, #4]
 8011784:	f897 0082 	ldrb.w	r0, [r7, #130]	; 0x82
 8011788:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	460b      	mov	r3, r1
 8011790:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8011794:	f005 fc02 	bl	8016f9c <LoRaMacCryptoUnsecureMessage>
 8011798:	4603      	mov	r3, r0
 801179a:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801179e:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d016      	beq.n	80117d4 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 80117a6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80117aa:	2b02      	cmp	r3, #2
 80117ac:	d104      	bne.n	80117b8 <ProcessRadioRxDone+0x5b4>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 80117ae:	4b06      	ldr	r3, [pc, #24]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80117b0:	220b      	movs	r2, #11
 80117b2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
 80117b6:	e003      	b.n	80117c0 <ProcessRadioRxDone+0x5bc>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80117b8:	4b03      	ldr	r3, [pc, #12]	; (80117c8 <ProcessRadioRxDone+0x5c4>)
 80117ba:	220c      	movs	r2, #12
 80117bc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                }
                PrepareRxDoneAbort( );
 80117c0:	f7ff fcfa 	bl	80111b8 <PrepareRxDoneAbort>
                return;
 80117c4:	e15d      	b.n	8011a82 <ProcessRadioRxDone+0x87e>
 80117c6:	bf00      	nop
 80117c8:	200033f0 	.word	0x200033f0
 80117cc:	200038f8 	.word	0x200038f8
 80117d0:	20003628 	.word	0x20003628
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117d4:	4bac      	ldr	r3, [pc, #688]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Multicast = multicast;
 80117dc:	4aaa      	ldr	r2, [pc, #680]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80117de:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80117e2:	f882 341e 	strb.w	r3, [r2, #1054]	; 0x41e
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80117e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80117ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	461a      	mov	r2, r3
 80117f2:	4ba5      	ldr	r3, [pc, #660]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80117f4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = NULL;
 80117f8:	4ba3      	ldr	r3, [pc, #652]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80117fa:	2200      	movs	r2, #0
 80117fc:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = 0;
 8011800:	4ba1      	ldr	r3, [pc, #644]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011802:	2200      	movs	r2, #0
 8011804:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	4a9f      	ldr	r2, [pc, #636]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801180c:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011810:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011814:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011818:	b2db      	uxtb	r3, r3
 801181a:	2b00      	cmp	r3, #0
 801181c:	bf14      	ite	ne
 801181e:	2301      	movne	r3, #1
 8011820:	2300      	moveq	r3, #0
 8011822:	b2da      	uxtb	r2, r3
 8011824:	4b98      	ldr	r3, [pc, #608]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011826:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801182a:	4b97      	ldr	r3, [pc, #604]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801182c:	2200      	movs	r2, #0
 801182e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8011832:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011836:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801183a:	b2db      	uxtb	r3, r3
 801183c:	2b00      	cmp	r3, #0
 801183e:	bf14      	ite	ne
 8011840:	2301      	movne	r3, #1
 8011842:	2300      	moveq	r3, #0
 8011844:	b2da      	uxtb	r2, r3
 8011846:	4b90      	ldr	r3, [pc, #576]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011848:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801184c:	4b8e      	ldr	r3, [pc, #568]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801184e:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011852:	2b00      	cmp	r3, #0
 8011854:	d004      	beq.n	8011860 <ProcessRadioRxDone+0x65c>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011856:	4b8c      	ldr	r3, [pc, #560]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011858:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801185c:	2b01      	cmp	r3, #1
 801185e:	d102      	bne.n	8011866 <ProcessRadioRxDone+0x662>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011860:	4b8a      	ldr	r3, [pc, #552]	; (8011a8c <ProcessRadioRxDone+0x888>)
 8011862:	2200      	movs	r2, #0
 8011864:	629a      	str	r2, [r3, #40]	; 0x28
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011866:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 801186a:	2b01      	cmp	r3, #1
 801186c:	d104      	bne.n	8011878 <ProcessRadioRxDone+0x674>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801186e:	4b86      	ldr	r3, [pc, #536]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011870:	2202      	movs	r2, #2
 8011872:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 8011876:	e01f      	b.n	80118b8 <ProcessRadioRxDone+0x6b4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011878:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 801187c:	f023 031f 	bic.w	r3, r3, #31
 8011880:	b2db      	uxtb	r3, r3
 8011882:	2ba0      	cmp	r3, #160	; 0xa0
 8011884:	d110      	bne.n	80118a8 <ProcessRadioRxDone+0x6a4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011886:	4b81      	ldr	r3, [pc, #516]	; (8011a8c <ProcessRadioRxDone+0x888>)
 8011888:	2201      	movs	r2, #1
 801188a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801188e:	4b7f      	ldr	r3, [pc, #508]	; (8011a8c <ProcessRadioRxDone+0x888>)
 8011890:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8011894:	2b00      	cmp	r3, #0
 8011896:	d102      	bne.n	801189e <ProcessRadioRxDone+0x69a>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801189a:	4a7c      	ldr	r2, [pc, #496]	; (8011a8c <ProcessRadioRxDone+0x888>)
 801189c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801189e:	4b7a      	ldr	r3, [pc, #488]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80118a0:	2201      	movs	r2, #1
 80118a2:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
 80118a6:	e007      	b.n	80118b8 <ProcessRadioRxDone+0x6b4>
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 80118a8:	4b78      	ldr	r3, [pc, #480]	; (8011a8c <ProcessRadioRxDone+0x888>)
 80118aa:	2200      	movs	r2, #0
 80118ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 80118b0:	4b75      	ldr	r3, [pc, #468]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 80118b8:	4b73      	ldr	r3, [pc, #460]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80118ba:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80118be:	4a72      	ldr	r2, [pc, #456]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80118c0:	f892 2438 	ldrb.w	r2, [r2, #1080]	; 0x438
 80118c4:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80118c8:	4618      	mov	r0, r3
 80118ca:	f001 ff0d 	bl	80136e8 <RemoveMacCommands>

            switch( fType )
 80118ce:	78bb      	ldrb	r3, [r7, #2]
 80118d0:	2b03      	cmp	r3, #3
 80118d2:	d874      	bhi.n	80119be <ProcessRadioRxDone+0x7ba>
 80118d4:	a201      	add	r2, pc, #4	; (adr r2, 80118dc <ProcessRadioRxDone+0x6d8>)
 80118d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118da:	bf00      	nop
 80118dc:	080118ed 	.word	0x080118ed
 80118e0:	0801193d 	.word	0x0801193d
 80118e4:	08011973 	.word	0x08011973
 80118e8:	08011999 	.word	0x08011999
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80118ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80118f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80118f4:	b2db      	uxtb	r3, r3
 80118f6:	461c      	mov	r4, r3
 80118f8:	4b63      	ldr	r3, [pc, #396]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80118fa:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80118fe:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011902:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011906:	f102 0010 	add.w	r0, r2, #16
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	460b      	mov	r3, r1
 801190e:	4622      	mov	r2, r4
 8011910:	2100      	movs	r1, #0
 8011912:	f000 ff03 	bl	801271c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011916:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801191a:	4b5b      	ldr	r3, [pc, #364]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801191c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011922:	4a59      	ldr	r2, [pc, #356]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011924:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011928:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 801192c:	4b56      	ldr	r3, [pc, #344]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801192e:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 8011932:	4b55      	ldr	r3, [pc, #340]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011934:	2201      	movs	r2, #1
 8011936:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 801193a:	e047      	b.n	80119cc <ProcessRadioRxDone+0x7c8>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 801193c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8011940:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011944:	b2db      	uxtb	r3, r3
 8011946:	461c      	mov	r4, r3
 8011948:	4b4f      	ldr	r3, [pc, #316]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801194a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801194e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011952:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011956:	f102 0010 	add.w	r0, r2, #16
 801195a:	9300      	str	r3, [sp, #0]
 801195c:	460b      	mov	r3, r1
 801195e:	4622      	mov	r2, r4
 8011960:	2100      	movs	r1, #0
 8011962:	f000 fedb 	bl	801271c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011966:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801196a:	4b47      	ldr	r3, [pc, #284]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801196c:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011970:	e02c      	b.n	80119cc <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011972:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011974:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8011978:	4b43      	ldr	r3, [pc, #268]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801197a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801197e:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8011982:	9300      	str	r3, [sp, #0]
 8011984:	460b      	mov	r3, r1
 8011986:	2100      	movs	r1, #0
 8011988:	f000 fec8 	bl	801271c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801198c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8011990:	4b3d      	ldr	r3, [pc, #244]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011992:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    break;
 8011996:	e019      	b.n	80119cc <ProcessRadioRxDone+0x7c8>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011998:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801199c:	4b3a      	ldr	r3, [pc, #232]	; (8011a88 <ProcessRadioRxDone+0x884>)
 801199e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80119a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119a4:	4a38      	ldr	r2, [pc, #224]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119a6:	f8c2 3424 	str.w	r3, [r2, #1060]	; 0x424
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80119aa:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80119ae:	4b36      	ldr	r3, [pc, #216]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119b0:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.RxData = true;
 80119b4:	4b34      	ldr	r3, [pc, #208]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119b6:	2201      	movs	r2, #1
 80119b8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
                    break;
 80119bc:	e006      	b.n	80119cc <ProcessRadioRxDone+0x7c8>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80119be:	4b32      	ldr	r3, [pc, #200]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119c0:	2201      	movs	r2, #1
 80119c2:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
                    PrepareRxDoneAbort( );
 80119c6:	f7ff fbf7 	bl	80111b8 <PrepareRxDoneAbort>
                    break;
 80119ca:	bf00      	nop
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80119cc:	4a2e      	ldr	r2, [pc, #184]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119ce:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119d2:	f043 0302 	orr.w	r3, r3, #2
 80119d6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80119da:	e033      	b.n	8011a44 <ProcessRadioRxDone+0x840>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80119dc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80119e2:	18d1      	adds	r1, r2, r3
 80119e4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	461a      	mov	r2, r3
 80119f4:	4826      	ldr	r0, [pc, #152]	; (8011a90 <ProcessRadioRxDone+0x88c>)
 80119f6:	f009 fdd6 	bl	801b5a6 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80119fa:	4b23      	ldr	r3, [pc, #140]	; (8011a88 <ProcessRadioRxDone+0x884>)
 80119fc:	2203      	movs	r2, #3
 80119fe:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011a02:	4b21      	ldr	r3, [pc, #132]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a04:	2200      	movs	r2, #0
 8011a06:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8011a0a:	4b1f      	ldr	r3, [pc, #124]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a0c:	4a20      	ldr	r2, [pc, #128]	; (8011a90 <ProcessRadioRxDone+0x88c>)
 8011a0e:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8011a12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8011a16:	b2da      	uxtb	r2, r3
 8011a18:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8011a1c:	1ad3      	subs	r3, r2, r3
 8011a1e:	b2da      	uxtb	r2, r3
 8011a20:	4b19      	ldr	r3, [pc, #100]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a22:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011a26:	4a18      	ldr	r2, [pc, #96]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a28:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a2c:	f043 0302 	orr.w	r3, r3, #2
 8011a30:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011a34:	e006      	b.n	8011a44 <ProcessRadioRxDone+0x840>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011a36:	4b14      	ldr	r3, [pc, #80]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a38:	2201      	movs	r2, #1
 8011a3a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            PrepareRxDoneAbort( );
 8011a3e:	f7ff fbbb 	bl	80111b8 <PrepareRxDoneAbort>
            break;
 8011a42:	bf00      	nop
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011a44:	4b10      	ldr	r3, [pc, #64]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a46:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d008      	beq.n	8011a60 <ProcessRadioRxDone+0x85c>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011a4e:	4b0e      	ldr	r3, [pc, #56]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a50:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00b      	beq.n	8011a70 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a58:	2000      	movs	r0, #0
 8011a5a:	f000 fcb7 	bl	80123cc <OnAckTimeoutTimerEvent>
 8011a5e:	e007      	b.n	8011a70 <ProcessRadioRxDone+0x86c>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011a60:	4b0a      	ldr	r3, [pc, #40]	; (8011a8c <ProcessRadioRxDone+0x888>)
 8011a62:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d102      	bne.n	8011a70 <ProcessRadioRxDone+0x86c>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011a6a:	2000      	movs	r0, #0
 8011a6c:	f000 fcae 	bl	80123cc <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011a70:	4a05      	ldr	r2, [pc, #20]	; (8011a88 <ProcessRadioRxDone+0x884>)
 8011a72:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011a76:	f043 0320 	orr.w	r3, r3, #32
 8011a7a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8011a7e:	f7ff fae9 	bl	8011054 <UpdateRxSlotIdleState>
}
 8011a82:	3788      	adds	r7, #136	; 0x88
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bdb0      	pop	{r4, r5, r7, pc}
 8011a88:	200033f0 	.word	0x200033f0
 8011a8c:	200038f8 	.word	0x200038f8
 8011a90:	20003628 	.word	0x20003628

08011a94 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011a98:	4b11      	ldr	r3, [pc, #68]	; (8011ae0 <ProcessRadioTxTimeout+0x4c>)
 8011a9a:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011a9e:	2b02      	cmp	r3, #2
 8011aa0:	d002      	beq.n	8011aa8 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011aa2:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <ProcessRadioTxTimeout+0x50>)
 8011aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aa6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011aa8:	f7ff fad4 	bl	8011054 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011aac:	4b0e      	ldr	r3, [pc, #56]	; (8011ae8 <ProcessRadioTxTimeout+0x54>)
 8011aae:	2202      	movs	r2, #2
 8011ab0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011ab4:	2002      	movs	r0, #2
 8011ab6:	f004 fbe9 	bl	801628c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8011aba:	4b0b      	ldr	r3, [pc, #44]	; (8011ae8 <ProcessRadioTxTimeout+0x54>)
 8011abc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d003      	beq.n	8011acc <ProcessRadioTxTimeout+0x38>
    {
        MacCtx.AckTimeoutRetry = true;
 8011ac4:	4b08      	ldr	r3, [pc, #32]	; (8011ae8 <ProcessRadioTxTimeout+0x54>)
 8011ac6:	2201      	movs	r2, #1
 8011ac8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011acc:	4a06      	ldr	r2, [pc, #24]	; (8011ae8 <ProcessRadioTxTimeout+0x54>)
 8011ace:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ad2:	f043 0320 	orr.w	r3, r3, #32
 8011ad6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 8011ada:	bf00      	nop
 8011adc:	bd80      	pop	{r7, pc}
 8011ade:	bf00      	nop
 8011ae0:	200038f8 	.word	0x200038f8
 8011ae4:	0802333c 	.word	0x0802333c
 8011ae8:	200033f0 	.word	0x200033f0

08011aec <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b084      	sub	sp, #16
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	460a      	mov	r2, r1
 8011af6:	71fb      	strb	r3, [r7, #7]
 8011af8:	4613      	mov	r3, r2
 8011afa:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011b00:	4b40      	ldr	r3, [pc, #256]	; (8011c04 <HandleRadioRxErrorTimeout+0x118>)
 8011b02:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011b06:	2b02      	cmp	r3, #2
 8011b08:	d002      	beq.n	8011b10 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 8011b0a:	4b3f      	ldr	r3, [pc, #252]	; (8011c08 <HandleRadioRxErrorTimeout+0x11c>)
 8011b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b0e:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8011b10:	f003 ff1d 	bl	801594e <LoRaMacClassBIsBeaconExpected>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d007      	beq.n	8011b2a <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011b1a:	2002      	movs	r0, #2
 8011b1c:	f003 fecb 	bl	80158b6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011b20:	2000      	movs	r0, #0
 8011b22:	f003 feed 	bl	8015900 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 8011b26:	2301      	movs	r3, #1
 8011b28:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011b2a:	4b36      	ldr	r3, [pc, #216]	; (8011c04 <HandleRadioRxErrorTimeout+0x118>)
 8011b2c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011b30:	2b01      	cmp	r3, #1
 8011b32:	d119      	bne.n	8011b68 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011b34:	f003 ff12 	bl	801595c <LoRaMacClassBIsPingExpected>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d007      	beq.n	8011b4e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b3e:	2000      	movs	r0, #0
 8011b40:	f003 fec3 	bl	80158ca <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011b44:	2000      	movs	r0, #0
 8011b46:	f003 fee4 	bl	8015912 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011b4e:	f003 ff0c 	bl	801596a <LoRaMacClassBIsMulticastExpected>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d007      	beq.n	8011b68 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011b58:	2000      	movs	r0, #0
 8011b5a:	f003 fec0 	bl	80158de <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011b5e:	2000      	movs	r0, #0
 8011b60:	f003 fee0 	bl	8015924 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011b64:	2301      	movs	r3, #1
 8011b66:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011b68:	7bfb      	ldrb	r3, [r7, #15]
 8011b6a:	f083 0301 	eor.w	r3, r3, #1
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d040      	beq.n	8011bf6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011b74:	4b25      	ldr	r3, [pc, #148]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011b76:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d122      	bne.n	8011bc4 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011b7e:	4b23      	ldr	r3, [pc, #140]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011b80:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d003      	beq.n	8011b90 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011b88:	4a20      	ldr	r2, [pc, #128]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011b90:	79fb      	ldrb	r3, [r7, #7]
 8011b92:	4618      	mov	r0, r3
 8011b94:	f004 fb7a 	bl	801628c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011b98:	4b1a      	ldr	r3, [pc, #104]	; (8011c04 <HandleRadioRxErrorTimeout+0x118>)
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f00e f869 	bl	801fc74 <UTIL_TIMER_GetElapsedTime>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	4b19      	ldr	r3, [pc, #100]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011ba6:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d323      	bcc.n	8011bf6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011bae:	4818      	ldr	r0, [pc, #96]	; (8011c10 <HandleRadioRxErrorTimeout+0x124>)
 8011bb0:	f00d ff34 	bl	801fa1c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011bb4:	4a15      	ldr	r2, [pc, #84]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011bb6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bba:	f043 0320 	orr.w	r3, r3, #32
 8011bbe:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011bc2:	e018      	b.n	8011bf6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011bc4:	4b11      	ldr	r3, [pc, #68]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011bc6:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8011bce:	4a0f      	ldr	r2, [pc, #60]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011bd0:	79bb      	ldrb	r3, [r7, #6]
 8011bd2:	f882 3439 	strb.w	r3, [r2, #1081]	; 0x439
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8011bd6:	79bb      	ldrb	r3, [r7, #6]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f004 fb57 	bl	801628c <LoRaMacConfirmQueueSetStatusCmn>

            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011bde:	4b09      	ldr	r3, [pc, #36]	; (8011c04 <HandleRadioRxErrorTimeout+0x118>)
 8011be0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8011be4:	2b02      	cmp	r3, #2
 8011be6:	d006      	beq.n	8011bf6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011be8:	4a08      	ldr	r2, [pc, #32]	; (8011c0c <HandleRadioRxErrorTimeout+0x120>)
 8011bea:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bee:	f043 0320 	orr.w	r3, r3, #32
 8011bf2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }
    }

    UpdateRxSlotIdleState( );
 8011bf6:	f7ff fa2d 	bl	8011054 <UpdateRxSlotIdleState>
}
 8011bfa:	bf00      	nop
 8011bfc:	3710      	adds	r7, #16
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	200038f8 	.word	0x200038f8
 8011c08:	0802333c 	.word	0x0802333c
 8011c0c:	200033f0 	.word	0x200033f0
 8011c10:	20003788 	.word	0x20003788

08011c14 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011c18:	2106      	movs	r1, #6
 8011c1a:	2005      	movs	r0, #5
 8011c1c:	f7ff ff66 	bl	8011aec <HandleRadioRxErrorTimeout>
}
 8011c20:	bf00      	nop
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011c28:	2104      	movs	r1, #4
 8011c2a:	2003      	movs	r0, #3
 8011c2c:	f7ff ff5e 	bl	8011aec <HandleRadioRxErrorTimeout>
}
 8011c30:	bf00      	nop
 8011c32:	bd80      	pop	{r7, pc}

08011c34 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c3e:	607b      	str	r3, [r7, #4]
  return(result);
 8011c40:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011c42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c44:	b672      	cpsid	i
}
 8011c46:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011c48:	4b1d      	ldr	r3, [pc, #116]	; (8011cc0 <LoRaMacHandleIrqEvents+0x8c>)
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011c4e:	4b1c      	ldr	r3, [pc, #112]	; (8011cc0 <LoRaMacHandleIrqEvents+0x8c>)
 8011c50:	2200      	movs	r2, #0
 8011c52:	601a      	str	r2, [r3, #0]
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	f383 8810 	msr	PRIMASK, r3
}
 8011c5e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d027      	beq.n	8011cb6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011c66:	783b      	ldrb	r3, [r7, #0]
 8011c68:	f003 0310 	and.w	r3, r3, #16
 8011c6c:	b2db      	uxtb	r3, r3
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d001      	beq.n	8011c76 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011c72:	f7ff fa07 	bl	8011084 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011c76:	783b      	ldrb	r3, [r7, #0]
 8011c78:	f003 0308 	and.w	r3, r3, #8
 8011c7c:	b2db      	uxtb	r3, r3
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d001      	beq.n	8011c86 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011c82:	f7ff fabf 	bl	8011204 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011c86:	783b      	ldrb	r3, [r7, #0]
 8011c88:	f003 0304 	and.w	r3, r3, #4
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d001      	beq.n	8011c96 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011c92:	f7ff feff 	bl	8011a94 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011c96:	783b      	ldrb	r3, [r7, #0]
 8011c98:	f003 0302 	and.w	r3, r3, #2
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d001      	beq.n	8011ca6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011ca2:	f7ff ffb7 	bl	8011c14 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011ca6:	783b      	ldrb	r3, [r7, #0]
 8011ca8:	f003 0301 	and.w	r3, r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d001      	beq.n	8011cb6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011cb2:	f7ff ffb7 	bl	8011c24 <ProcessRadioRxTimeout>
        }
    }
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	20003f08 	.word	0x20003f08

08011cc4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011cc8:	4b08      	ldr	r3, [pc, #32]	; (8011cec <LoRaMacIsBusy+0x28>)
 8011cca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d106      	bne.n	8011ce0 <LoRaMacIsBusy+0x1c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011cd2:	4b06      	ldr	r3, [pc, #24]	; (8011cec <LoRaMacIsBusy+0x28>)
 8011cd4:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011cd8:	2b01      	cmp	r3, #1
 8011cda:	d101      	bne.n	8011ce0 <LoRaMacIsBusy+0x1c>
    {
        return false;
 8011cdc:	2300      	movs	r3, #0
 8011cde:	e000      	b.n	8011ce2 <LoRaMacIsBusy+0x1e>
    }
    return true;
 8011ce0:	2301      	movs	r3, #1
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bc80      	pop	{r7}
 8011ce8:	4770      	bx	lr
 8011cea:	bf00      	nop
 8011cec:	200033f0 	.word	0x200033f0

08011cf0 <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b083      	sub	sp, #12
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011cfa:	4a04      	ldr	r2, [pc, #16]	; (8011d0c <LoRaMacEnableRequests+0x1c>)
 8011cfc:	79fb      	ldrb	r3, [r7, #7]
 8011cfe:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011d02:	bf00      	nop
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bc80      	pop	{r7}
 8011d0a:	4770      	bx	lr
 8011d0c:	200033f0 	.word	0x200033f0

08011d10 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b082      	sub	sp, #8
 8011d14:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011d16:	4b2c      	ldr	r3, [pc, #176]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d18:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d1c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011d1e:	4b2a      	ldr	r3, [pc, #168]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d20:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d14a      	bne.n	8011dbe <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011d28:	4b27      	ldr	r3, [pc, #156]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d2e:	f003 0301 	and.w	r3, r3, #1
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d006      	beq.n	8011d46 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011d38:	4a23      	ldr	r2, [pc, #140]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d3a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d3e:	f36f 0300 	bfc	r3, #0, #1
 8011d42:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d46:	4b20      	ldr	r3, [pc, #128]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d48:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d4c:	f003 0304 	and.w	r3, r3, #4
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d006      	beq.n	8011d64 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011d56:	4a1c      	ldr	r2, [pc, #112]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d58:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d5c:	f36f 0382 	bfc	r3, #2, #1
 8011d60:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011d64:	2001      	movs	r0, #1
 8011d66:	f7ff ffc3 	bl	8011cf0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011d6a:	793b      	ldrb	r3, [r7, #4]
 8011d6c:	f003 0301 	and.w	r3, r3, #1
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d005      	beq.n	8011d82 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011d76:	4b14      	ldr	r3, [pc, #80]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011d78:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	4813      	ldr	r0, [pc, #76]	; (8011dcc <LoRaMacHandleRequestEvents+0xbc>)
 8011d80:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011d82:	793b      	ldrb	r3, [r7, #4]
 8011d84:	f003 0304 	and.w	r3, r3, #4
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d00e      	beq.n	8011dac <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011d8e:	4810      	ldr	r0, [pc, #64]	; (8011dd0 <LoRaMacHandleRequestEvents+0xc0>)
 8011d90:	f004 faca 	bl	8016328 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011d94:	f004 fb14 	bl	80163c0 <LoRaMacConfirmQueueGetCnt>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d006      	beq.n	8011dac <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011d9e:	4a0a      	ldr	r2, [pc, #40]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011da0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011da4:	f043 0304 	orr.w	r3, r3, #4
 8011da8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011dac:	f003 fdfb 	bl	80159a6 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011db0:	4a05      	ldr	r2, [pc, #20]	; (8011dc8 <LoRaMacHandleRequestEvents+0xb8>)
 8011db2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011db6:	f36f 1345 	bfc	r3, #5, #1
 8011dba:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011dbe:	bf00      	nop
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200033f0 	.word	0x200033f0
 8011dcc:	20003828 	.word	0x20003828
 8011dd0:	2000383c 	.word	0x2000383c

08011dd4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b082      	sub	sp, #8
 8011dd8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 8011dda:	4b0a      	ldr	r3, [pc, #40]	; (8011e04 <LoRaMacHandleScheduleUplinkEvent+0x30>)
 8011ddc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d10a      	bne.n	8011dfa <LoRaMacHandleScheduleUplinkEvent+0x26>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 8011de4:	2300      	movs	r3, #0
 8011de6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8011de8:	1dfb      	adds	r3, r7, #7
 8011dea:	4618      	mov	r0, r3
 8011dec:	f004 f882 	bl	8015ef4 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8011df0:	79fb      	ldrb	r3, [r7, #7]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d001      	beq.n	8011dfa <LoRaMacHandleScheduleUplinkEvent+0x26>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 8011df6:	f000 fc81 	bl	80126fc <SetMlmeScheduleUplinkIndication>
        }
    }
}
 8011dfa:	bf00      	nop
 8011dfc:	3708      	adds	r7, #8
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	bd80      	pop	{r7, pc}
 8011e02:	bf00      	nop
 8011e04:	200033f0 	.word	0x200033f0

08011e08 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b088      	sub	sp, #32
 8011e0c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011e0e:	4b25      	ldr	r3, [pc, #148]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e10:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e14:	f003 0308 	and.w	r3, r3, #8
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00d      	beq.n	8011e3a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011e1e:	4a21      	ldr	r2, [pc, #132]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e20:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011e24:	f36f 03c3 	bfc	r3, #3, #1
 8011e28:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011e2c:	4b1d      	ldr	r3, [pc, #116]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e2e:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	491c      	ldr	r1, [pc, #112]	; (8011ea8 <LoRaMacHandleIndicationEvents+0xa0>)
 8011e36:	481d      	ldr	r0, [pc, #116]	; (8011eac <LoRaMacHandleIndicationEvents+0xa4>)
 8011e38:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8011e3a:	4b1a      	ldr	r3, [pc, #104]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e3c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e40:	f003 0310 	and.w	r3, r3, #16
 8011e44:	b2db      	uxtb	r3, r3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d012      	beq.n	8011e70 <LoRaMacHandleIndicationEvents+0x68>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8011e4a:	2307      	movs	r3, #7
 8011e4c:	713b      	strb	r3, [r7, #4]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	717b      	strb	r3, [r7, #5]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8011e52:	4b14      	ldr	r3, [pc, #80]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e54:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e58:	68db      	ldr	r3, [r3, #12]
 8011e5a:	1d3a      	adds	r2, r7, #4
 8011e5c:	4912      	ldr	r1, [pc, #72]	; (8011ea8 <LoRaMacHandleIndicationEvents+0xa0>)
 8011e5e:	4610      	mov	r0, r2
 8011e60:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8011e62:	4a10      	ldr	r2, [pc, #64]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e64:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011e68:	f36f 1304 	bfc	r3, #4, #1
 8011e6c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011e70:	4b0c      	ldr	r3, [pc, #48]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e72:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011e76:	f003 0302 	and.w	r3, r3, #2
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00d      	beq.n	8011e9c <LoRaMacHandleIndicationEvents+0x94>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011e80:	4a08      	ldr	r2, [pc, #32]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e82:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011e86:	f36f 0341 	bfc	r3, #1, #1
 8011e8a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011e8e:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <LoRaMacHandleIndicationEvents+0x9c>)
 8011e90:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	4904      	ldr	r1, [pc, #16]	; (8011ea8 <LoRaMacHandleIndicationEvents+0xa0>)
 8011e98:	4805      	ldr	r0, [pc, #20]	; (8011eb0 <LoRaMacHandleIndicationEvents+0xa8>)
 8011e9a:	4798      	blx	r3
    }
}
 8011e9c:	bf00      	nop
 8011e9e:	3720      	adds	r7, #32
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	200033f0 	.word	0x200033f0
 8011ea8:	2000386c 	.word	0x2000386c
 8011eac:	20003850 	.word	0x20003850
 8011eb0:	2000380c 	.word	0x2000380c

08011eb4 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011eba:	4b32      	ldr	r3, [pc, #200]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ebc:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ec0:	f003 0301 	and.w	r3, r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d058      	beq.n	8011f7c <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011ed2:	4b2c      	ldr	r3, [pc, #176]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ed4:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d004      	beq.n	8011ee6 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011edc:	4b29      	ldr	r3, [pc, #164]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ede:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011ee2:	2b03      	cmp	r3, #3
 8011ee4:	d104      	bne.n	8011ef0 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011ee6:	f002 f89f 	bl	8014028 <CheckRetransUnconfirmedUplink>
 8011eea:	4603      	mov	r3, r0
 8011eec:	71fb      	strb	r3, [r7, #7]
 8011eee:	e020      	b.n	8011f32 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011ef0:	4b24      	ldr	r3, [pc, #144]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ef2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011ef6:	2b01      	cmp	r3, #1
 8011ef8:	d11b      	bne.n	8011f32 <LoRaMacHandleMcpsRequest+0x7e>
        {
            if( MacCtx.AckTimeoutRetry == true )
 8011efa:	4b22      	ldr	r3, [pc, #136]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011efc:	f893 3413 	ldrb.w	r3, [r3, #1043]	; 0x413
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d014      	beq.n	8011f2e <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011f04:	f002 f8bc 	bl	8014080 <CheckRetransConfirmedUplink>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011f0c:	4b1e      	ldr	r3, [pc, #120]	; (8011f88 <LoRaMacHandleMcpsRequest+0xd4>)
 8011f0e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d10d      	bne.n	8011f32 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011f16:	79fb      	ldrb	r3, [r7, #7]
 8011f18:	f083 0301 	eor.w	r3, r3, #1
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d002      	beq.n	8011f28 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011f22:	f002 f929 	bl	8014178 <AckTimeoutRetriesProcess>
 8011f26:	e004      	b.n	8011f32 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011f28:	f002 f964 	bl	80141f4 <AckTimeoutRetriesFinalize>
 8011f2c:	e001      	b.n	8011f32 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011f2e:	2301      	movs	r3, #1
 8011f30:	71bb      	strb	r3, [r7, #6]
            }
        }

        if( stopRetransmission == true )
 8011f32:	79fb      	ldrb	r3, [r7, #7]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00d      	beq.n	8011f54 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011f38:	4814      	ldr	r0, [pc, #80]	; (8011f8c <LoRaMacHandleMcpsRequest+0xd8>)
 8011f3a:	f00d fd6f 	bl	801fa1c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011f3e:	4b11      	ldr	r3, [pc, #68]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f40:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011f44:	f023 0320 	bic.w	r3, r3, #32
 8011f48:	4a0e      	ldr	r2, [pc, #56]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f4a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011f4e:	f002 f8b9 	bl	80140c4 <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011f52:	e013      	b.n	8011f7c <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011f54:	79bb      	ldrb	r3, [r7, #6]
 8011f56:	f083 0301 	eor.w	r3, r3, #1
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d00d      	beq.n	8011f7c <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011f60:	4a08      	ldr	r2, [pc, #32]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f62:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011f66:	f36f 1345 	bfc	r3, #5, #1
 8011f6a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011f6e:	4b05      	ldr	r3, [pc, #20]	; (8011f84 <LoRaMacHandleMcpsRequest+0xd0>)
 8011f70:	2200      	movs	r2, #0
 8011f72:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
            OnTxDelayedTimerEvent( NULL );
 8011f76:	2000      	movs	r0, #0
 8011f78:	f000 f97e 	bl	8012278 <OnTxDelayedTimerEvent>
}
 8011f7c:	bf00      	nop
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	200033f0 	.word	0x200033f0
 8011f88:	200038f8 	.word	0x200038f8
 8011f8c:	20003758 	.word	0x20003758

08011f90 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011f94:	4b1b      	ldr	r3, [pc, #108]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011f96:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011f9a:	f003 0304 	and.w	r3, r3, #4
 8011f9e:	b2db      	uxtb	r3, r3
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d02c      	beq.n	8011ffe <LoRaMacHandleMlmeRequest+0x6e>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011fa4:	2001      	movs	r0, #1
 8011fa6:	f004 f9a5 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d012      	beq.n	8011fd6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011fb0:	2001      	movs	r0, #1
 8011fb2:	f004 f941 	bl	8016238 <LoRaMacConfirmQueueGetStatus>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d103      	bne.n	8011fc4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011fbc:	4b11      	ldr	r3, [pc, #68]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011fc4:	4b0f      	ldr	r3, [pc, #60]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011fc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011fca:	f023 0302 	bic.w	r3, r3, #2
 8011fce:	4a0d      	ldr	r2, [pc, #52]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011fd0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 8011fd4:	e013      	b.n	8011ffe <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011fd6:	2005      	movs	r0, #5
 8011fd8:	f004 f98c 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d105      	bne.n	8011fee <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011fe2:	2006      	movs	r0, #6
 8011fe4:	f004 f986 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8011fe8:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d007      	beq.n	8011ffe <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011fee:	4b05      	ldr	r3, [pc, #20]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011ff0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ff4:	f023 0302 	bic.w	r3, r3, #2
 8011ff8:	4a02      	ldr	r2, [pc, #8]	; (8012004 <LoRaMacHandleMlmeRequest+0x74>)
 8011ffa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011ffe:	bf00      	nop
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	200033f0 	.word	0x200033f0

08012008 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 801200c:	200c      	movs	r0, #12
 801200e:	f004 f971 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8012012:	4603      	mov	r3, r0
 8012014:	2b00      	cmp	r3, #0
 8012016:	d019      	beq.n	801204c <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8012018:	4b0e      	ldr	r3, [pc, #56]	; (8012054 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801201a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801201e:	f003 0301 	and.w	r3, r3, #1
 8012022:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8012024:	2b00      	cmp	r3, #0
 8012026:	d111      	bne.n	801204c <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8012028:	4b0a      	ldr	r3, [pc, #40]	; (8012054 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801202a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801202e:	f003 0304 	and.w	r3, r3, #4
 8012032:	b2db      	uxtb	r3, r3
 8012034:	2b00      	cmp	r3, #0
 8012036:	d009      	beq.n	801204c <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8012038:	4b06      	ldr	r3, [pc, #24]	; (8012054 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 801203a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801203e:	f023 0302 	bic.w	r3, r3, #2
 8012042:	4a04      	ldr	r2, [pc, #16]	; (8012054 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8012044:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8012048:	2301      	movs	r3, #1
 801204a:	e000      	b.n	801204e <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	200033f0 	.word	0x200033f0

08012058 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 8012058:	b480      	push	{r7}
 801205a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 801205c:	4b0d      	ldr	r3, [pc, #52]	; (8012094 <LoRaMacCheckForRxAbort+0x3c>)
 801205e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012066:	2b00      	cmp	r3, #0
 8012068:	d00f      	beq.n	801208a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 801206a:	4b0a      	ldr	r3, [pc, #40]	; (8012094 <LoRaMacCheckForRxAbort+0x3c>)
 801206c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012074:	4a07      	ldr	r2, [pc, #28]	; (8012094 <LoRaMacCheckForRxAbort+0x3c>)
 8012076:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801207a:	4b06      	ldr	r3, [pc, #24]	; (8012094 <LoRaMacCheckForRxAbort+0x3c>)
 801207c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012080:	f023 0302 	bic.w	r3, r3, #2
 8012084:	4a03      	ldr	r2, [pc, #12]	; (8012094 <LoRaMacCheckForRxAbort+0x3c>)
 8012086:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 801208a:	bf00      	nop
 801208c:	46bd      	mov	sp, r7
 801208e:	bc80      	pop	{r7}
 8012090:	4770      	bx	lr
 8012092:	bf00      	nop
 8012094:	200033f0 	.word	0x200033f0

08012098 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 80120a4:	2300      	movs	r3, #0
 80120a6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 80120a8:	4b50      	ldr	r3, [pc, #320]	; (80121ec <LoRaMacHandleNvm+0x154>)
 80120aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f040 8098 	bne.w	80121e4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2124      	movs	r1, #36	; 0x24
 80120b8:	4618      	mov	r0, r3
 80120ba:	f009 fac9 	bl	801b650 <Crc32>
 80120be:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c4:	68ba      	ldr	r2, [r7, #8]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d006      	beq.n	80120d8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	68ba      	ldr	r2, [r7, #8]
 80120ce:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 80120d0:	89fb      	ldrh	r3, [r7, #14]
 80120d2:	f043 0301 	orr.w	r3, r3, #1
 80120d6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	3328      	adds	r3, #40	; 0x28
 80120dc:	2114      	movs	r1, #20
 80120de:	4618      	mov	r0, r3
 80120e0:	f009 fab6 	bl	801b650 <Crc32>
 80120e4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d006      	beq.n	80120fe <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	68ba      	ldr	r2, [r7, #8]
 80120f4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 80120f6:	89fb      	ldrh	r3, [r7, #14]
 80120f8:	f043 0302 	orr.w	r3, r3, #2
 80120fc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3340      	adds	r3, #64	; 0x40
 8012102:	21d4      	movs	r1, #212	; 0xd4
 8012104:	4618      	mov	r0, r3
 8012106:	f009 faa3 	bl	801b650 <Crc32>
 801210a:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8012112:	68ba      	ldr	r2, [r7, #8]
 8012114:	429a      	cmp	r2, r3
 8012116:	d007      	beq.n	8012128 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	68ba      	ldr	r2, [r7, #8]
 801211c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8012120:	89fb      	ldrh	r3, [r7, #14]
 8012122:	f043 0304 	orr.w	r3, r3, #4
 8012126:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801212e:	21bc      	movs	r1, #188	; 0xbc
 8012130:	4618      	mov	r0, r3
 8012132:	f009 fa8d 	bl	801b650 <Crc32>
 8012136:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 801213e:	68ba      	ldr	r2, [r7, #8]
 8012140:	429a      	cmp	r2, r3
 8012142:	d007      	beq.n	8012154 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	68ba      	ldr	r2, [r7, #8]
 8012148:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 801214c:	89fb      	ldrh	r3, [r7, #14]
 801214e:	f043 0308 	orr.w	r3, r3, #8
 8012152:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 801215a:	21a0      	movs	r1, #160	; 0xa0
 801215c:	4618      	mov	r0, r3
 801215e:	f009 fa77 	bl	801b650 <Crc32>
 8012162:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	429a      	cmp	r2, r3
 801216e:	d007      	beq.n	8012180 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	68ba      	ldr	r2, [r7, #8]
 8012174:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8012178:	89fb      	ldrh	r3, [r7, #14]
 801217a:	f043 0310 	orr.w	r3, r3, #16
 801217e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8012186:	f44f 715e 	mov.w	r1, #888	; 0x378
 801218a:	4618      	mov	r0, r3
 801218c:	f009 fa60 	bl	801b650 <Crc32>
 8012190:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 35f4 	ldr.w	r3, [r3, #1524]	; 0x5f4
 8012198:	68ba      	ldr	r2, [r7, #8]
 801219a:	429a      	cmp	r2, r3
 801219c:	d007      	beq.n	80121ae <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	68ba      	ldr	r2, [r7, #8]
 80121a2:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 80121a6:	89fb      	ldrh	r3, [r7, #14]
 80121a8:	f043 0320 	orr.w	r3, r3, #32
 80121ac:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 80121b4:	2114      	movs	r1, #20
 80121b6:	4618      	mov	r0, r3
 80121b8:	f009 fa4a 	bl	801b650 <Crc32>
 80121bc:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d007      	beq.n	80121da <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	68ba      	ldr	r2, [r7, #8]
 80121ce:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 80121d2:	89fb      	ldrh	r3, [r7, #14]
 80121d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121d8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 80121da:	89fb      	ldrh	r3, [r7, #14]
 80121dc:	4618      	mov	r0, r3
 80121de:	f001 ffad 	bl	801413c <CallNvmDataChangeCallback>
 80121e2:	e000      	b.n	80121e6 <LoRaMacHandleNvm+0x14e>
        return;
 80121e4:	bf00      	nop
}
 80121e6:	3710      	adds	r7, #16
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	200033f0 	.word	0x200033f0

080121f0 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 80121f6:	2300      	movs	r3, #0
 80121f8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 80121fa:	f7ff fd1b 	bl	8011c34 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 80121fe:	f003 fc36 	bl	8015a6e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8012202:	4b1b      	ldr	r3, [pc, #108]	; (8012270 <LoRaMacProcess+0x80>)
 8012204:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012208:	f003 0320 	and.w	r3, r3, #32
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	d021      	beq.n	8012256 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8012212:	2000      	movs	r0, #0
 8012214:	f7ff fd6c 	bl	8011cf0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8012218:	f7ff ff1e 	bl	8012058 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 801221c:	f002 f81e 	bl	801425c <IsRequestPending>
 8012220:	4603      	mov	r3, r0
 8012222:	2b00      	cmp	r3, #0
 8012224:	d006      	beq.n	8012234 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8012226:	f7ff feef 	bl	8012008 <LoRaMacCheckForBeaconAcquisition>
 801222a:	4603      	mov	r3, r0
 801222c:	461a      	mov	r2, r3
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	4313      	orrs	r3, r2
 8012232:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8012234:	79fb      	ldrb	r3, [r7, #7]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d103      	bne.n	8012242 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 801223a:	f7ff fea9 	bl	8011f90 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 801223e:	f7ff fe39 	bl	8011eb4 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8012242:	f7ff fd65 	bl	8011d10 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8012246:	f7ff fdc5 	bl	8011dd4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 801224a:	480a      	ldr	r0, [pc, #40]	; (8012274 <LoRaMacProcess+0x84>)
 801224c:	f7ff ff24 	bl	8012098 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012250:	2001      	movs	r0, #1
 8012252:	f7ff fd4d 	bl	8011cf0 <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 8012256:	f7ff fdd7 	bl	8011e08 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 801225a:	4b05      	ldr	r3, [pc, #20]	; (8012270 <LoRaMacProcess+0x80>)
 801225c:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012260:	2b02      	cmp	r3, #2
 8012262:	d101      	bne.n	8012268 <LoRaMacProcess+0x78>
    {
        OpenContinuousRxCWindow( );
 8012264:	f001 fb7c 	bl	8013960 <OpenContinuousRxCWindow>
    }
}
 8012268:	bf00      	nop
 801226a:	3708      	adds	r7, #8
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	200033f0 	.word	0x200033f0
 8012274:	200038f8 	.word	0x200038f8

08012278 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b082      	sub	sp, #8
 801227c:	af00      	add	r7, sp, #0
 801227e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012280:	4817      	ldr	r0, [pc, #92]	; (80122e0 <OnTxDelayedTimerEvent+0x68>)
 8012282:	f00d fbcb 	bl	801fa1c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012286:	4b17      	ldr	r3, [pc, #92]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 8012288:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801228c:	f023 0320 	bic.w	r3, r3, #32
 8012290:	4a14      	ldr	r2, [pc, #80]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 8012292:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8012296:	2001      	movs	r0, #1
 8012298:	f001 f8fc 	bl	8013494 <ScheduleTx>
 801229c:	4603      	mov	r3, r0
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d018      	beq.n	80122d4 <OnTxDelayedTimerEvent+0x5c>
 80122a2:	2b0b      	cmp	r3, #11
 80122a4:	d016      	beq.n	80122d4 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80122a6:	4b10      	ldr	r3, [pc, #64]	; (80122e8 <OnTxDelayedTimerEvent+0x70>)
 80122a8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80122ac:	b2da      	uxtb	r2, r3
 80122ae:	4b0d      	ldr	r3, [pc, #52]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 80122b0:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 80122b4:	4b0b      	ldr	r3, [pc, #44]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 80122b6:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 80122ba:	4b0a      	ldr	r3, [pc, #40]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 80122bc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 80122c0:	4b08      	ldr	r3, [pc, #32]	; (80122e4 <OnTxDelayedTimerEvent+0x6c>)
 80122c2:	2209      	movs	r2, #9
 80122c4:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 80122c8:	2009      	movs	r0, #9
 80122ca:	f003 ffdf 	bl	801628c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 80122ce:	f001 fef9 	bl	80140c4 <StopRetransmission>
            break;
 80122d2:	e000      	b.n	80122d6 <OnTxDelayedTimerEvent+0x5e>
            break;
 80122d4:	bf00      	nop
        }
    }
}
 80122d6:	bf00      	nop
 80122d8:	3708      	adds	r7, #8
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	20003758 	.word	0x20003758
 80122e4:	200033f0 	.word	0x200033f0
 80122e8:	200038f8 	.word	0x200038f8

080122ec <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80122f4:	4b14      	ldr	r3, [pc, #80]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 80122f6:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 80122fa:	4b13      	ldr	r3, [pc, #76]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 80122fc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 8012300:	4b12      	ldr	r3, [pc, #72]	; (801234c <OnRxWindow1TimerEvent+0x60>)
 8012302:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8012306:	b25a      	sxtb	r2, r3
 8012308:	4b0f      	ldr	r3, [pc, #60]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 801230a:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801230e:	4b0f      	ldr	r3, [pc, #60]	; (801234c <OnRxWindow1TimerEvent+0x60>)
 8012310:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012314:	4b0c      	ldr	r3, [pc, #48]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 8012316:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801231a:	4b0c      	ldr	r3, [pc, #48]	; (801234c <OnRxWindow1TimerEvent+0x60>)
 801231c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012320:	4b09      	ldr	r3, [pc, #36]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 8012322:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 8012326:	4b08      	ldr	r3, [pc, #32]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 8012328:	2200      	movs	r2, #0
 801232a:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 801232e:	4b06      	ldr	r3, [pc, #24]	; (8012348 <OnRxWindow1TimerEvent+0x5c>)
 8012330:	2200      	movs	r2, #0
 8012332:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8012336:	4906      	ldr	r1, [pc, #24]	; (8012350 <OnRxWindow1TimerEvent+0x64>)
 8012338:	4806      	ldr	r0, [pc, #24]	; (8012354 <OnRxWindow1TimerEvent+0x68>)
 801233a:	f001 fae3 	bl	8013904 <RxWindowSetup>
}
 801233e:	bf00      	nop
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	200033f0 	.word	0x200033f0
 801234c:	200038f8 	.word	0x200038f8
 8012350:	200037a8 	.word	0x200037a8
 8012354:	20003770 	.word	0x20003770

08012358 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b082      	sub	sp, #8
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012360:	4b16      	ldr	r3, [pc, #88]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 8012362:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012366:	2b00      	cmp	r3, #0
 8012368:	d023      	beq.n	80123b2 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801236a:	4b14      	ldr	r3, [pc, #80]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 801236c:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8012370:	4b12      	ldr	r3, [pc, #72]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 8012372:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012376:	4b12      	ldr	r3, [pc, #72]	; (80123c0 <OnRxWindow2TimerEvent+0x68>)
 8012378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801237a:	4a10      	ldr	r2, [pc, #64]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 801237c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012380:	4b0f      	ldr	r3, [pc, #60]	; (80123c0 <OnRxWindow2TimerEvent+0x68>)
 8012382:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8012386:	4b0d      	ldr	r3, [pc, #52]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 8012388:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801238c:	4b0c      	ldr	r3, [pc, #48]	; (80123c0 <OnRxWindow2TimerEvent+0x68>)
 801238e:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8012392:	4b0a      	ldr	r3, [pc, #40]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 8012394:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012398:	4b08      	ldr	r3, [pc, #32]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 801239a:	2200      	movs	r2, #0
 801239c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80123a0:	4b06      	ldr	r3, [pc, #24]	; (80123bc <OnRxWindow2TimerEvent+0x64>)
 80123a2:	2201      	movs	r2, #1
 80123a4:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80123a8:	4906      	ldr	r1, [pc, #24]	; (80123c4 <OnRxWindow2TimerEvent+0x6c>)
 80123aa:	4807      	ldr	r0, [pc, #28]	; (80123c8 <OnRxWindow2TimerEvent+0x70>)
 80123ac:	f001 faaa 	bl	8013904 <RxWindowSetup>
 80123b0:	e000      	b.n	80123b4 <OnRxWindow2TimerEvent+0x5c>
        return;
 80123b2:	bf00      	nop
}
 80123b4:	3708      	adds	r7, #8
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	200033f0 	.word	0x200033f0
 80123c0:	200038f8 	.word	0x200038f8
 80123c4:	200037bc 	.word	0x200037bc
 80123c8:	20003788 	.word	0x20003788

080123cc <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80123d4:	4815      	ldr	r0, [pc, #84]	; (801242c <OnAckTimeoutTimerEvent+0x60>)
 80123d6:	f00d fb21 	bl	801fa1c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80123da:	4b15      	ldr	r3, [pc, #84]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 80123dc:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d003      	beq.n	80123ec <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80123e4:	4b12      	ldr	r3, [pc, #72]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 80123e6:	2201      	movs	r2, #1
 80123e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80123ec:	4b11      	ldr	r3, [pc, #68]	; (8012434 <OnAckTimeoutTimerEvent+0x68>)
 80123ee:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80123f2:	2b02      	cmp	r3, #2
 80123f4:	d106      	bne.n	8012404 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80123f6:	4a0e      	ldr	r2, [pc, #56]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 80123f8:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80123fc:	f043 0320 	orr.w	r3, r3, #32
 8012400:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8012404:	4b0a      	ldr	r3, [pc, #40]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 8012406:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801240a:	2b00      	cmp	r3, #0
 801240c:	d00a      	beq.n	8012424 <OnAckTimeoutTimerEvent+0x58>
 801240e:	4b08      	ldr	r3, [pc, #32]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 8012410:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012414:	691b      	ldr	r3, [r3, #16]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d004      	beq.n	8012424 <OnAckTimeoutTimerEvent+0x58>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801241a:	4b05      	ldr	r3, [pc, #20]	; (8012430 <OnAckTimeoutTimerEvent+0x64>)
 801241c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	4798      	blx	r3
    }
}
 8012424:	bf00      	nop
 8012426:	3708      	adds	r7, #8
 8012428:	46bd      	mov	sp, r7
 801242a:	bd80      	pop	{r7, pc}
 801242c:	200037e8 	.word	0x200037e8
 8012430:	200033f0 	.word	0x200033f0
 8012434:	200038f8 	.word	0x200038f8

08012438 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	60ba      	str	r2, [r7, #8]
 8012440:	607b      	str	r3, [r7, #4]
 8012442:	4603      	mov	r3, r0
 8012444:	73fb      	strb	r3, [r7, #15]
 8012446:	460b      	mov	r3, r1
 8012448:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d005      	beq.n	801245c <GetFCntDown+0x24>
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d002      	beq.n	801245c <GetFCntDown+0x24>
 8012456:	6a3b      	ldr	r3, [r7, #32]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d101      	bne.n	8012460 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801245c:	230a      	movs	r3, #10
 801245e:	e029      	b.n	80124b4 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012460:	7bfb      	ldrb	r3, [r7, #15]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d016      	beq.n	8012494 <GetFCntDown+0x5c>
 8012466:	2b01      	cmp	r3, #1
 8012468:	d118      	bne.n	801249c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801246a:	79bb      	ldrb	r3, [r7, #6]
 801246c:	2b01      	cmp	r3, #1
 801246e:	d10d      	bne.n	801248c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d002      	beq.n	801247c <GetFCntDown+0x44>
 8012476:	7bbb      	ldrb	r3, [r7, #14]
 8012478:	2b03      	cmp	r3, #3
 801247a:	d103      	bne.n	8012484 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	2202      	movs	r2, #2
 8012480:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012482:	e00d      	b.n	80124a0 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	2201      	movs	r2, #1
 8012488:	701a      	strb	r2, [r3, #0]
            break;
 801248a:	e009      	b.n	80124a0 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	2203      	movs	r2, #3
 8012490:	701a      	strb	r2, [r3, #0]
            break;
 8012492:	e005      	b.n	80124a0 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	2204      	movs	r2, #4
 8012498:	701a      	strb	r2, [r3, #0]
            break;
 801249a:	e001      	b.n	80124a0 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801249c:	2305      	movs	r3, #5
 801249e:	e009      	b.n	80124b4 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	7818      	ldrb	r0, [r3, #0]
 80124a4:	68bb      	ldr	r3, [r7, #8]
 80124a6:	89db      	ldrh	r3, [r3, #14]
 80124a8:	461a      	mov	r2, r3
 80124aa:	8b39      	ldrh	r1, [r7, #24]
 80124ac:	6a3b      	ldr	r3, [r7, #32]
 80124ae:	f004 fb17 	bl	8016ae0 <LoRaMacCryptoGetFCntDown>
 80124b2:	4603      	mov	r3, r0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3710      	adds	r7, #16
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 80124bc:	b5b0      	push	{r4, r5, r7, lr}
 80124be:	b084      	sub	sp, #16
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	4603      	mov	r3, r0
 80124c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124c6:	2303      	movs	r3, #3
 80124c8:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 80124ca:	4b61      	ldr	r3, [pc, #388]	; (8012650 <SwitchClass+0x194>)
 80124cc:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80124d0:	2b02      	cmp	r3, #2
 80124d2:	f000 80a5 	beq.w	8012620 <SwitchClass+0x164>
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	f300 80b4 	bgt.w	8012644 <SwitchClass+0x188>
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d003      	beq.n	80124e8 <SwitchClass+0x2c>
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	f000 808f 	beq.w	8012604 <SwitchClass+0x148>
 80124e6:	e0ad      	b.n	8012644 <SwitchClass+0x188>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 80124e8:	79fb      	ldrb	r3, [r7, #7]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d107      	bne.n	80124fe <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80124ee:	4b58      	ldr	r3, [pc, #352]	; (8012650 <SwitchClass+0x194>)
 80124f0:	4a57      	ldr	r2, [pc, #348]	; (8012650 <SwitchClass+0x194>)
 80124f2:	336c      	adds	r3, #108	; 0x6c
 80124f4:	3264      	adds	r2, #100	; 0x64
 80124f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80124fa:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 80124fe:	79fb      	ldrb	r3, [r7, #7]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d10c      	bne.n	801251e <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8012504:	79fb      	ldrb	r3, [r7, #7]
 8012506:	4618      	mov	r0, r3
 8012508:	f003 fa53 	bl	80159b2 <LoRaMacClassBSwitchClass>
 801250c:	4603      	mov	r3, r0
 801250e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8012510:	7bfb      	ldrb	r3, [r7, #15]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d103      	bne.n	801251e <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8012516:	4a4e      	ldr	r2, [pc, #312]	; (8012650 <SwitchClass+0x194>)
 8012518:	79fb      	ldrb	r3, [r7, #7]
 801251a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
                }
            }

            if( deviceClass == CLASS_C )
 801251e:	79fb      	ldrb	r3, [r7, #7]
 8012520:	2b02      	cmp	r3, #2
 8012522:	f040 808a 	bne.w	801263a <SwitchClass+0x17e>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012526:	4a4a      	ldr	r2, [pc, #296]	; (8012650 <SwitchClass+0x194>)
 8012528:	79fb      	ldrb	r3, [r7, #7]
 801252a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801252e:	4a49      	ldr	r2, [pc, #292]	; (8012654 <SwitchClass+0x198>)
 8012530:	4b48      	ldr	r3, [pc, #288]	; (8012654 <SwitchClass+0x198>)
 8012532:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8012536:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801253a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801253c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801253e:	682b      	ldr	r3, [r5, #0]
 8012540:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8012542:	4b44      	ldr	r3, [pc, #272]	; (8012654 <SwitchClass+0x198>)
 8012544:	2202      	movs	r2, #2
 8012546:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801254a:	2300      	movs	r3, #0
 801254c:	73bb      	strb	r3, [r7, #14]
 801254e:	e049      	b.n	80125e4 <SwitchClass+0x128>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8012550:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012554:	4a3e      	ldr	r2, [pc, #248]	; (8012650 <SwitchClass+0x194>)
 8012556:	212c      	movs	r1, #44	; 0x2c
 8012558:	fb01 f303 	mul.w	r3, r1, r3
 801255c:	4413      	add	r3, r2
 801255e:	33d2      	adds	r3, #210	; 0xd2
 8012560:	781b      	ldrb	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d038      	beq.n	80125d8 <SwitchClass+0x11c>
                    // TODO: Check multicast channel device class.
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8012566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801256a:	4a39      	ldr	r2, [pc, #228]	; (8012650 <SwitchClass+0x194>)
 801256c:	212c      	movs	r1, #44	; 0x2c
 801256e:	fb01 f303 	mul.w	r3, r1, r3
 8012572:	4413      	add	r3, r2
 8012574:	33e8      	adds	r3, #232	; 0xe8
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4a35      	ldr	r2, [pc, #212]	; (8012650 <SwitchClass+0x194>)
 801257a:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 801257c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012580:	4a33      	ldr	r2, [pc, #204]	; (8012650 <SwitchClass+0x194>)
 8012582:	212c      	movs	r1, #44	; 0x2c
 8012584:	fb01 f303 	mul.w	r3, r1, r3
 8012588:	4413      	add	r3, r2
 801258a:	33ec      	adds	r3, #236	; 0xec
 801258c:	f993 3000 	ldrsb.w	r3, [r3]
 8012590:	b2da      	uxtb	r2, r3
 8012592:	4b2f      	ldr	r3, [pc, #188]	; (8012650 <SwitchClass+0x194>)
 8012594:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012598:	4b2e      	ldr	r3, [pc, #184]	; (8012654 <SwitchClass+0x198>)
 801259a:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 801259e:	4b2d      	ldr	r3, [pc, #180]	; (8012654 <SwitchClass+0x198>)
 80125a0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 80125a4:	4b2a      	ldr	r3, [pc, #168]	; (8012650 <SwitchClass+0x194>)
 80125a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125a8:	4a2a      	ldr	r2, [pc, #168]	; (8012654 <SwitchClass+0x198>)
 80125aa:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80125ae:	4b28      	ldr	r3, [pc, #160]	; (8012650 <SwitchClass+0x194>)
 80125b0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80125b4:	4b27      	ldr	r3, [pc, #156]	; (8012654 <SwitchClass+0x198>)
 80125b6:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80125ba:	4b25      	ldr	r3, [pc, #148]	; (8012650 <SwitchClass+0x194>)
 80125bc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80125c0:	4b24      	ldr	r3, [pc, #144]	; (8012654 <SwitchClass+0x198>)
 80125c2:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 80125c6:	4b23      	ldr	r3, [pc, #140]	; (8012654 <SwitchClass+0x198>)
 80125c8:	2203      	movs	r2, #3
 80125ca:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80125ce:	4b21      	ldr	r3, [pc, #132]	; (8012654 <SwitchClass+0x198>)
 80125d0:	2201      	movs	r2, #1
 80125d2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80125d6:	e009      	b.n	80125ec <SwitchClass+0x130>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80125d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	3301      	adds	r3, #1
 80125e0:	b2db      	uxtb	r3, r3
 80125e2:	73bb      	strb	r3, [r7, #14]
 80125e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	ddb1      	ble.n	8012550 <SwitchClass+0x94>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80125ec:	4b19      	ldr	r3, [pc, #100]	; (8012654 <SwitchClass+0x198>)
 80125ee:	2200      	movs	r2, #0
 80125f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80125f4:	4b18      	ldr	r3, [pc, #96]	; (8012658 <SwitchClass+0x19c>)
 80125f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80125fa:	f001 f9b1 	bl	8013960 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012602:	e01a      	b.n	801263a <SwitchClass+0x17e>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8012604:	79fb      	ldrb	r3, [r7, #7]
 8012606:	4618      	mov	r0, r3
 8012608:	f003 f9d3 	bl	80159b2 <LoRaMacClassBSwitchClass>
 801260c:	4603      	mov	r3, r0
 801260e:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8012610:	7bfb      	ldrb	r3, [r7, #15]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d113      	bne.n	801263e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012616:	4a0e      	ldr	r2, [pc, #56]	; (8012650 <SwitchClass+0x194>)
 8012618:	79fb      	ldrb	r3, [r7, #7]
 801261a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc
            }
            break;
 801261e:	e00e      	b.n	801263e <SwitchClass+0x182>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8012620:	79fb      	ldrb	r3, [r7, #7]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d10d      	bne.n	8012642 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012626:	4a0a      	ldr	r2, [pc, #40]	; (8012650 <SwitchClass+0x194>)
 8012628:	79fb      	ldrb	r3, [r7, #7]
 801262a:	f882 30fc 	strb.w	r3, [r2, #252]	; 0xfc

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801262e:	4b0a      	ldr	r3, [pc, #40]	; (8012658 <SwitchClass+0x19c>)
 8012630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012632:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012634:	2300      	movs	r3, #0
 8012636:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8012638:	e003      	b.n	8012642 <SwitchClass+0x186>
            break;
 801263a:	bf00      	nop
 801263c:	e002      	b.n	8012644 <SwitchClass+0x188>
            break;
 801263e:	bf00      	nop
 8012640:	e000      	b.n	8012644 <SwitchClass+0x188>
            break;
 8012642:	bf00      	nop
        }
    }

    return status;
 8012644:	7bfb      	ldrb	r3, [r7, #15]
}
 8012646:	4618      	mov	r0, r3
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bdb0      	pop	{r4, r5, r7, pc}
 801264e:	bf00      	nop
 8012650:	200038f8 	.word	0x200038f8
 8012654:	200033f0 	.word	0x200033f0
 8012658:	0802333c 	.word	0x0802333c

0801265c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b086      	sub	sp, #24
 8012660:	af00      	add	r7, sp, #0
 8012662:	4603      	mov	r3, r0
 8012664:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012666:	4b10      	ldr	r3, [pc, #64]	; (80126a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012668:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801266c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801266e:	79fb      	ldrb	r3, [r7, #7]
 8012670:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012672:	230d      	movs	r3, #13
 8012674:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012676:	4b0c      	ldr	r3, [pc, #48]	; (80126a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012678:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801267c:	2b00      	cmp	r3, #0
 801267e:	d001      	beq.n	8012684 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012680:	230e      	movs	r3, #14
 8012682:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012684:	4b08      	ldr	r3, [pc, #32]	; (80126a8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801268a:	f107 0210 	add.w	r2, r7, #16
 801268e:	4611      	mov	r1, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f005 f8b8 	bl	8017806 <RegionGetPhyParam>
 8012696:	4603      	mov	r3, r0
 8012698:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	b2db      	uxtb	r3, r3
}
 801269e:	4618      	mov	r0, r3
 80126a0:	3718      	adds	r7, #24
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bd80      	pop	{r7, pc}
 80126a6:	bf00      	nop
 80126a8:	200038f8 	.word	0x200038f8

080126ac <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	4603      	mov	r3, r0
 80126b4:	71fb      	strb	r3, [r7, #7]
 80126b6:	460b      	mov	r3, r1
 80126b8:	71bb      	strb	r3, [r7, #6]
 80126ba:	4613      	mov	r3, r2
 80126bc:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 80126be:	2300      	movs	r3, #0
 80126c0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80126c2:	2300      	movs	r3, #0
 80126c4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80126c6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7ff ffc6 	bl	801265c <GetMaxAppPayloadWithoutFOptsLength>
 80126d0:	4603      	mov	r3, r0
 80126d2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80126d4:	79fb      	ldrb	r3, [r7, #7]
 80126d6:	b29a      	uxth	r2, r3
 80126d8:	797b      	ldrb	r3, [r7, #5]
 80126da:	b29b      	uxth	r3, r3
 80126dc:	4413      	add	r3, r2
 80126de:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80126e0:	89ba      	ldrh	r2, [r7, #12]
 80126e2:	89fb      	ldrh	r3, [r7, #14]
 80126e4:	429a      	cmp	r2, r3
 80126e6:	d804      	bhi.n	80126f2 <ValidatePayloadLength+0x46>
 80126e8:	89bb      	ldrh	r3, [r7, #12]
 80126ea:	2bff      	cmp	r3, #255	; 0xff
 80126ec:	d801      	bhi.n	80126f2 <ValidatePayloadLength+0x46>
    {
        return true;
 80126ee:	2301      	movs	r3, #1
 80126f0:	e000      	b.n	80126f4 <ValidatePayloadLength+0x48>
    }
    return false;
 80126f2:	2300      	movs	r3, #0
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3710      	adds	r7, #16
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}

080126fc <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 80126fc:	b480      	push	{r7}
 80126fe:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8012700:	4a05      	ldr	r2, [pc, #20]	; (8012718 <SetMlmeScheduleUplinkIndication+0x1c>)
 8012702:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012706:	f043 0310 	orr.w	r3, r3, #16
 801270a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 801270e:	bf00      	nop
 8012710:	46bd      	mov	sp, r7
 8012712:	bc80      	pop	{r7}
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	200033f0 	.word	0x200033f0

0801271c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 801271c:	b590      	push	{r4, r7, lr}
 801271e:	b0a5      	sub	sp, #148	; 0x94
 8012720:	af02      	add	r7, sp, #8
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	4608      	mov	r0, r1
 8012726:	4611      	mov	r1, r2
 8012728:	461a      	mov	r2, r3
 801272a:	4603      	mov	r3, r0
 801272c:	70fb      	strb	r3, [r7, #3]
 801272e:	460b      	mov	r3, r1
 8012730:	70bb      	strb	r3, [r7, #2]
 8012732:	4613      	mov	r3, r2
 8012734:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 8012736:	2300      	movs	r3, #0
 8012738:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 801273c:	2300      	movs	r3, #0
 801273e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012742:	2300      	movs	r3, #0
 8012744:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

    while( macIndex < commandsSize )
 8012748:	f000 bc73 	b.w	8013032 <ProcessMacCommands+0x916>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	687a      	ldr	r2, [r7, #4]
 8012750:	4413      	add	r3, r2
 8012752:	781b      	ldrb	r3, [r3, #0]
 8012754:	4618      	mov	r0, r3
 8012756:	f003 fbf5 	bl	8015f44 <LoRaMacCommandsGetCmdSize>
 801275a:	4603      	mov	r3, r0
 801275c:	461a      	mov	r2, r3
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	441a      	add	r2, r3
 8012762:	78bb      	ldrb	r3, [r7, #2]
 8012764:	429a      	cmp	r2, r3
 8012766:	f300 846a 	bgt.w	801303e <ProcessMacCommands+0x922>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801276a:	78fb      	ldrb	r3, [r7, #3]
 801276c:	1c5a      	adds	r2, r3, #1
 801276e:	70fa      	strb	r2, [r7, #3]
 8012770:	461a      	mov	r2, r3
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	4413      	add	r3, r2
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	3b02      	subs	r3, #2
 801277a:	2b11      	cmp	r3, #17
 801277c:	f200 8461 	bhi.w	8013042 <ProcessMacCommands+0x926>
 8012780:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <ProcessMacCommands+0x6c>)
 8012782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012786:	bf00      	nop
 8012788:	080127d1 	.word	0x080127d1
 801278c:	08012813 	.word	0x08012813
 8012790:	0801292f 	.word	0x0801292f
 8012794:	0801296d 	.word	0x0801296d
 8012798:	08012a5d 	.word	0x08012a5d
 801279c:	08012ab9 	.word	0x08012ab9
 80127a0:	08012b75 	.word	0x08012b75
 80127a4:	08012bcf 	.word	0x08012bcf
 80127a8:	08012cb3 	.word	0x08012cb3
 80127ac:	08013043 	.word	0x08013043
 80127b0:	08013043 	.word	0x08013043
 80127b4:	08012d5d 	.word	0x08012d5d
 80127b8:	08013043 	.word	0x08013043
 80127bc:	08013043 	.word	0x08013043
 80127c0:	08012e73 	.word	0x08012e73
 80127c4:	08012ea7 	.word	0x08012ea7
 80127c8:	08012f37 	.word	0x08012f37
 80127cc:	08012fad 	.word	0x08012fad
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 80127d0:	2004      	movs	r0, #4
 80127d2:	f003 fd8f 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 842a 	beq.w	8013032 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 80127de:	2104      	movs	r1, #4
 80127e0:	2000      	movs	r0, #0
 80127e2:	f003 fcfb 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80127e6:	78fb      	ldrb	r3, [r7, #3]
 80127e8:	1c5a      	adds	r2, r3, #1
 80127ea:	70fa      	strb	r2, [r7, #3]
 80127ec:	461a      	mov	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	4413      	add	r3, r2
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	4bad      	ldr	r3, [pc, #692]	; (8012aac <ProcessMacCommands+0x390>)
 80127f6:	f883 2454 	strb.w	r2, [r3, #1108]	; 0x454
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80127fa:	78fb      	ldrb	r3, [r7, #3]
 80127fc:	1c5a      	adds	r2, r3, #1
 80127fe:	70fa      	strb	r2, [r7, #3]
 8012800:	461a      	mov	r2, r3
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	4413      	add	r3, r2
 8012806:	781a      	ldrb	r2, [r3, #0]
 8012808:	4ba8      	ldr	r3, [pc, #672]	; (8012aac <ProcessMacCommands+0x390>)
 801280a:	f883 2455 	strb.w	r2, [r3, #1109]	; 0x455
                }
                break;
 801280e:	f000 bc10 	b.w	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 8012812:	2300      	movs	r3, #0
 8012814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8012818:	2300      	movs	r3, #0
 801281a:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 801281e:	2300      	movs	r3, #0
 8012820:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                if( adrBlockFound == false )
 801282a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801282e:	f083 0301 	eor.w	r3, r3, #1
 8012832:	b2db      	uxtb	r3, r3
 8012834:	2b00      	cmp	r3, #0
 8012836:	d078      	beq.n	801292a <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 8012838:	2301      	movs	r3, #1
 801283a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 801283e:	78fb      	ldrb	r3, [r7, #3]
 8012840:	3b01      	subs	r3, #1
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	4413      	add	r3, r2
 8012846:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012848:	78ba      	ldrb	r2, [r7, #2]
 801284a:	78fb      	ldrb	r3, [r7, #3]
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	b2db      	uxtb	r3, r3
 8012850:	3301      	adds	r3, #1
 8012852:	b2db      	uxtb	r3, r3
 8012854:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012858:	4b95      	ldr	r3, [pc, #596]	; (8012ab0 <ProcessMacCommands+0x394>)
 801285a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801285e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012862:	4b93      	ldr	r3, [pc, #588]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012864:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012868:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801286c:	4b90      	ldr	r3, [pc, #576]	; (8012ab0 <ProcessMacCommands+0x394>)
 801286e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012872:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012876:	4b8e      	ldr	r3, [pc, #568]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012878:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801287c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012880:	4b8b      	ldr	r3, [pc, #556]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012882:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8012886:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801288a:	4b89      	ldr	r3, [pc, #548]	; (8012ab0 <ProcessMacCommands+0x394>)
 801288c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8012890:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012892:	4b87      	ldr	r3, [pc, #540]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012894:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012898:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801289c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 80128a0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80128a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80128a8:	9301      	str	r3, [sp, #4]
 80128aa:	f107 0355 	add.w	r3, r7, #85	; 0x55
 80128ae:	9300      	str	r3, [sp, #0]
 80128b0:	4623      	mov	r3, r4
 80128b2:	f005 f8af 	bl	8017a14 <RegionLinkAdrReq>
 80128b6:	4603      	mov	r3, r0
 80128b8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 80128bc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80128c0:	f003 0307 	and.w	r3, r3, #7
 80128c4:	2b07      	cmp	r3, #7
 80128c6:	d10e      	bne.n	80128e6 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80128c8:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 80128cc:	4b78      	ldr	r3, [pc, #480]	; (8012ab0 <ProcessMacCommands+0x394>)
 80128ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80128d2:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 80128d6:	4b76      	ldr	r3, [pc, #472]	; (8012ab0 <ProcessMacCommands+0x394>)
 80128d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80128dc:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80128e0:	4b73      	ldr	r3, [pc, #460]	; (8012ab0 <ProcessMacCommands+0x394>)
 80128e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80128e6:	2300      	movs	r3, #0
 80128e8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80128ec:	e00b      	b.n	8012906 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80128ee:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80128f2:	2201      	movs	r2, #1
 80128f4:	4619      	mov	r1, r3
 80128f6:	2003      	movs	r0, #3
 80128f8:	f003 f9d4 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80128fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8012900:	3301      	adds	r3, #1
 8012902:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012906:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801290a:	4a6a      	ldr	r2, [pc, #424]	; (8012ab4 <ProcessMacCommands+0x398>)
 801290c:	fba2 2303 	umull	r2, r3, r2, r3
 8012910:	089b      	lsrs	r3, r3, #2
 8012912:	b2db      	uxtb	r3, r3
 8012914:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 8012918:	429a      	cmp	r2, r3
 801291a:	d3e8      	bcc.n	80128ee <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 801291c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8012920:	78fb      	ldrb	r3, [r7, #3]
 8012922:	4413      	add	r3, r2
 8012924:	b2db      	uxtb	r3, r3
 8012926:	3b01      	subs	r3, #1
 8012928:	70fb      	strb	r3, [r7, #3]
                }
                break;
 801292a:	bf00      	nop
 801292c:	e381      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 801292e:	78fb      	ldrb	r3, [r7, #3]
 8012930:	1c5a      	adds	r2, r3, #1
 8012932:	70fa      	strb	r2, [r7, #3]
 8012934:	461a      	mov	r2, r3
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	4413      	add	r3, r2
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	f003 030f 	and.w	r3, r3, #15
 8012940:	b2da      	uxtb	r2, r3
 8012942:	4b5b      	ldr	r3, [pc, #364]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012944:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012948:	4b59      	ldr	r3, [pc, #356]	; (8012ab0 <ProcessMacCommands+0x394>)
 801294a:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 801294e:	461a      	mov	r2, r3
 8012950:	2301      	movs	r3, #1
 8012952:	4093      	lsls	r3, r2
 8012954:	b29a      	uxth	r2, r3
 8012956:	4b56      	ldr	r3, [pc, #344]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012958:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801295c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012960:	2200      	movs	r2, #0
 8012962:	4619      	mov	r1, r3
 8012964:	2004      	movs	r0, #4
 8012966:	f003 f99d 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                break;
 801296a:	e362      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801296c:	2307      	movs	r3, #7
 801296e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012972:	78fb      	ldrb	r3, [r7, #3]
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	4413      	add	r3, r2
 8012978:	781b      	ldrb	r3, [r3, #0]
 801297a:	091b      	lsrs	r3, r3, #4
 801297c:	b2db      	uxtb	r3, r3
 801297e:	b25b      	sxtb	r3, r3
 8012980:	f003 0307 	and.w	r3, r3, #7
 8012984:	b25b      	sxtb	r3, r3
 8012986:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801298a:	78fb      	ldrb	r3, [r7, #3]
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	4413      	add	r3, r2
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	b25b      	sxtb	r3, r3
 8012994:	f003 030f 	and.w	r3, r3, #15
 8012998:	b25b      	sxtb	r3, r3
 801299a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801299e:	78fb      	ldrb	r3, [r7, #3]
 80129a0:	3301      	adds	r3, #1
 80129a2:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 80129a4:	78fb      	ldrb	r3, [r7, #3]
 80129a6:	1c5a      	adds	r2, r3, #1
 80129a8:	70fa      	strb	r2, [r7, #3]
 80129aa:	461a      	mov	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	4413      	add	r3, r2
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80129b4:	78fb      	ldrb	r3, [r7, #3]
 80129b6:	1c5a      	adds	r2, r3, #1
 80129b8:	70fa      	strb	r2, [r7, #3]
 80129ba:	461a      	mov	r2, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	4413      	add	r3, r2
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	021a      	lsls	r2, r3, #8
 80129c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129c6:	4313      	orrs	r3, r2
 80129c8:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80129ca:	78fb      	ldrb	r3, [r7, #3]
 80129cc:	1c5a      	adds	r2, r3, #1
 80129ce:	70fa      	strb	r2, [r7, #3]
 80129d0:	461a      	mov	r2, r3
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4413      	add	r3, r2
 80129d6:	781b      	ldrb	r3, [r3, #0]
 80129d8:	041a      	lsls	r2, r3, #16
 80129da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129dc:	4313      	orrs	r3, r2
 80129de:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80129e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129e2:	2264      	movs	r2, #100	; 0x64
 80129e4:	fb02 f303 	mul.w	r3, r2, r3
 80129e8:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80129ea:	4b31      	ldr	r3, [pc, #196]	; (8012ab0 <ProcessMacCommands+0x394>)
 80129ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80129f0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80129f4:	4611      	mov	r1, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f005 f833 	bl	8017a62 <RegionRxParamSetupReq>
 80129fc:	4603      	mov	r3, r0
 80129fe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 8012a02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012a06:	f003 0307 	and.w	r3, r3, #7
 8012a0a:	2b07      	cmp	r3, #7
 8012a0c:	d117      	bne.n	8012a3e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8012a0e:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	4b26      	ldr	r3, [pc, #152]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012a16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8012a1a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	4b23      	ldr	r3, [pc, #140]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8012a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a28:	4a21      	ldr	r2, [pc, #132]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012a2a:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8012a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a2e:	4a20      	ldr	r2, [pc, #128]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012a30:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8012a32:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8012a36:	b2da      	uxtb	r2, r3
 8012a38:	4b1d      	ldr	r3, [pc, #116]	; (8012ab0 <ProcessMacCommands+0x394>)
 8012a3a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 8012a3e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012a42:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012a46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a4a:	2201      	movs	r2, #1
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	2005      	movs	r0, #5
 8012a50:	f003 f928 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8012a54:	f7ff fe52 	bl	80126fc <SetMlmeScheduleUplinkIndication>
                break;
 8012a58:	bf00      	nop
 8012a5a:	e2ea      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012a5c:	23ff      	movs	r3, #255	; 0xff
 8012a5e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012a62:	4b12      	ldr	r3, [pc, #72]	; (8012aac <ProcessMacCommands+0x390>)
 8012a64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00d      	beq.n	8012a88 <ProcessMacCommands+0x36c>
 8012a6c:	4b0f      	ldr	r3, [pc, #60]	; (8012aac <ProcessMacCommands+0x390>)
 8012a6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d007      	beq.n	8012a88 <ProcessMacCommands+0x36c>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012a78:	4b0c      	ldr	r3, [pc, #48]	; (8012aac <ProcessMacCommands+0x390>)
 8012a7a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	4798      	blx	r3
 8012a82:	4603      	mov	r3, r0
 8012a84:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012a88:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012a8c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012a90:	787b      	ldrb	r3, [r7, #1]
 8012a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a96:	b2db      	uxtb	r3, r3
 8012a98:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012a9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012aa0:	2202      	movs	r2, #2
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	2006      	movs	r0, #6
 8012aa6:	f003 f8fd 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                break;
 8012aaa:	e2c2      	b.n	8013032 <ProcessMacCommands+0x916>
 8012aac:	200033f0 	.word	0x200033f0
 8012ab0:	200038f8 	.word	0x200038f8
 8012ab4:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012ab8:	2303      	movs	r3, #3
 8012aba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012abe:	78fb      	ldrb	r3, [r7, #3]
 8012ac0:	1c5a      	adds	r2, r3, #1
 8012ac2:	70fa      	strb	r2, [r7, #3]
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	4413      	add	r3, r2
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	b25b      	sxtb	r3, r3
 8012ace:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012ad6:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012ad8:	78fb      	ldrb	r3, [r7, #3]
 8012ada:	1c5a      	adds	r2, r3, #1
 8012adc:	70fa      	strb	r2, [r7, #3]
 8012ade:	461a      	mov	r2, r3
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	4413      	add	r3, r2
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012ae8:	78fb      	ldrb	r3, [r7, #3]
 8012aea:	1c5a      	adds	r2, r3, #1
 8012aec:	70fa      	strb	r2, [r7, #3]
 8012aee:	461a      	mov	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	4413      	add	r3, r2
 8012af4:	781b      	ldrb	r3, [r3, #0]
 8012af6:	021a      	lsls	r2, r3, #8
 8012af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afa:	4313      	orrs	r3, r2
 8012afc:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012afe:	78fb      	ldrb	r3, [r7, #3]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	70fa      	strb	r2, [r7, #3]
 8012b04:	461a      	mov	r2, r3
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	4413      	add	r3, r2
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	041a      	lsls	r2, r3, #16
 8012b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b10:	4313      	orrs	r3, r2
 8012b12:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 8012b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b16:	2264      	movs	r2, #100	; 0x64
 8012b18:	fb02 f303 	mul.w	r3, r2, r3
 8012b1c:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 8012b22:	78fb      	ldrb	r3, [r7, #3]
 8012b24:	1c5a      	adds	r2, r3, #1
 8012b26:	70fa      	strb	r2, [r7, #3]
 8012b28:	461a      	mov	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	781b      	ldrb	r3, [r3, #0]
 8012b30:	b25b      	sxtb	r3, r3
 8012b32:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8012b36:	4b87      	ldr	r3, [pc, #540]	; (8012d54 <ProcessMacCommands+0x638>)
 8012b38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b3c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012b40:	4611      	mov	r1, r2
 8012b42:	4618      	mov	r0, r3
 8012b44:	f004 ffa8 	bl	8017a98 <RegionNewChannelReq>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	b2db      	uxtb	r3, r3
 8012b4c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012b50:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b54:	b25b      	sxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	db0a      	blt.n	8012b70 <ProcessMacCommands+0x454>
                {
                    macCmdPayload[0] = status;
 8012b5a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b5e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012b62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012b66:	2201      	movs	r2, #1
 8012b68:	4619      	mov	r1, r3
 8012b6a:	2007      	movs	r0, #7
 8012b6c:	f003 f89a 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b70:	bf00      	nop
 8012b72:	e25e      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012b74:	78fb      	ldrb	r3, [r7, #3]
 8012b76:	1c5a      	adds	r2, r3, #1
 8012b78:	70fa      	strb	r2, [r7, #3]
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	4413      	add	r3, r2
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	f003 030f 	and.w	r3, r3, #15
 8012b86:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012b8a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d104      	bne.n	8012b9c <ProcessMacCommands+0x480>
                {
                    delay++;
 8012b92:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012b96:	3301      	adds	r3, #1
 8012b98:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012b9c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012ba4:	fb02 f303 	mul.w	r3, r2, r3
 8012ba8:	461a      	mov	r2, r3
 8012baa:	4b6a      	ldr	r3, [pc, #424]	; (8012d54 <ProcessMacCommands+0x638>)
 8012bac:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012bae:	4b69      	ldr	r3, [pc, #420]	; (8012d54 <ProcessMacCommands+0x638>)
 8012bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bb2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012bb6:	4a67      	ldr	r2, [pc, #412]	; (8012d54 <ProcessMacCommands+0x638>)
 8012bb8:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012bba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	2008      	movs	r0, #8
 8012bc4:	f003 f86e 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 8012bc8:	f7ff fd98 	bl	80126fc <SetMlmeScheduleUplinkIndication>
                break;
 8012bcc:	e231      	b.n	8013032 <ProcessMacCommands+0x916>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012bce:	78fb      	ldrb	r3, [r7, #3]
 8012bd0:	1c5a      	adds	r2, r3, #1
 8012bd2:	70fa      	strb	r2, [r7, #3]
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4413      	add	r3, r2
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012be0:	2300      	movs	r3, #0
 8012be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012be6:	2300      	movs	r3, #0
 8012be8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8012bec:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012bf0:	f003 0320 	and.w	r3, r3, #32
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d002      	beq.n	8012bfe <ProcessMacCommands+0x4e2>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8012bfe:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012c02:	f003 0310 	and.w	r3, r3, #16
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d002      	beq.n	8012c10 <ProcessMacCommands+0x4f4>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8012c10:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012c14:	f003 030f 	and.w	r3, r3, #15
 8012c18:	b2db      	uxtb	r3, r3
 8012c1a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 8012c1e:	4b4d      	ldr	r3, [pc, #308]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c24:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f004 ff4f 	bl	8017ace <RegionTxParamSetupReq>
 8012c30:	4603      	mov	r3, r0
 8012c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c36:	d03a      	beq.n	8012cae <ProcessMacCommands+0x592>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8012c38:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8012c3c:	4b45      	ldr	r3, [pc, #276]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8012c42:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8012c46:	4b43      	ldr	r3, [pc, #268]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c48:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012c4c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012c50:	461a      	mov	r2, r3
 8012c52:	4b41      	ldr	r3, [pc, #260]	; (8012d58 <ProcessMacCommands+0x63c>)
 8012c54:	5c9b      	ldrb	r3, [r3, r2]
 8012c56:	4618      	mov	r0, r3
 8012c58:	f7ed fdbc 	bl	80007d4 <__aeabi_ui2f>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	4a3d      	ldr	r2, [pc, #244]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c60:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012c62:	2302      	movs	r3, #2
 8012c64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012c68:	4b3a      	ldr	r3, [pc, #232]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c6a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012c6e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012c72:	4b38      	ldr	r3, [pc, #224]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c78:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012c7c:	4611      	mov	r1, r2
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f004 fdc1 	bl	8017806 <RegionGetPhyParam>
 8012c84:	4603      	mov	r3, r0
 8012c86:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8a:	b25a      	sxtb	r2, r3
 8012c8c:	4b31      	ldr	r3, [pc, #196]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c8e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012c92:	4293      	cmp	r3, r2
 8012c94:	bfb8      	it	lt
 8012c96:	4613      	movlt	r3, r2
 8012c98:	b25a      	sxtb	r2, r3
 8012c9a:	4b2e      	ldr	r3, [pc, #184]	; (8012d54 <ProcessMacCommands+0x638>)
 8012c9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012ca0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	2009      	movs	r0, #9
 8012caa:	f002 fffb 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                }
                break;
 8012cae:	bf00      	nop
 8012cb0:	e1bf      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012cb2:	2303      	movs	r3, #3
 8012cb4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012cb8:	78fb      	ldrb	r3, [r7, #3]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	70fa      	strb	r2, [r7, #3]
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	4413      	add	r3, r2
 8012cc4:	781b      	ldrb	r3, [r3, #0]
 8012cc6:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012cca:	78fb      	ldrb	r3, [r7, #3]
 8012ccc:	1c5a      	adds	r2, r3, #1
 8012cce:	70fa      	strb	r2, [r7, #3]
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012cda:	78fb      	ldrb	r3, [r7, #3]
 8012cdc:	1c5a      	adds	r2, r3, #1
 8012cde:	70fa      	strb	r2, [r7, #3]
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	4413      	add	r3, r2
 8012ce6:	781b      	ldrb	r3, [r3, #0]
 8012ce8:	021a      	lsls	r2, r3, #8
 8012cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cec:	4313      	orrs	r3, r2
 8012cee:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012cf0:	78fb      	ldrb	r3, [r7, #3]
 8012cf2:	1c5a      	adds	r2, r3, #1
 8012cf4:	70fa      	strb	r2, [r7, #3]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	4413      	add	r3, r2
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	041a      	lsls	r2, r3, #16
 8012d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d02:	4313      	orrs	r3, r2
 8012d04:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	2264      	movs	r2, #100	; 0x64
 8012d0a:	fb02 f303 	mul.w	r3, r2, r3
 8012d0e:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012d10:	4b10      	ldr	r3, [pc, #64]	; (8012d54 <ProcessMacCommands+0x638>)
 8012d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d16:	f107 0220 	add.w	r2, r7, #32
 8012d1a:	4611      	mov	r1, r2
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f004 fef1 	bl	8017b04 <RegionDlChannelReq>
 8012d22:	4603      	mov	r3, r0
 8012d24:	b2db      	uxtb	r3, r3
 8012d26:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012d2a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012d2e:	b25b      	sxtb	r3, r3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	db0c      	blt.n	8012d4e <ProcessMacCommands+0x632>
                {
                    macCmdPayload[0] = status;
 8012d34:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012d38:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012d3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012d40:	2201      	movs	r2, #1
 8012d42:	4619      	mov	r1, r3
 8012d44:	200a      	movs	r0, #10
 8012d46:	f002 ffad 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                    // Setup indication to inform the application
                    SetMlmeScheduleUplinkIndication( );
 8012d4a:	f7ff fcd7 	bl	80126fc <SetMlmeScheduleUplinkIndication>
                }
                break;
 8012d4e:	bf00      	nop
 8012d50:	e16f      	b.n	8013032 <ProcessMacCommands+0x916>
 8012d52:	bf00      	nop
 8012d54:	200038f8 	.word	0x200038f8
 8012d58:	08023270 	.word	0x08023270
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012d5c:	200a      	movs	r0, #10
 8012d5e:	f003 fac9 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8012d62:	4603      	mov	r3, r0
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f000 8164 	beq.w	8013032 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012d6a:	210a      	movs	r1, #10
 8012d6c:	2000      	movs	r0, #0
 8012d6e:	f003 fa35 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8012d72:	f107 0318 	add.w	r3, r7, #24
 8012d76:	2200      	movs	r2, #0
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012d7c:	f107 0310 	add.w	r3, r7, #16
 8012d80:	2200      	movs	r2, #0
 8012d82:	601a      	str	r2, [r3, #0]
 8012d84:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012d86:	f107 0308 	add.w	r3, r7, #8
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	601a      	str	r2, [r3, #0]
 8012d8e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012d90:	78fb      	ldrb	r3, [r7, #3]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	70fa      	strb	r2, [r7, #3]
 8012d96:	461a      	mov	r2, r3
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012da0:	78fb      	ldrb	r3, [r7, #3]
 8012da2:	1c5a      	adds	r2, r3, #1
 8012da4:	70fa      	strb	r2, [r7, #3]
 8012da6:	461a      	mov	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	4413      	add	r3, r2
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	021a      	lsls	r2, r3, #8
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	4313      	orrs	r3, r2
 8012db4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012db6:	78fb      	ldrb	r3, [r7, #3]
 8012db8:	1c5a      	adds	r2, r3, #1
 8012dba:	70fa      	strb	r2, [r7, #3]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	4413      	add	r3, r2
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	041a      	lsls	r2, r3, #16
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	4313      	orrs	r3, r2
 8012dca:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012dcc:	78fb      	ldrb	r3, [r7, #3]
 8012dce:	1c5a      	adds	r2, r3, #1
 8012dd0:	70fa      	strb	r2, [r7, #3]
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	4413      	add	r3, r2
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	061a      	lsls	r2, r3, #24
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	4313      	orrs	r3, r2
 8012de0:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012de2:	78fb      	ldrb	r3, [r7, #3]
 8012de4:	1c5a      	adds	r2, r3, #1
 8012de6:	70fa      	strb	r2, [r7, #3]
 8012de8:	461a      	mov	r2, r3
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	4413      	add	r3, r2
 8012dee:	781b      	ldrb	r3, [r3, #0]
 8012df0:	b21b      	sxth	r3, r3
 8012df2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012df4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012df8:	461a      	mov	r2, r3
 8012dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012dfe:	fb02 f303 	mul.w	r3, r2, r3
 8012e02:	121b      	asrs	r3, r3, #8
 8012e04:	b21b      	sxth	r3, r3
 8012e06:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012e08:	f107 0310 	add.w	r3, r7, #16
 8012e0c:	f107 0218 	add.w	r2, r7, #24
 8012e10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012e14:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012e18:	693a      	ldr	r2, [r7, #16]
 8012e1a:	4b8c      	ldr	r3, [pc, #560]	; (801304c <ProcessMacCommands+0x930>)
 8012e1c:	4413      	add	r3, r2
 8012e1e:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012e20:	f107 0308 	add.w	r3, r7, #8
 8012e24:	4618      	mov	r0, r3
 8012e26:	f00c fad1 	bl	801f3cc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012e2a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012e2e:	4b88      	ldr	r3, [pc, #544]	; (8013050 <ProcessMacCommands+0x934>)
 8012e30:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012e34:	9200      	str	r2, [sp, #0]
 8012e36:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012e3a:	f107 0210 	add.w	r2, r7, #16
 8012e3e:	ca06      	ldmia	r2, {r1, r2}
 8012e40:	f00c fa5d 	bl	801f2fe <SysTimeSub>
 8012e44:	f107 0010 	add.w	r0, r7, #16
 8012e48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012e4a:	9300      	str	r3, [sp, #0]
 8012e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e4e:	f107 0208 	add.w	r2, r7, #8
 8012e52:	ca06      	ldmia	r2, {r1, r2}
 8012e54:	f00c fa1a 	bl	801f28c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012e58:	f107 0310 	add.w	r3, r7, #16
 8012e5c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012e60:	f00c fa86 	bl	801f370 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012e64:	f002 fde3 	bl	8015a2e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012e68:	4b79      	ldr	r3, [pc, #484]	; (8013050 <ProcessMacCommands+0x934>)
 8012e6a:	2201      	movs	r2, #1
 8012e6c:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
                }
                break;
 8012e70:	e0df      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012e72:	200d      	movs	r0, #13
 8012e74:	f003 fa3e 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	f000 80d9 	beq.w	8013032 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012e80:	210d      	movs	r1, #13
 8012e82:	2000      	movs	r0, #0
 8012e84:	f003 f9aa 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012e88:	4b71      	ldr	r3, [pc, #452]	; (8013050 <ProcessMacCommands+0x934>)
 8012e8a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012e8e:	2b04      	cmp	r3, #4
 8012e90:	f000 80cf 	beq.w	8013032 <ProcessMacCommands+0x916>
 8012e94:	4b6e      	ldr	r3, [pc, #440]	; (8013050 <ProcessMacCommands+0x934>)
 8012e96:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012e9a:	2b05      	cmp	r3, #5
 8012e9c:	f000 80c9 	beq.w	8013032 <ProcessMacCommands+0x916>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012ea0:	f002 fda6 	bl	80159f0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012ea4:	e0c5      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012ea6:	2303      	movs	r3, #3
 8012ea8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012eac:	2300      	movs	r3, #0
 8012eae:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012eb0:	78fb      	ldrb	r3, [r7, #3]
 8012eb2:	1c5a      	adds	r2, r3, #1
 8012eb4:	70fa      	strb	r2, [r7, #3]
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	4413      	add	r3, r2
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012ec0:	78fb      	ldrb	r3, [r7, #3]
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	70fa      	strb	r2, [r7, #3]
 8012ec6:	461a      	mov	r2, r3
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	4413      	add	r3, r2
 8012ecc:	781b      	ldrb	r3, [r3, #0]
 8012ece:	021b      	lsls	r3, r3, #8
 8012ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012ed2:	4313      	orrs	r3, r2
 8012ed4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012ed6:	78fb      	ldrb	r3, [r7, #3]
 8012ed8:	1c5a      	adds	r2, r3, #1
 8012eda:	70fa      	strb	r2, [r7, #3]
 8012edc:	461a      	mov	r2, r3
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	041b      	lsls	r3, r3, #16
 8012ee6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012ee8:	4313      	orrs	r3, r2
 8012eea:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012eee:	2264      	movs	r2, #100	; 0x64
 8012ef0:	fb02 f303 	mul.w	r3, r2, r3
 8012ef4:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012ef6:	78fb      	ldrb	r3, [r7, #3]
 8012ef8:	1c5a      	adds	r2, r3, #1
 8012efa:	70fa      	strb	r2, [r7, #3]
 8012efc:	461a      	mov	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	4413      	add	r3, r2
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	f003 030f 	and.w	r3, r3, #15
 8012f08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012f0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012f10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012f12:	4618      	mov	r0, r3
 8012f14:	f002 fd72 	bl	80159fc <LoRaMacClassBPingSlotChannelReq>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012f1e:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012f22:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012f26:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	4619      	mov	r1, r3
 8012f2e:	2011      	movs	r0, #17
 8012f30:	f002 feb8 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                break;
 8012f34:	e07d      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012f36:	200e      	movs	r0, #14
 8012f38:	f003 f9dc 	bl	80162f4 <LoRaMacConfirmQueueIsCmdActive>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d077      	beq.n	8013032 <ProcessMacCommands+0x916>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012f42:	210e      	movs	r1, #14
 8012f44:	2000      	movs	r0, #0
 8012f46:	f003 f949 	bl	80161dc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012f56:	78fb      	ldrb	r3, [r7, #3]
 8012f58:	1c5a      	adds	r2, r3, #1
 8012f5a:	70fa      	strb	r2, [r7, #3]
 8012f5c:	461a      	mov	r2, r3
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	4413      	add	r3, r2
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012f68:	78fb      	ldrb	r3, [r7, #3]
 8012f6a:	1c5a      	adds	r2, r3, #1
 8012f6c:	70fa      	strb	r2, [r7, #3]
 8012f6e:	461a      	mov	r2, r3
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	4413      	add	r3, r2
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	021b      	lsls	r3, r3, #8
 8012f78:	b21a      	sxth	r2, r3
 8012f7a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	b21b      	sxth	r3, r3
 8012f82:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012f86:	78fb      	ldrb	r3, [r7, #3]
 8012f88:	1c5a      	adds	r2, r3, #1
 8012f8a:	70fa      	strb	r2, [r7, #3]
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	4413      	add	r3, r2
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012f98:	4b2e      	ldr	r3, [pc, #184]	; (8013054 <ProcessMacCommands+0x938>)
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012fa0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f002 fd35 	bl	8015a14 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012faa:	e042      	b.n	8013032 <ProcessMacCommands+0x916>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012fac:	2300      	movs	r3, #0
 8012fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012fb2:	78fb      	ldrb	r3, [r7, #3]
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	70fa      	strb	r2, [r7, #3]
 8012fb8:	461a      	mov	r2, r3
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012fc4:	78fb      	ldrb	r3, [r7, #3]
 8012fc6:	1c5a      	adds	r2, r3, #1
 8012fc8:	70fa      	strb	r2, [r7, #3]
 8012fca:	461a      	mov	r2, r3
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	4413      	add	r3, r2
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	021b      	lsls	r3, r3, #8
 8012fd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012fd8:	4313      	orrs	r3, r2
 8012fda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012fde:	78fb      	ldrb	r3, [r7, #3]
 8012fe0:	1c5a      	adds	r2, r3, #1
 8012fe2:	70fa      	strb	r2, [r7, #3]
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	4413      	add	r3, r2
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	041b      	lsls	r3, r3, #16
 8012fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012ff2:	4313      	orrs	r3, r2
 8012ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012ffc:	2264      	movs	r2, #100	; 0x64
 8012ffe:	fb02 f303 	mul.w	r3, r2, r3
 8013002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8013006:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801300a:	f002 fd16 	bl	8015a3a <LoRaMacClassBBeaconFreqReq>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d003      	beq.n	801301c <ProcessMacCommands+0x900>
                    {
                        macCmdPayload[0] = 1;
 8013014:	2301      	movs	r3, #1
 8013016:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801301a:	e002      	b.n	8013022 <ProcessMacCommands+0x906>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 801301c:	2300      	movs	r3, #0
 801301e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8013022:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013026:	2201      	movs	r2, #1
 8013028:	4619      	mov	r1, r3
 801302a:	2013      	movs	r0, #19
 801302c:	f002 fe3a 	bl	8015ca4 <LoRaMacCommandsAddCmd>
                }
                break;
 8013030:	bf00      	nop
    while( macIndex < commandsSize )
 8013032:	78fa      	ldrb	r2, [r7, #3]
 8013034:	78bb      	ldrb	r3, [r7, #2]
 8013036:	429a      	cmp	r2, r3
 8013038:	f4ff ab88 	bcc.w	801274c <ProcessMacCommands+0x30>
 801303c:	e002      	b.n	8013044 <ProcessMacCommands+0x928>
            return;
 801303e:	bf00      	nop
 8013040:	e000      	b.n	8013044 <ProcessMacCommands+0x928>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8013042:	bf00      	nop
        }
    }
}
 8013044:	378c      	adds	r7, #140	; 0x8c
 8013046:	46bd      	mov	sp, r7
 8013048:	bd90      	pop	{r4, r7, pc}
 801304a:	bf00      	nop
 801304c:	12d53d80 	.word	0x12d53d80
 8013050:	200033f0 	.word	0x200033f0
 8013054:	20003f10 	.word	0x20003f10

08013058 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08e      	sub	sp, #56	; 0x38
 801305c:	af02      	add	r7, sp, #8
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	607a      	str	r2, [r7, #4]
 8013062:	461a      	mov	r2, r3
 8013064:	460b      	mov	r3, r1
 8013066:	72fb      	strb	r3, [r7, #11]
 8013068:	4613      	mov	r3, r2
 801306a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801306c:	2303      	movs	r3, #3
 801306e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013072:	4b65      	ldr	r3, [pc, #404]	; (8013208 <Send+0x1b0>)
 8013074:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8013078:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801307c:	4b62      	ldr	r3, [pc, #392]	; (8013208 <Send+0x1b0>)
 801307e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013082:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8013086:	4b60      	ldr	r3, [pc, #384]	; (8013208 <Send+0x1b0>)
 8013088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801308a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801308c:	4b5e      	ldr	r3, [pc, #376]	; (8013208 <Send+0x1b0>)
 801308e:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8013092:	2b00      	cmp	r3, #0
 8013094:	d101      	bne.n	801309a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8013096:	2307      	movs	r3, #7
 8013098:	e0b1      	b.n	80131fe <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801309a:	4b5b      	ldr	r3, [pc, #364]	; (8013208 <Send+0x1b0>)
 801309c:	f893 30ff 	ldrb.w	r3, [r3, #255]	; 0xff
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d102      	bne.n	80130aa <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 80130a4:	4b58      	ldr	r3, [pc, #352]	; (8013208 <Send+0x1b0>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 80130aa:	2300      	movs	r3, #0
 80130ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 80130b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130b4:	f36f 0303 	bfc	r3, #0, #4
 80130b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 80130bc:	4b52      	ldr	r3, [pc, #328]	; (8013208 <Send+0x1b0>)
 80130be:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 80130c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130c6:	f362 13c7 	bfi	r3, r2, #7, #1
 80130ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80130ce:	4b4e      	ldr	r3, [pc, #312]	; (8013208 <Send+0x1b0>)
 80130d0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80130d4:	2b01      	cmp	r3, #1
 80130d6:	d106      	bne.n	80130e6 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 80130d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130dc:	f043 0310 	orr.w	r3, r3, #16
 80130e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80130e4:	e005      	b.n	80130f2 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 80130e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80130ea:	f36f 1304 	bfc	r3, #4, #1
 80130ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 80130f2:	4b45      	ldr	r3, [pc, #276]	; (8013208 <Send+0x1b0>)
 80130f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d005      	beq.n	8013108 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 80130fc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013100:	f043 0320 	orr.w	r3, r3, #32
 8013104:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.Version = Nvm.MacGroup2.Version;
 8013108:	4b3f      	ldr	r3, [pc, #252]	; (8013208 <Send+0x1b0>)
 801310a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801310e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = true;
 8013110:	2301      	movs	r3, #1
 8013112:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8013114:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013118:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801311c:	b2db      	uxtb	r3, r3
 801311e:	2b00      	cmp	r3, #0
 8013120:	bf14      	ite	ne
 8013122:	2301      	movne	r3, #1
 8013124:	2300      	moveq	r3, #0
 8013126:	b2db      	uxtb	r3, r3
 8013128:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801312a:	4b37      	ldr	r3, [pc, #220]	; (8013208 <Send+0x1b0>)
 801312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801312e:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8013130:	4b36      	ldr	r3, [pc, #216]	; (801320c <Send+0x1b4>)
 8013132:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8013136:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8013138:	4b34      	ldr	r3, [pc, #208]	; (801320c <Send+0x1b4>)
 801313a:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 801313e:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013140:	4b31      	ldr	r3, [pc, #196]	; (8013208 <Send+0x1b0>)
 8013142:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013146:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801314a:	4b2f      	ldr	r3, [pc, #188]	; (8013208 <Send+0x1b0>)
 801314c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013150:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013154:	4b2c      	ldr	r3, [pc, #176]	; (8013208 <Send+0x1b0>)
 8013156:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801315a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801315e:	4b2a      	ldr	r3, [pc, #168]	; (8013208 <Send+0x1b0>)
 8013160:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8013168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801316c:	f107 0014 	add.w	r0, r7, #20
 8013170:	4a27      	ldr	r2, [pc, #156]	; (8013210 <Send+0x1b8>)
 8013172:	4928      	ldr	r1, [pc, #160]	; (8013214 <Send+0x1bc>)
 8013174:	f002 fb7c 	bl	8015870 <LoRaMacAdrCalcNext>
 8013178:	4603      	mov	r3, r0
 801317a:	461a      	mov	r2, r3
 801317c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013180:	f362 1386 	bfi	r3, r2, #6, #1
 8013184:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8013188:	7afa      	ldrb	r2, [r7, #11]
 801318a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 801318e:	893b      	ldrh	r3, [r7, #8]
 8013190:	9300      	str	r3, [sp, #0]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	68f8      	ldr	r0, [r7, #12]
 8013196:	f000 fc21 	bl	80139dc <PrepareFrame>
 801319a:	4603      	mov	r3, r0
 801319c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 80131a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d003      	beq.n	80131b0 <Send+0x158>
 80131a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131ac:	2b0a      	cmp	r3, #10
 80131ae:	d107      	bne.n	80131c0 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80131b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80131b4:	4618      	mov	r0, r3
 80131b6:	f000 f96d 	bl	8013494 <ScheduleTx>
 80131ba:	4603      	mov	r3, r0
 80131bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80131c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d00a      	beq.n	80131de <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 80131c8:	4a0f      	ldr	r2, [pc, #60]	; (8013208 <Send+0x1b0>)
 80131ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80131ce:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 80131d2:	4a0d      	ldr	r2, [pc, #52]	; (8013208 <Send+0x1b0>)
 80131d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80131d8:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 80131dc:	e00d      	b.n	80131fa <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 80131de:	4b0a      	ldr	r3, [pc, #40]	; (8013208 <Send+0x1b0>)
 80131e0:	2200      	movs	r2, #0
 80131e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 80131e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e8:	4a07      	ldr	r2, [pc, #28]	; (8013208 <Send+0x1b0>)
 80131ea:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 80131ec:	f002 fdd2 	bl	8015d94 <LoRaMacCommandsRemoveNoneStickyCmds>
 80131f0:	4603      	mov	r3, r0
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d001      	beq.n	80131fa <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131f6:	2313      	movs	r3, #19
 80131f8:	e001      	b.n	80131fe <Send+0x1a6>
        }
    }
    return status;
 80131fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3730      	adds	r7, #48	; 0x30
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	200038f8 	.word	0x200038f8
 801320c:	200033f0 	.word	0x200033f0
 8013210:	20003930 	.word	0x20003930
 8013214:	20003931 	.word	0x20003931

08013218 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8013222:	2300      	movs	r3, #0
 8013224:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8013226:	2300      	movs	r3, #0
 8013228:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 801322a:	2301      	movs	r3, #1
 801322c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 801322e:	79fb      	ldrb	r3, [r7, #7]
 8013230:	2bff      	cmp	r3, #255	; 0xff
 8013232:	d129      	bne.n	8013288 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8013234:	2000      	movs	r0, #0
 8013236:	f7ff f941 	bl	80124bc <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801323a:	4b1a      	ldr	r3, [pc, #104]	; (80132a4 <SendReJoinReq+0x8c>)
 801323c:	2200      	movs	r2, #0
 801323e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8013242:	4b18      	ldr	r3, [pc, #96]	; (80132a4 <SendReJoinReq+0x8c>)
 8013244:	4a18      	ldr	r2, [pc, #96]	; (80132a8 <SendReJoinReq+0x90>)
 8013246:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801324a:	4b16      	ldr	r3, [pc, #88]	; (80132a4 <SendReJoinReq+0x8c>)
 801324c:	22ff      	movs	r2, #255	; 0xff
 801324e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8013252:	7b3b      	ldrb	r3, [r7, #12]
 8013254:	f36f 1347 	bfc	r3, #5, #3
 8013258:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801325a:	7b3a      	ldrb	r2, [r7, #12]
 801325c:	4b11      	ldr	r3, [pc, #68]	; (80132a4 <SendReJoinReq+0x8c>)
 801325e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8013262:	f7fc f84f 	bl	800f304 <SecureElementGetJoinEui>
 8013266:	4603      	mov	r3, r0
 8013268:	2208      	movs	r2, #8
 801326a:	4619      	mov	r1, r3
 801326c:	480f      	ldr	r0, [pc, #60]	; (80132ac <SendReJoinReq+0x94>)
 801326e:	f008 f99a 	bl	801b5a6 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8013272:	f7fc f825 	bl	800f2c0 <SecureElementGetDevEui>
 8013276:	4603      	mov	r3, r0
 8013278:	2208      	movs	r2, #8
 801327a:	4619      	mov	r1, r3
 801327c:	480c      	ldr	r0, [pc, #48]	; (80132b0 <SendReJoinReq+0x98>)
 801327e:	f008 f992 	bl	801b5a6 <memcpy1>

            allowDelayedTx = false;
 8013282:	2300      	movs	r3, #0
 8013284:	73fb      	strb	r3, [r7, #15]

            break;
 8013286:	e002      	b.n	801328e <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013288:	2302      	movs	r3, #2
 801328a:	73bb      	strb	r3, [r7, #14]
            break;
 801328c:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801328e:	7bfb      	ldrb	r3, [r7, #15]
 8013290:	4618      	mov	r0, r3
 8013292:	f000 f8ff 	bl	8013494 <ScheduleTx>
 8013296:	4603      	mov	r3, r0
 8013298:	73bb      	strb	r3, [r7, #14]
    return status;
 801329a:	7bbb      	ldrb	r3, [r7, #14]
}
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	200033f0 	.word	0x200033f0
 80132a8:	200033f2 	.word	0x200033f2
 80132ac:	200034fe 	.word	0x200034fe
 80132b0:	20003506 	.word	0x20003506

080132b4 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80132b8:	f002 fb49 	bl	801594e <LoRaMacClassBIsBeaconExpected>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d001      	beq.n	80132c6 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 80132c2:	230e      	movs	r3, #14
 80132c4:	e013      	b.n	80132ee <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80132c6:	4b0b      	ldr	r3, [pc, #44]	; (80132f4 <CheckForClassBCollision+0x40>)
 80132c8:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d10d      	bne.n	80132ec <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 80132d0:	f002 fb44 	bl	801595c <LoRaMacClassBIsPingExpected>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d001      	beq.n	80132de <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80132da:	230f      	movs	r3, #15
 80132dc:	e007      	b.n	80132ee <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80132de:	f002 fb44 	bl	801596a <LoRaMacClassBIsMulticastExpected>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d001      	beq.n	80132ec <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 80132e8:	230f      	movs	r3, #15
 80132ea:	e000      	b.n	80132ee <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	200038f8 	.word	0x200038f8

080132f8 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 80132f8:	b590      	push	{r4, r7, lr}
 80132fa:	b083      	sub	sp, #12
 80132fc:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80132fe:	4b2d      	ldr	r3, [pc, #180]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013300:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013304:	4b2b      	ldr	r3, [pc, #172]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013306:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801330a:	4b2a      	ldr	r3, [pc, #168]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801330c:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8013310:	4b28      	ldr	r3, [pc, #160]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013312:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8013316:	4b27      	ldr	r3, [pc, #156]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013318:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 801331c:	b25b      	sxtb	r3, r3
 801331e:	f004 fc6d 	bl	8017bfc <RegionApplyDrOffset>
 8013322:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013324:	b259      	sxtb	r1, r3
 8013326:	4b23      	ldr	r3, [pc, #140]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013328:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801332c:	4b21      	ldr	r3, [pc, #132]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801332e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013330:	4821      	ldr	r0, [pc, #132]	; (80133b8 <ComputeRxWindowParameters+0xc0>)
 8013332:	9000      	str	r0, [sp, #0]
 8013334:	4620      	mov	r0, r4
 8013336:	f004 fb0a 	bl	801794e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801333a:	4b1e      	ldr	r3, [pc, #120]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801333c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8013340:	4b1c      	ldr	r3, [pc, #112]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013342:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013346:	b259      	sxtb	r1, r3
 8013348:	4b1a      	ldr	r3, [pc, #104]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801334a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801334e:	4b19      	ldr	r3, [pc, #100]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013352:	4c1a      	ldr	r4, [pc, #104]	; (80133bc <ComputeRxWindowParameters+0xc4>)
 8013354:	9400      	str	r4, [sp, #0]
 8013356:	f004 fafa 	bl	801794e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801335a:	4b16      	ldr	r3, [pc, #88]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801335e:	4a18      	ldr	r2, [pc, #96]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 8013360:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013364:	4413      	add	r3, r2
 8013366:	4a16      	ldr	r2, [pc, #88]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 8013368:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801336c:	4b11      	ldr	r3, [pc, #68]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013370:	4a13      	ldr	r2, [pc, #76]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 8013372:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013376:	4413      	add	r3, r2
 8013378:	4a11      	ldr	r2, [pc, #68]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 801337a:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801337e:	4b0d      	ldr	r3, [pc, #52]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 8013380:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8013384:	2b00      	cmp	r3, #0
 8013386:	d111      	bne.n	80133ac <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013388:	4b0a      	ldr	r3, [pc, #40]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801338a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801338c:	4a0c      	ldr	r2, [pc, #48]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 801338e:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013392:	4413      	add	r3, r2
 8013394:	4a0a      	ldr	r2, [pc, #40]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 8013396:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801339a:	4b06      	ldr	r3, [pc, #24]	; (80133b4 <ComputeRxWindowParameters+0xbc>)
 801339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801339e:	4a08      	ldr	r2, [pc, #32]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 80133a0:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80133a4:	4413      	add	r3, r2
 80133a6:	4a06      	ldr	r2, [pc, #24]	; (80133c0 <ComputeRxWindowParameters+0xc8>)
 80133a8:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 80133ac:	bf00      	nop
 80133ae:	3704      	adds	r7, #4
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd90      	pop	{r4, r7, pc}
 80133b4:	200038f8 	.word	0x200038f8
 80133b8:	200037a8 	.word	0x200037a8
 80133bc:	200037bc 	.word	0x200037bc
 80133c0:	200033f0 	.word	0x200033f0

080133c4 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80133ce:	4b13      	ldr	r3, [pc, #76]	; (801341c <VerifyTxFrame+0x58>)
 80133d0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d01b      	beq.n	8013410 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80133d8:	1d3b      	adds	r3, r7, #4
 80133da:	4618      	mov	r0, r3
 80133dc:	f002 fd20 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d001      	beq.n	80133ea <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80133e6:	2313      	movs	r3, #19
 80133e8:	e013      	b.n	8013412 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80133ea:	4b0d      	ldr	r3, [pc, #52]	; (8013420 <VerifyTxFrame+0x5c>)
 80133ec:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80133f0:	4a0a      	ldr	r2, [pc, #40]	; (801341c <VerifyTxFrame+0x58>)
 80133f2:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80133f6:	687a      	ldr	r2, [r7, #4]
 80133f8:	b2d2      	uxtb	r2, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f7ff f956 	bl	80126ac <ValidatePayloadLength>
 8013400:	4603      	mov	r3, r0
 8013402:	f083 0301 	eor.w	r3, r3, #1
 8013406:	b2db      	uxtb	r3, r3
 8013408:	2b00      	cmp	r3, #0
 801340a:	d001      	beq.n	8013410 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801340c:	2308      	movs	r3, #8
 801340e:	e000      	b.n	8013412 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	4618      	mov	r0, r3
 8013414:	3708      	adds	r7, #8
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}
 801341a:	bf00      	nop
 801341c:	200038f8 	.word	0x200038f8
 8013420:	200033f0 	.word	0x200033f0

08013424 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 801342a:	4b18      	ldr	r3, [pc, #96]	; (801348c <SerializeTxFrame+0x68>)
 801342c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <SerializeTxFrame+0x16>
 8013434:	2b04      	cmp	r3, #4
 8013436:	d011      	beq.n	801345c <SerializeTxFrame+0x38>
 8013438:	e021      	b.n	801347e <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801343a:	4815      	ldr	r0, [pc, #84]	; (8013490 <SerializeTxFrame+0x6c>)
 801343c:	f004 f855 	bl	80174ea <LoRaMacSerializerJoinRequest>
 8013440:	4603      	mov	r3, r0
 8013442:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d001      	beq.n	801344e <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801344a:	2311      	movs	r3, #17
 801344c:	e01a      	b.n	8013484 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801344e:	4b0f      	ldr	r3, [pc, #60]	; (801348c <SerializeTxFrame+0x68>)
 8013450:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013454:	b29a      	uxth	r2, r3
 8013456:	4b0d      	ldr	r3, [pc, #52]	; (801348c <SerializeTxFrame+0x68>)
 8013458:	801a      	strh	r2, [r3, #0]
            break;
 801345a:	e012      	b.n	8013482 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 801345c:	480c      	ldr	r0, [pc, #48]	; (8013490 <SerializeTxFrame+0x6c>)
 801345e:	f004 f8c6 	bl	80175ee <LoRaMacSerializerData>
 8013462:	4603      	mov	r3, r0
 8013464:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013466:	79fb      	ldrb	r3, [r7, #7]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d001      	beq.n	8013470 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801346c:	2311      	movs	r3, #17
 801346e:	e009      	b.n	8013484 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013470:	4b06      	ldr	r3, [pc, #24]	; (801348c <SerializeTxFrame+0x68>)
 8013472:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013476:	b29a      	uxth	r2, r3
 8013478:	4b04      	ldr	r3, [pc, #16]	; (801348c <SerializeTxFrame+0x68>)
 801347a:	801a      	strh	r2, [r3, #0]
            break;
 801347c:	e001      	b.n	8013482 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801347e:	2303      	movs	r3, #3
 8013480:	e000      	b.n	8013484 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013482:	2300      	movs	r3, #0
}
 8013484:	4618      	mov	r0, r3
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}
 801348c:	200033f0 	.word	0x200033f0
 8013490:	200034f8 	.word	0x200034f8

08013494 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b090      	sub	sp, #64	; 0x40
 8013498:	af02      	add	r7, sp, #8
 801349a:	4603      	mov	r3, r0
 801349c:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801349e:	2303      	movs	r3, #3
 80134a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 80134a4:	f7ff ff06 	bl	80132b4 <CheckForClassBCollision>
 80134a8:	4603      	mov	r3, r0
 80134aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80134ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d002      	beq.n	80134bc <ScheduleTx+0x28>
    {
        return status;
 80134b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134ba:	e08f      	b.n	80135dc <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 80134bc:	f000 f8fa 	bl	80136b4 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 80134c0:	f7ff ffb0 	bl	8013424 <SerializeTxFrame>
 80134c4:	4603      	mov	r3, r0
 80134c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80134ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d002      	beq.n	80134d8 <ScheduleTx+0x44>
    {
        return status;
 80134d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134d6:	e081      	b.n	80135dc <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 80134d8:	4b42      	ldr	r3, [pc, #264]	; (80135e4 <ScheduleTx+0x150>)
 80134da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134dc:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80134de:	4b41      	ldr	r3, [pc, #260]	; (80135e4 <ScheduleTx+0x150>)
 80134e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80134e4:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80134e6:	4b3f      	ldr	r3, [pc, #252]	; (80135e4 <ScheduleTx+0x150>)
 80134e8:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80134ec:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80134ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134f2:	4618      	mov	r0, r3
 80134f4:	f00b ffa2 	bl	801f43c <SysTimeGetMcuTime>
 80134f8:	4638      	mov	r0, r7
 80134fa:	4b3a      	ldr	r3, [pc, #232]	; (80135e4 <ScheduleTx+0x150>)
 80134fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8013500:	9200      	str	r2, [sp, #0]
 8013502:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8013506:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801350a:	ca06      	ldmia	r2, {r1, r2}
 801350c:	f00b fef7 	bl	801f2fe <SysTimeSub>
 8013510:	f107 0320 	add.w	r3, r7, #32
 8013514:	463a      	mov	r2, r7
 8013516:	e892 0003 	ldmia.w	r2, {r0, r1}
 801351a:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 801351e:	4b31      	ldr	r3, [pc, #196]	; (80135e4 <ScheduleTx+0x150>)
 8013520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013522:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8013524:	2300      	movs	r3, #0
 8013526:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 801352a:	2301      	movs	r3, #1
 801352c:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 801352e:	4b2e      	ldr	r3, [pc, #184]	; (80135e8 <ScheduleTx+0x154>)
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8013534:	4b2b      	ldr	r3, [pc, #172]	; (80135e4 <ScheduleTx+0x150>)
 8013536:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 801353a:	2b00      	cmp	r3, #0
 801353c:	d104      	bne.n	8013548 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 801353e:	2301      	movs	r3, #1
 8013540:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8013544:	2300      	movs	r3, #0
 8013546:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8013548:	4b26      	ldr	r3, [pc, #152]	; (80135e4 <ScheduleTx+0x150>)
 801354a:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801354e:	f107 0114 	add.w	r1, r7, #20
 8013552:	4b26      	ldr	r3, [pc, #152]	; (80135ec <ScheduleTx+0x158>)
 8013554:	9300      	str	r3, [sp, #0]
 8013556:	4b26      	ldr	r3, [pc, #152]	; (80135f0 <ScheduleTx+0x15c>)
 8013558:	4a26      	ldr	r2, [pc, #152]	; (80135f4 <ScheduleTx+0x160>)
 801355a:	f004 fb14 	bl	8017b86 <RegionNextChannel>
 801355e:	4603      	mov	r3, r0
 8013560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013568:	2b00      	cmp	r3, #0
 801356a:	d022      	beq.n	80135b2 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 801356c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013570:	2b0b      	cmp	r3, #11
 8013572:	d11b      	bne.n	80135ac <ScheduleTx+0x118>
 8013574:	7bfb      	ldrb	r3, [r7, #15]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d018      	beq.n	80135ac <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801357a:	4b1b      	ldr	r3, [pc, #108]	; (80135e8 <ScheduleTx+0x154>)
 801357c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013580:	2b00      	cmp	r3, #0
 8013582:	d011      	beq.n	80135a8 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013584:	4b18      	ldr	r3, [pc, #96]	; (80135e8 <ScheduleTx+0x154>)
 8013586:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801358a:	f043 0320 	orr.w	r3, r3, #32
 801358e:	4a16      	ldr	r2, [pc, #88]	; (80135e8 <ScheduleTx+0x154>)
 8013590:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013594:	4b14      	ldr	r3, [pc, #80]	; (80135e8 <ScheduleTx+0x154>)
 8013596:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801359a:	4619      	mov	r1, r3
 801359c:	4816      	ldr	r0, [pc, #88]	; (80135f8 <ScheduleTx+0x164>)
 801359e:	f00c faad 	bl	801fafc <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 80135a2:	4815      	ldr	r0, [pc, #84]	; (80135f8 <ScheduleTx+0x164>)
 80135a4:	f00c f9cc 	bl	801f940 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 80135a8:	2300      	movs	r3, #0
 80135aa:	e017      	b.n	80135dc <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 80135ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135b0:	e014      	b.n	80135dc <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 80135b2:	f7ff fea1 	bl	80132f8 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 80135b6:	f7ff ff05 	bl	80133c4 <VerifyTxFrame>
 80135ba:	4603      	mov	r3, r0
 80135bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 80135c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d002      	beq.n	80135ce <ScheduleTx+0x13a>
    {
        return status;
 80135c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135cc:	e006      	b.n	80135dc <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 80135ce:	4b06      	ldr	r3, [pc, #24]	; (80135e8 <ScheduleTx+0x154>)
 80135d0:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 80135d4:	4618      	mov	r0, r3
 80135d6:	f000 fb1d 	bl	8013c14 <SendFrameOnChannel>
 80135da:	4603      	mov	r3, r0
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3738      	adds	r7, #56	; 0x38
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}
 80135e4:	200038f8 	.word	0x200038f8
 80135e8:	200033f0 	.word	0x200033f0
 80135ec:	20003928 	.word	0x20003928
 80135f0:	20003874 	.word	0x20003874
 80135f4:	20003805 	.word	0x20003805
 80135f8:	20003758 	.word	0x20003758

080135fc <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	4603      	mov	r3, r0
 8013604:	460a      	mov	r2, r1
 8013606:	71fb      	strb	r3, [r7, #7]
 8013608:	4613      	mov	r3, r2
 801360a:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 801360c:	2313      	movs	r3, #19
 801360e:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8013610:	2300      	movs	r3, #0
 8013612:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8013614:	4b25      	ldr	r3, [pc, #148]	; (80136ac <SecureFrame+0xb0>)
 8013616:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801361a:	2b00      	cmp	r3, #0
 801361c:	d002      	beq.n	8013624 <SecureFrame+0x28>
 801361e:	2b04      	cmp	r3, #4
 8013620:	d011      	beq.n	8013646 <SecureFrame+0x4a>
 8013622:	e03b      	b.n	801369c <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8013624:	4822      	ldr	r0, [pc, #136]	; (80136b0 <SecureFrame+0xb4>)
 8013626:	f003 fb29 	bl	8016c7c <LoRaMacCryptoPrepareJoinRequest>
 801362a:	4603      	mov	r3, r0
 801362c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801362e:	7bfb      	ldrb	r3, [r7, #15]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d001      	beq.n	8013638 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013634:	2311      	movs	r3, #17
 8013636:	e034      	b.n	80136a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8013638:	4b1c      	ldr	r3, [pc, #112]	; (80136ac <SecureFrame+0xb0>)
 801363a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801363e:	b29a      	uxth	r2, r3
 8013640:	4b1a      	ldr	r3, [pc, #104]	; (80136ac <SecureFrame+0xb0>)
 8013642:	801a      	strh	r2, [r3, #0]
            break;
 8013644:	e02c      	b.n	80136a0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013646:	f107 0308 	add.w	r3, r7, #8
 801364a:	4618      	mov	r0, r3
 801364c:	f003 fa30 	bl	8016ab0 <LoRaMacCryptoGetFCntUp>
 8013650:	4603      	mov	r3, r0
 8013652:	2b00      	cmp	r3, #0
 8013654:	d001      	beq.n	801365a <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013656:	2312      	movs	r3, #18
 8013658:	e023      	b.n	80136a2 <SecureFrame+0xa6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 801365a:	4b14      	ldr	r3, [pc, #80]	; (80136ac <SecureFrame+0xb0>)
 801365c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013660:	2b00      	cmp	r3, #0
 8013662:	d104      	bne.n	801366e <SecureFrame+0x72>
 8013664:	4b11      	ldr	r3, [pc, #68]	; (80136ac <SecureFrame+0xb0>)
 8013666:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 801366a:	2b01      	cmp	r3, #1
 801366c:	d902      	bls.n	8013674 <SecureFrame+0x78>
            {
                fCntUp -= 1;
 801366e:	68bb      	ldr	r3, [r7, #8]
 8013670:	3b01      	subs	r3, #1
 8013672:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013674:	68b8      	ldr	r0, [r7, #8]
 8013676:	79ba      	ldrb	r2, [r7, #6]
 8013678:	79f9      	ldrb	r1, [r7, #7]
 801367a:	4b0d      	ldr	r3, [pc, #52]	; (80136b0 <SecureFrame+0xb4>)
 801367c:	f003 fc16 	bl	8016eac <LoRaMacCryptoSecureMessage>
 8013680:	4603      	mov	r3, r0
 8013682:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013684:	7bfb      	ldrb	r3, [r7, #15]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d001      	beq.n	801368e <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801368a:	2311      	movs	r3, #17
 801368c:	e009      	b.n	80136a2 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801368e:	4b07      	ldr	r3, [pc, #28]	; (80136ac <SecureFrame+0xb0>)
 8013690:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013694:	b29a      	uxth	r2, r3
 8013696:	4b05      	ldr	r3, [pc, #20]	; (80136ac <SecureFrame+0xb0>)
 8013698:	801a      	strh	r2, [r3, #0]
            break;
 801369a:	e001      	b.n	80136a0 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801369c:	2303      	movs	r3, #3
 801369e:	e000      	b.n	80136a2 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 80136a0:	2300      	movs	r3, #0
}
 80136a2:	4618      	mov	r0, r3
 80136a4:	3710      	adds	r7, #16
 80136a6:	46bd      	mov	sp, r7
 80136a8:	bd80      	pop	{r7, pc}
 80136aa:	bf00      	nop
 80136ac:	200033f0 	.word	0x200033f0
 80136b0:	200034f8 	.word	0x200034f8

080136b4 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 80136b4:	b480      	push	{r7}
 80136b6:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 80136b8:	4b09      	ldr	r3, [pc, #36]	; (80136e0 <CalculateBackOff+0x2c>)
 80136ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d10a      	bne.n	80136d6 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 80136c0:	4b07      	ldr	r3, [pc, #28]	; (80136e0 <CalculateBackOff+0x2c>)
 80136c2:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 80136c6:	3b01      	subs	r3, #1
 80136c8:	4a06      	ldr	r2, [pc, #24]	; (80136e4 <CalculateBackOff+0x30>)
 80136ca:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
 80136ce:	fb02 f303 	mul.w	r3, r2, r3
 80136d2:	4a03      	ldr	r2, [pc, #12]	; (80136e0 <CalculateBackOff+0x2c>)
 80136d4:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 80136d6:	bf00      	nop
 80136d8:	46bd      	mov	sp, r7
 80136da:	bc80      	pop	{r7}
 80136dc:	4770      	bx	lr
 80136de:	bf00      	nop
 80136e0:	200038f8 	.word	0x200038f8
 80136e4:	200033f0 	.word	0x200033f0

080136e8 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	4603      	mov	r3, r0
 80136f0:	7139      	strb	r1, [r7, #4]
 80136f2:	71fb      	strb	r3, [r7, #7]
 80136f4:	4613      	mov	r3, r2
 80136f6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80136f8:	79fb      	ldrb	r3, [r7, #7]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d002      	beq.n	8013704 <RemoveMacCommands+0x1c>
 80136fe:	79fb      	ldrb	r3, [r7, #7]
 8013700:	2b01      	cmp	r3, #1
 8013702:	d10d      	bne.n	8013720 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013704:	79bb      	ldrb	r3, [r7, #6]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d108      	bne.n	801371c <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 801370a:	793b      	ldrb	r3, [r7, #4]
 801370c:	f003 0320 	and.w	r3, r3, #32
 8013710:	b2db      	uxtb	r3, r3
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8013716:	f002 fb61 	bl	8015ddc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 801371a:	e001      	b.n	8013720 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 801371c:	f002 fb5e 	bl	8015ddc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8013720:	bf00      	nop
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}

08013728 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 8013728:	b5b0      	push	{r4, r5, r7, lr}
 801372a:	b08e      	sub	sp, #56	; 0x38
 801372c:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801372e:	4b68      	ldr	r3, [pc, #416]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013730:	2200      	movs	r2, #0
 8013732:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8013736:	4b66      	ldr	r3, [pc, #408]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013738:	2200      	movs	r2, #0
 801373a:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 801373c:	4b65      	ldr	r3, [pc, #404]	; (80138d4 <ResetMacParameters+0x1ac>)
 801373e:	2200      	movs	r2, #0
 8013740:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.AckTimeoutRetries = 1;
 8013744:	4b63      	ldr	r3, [pc, #396]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013746:	2201      	movs	r2, #1
 8013748:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    MacCtx.AckTimeoutRetriesCounter = 1;
 801374c:	4b61      	ldr	r3, [pc, #388]	; (80138d4 <ResetMacParameters+0x1ac>)
 801374e:	2201      	movs	r2, #1
 8013750:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetry = false;
 8013754:	4b5f      	ldr	r3, [pc, #380]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013756:	2200      	movs	r2, #0
 8013758:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413

    Nvm.MacGroup2.MaxDCycle = 0;
 801375c:	4b5c      	ldr	r3, [pc, #368]	; (80138d0 <ResetMacParameters+0x1a8>)
 801375e:	2200      	movs	r2, #0
 8013760:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013764:	4b5a      	ldr	r3, [pc, #360]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013766:	2201      	movs	r2, #1
 8013768:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801376c:	4b58      	ldr	r3, [pc, #352]	; (80138d0 <ResetMacParameters+0x1a8>)
 801376e:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8013772:	4b57      	ldr	r3, [pc, #348]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013774:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013778:	4b55      	ldr	r3, [pc, #340]	; (80138d0 <ResetMacParameters+0x1a8>)
 801377a:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 801377e:	4b54      	ldr	r3, [pc, #336]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013784:	4b52      	ldr	r3, [pc, #328]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013786:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 801378a:	4b51      	ldr	r3, [pc, #324]	; (80138d0 <ResetMacParameters+0x1a8>)
 801378c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013790:	4b4f      	ldr	r3, [pc, #316]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013792:	4a4f      	ldr	r2, [pc, #316]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013794:	3364      	adds	r3, #100	; 0x64
 8013796:	32a4      	adds	r2, #164	; 0xa4
 8013798:	e892 0003 	ldmia.w	r2, {r0, r1}
 801379c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80137a0:	4b4b      	ldr	r3, [pc, #300]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137a2:	4a4b      	ldr	r2, [pc, #300]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137a4:	336c      	adds	r3, #108	; 0x6c
 80137a6:	32ac      	adds	r2, #172	; 0xac
 80137a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80137ac:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 80137b0:	4b47      	ldr	r3, [pc, #284]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137b2:	f893 20b4 	ldrb.w	r2, [r3, #180]	; 0xb4
 80137b6:	4b46      	ldr	r3, [pc, #280]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 80137bc:	4b44      	ldr	r3, [pc, #272]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137be:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 80137c2:	4b43      	ldr	r3, [pc, #268]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137c4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 80137c8:	4b41      	ldr	r3, [pc, #260]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80137ce:	4a40      	ldr	r2, [pc, #256]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137d0:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 80137d2:	4b3f      	ldr	r3, [pc, #252]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80137d8:	4a3d      	ldr	r2, [pc, #244]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137da:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 80137dc:	4b3d      	ldr	r3, [pc, #244]	; (80138d4 <ResetMacParameters+0x1ac>)
 80137de:	2200      	movs	r2, #0
 80137e0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    Nvm.MacGroup1.SrvAckRequested = false;
 80137e4:	4b3a      	ldr	r3, [pc, #232]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80137ec:	2301      	movs	r3, #1
 80137ee:	733b      	strb	r3, [r7, #12]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80137f0:	4b39      	ldr	r3, [pc, #228]	; (80138d8 <ResetMacParameters+0x1b0>)
 80137f2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80137f4:	4b39      	ldr	r3, [pc, #228]	; (80138dc <ResetMacParameters+0x1b4>)
 80137f6:	60bb      	str	r3, [r7, #8]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80137f8:	4b35      	ldr	r3, [pc, #212]	; (80138d0 <ResetMacParameters+0x1a8>)
 80137fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80137fe:	1d3a      	adds	r2, r7, #4
 8013800:	4611      	mov	r1, r2
 8013802:	4618      	mov	r0, r3
 8013804:	f004 f837 	bl	8017876 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013808:	4b32      	ldr	r3, [pc, #200]	; (80138d4 <ResetMacParameters+0x1ac>)
 801380a:	2200      	movs	r2, #0
 801380c:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013810:	4b30      	ldr	r3, [pc, #192]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013812:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013816:	4b2f      	ldr	r3, [pc, #188]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013818:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801381c:	4b2c      	ldr	r3, [pc, #176]	; (80138d0 <ResetMacParameters+0x1a8>)
 801381e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013820:	4a2c      	ldr	r2, [pc, #176]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013822:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013826:	4b2a      	ldr	r3, [pc, #168]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013828:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 801382c:	4b29      	ldr	r3, [pc, #164]	; (80138d4 <ResetMacParameters+0x1ac>)
 801382e:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8013832:	4b27      	ldr	r3, [pc, #156]	; (80138d0 <ResetMacParameters+0x1a8>)
 8013834:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8013838:	4b26      	ldr	r3, [pc, #152]	; (80138d4 <ResetMacParameters+0x1ac>)
 801383a:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801383e:	4b25      	ldr	r3, [pc, #148]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013840:	2200      	movs	r2, #0
 8013842:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013846:	4b23      	ldr	r3, [pc, #140]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013848:	2201      	movs	r2, #1
 801384a:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801384e:	4a21      	ldr	r2, [pc, #132]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013850:	4b20      	ldr	r3, [pc, #128]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013852:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013856:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801385a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801385c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801385e:	682b      	ldr	r3, [r5, #0]
 8013860:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013862:	4b1c      	ldr	r3, [pc, #112]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013864:	2201      	movs	r2, #1
 8013866:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801386a:	4b1a      	ldr	r3, [pc, #104]	; (80138d4 <ResetMacParameters+0x1ac>)
 801386c:	2202      	movs	r2, #2
 801386e:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013872:	2300      	movs	r3, #0
 8013874:	633b      	str	r3, [r7, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	637b      	str	r3, [r7, #52]	; 0x34

    if( MacCtx.MacCallbacks != NULL )
 801387a:	4b16      	ldr	r3, [pc, #88]	; (80138d4 <ResetMacParameters+0x1ac>)
 801387c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013880:	2b00      	cmp	r3, #0
 8013882:	d009      	beq.n	8013898 <ResetMacParameters+0x170>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013884:	4b13      	ldr	r3, [pc, #76]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013886:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801388a:	685b      	ldr	r3, [r3, #4]
 801388c:	633b      	str	r3, [r7, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 801388e:	4b11      	ldr	r3, [pc, #68]	; (80138d4 <ResetMacParameters+0x1ac>)
 8013890:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013894:	691b      	ldr	r3, [r3, #16]
 8013896:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013898:	4b11      	ldr	r3, [pc, #68]	; (80138e0 <ResetMacParameters+0x1b8>)
 801389a:	613b      	str	r3, [r7, #16]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 801389c:	4b11      	ldr	r3, [pc, #68]	; (80138e4 <ResetMacParameters+0x1bc>)
 801389e:	617b      	str	r3, [r7, #20]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80138a0:	4b11      	ldr	r3, [pc, #68]	; (80138e8 <ResetMacParameters+0x1c0>)
 80138a2:	61bb      	str	r3, [r7, #24]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80138a4:	4b11      	ldr	r3, [pc, #68]	; (80138ec <ResetMacParameters+0x1c4>)
 80138a6:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80138a8:	4b11      	ldr	r3, [pc, #68]	; (80138f0 <ResetMacParameters+0x1c8>)
 80138aa:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80138ac:	4b11      	ldr	r3, [pc, #68]	; (80138f4 <ResetMacParameters+0x1cc>)
 80138ae:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80138b0:	4b11      	ldr	r3, [pc, #68]	; (80138f8 <ResetMacParameters+0x1d0>)
 80138b2:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80138b4:	4b11      	ldr	r3, [pc, #68]	; (80138fc <ResetMacParameters+0x1d4>)
 80138b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80138b8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80138bc:	f107 0310 	add.w	r3, r7, #16
 80138c0:	4a0f      	ldr	r2, [pc, #60]	; (8013900 <ResetMacParameters+0x1d8>)
 80138c2:	4618      	mov	r0, r3
 80138c4:	f001 ffec 	bl	80158a0 <LoRaMacClassBInit>
}
 80138c8:	bf00      	nop
 80138ca:	3738      	adds	r7, #56	; 0x38
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bdb0      	pop	{r4, r5, r7, pc}
 80138d0:	200038f8 	.word	0x200038f8
 80138d4:	200033f0 	.word	0x200033f0
 80138d8:	20003ad0 	.word	0x20003ad0
 80138dc:	20003b74 	.word	0x20003b74
 80138e0:	20003850 	.word	0x20003850
 80138e4:	2000380c 	.word	0x2000380c
 80138e8:	2000383c 	.word	0x2000383c
 80138ec:	20003871 	.word	0x20003871
 80138f0:	200039c4 	.word	0x200039c4
 80138f4:	20003938 	.word	0x20003938
 80138f8:	2000393c 	.word	0x2000393c
 80138fc:	200039c8 	.word	0x200039c8
 8013900:	20003ef0 	.word	0x20003ef0

08013904 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f00c f884 	bl	801fa1c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013914:	4b0e      	ldr	r3, [pc, #56]	; (8013950 <RxWindowSetup+0x4c>)
 8013916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013918:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801391a:	4b0e      	ldr	r3, [pc, #56]	; (8013954 <RxWindowSetup+0x50>)
 801391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013920:	4a0d      	ldr	r2, [pc, #52]	; (8013958 <RxWindowSetup+0x54>)
 8013922:	6839      	ldr	r1, [r7, #0]
 8013924:	4618      	mov	r0, r3
 8013926:	f004 f836 	bl	8017996 <RegionRxConfig>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d00a      	beq.n	8013946 <RxWindowSetup+0x42>
    {
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013930:	4b07      	ldr	r3, [pc, #28]	; (8013950 <RxWindowSetup+0x4c>)
 8013932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013934:	4a07      	ldr	r2, [pc, #28]	; (8013954 <RxWindowSetup+0x50>)
 8013936:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8013938:	4610      	mov	r0, r2
 801393a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	7cda      	ldrb	r2, [r3, #19]
 8013940:	4b06      	ldr	r3, [pc, #24]	; (801395c <RxWindowSetup+0x58>)
 8013942:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013946:	bf00      	nop
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	0802333c 	.word	0x0802333c
 8013954:	200038f8 	.word	0x200038f8
 8013958:	20003810 	.word	0x20003810
 801395c:	200033f0 	.word	0x200033f0

08013960 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b083      	sub	sp, #12
 8013964:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013966:	4b18      	ldr	r3, [pc, #96]	; (80139c8 <OpenContinuousRxCWindow+0x68>)
 8013968:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801396c:	4b16      	ldr	r3, [pc, #88]	; (80139c8 <OpenContinuousRxCWindow+0x68>)
 801396e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013972:	b259      	sxtb	r1, r3
 8013974:	4b14      	ldr	r3, [pc, #80]	; (80139c8 <OpenContinuousRxCWindow+0x68>)
 8013976:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801397a:	4b13      	ldr	r3, [pc, #76]	; (80139c8 <OpenContinuousRxCWindow+0x68>)
 801397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801397e:	4c13      	ldr	r4, [pc, #76]	; (80139cc <OpenContinuousRxCWindow+0x6c>)
 8013980:	9400      	str	r4, [sp, #0]
 8013982:	f003 ffe4 	bl	801794e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013986:	4b12      	ldr	r3, [pc, #72]	; (80139d0 <OpenContinuousRxCWindow+0x70>)
 8013988:	2202      	movs	r2, #2
 801398a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801398e:	4b10      	ldr	r3, [pc, #64]	; (80139d0 <OpenContinuousRxCWindow+0x70>)
 8013990:	2201      	movs	r2, #1
 8013992:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013996:	4b0c      	ldr	r3, [pc, #48]	; (80139c8 <OpenContinuousRxCWindow+0x68>)
 8013998:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801399c:	4a0d      	ldr	r2, [pc, #52]	; (80139d4 <OpenContinuousRxCWindow+0x74>)
 801399e:	490b      	ldr	r1, [pc, #44]	; (80139cc <OpenContinuousRxCWindow+0x6c>)
 80139a0:	4618      	mov	r0, r3
 80139a2:	f003 fff8 	bl	8017996 <RegionRxConfig>
 80139a6:	4603      	mov	r3, r0
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d009      	beq.n	80139c0 <OpenContinuousRxCWindow+0x60>
    {
        Radio.Rx( 0 ); // Continuous mode
 80139ac:	4b0a      	ldr	r3, [pc, #40]	; (80139d8 <OpenContinuousRxCWindow+0x78>)
 80139ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80139b0:	2000      	movs	r0, #0
 80139b2:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80139b4:	4b06      	ldr	r3, [pc, #24]	; (80139d0 <OpenContinuousRxCWindow+0x70>)
 80139b6:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80139ba:	4b05      	ldr	r3, [pc, #20]	; (80139d0 <OpenContinuousRxCWindow+0x70>)
 80139bc:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80139c0:	bf00      	nop
 80139c2:	3704      	adds	r7, #4
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd90      	pop	{r4, r7, pc}
 80139c8:	200038f8 	.word	0x200038f8
 80139cc:	200037d0 	.word	0x200037d0
 80139d0:	200033f0 	.word	0x200033f0
 80139d4:	20003810 	.word	0x20003810
 80139d8:	0802333c 	.word	0x0802333c

080139dc <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b088      	sub	sp, #32
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	4613      	mov	r3, r2
 80139ea:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80139ec:	4b82      	ldr	r3, [pc, #520]	; (8013bf8 <PrepareFrame+0x21c>)
 80139ee:	2200      	movs	r2, #0
 80139f0:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80139f2:	4b81      	ldr	r3, [pc, #516]	; (8013bf8 <PrepareFrame+0x21c>)
 80139f4:	2200      	movs	r2, #0
 80139f6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    uint32_t fCntUp = 0;
 80139fa:	2300      	movs	r3, #0
 80139fc:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80139fe:	2300      	movs	r3, #0
 8013a00:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013a10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a12:	461a      	mov	r2, r3
 8013a14:	6839      	ldr	r1, [r7, #0]
 8013a16:	4879      	ldr	r0, [pc, #484]	; (8013bfc <PrepareFrame+0x220>)
 8013a18:	f007 fdc5 	bl	801b5a6 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013a1e:	b2da      	uxtb	r2, r3
 8013a20:	4b75      	ldr	r3, [pc, #468]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a22:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	781a      	ldrb	r2, [r3, #0]
 8013a2a:	4b73      	ldr	r3, [pc, #460]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a2c:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	781b      	ldrb	r3, [r3, #0]
 8013a32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	2b07      	cmp	r3, #7
 8013a3a:	f000 80b9 	beq.w	8013bb0 <PrepareFrame+0x1d4>
 8013a3e:	2b07      	cmp	r3, #7
 8013a40:	f300 80d0 	bgt.w	8013be4 <PrepareFrame+0x208>
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	d006      	beq.n	8013a56 <PrepareFrame+0x7a>
 8013a48:	2b04      	cmp	r3, #4
 8013a4a:	f040 80cb 	bne.w	8013be4 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013a4e:	4b6a      	ldr	r3, [pc, #424]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a50:	2201      	movs	r2, #1
 8013a52:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013a56:	4b68      	ldr	r3, [pc, #416]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a58:	2204      	movs	r2, #4
 8013a5a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013a5e:	4b66      	ldr	r3, [pc, #408]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a60:	4a67      	ldr	r2, [pc, #412]	; (8013c00 <PrepareFrame+0x224>)
 8013a62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013a66:	4b64      	ldr	r3, [pc, #400]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a68:	22ff      	movs	r2, #255	; 0xff
 8013a6a:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	781a      	ldrb	r2, [r3, #0]
 8013a72:	4b61      	ldr	r3, [pc, #388]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a74:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8013a78:	4a5f      	ldr	r2, [pc, #380]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a7a:	79fb      	ldrb	r3, [r7, #7]
 8013a7c:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013a80:	4b60      	ldr	r3, [pc, #384]	; (8013c04 <PrepareFrame+0x228>)
 8013a82:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013a86:	4a5c      	ldr	r2, [pc, #368]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a88:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	781a      	ldrb	r2, [r3, #0]
 8013a90:	4b59      	ldr	r3, [pc, #356]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a92:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8013a96:	4b58      	ldr	r3, [pc, #352]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a98:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8013a9c:	4b56      	ldr	r3, [pc, #344]	; (8013bf8 <PrepareFrame+0x21c>)
 8013a9e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8013aa2:	4b55      	ldr	r3, [pc, #340]	; (8013bf8 <PrepareFrame+0x21c>)
 8013aa4:	4a55      	ldr	r2, [pc, #340]	; (8013bfc <PrepareFrame+0x220>)
 8013aa6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8013aaa:	f107 0318 	add.w	r3, r7, #24
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f002 fffe 	bl	8016ab0 <LoRaMacCryptoGetFCntUp>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d001      	beq.n	8013abe <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8013aba:	2312      	movs	r3, #18
 8013abc:	e098      	b.n	8013bf0 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	4b4d      	ldr	r3, [pc, #308]	; (8013bf8 <PrepareFrame+0x21c>)
 8013ac4:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8013ac8:	4b4b      	ldr	r3, [pc, #300]	; (8013bf8 <PrepareFrame+0x21c>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
            MacCtx.McpsConfirm.AckReceived = false;
 8013ad0:	4b49      	ldr	r3, [pc, #292]	; (8013bf8 <PrepareFrame+0x21c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	4a47      	ldr	r2, [pc, #284]	; (8013bf8 <PrepareFrame+0x21c>)
 8013adc:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013ae0:	f107 0314 	add.w	r3, r7, #20
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f002 f99b 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013af0:	2313      	movs	r3, #19
 8013af2:	e07d      	b.n	8013bf0 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d076      	beq.n	8013be8 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013afa:	4b42      	ldr	r3, [pc, #264]	; (8013c04 <PrepareFrame+0x228>)
 8013afc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe fdab 	bl	801265c <GetMaxAppPayloadWithoutFOptsLength>
 8013b06:	4603      	mov	r3, r0
 8013b08:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b0a:	4b3b      	ldr	r3, [pc, #236]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b0c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d01d      	beq.n	8013b50 <PrepareFrame+0x174>
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	2b0f      	cmp	r3, #15
 8013b18:	d81a      	bhi.n	8013b50 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013b1a:	f107 0314 	add.w	r3, r7, #20
 8013b1e:	4a3a      	ldr	r2, [pc, #232]	; (8013c08 <PrepareFrame+0x22c>)
 8013b20:	4619      	mov	r1, r3
 8013b22:	200f      	movs	r0, #15
 8013b24:	f002 f992 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d001      	beq.n	8013b32 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b2e:	2313      	movs	r3, #19
 8013b30:	e05e      	b.n	8013bf0 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	f003 030f 	and.w	r3, r3, #15
 8013b38:	b2d9      	uxtb	r1, r3
 8013b3a:	68ba      	ldr	r2, [r7, #8]
 8013b3c:	7813      	ldrb	r3, [r2, #0]
 8013b3e:	f361 0303 	bfi	r3, r1, #0, #4
 8013b42:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	781a      	ldrb	r2, [r3, #0]
 8013b48:	4b2b      	ldr	r3, [pc, #172]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b4a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013b4e:	e04b      	b.n	8013be8 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013b50:	4b29      	ldr	r3, [pc, #164]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b52:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d010      	beq.n	8013b7c <PrepareFrame+0x1a0>
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	2b0f      	cmp	r3, #15
 8013b5e:	d90d      	bls.n	8013b7c <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b60:	7ffb      	ldrb	r3, [r7, #31]
 8013b62:	f107 0114 	add.w	r1, r7, #20
 8013b66:	4a29      	ldr	r2, [pc, #164]	; (8013c0c <PrepareFrame+0x230>)
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f002 f96f 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d001      	beq.n	8013b78 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b74:	2313      	movs	r3, #19
 8013b76:	e03b      	b.n	8013bf0 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8013b78:	230a      	movs	r3, #10
 8013b7a:	e039      	b.n	8013bf0 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013b7c:	7ffb      	ldrb	r3, [r7, #31]
 8013b7e:	f107 0114 	add.w	r1, r7, #20
 8013b82:	4a22      	ldr	r2, [pc, #136]	; (8013c0c <PrepareFrame+0x230>)
 8013b84:	4618      	mov	r0, r3
 8013b86:	f002 f961 	bl	8015e4c <LoRaMacCommandsSerializeCmds>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d001      	beq.n	8013b94 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013b90:	2313      	movs	r3, #19
 8013b92:	e02d      	b.n	8013bf0 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8013b94:	4b18      	ldr	r3, [pc, #96]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b96:	2200      	movs	r2, #0
 8013b98:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8013b9c:	4b16      	ldr	r3, [pc, #88]	; (8013bf8 <PrepareFrame+0x21c>)
 8013b9e:	4a1b      	ldr	r2, [pc, #108]	; (8013c0c <PrepareFrame+0x230>)
 8013ba0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	b2da      	uxtb	r2, r3
 8013ba8:	4b13      	ldr	r3, [pc, #76]	; (8013bf8 <PrepareFrame+0x21c>)
 8013baa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8013bae:	e01b      	b.n	8013be8 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d01a      	beq.n	8013bec <PrepareFrame+0x210>
 8013bb6:	4b10      	ldr	r3, [pc, #64]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bb8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d015      	beq.n	8013bec <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8013bc0:	4813      	ldr	r0, [pc, #76]	; (8013c10 <PrepareFrame+0x234>)
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bc4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	461a      	mov	r2, r3
 8013bcc:	6839      	ldr	r1, [r7, #0]
 8013bce:	f007 fcea 	bl	801b5a6 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8013bd2:	4b09      	ldr	r3, [pc, #36]	; (8013bf8 <PrepareFrame+0x21c>)
 8013bd4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	3301      	adds	r3, #1
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	4b06      	ldr	r3, [pc, #24]	; (8013bf8 <PrepareFrame+0x21c>)
 8013be0:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013be2:	e003      	b.n	8013bec <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013be4:	2302      	movs	r3, #2
 8013be6:	e003      	b.n	8013bf0 <PrepareFrame+0x214>
            break;
 8013be8:	bf00      	nop
 8013bea:	e000      	b.n	8013bee <PrepareFrame+0x212>
            break;
 8013bec:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3720      	adds	r7, #32
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	200033f0 	.word	0x200033f0
 8013bfc:	20003528 	.word	0x20003528
 8013c00:	200033f2 	.word	0x200033f2
 8013c04:	200038f8 	.word	0x200038f8
 8013c08:	20003508 	.word	0x20003508
 8013c0c:	20003878 	.word	0x20003878
 8013c10:	200033f3 	.word	0x200033f3

08013c14 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013c14:	b580      	push	{r7, lr}
 8013c16:	b08a      	sub	sp, #40	; 0x28
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013c1e:	2303      	movs	r3, #3
 8013c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013c24:	2300      	movs	r3, #0
 8013c26:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013c28:	79fb      	ldrb	r3, [r7, #7]
 8013c2a:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c2c:	4b47      	ldr	r3, [pc, #284]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c2e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c32:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013c34:	4b45      	ldr	r3, [pc, #276]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c36:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013c3a:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013c3c:	4b43      	ldr	r3, [pc, #268]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c40:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013c42:	4b42      	ldr	r3, [pc, #264]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c46:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013c48:	4b41      	ldr	r3, [pc, #260]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c4a:	881b      	ldrh	r3, [r3, #0]
 8013c4c:	83bb      	strh	r3, [r7, #28]

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013c4e:	4b3f      	ldr	r3, [pc, #252]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c50:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8013c54:	f107 020f 	add.w	r2, r7, #15
 8013c58:	f107 0110 	add.w	r1, r7, #16
 8013c5c:	4b3d      	ldr	r3, [pc, #244]	; (8013d54 <SendFrameOnChannel+0x140>)
 8013c5e:	f003 feb8 	bl	80179d2 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c62:	4b3b      	ldr	r3, [pc, #236]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c64:	2201      	movs	r2, #1
 8013c66:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013c6a:	4b38      	ldr	r3, [pc, #224]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013c6c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013c70:	b2da      	uxtb	r2, r3
 8013c72:	4b37      	ldr	r3, [pc, #220]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c74:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
    MacCtx.McpsConfirm.TxPower = txPower;
 8013c78:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013c7c:	4b34      	ldr	r3, [pc, #208]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c7e:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
    MacCtx.McpsConfirm.Channel = channel;
 8013c82:	79fb      	ldrb	r3, [r7, #7]
 8013c84:	4a32      	ldr	r2, [pc, #200]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c86:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c8a:	4b31      	ldr	r3, [pc, #196]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c8c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c90:	4a2f      	ldr	r2, [pc, #188]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c92:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013c96:	4b2e      	ldr	r3, [pc, #184]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c98:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013c9c:	4a2c      	ldr	r2, [pc, #176]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013c9e:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013ca2:	f001 fe69 	bl	8015978 <LoRaMacClassBIsBeaconModeActive>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d00b      	beq.n	8013cc4 <SendFrameOnChannel+0xb0>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013cac:	4b28      	ldr	r3, [pc, #160]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013cae:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f001 fecb 	bl	8015a4e <LoRaMacClassBIsUplinkCollision>
 8013cb8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d001      	beq.n	8013cc4 <SendFrameOnChannel+0xb0>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013cc0:	2310      	movs	r3, #16
 8013cc2:	e03e      	b.n	8013d42 <SendFrameOnChannel+0x12e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013cc4:	4b21      	ldr	r3, [pc, #132]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013cc6:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d101      	bne.n	8013cd2 <SendFrameOnChannel+0xbe>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013cce:	f001 fec8 	bl	8015a62 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013cd2:	f001 fe62 	bl	801599a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013cd6:	4b1d      	ldr	r3, [pc, #116]	; (8013d4c <SendFrameOnChannel+0x138>)
 8013cd8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	4a1c      	ldr	r2, [pc, #112]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013ce0:	f892 2415 	ldrb.w	r2, [r2, #1045]	; 0x415
 8013ce4:	4611      	mov	r1, r2
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7ff fc88 	bl	80135fc <SecureFrame>
 8013cec:	4603      	mov	r3, r0
 8013cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d002      	beq.n	8013d00 <SendFrameOnChannel+0xec>
    {
        return status;
 8013cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cfe:	e020      	b.n	8013d42 <SendFrameOnChannel+0x12e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013d00:	4b13      	ldr	r3, [pc, #76]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013d06:	f043 0302 	orr.w	r3, r3, #2
 8013d0a:	4a11      	ldr	r2, [pc, #68]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d0c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
 8013d10:	4b0f      	ldr	r3, [pc, #60]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d12:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 8013d16:	f083 0301 	eor.w	r3, r3, #1
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d007      	beq.n	8013d30 <SendFrameOnChannel+0x11c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013d20:	4b0b      	ldr	r3, [pc, #44]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d22:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013d26:	3301      	adds	r3, #1
 8013d28:	b2da      	uxtb	r2, r3
 8013d2a:	4b09      	ldr	r3, [pc, #36]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d2c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013d30:	4b09      	ldr	r3, [pc, #36]	; (8013d58 <SendFrameOnChannel+0x144>)
 8013d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d34:	4a06      	ldr	r2, [pc, #24]	; (8013d50 <SendFrameOnChannel+0x13c>)
 8013d36:	8812      	ldrh	r2, [r2, #0]
 8013d38:	b2d2      	uxtb	r2, r2
 8013d3a:	4611      	mov	r1, r2
 8013d3c:	4807      	ldr	r0, [pc, #28]	; (8013d5c <SendFrameOnChannel+0x148>)
 8013d3e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013d40:	2300      	movs	r3, #0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3728      	adds	r7, #40	; 0x28
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	200038f8 	.word	0x200038f8
 8013d50:	200033f0 	.word	0x200033f0
 8013d54:	20003808 	.word	0x20003808
 8013d58:	0802333c 	.word	0x0802333c
 8013d5c:	200033f2 	.word	0x200033f2

08013d60 <SetTxContinuousWave>:

static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b086      	sub	sp, #24
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	4603      	mov	r3, r0
 8013d68:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013d6a:	4b15      	ldr	r3, [pc, #84]	; (8013dc0 <SetTxContinuousWave+0x60>)
 8013d6c:	f893 3415 	ldrb.w	r3, [r3, #1045]	; 0x415
 8013d70:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013d72:	4b14      	ldr	r3, [pc, #80]	; (8013dc4 <SetTxContinuousWave+0x64>)
 8013d74:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013d78:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013d7a:	4b12      	ldr	r3, [pc, #72]	; (8013dc4 <SetTxContinuousWave+0x64>)
 8013d7c:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013d80:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013d82:	4b10      	ldr	r3, [pc, #64]	; (8013dc4 <SetTxContinuousWave+0x64>)
 8013d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d86:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013d88:	4b0e      	ldr	r3, [pc, #56]	; (8013dc4 <SetTxContinuousWave+0x64>)
 8013d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d8c:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013d8e:	88fb      	ldrh	r3, [r7, #6]
 8013d90:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013d92:	4b0c      	ldr	r3, [pc, #48]	; (8013dc4 <SetTxContinuousWave+0x64>)
 8013d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013d98:	f107 0208 	add.w	r2, r7, #8
 8013d9c:	4611      	mov	r1, r2
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f003 ff14 	bl	8017bcc <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013da4:	4b06      	ldr	r3, [pc, #24]	; (8013dc0 <SetTxContinuousWave+0x60>)
 8013da6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013daa:	f043 0302 	orr.w	r3, r3, #2
 8013dae:	4a04      	ldr	r2, [pc, #16]	; (8013dc0 <SetTxContinuousWave+0x60>)
 8013db0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013db4:	2300      	movs	r3, #0
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	200033f0 	.word	0x200033f0
 8013dc4:	200038f8 	.word	0x200038f8

08013dc8 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	6039      	str	r1, [r7, #0]
 8013dd2:	80fb      	strh	r3, [r7, #6]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013dd8:	4b09      	ldr	r3, [pc, #36]	; (8013e00 <SetTxContinuousWave1+0x38>)
 8013dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ddc:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013de0:	88fa      	ldrh	r2, [r7, #6]
 8013de2:	6838      	ldr	r0, [r7, #0]
 8013de4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013de6:	4b07      	ldr	r3, [pc, #28]	; (8013e04 <SetTxContinuousWave1+0x3c>)
 8013de8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dec:	f043 0302 	orr.w	r3, r3, #2
 8013df0:	4a04      	ldr	r2, [pc, #16]	; (8013e04 <SetTxContinuousWave1+0x3c>)
 8013df2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013df6:	2300      	movs	r3, #0
}
 8013df8:	4618      	mov	r0, r3
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	0802333c 	.word	0x0802333c
 8013e04:	200033f0 	.word	0x200033f0

08013e08 <GetNvmData>:

LoRaMacNvmData_t* GetNvmData( void )
{
 8013e08:	b480      	push	{r7}
 8013e0a:	af00      	add	r7, sp, #0
    return &Nvm;
 8013e0c:	4b02      	ldr	r3, [pc, #8]	; (8013e18 <GetNvmData+0x10>)
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bc80      	pop	{r7}
 8013e14:	4770      	bx	lr
 8013e16:	bf00      	nop
 8013e18:	200038f8 	.word	0x200038f8

08013e1c <RestoreNvmData>:

LoRaMacStatus_t RestoreNvmData( LoRaMacNvmData_t* nvm )
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8013e24:	2300      	movs	r3, #0
 8013e26:	60fb      	str	r3, [r7, #12]

    // Status and parameter validation
    if( nvm == NULL )
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d101      	bne.n	8013e32 <RestoreNvmData+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e2e:	2303      	movs	r3, #3
 8013e30:	e09a      	b.n	8013f68 <RestoreNvmData+0x14c>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8013e32:	4b4f      	ldr	r3, [pc, #316]	; (8013f70 <RestoreNvmData+0x154>)
 8013e34:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d001      	beq.n	8013e40 <RestoreNvmData+0x24>
    {
        return LORAMAC_STATUS_BUSY;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e093      	b.n	8013f68 <RestoreNvmData+0x14c>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2124      	movs	r1, #36	; 0x24
 8013e44:	4618      	mov	r0, r3
 8013e46:	f007 fc03 	bl	801b650 <Crc32>
 8013e4a:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->Crypto.Crc32 ) );
    if( crc == nvm->Crypto.Crc32 )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d105      	bne.n	8013e62 <RestoreNvmData+0x46>
    {
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2228      	movs	r2, #40	; 0x28
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4845      	ldr	r0, [pc, #276]	; (8013f74 <RestoreNvmData+0x158>)
 8013e5e:	f007 fba2 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.Crypto ) );
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	3328      	adds	r3, #40	; 0x28
 8013e66:	2114      	movs	r1, #20
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f007 fbf1 	bl	801b650 <Crc32>
 8013e6e:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup1.Crc32 ) );
    if( crc == nvm->MacGroup1.Crc32 )
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e74:	68fa      	ldr	r2, [r7, #12]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d106      	bne.n	8013e88 <RestoreNvmData+0x6c>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	3328      	adds	r3, #40	; 0x28
 8013e7e:	2218      	movs	r2, #24
 8013e80:	4619      	mov	r1, r3
 8013e82:	483d      	ldr	r0, [pc, #244]	; (8013f78 <RestoreNvmData+0x15c>)
 8013e84:	f007 fb8f 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.MacGroup1 ) );
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	3340      	adds	r3, #64	; 0x40
 8013e8c:	21d4      	movs	r1, #212	; 0xd4
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f007 fbde 	bl	801b650 <Crc32>
 8013e94:	60f8      	str	r0, [r7, #12]
                                               sizeof( nvm->MacGroup2.Crc32 ) );
    if( crc == nvm->MacGroup2.Crc32 )
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8013e9c:	68fa      	ldr	r2, [r7, #12]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d11f      	bne.n	8013ee2 <RestoreNvmData+0xc6>
    {
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	3340      	adds	r3, #64	; 0x40
 8013ea6:	22d8      	movs	r2, #216	; 0xd8
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	4834      	ldr	r0, [pc, #208]	; (8013f7c <RestoreNvmData+0x160>)
 8013eac:	f007 fb7b 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.MacGroup2 ) );

        // Initialize RxC config parameters.
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8013eb0:	4b2f      	ldr	r3, [pc, #188]	; (8013f70 <RestoreNvmData+0x154>)
 8013eb2:	f893 2415 	ldrb.w	r2, [r3, #1045]	; 0x415
 8013eb6:	4b2e      	ldr	r3, [pc, #184]	; (8013f70 <RestoreNvmData+0x154>)
 8013eb8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8013ebc:	4b2d      	ldr	r3, [pc, #180]	; (8013f74 <RestoreNvmData+0x158>)
 8013ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec0:	4a2b      	ldr	r2, [pc, #172]	; (8013f70 <RestoreNvmData+0x154>)
 8013ec2:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013ec6:	4b2b      	ldr	r3, [pc, #172]	; (8013f74 <RestoreNvmData+0x158>)
 8013ec8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8013ecc:	4b28      	ldr	r3, [pc, #160]	; (8013f70 <RestoreNvmData+0x154>)
 8013ece:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8013ed2:	4b27      	ldr	r3, [pc, #156]	; (8013f70 <RestoreNvmData+0x154>)
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013eda:	4b25      	ldr	r3, [pc, #148]	; (8013f70 <RestoreNvmData+0x154>)
 8013edc:	2202      	movs	r2, #2
 8013ede:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013ee8:	21bc      	movs	r1, #188	; 0xbc
 8013eea:	4618      	mov	r0, r3
 8013eec:	f007 fbb0 	bl	801b650 <Crc32>
 8013ef0:	60f8      	str	r0, [r7, #12]
                                                   sizeof( nvm->SecureElement.Crc32 ) );
    if( crc == nvm->SecureElement.Crc32 )
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d107      	bne.n	8013f0e <RestoreNvmData+0xf2>
    {
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8013f04:	22c0      	movs	r2, #192	; 0xc0
 8013f06:	4619      	mov	r1, r3
 8013f08:	481d      	ldr	r0, [pc, #116]	; (8013f80 <RestoreNvmData+0x164>)
 8013f0a:	f007 fb4c 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.SecureElement ) );
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013f14:	21a0      	movs	r1, #160	; 0xa0
 8013f16:	4618      	mov	r0, r3
 8013f18:	f007 fb9a 	bl	801b650 <Crc32>
 8013f1c:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->RegionGroup1.Crc32 ) );
    if( crc == nvm->RegionGroup1.Crc32 )
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d107      	bne.n	8013f3a <RestoreNvmData+0x11e>
    {
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8013f30:	22a4      	movs	r2, #164	; 0xa4
 8013f32:	4619      	mov	r1, r3
 8013f34:	4813      	ldr	r0, [pc, #76]	; (8013f84 <RestoreNvmData+0x168>)
 8013f36:	f007 fb36 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.RegionGroup1 ) );
    }

    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8013f40:	2114      	movs	r1, #20
 8013f42:	4618      	mov	r0, r3
 8013f44:	f007 fb84 	bl	801b650 <Crc32>
 8013f48:	60f8      	str	r0, [r7, #12]
                                            sizeof( nvm->ClassB.Crc32 ) );
    if( crc == nvm->ClassB.Crc32 )
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8013f50:	68fa      	ldr	r2, [r7, #12]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d107      	bne.n	8013f66 <RestoreNvmData+0x14a>
    {
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f503 63bf 	add.w	r3, r3, #1528	; 0x5f8
 8013f5c:	2218      	movs	r2, #24
 8013f5e:	4619      	mov	r1, r3
 8013f60:	4809      	ldr	r0, [pc, #36]	; (8013f88 <RestoreNvmData+0x16c>)
 8013f62:	f007 fb20 	bl	801b5a6 <memcpy1>
                 sizeof( Nvm.ClassB ) );
    }

    return LORAMAC_STATUS_OK;
 8013f66:	2300      	movs	r3, #0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	200033f0 	.word	0x200033f0
 8013f74:	200038f8 	.word	0x200038f8
 8013f78:	20003920 	.word	0x20003920
 8013f7c:	20003938 	.word	0x20003938
 8013f80:	20003a10 	.word	0x20003a10
 8013f84:	20003ad0 	.word	0x20003ad0
 8013f88:	20003ef0 	.word	0x20003ef0

08013f8c <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d002      	beq.n	8013fa2 <DetermineFrameType+0x16>
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d101      	bne.n	8013fa6 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fa2:	2303      	movs	r3, #3
 8013fa4:	e03b      	b.n	801401e <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	7b1b      	ldrb	r3, [r3, #12]
 8013faa:	f003 030f 	and.w	r3, r3, #15
 8013fae:	b2db      	uxtb	r3, r3
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d008      	beq.n	8013fc6 <DetermineFrameType+0x3a>
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d003      	beq.n	8013fc6 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	701a      	strb	r2, [r3, #0]
 8013fc4:	e02a      	b.n	801401c <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d103      	bne.n	8013fd8 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	2201      	movs	r2, #1
 8013fd4:	701a      	strb	r2, [r3, #0]
 8013fd6:	e021      	b.n	801401c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	7b1b      	ldrb	r3, [r3, #12]
 8013fdc:	f003 030f 	and.w	r3, r3, #15
 8013fe0:	b2db      	uxtb	r3, r3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d108      	bne.n	8013ff8 <DetermineFrameType+0x6c>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d103      	bne.n	8013ff8 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	2202      	movs	r2, #2
 8013ff4:	701a      	strb	r2, [r3, #0]
 8013ff6:	e011      	b.n	801401c <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	7b1b      	ldrb	r3, [r3, #12]
 8013ffc:	f003 030f 	and.w	r3, r3, #15
 8014000:	b2db      	uxtb	r3, r3
 8014002:	2b00      	cmp	r3, #0
 8014004:	d108      	bne.n	8014018 <DetermineFrameType+0x8c>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f893 3020 	ldrb.w	r3, [r3, #32]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d003      	beq.n	8014018 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	2203      	movs	r2, #3
 8014014:	701a      	strb	r2, [r3, #0]
 8014016:	e001      	b.n	801401c <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8014018:	2317      	movs	r3, #23
 801401a:	e000      	b.n	801401e <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 801401c:	2300      	movs	r3, #0
}
 801401e:	4618      	mov	r0, r3
 8014020:	370c      	adds	r7, #12
 8014022:	46bd      	mov	sp, r7
 8014024:	bc80      	pop	{r7}
 8014026:	4770      	bx	lr

08014028 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8014028:	b480      	push	{r7}
 801402a:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 801402c:	4b12      	ldr	r3, [pc, #72]	; (8014078 <CheckRetransUnconfirmedUplink+0x50>)
 801402e:	f893 2410 	ldrb.w	r2, [r3, #1040]	; 0x410
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8014032:	4b12      	ldr	r3, [pc, #72]	; (801407c <CheckRetransUnconfirmedUplink+0x54>)
 8014034:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8014038:	429a      	cmp	r2, r3
 801403a:	d301      	bcc.n	8014040 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 801403c:	2301      	movs	r3, #1
 801403e:	e016      	b.n	801406e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014040:	4b0d      	ldr	r3, [pc, #52]	; (8014078 <CheckRetransUnconfirmedUplink+0x50>)
 8014042:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014046:	f003 0302 	and.w	r3, r3, #2
 801404a:	b2db      	uxtb	r3, r3
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00d      	beq.n	801406c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8014050:	4b0a      	ldr	r3, [pc, #40]	; (801407c <CheckRetransUnconfirmedUplink+0x54>)
 8014052:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014056:	2b00      	cmp	r3, #0
 8014058:	d101      	bne.n	801405e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 801405a:	2301      	movs	r3, #1
 801405c:	e007      	b.n	801406e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 801405e:	4b06      	ldr	r3, [pc, #24]	; (8014078 <CheckRetransUnconfirmedUplink+0x50>)
 8014060:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8014064:	2b00      	cmp	r3, #0
 8014066:	d101      	bne.n	801406c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8014068:	2301      	movs	r3, #1
 801406a:	e000      	b.n	801406e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 801406c:	2300      	movs	r3, #0
}
 801406e:	4618      	mov	r0, r3
 8014070:	46bd      	mov	sp, r7
 8014072:	bc80      	pop	{r7}
 8014074:	4770      	bx	lr
 8014076:	bf00      	nop
 8014078:	200033f0 	.word	0x200033f0
 801407c:	200038f8 	.word	0x200038f8

08014080 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8014080:	b480      	push	{r7}
 8014082:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8014084:	4b0e      	ldr	r3, [pc, #56]	; (80140c0 <CheckRetransConfirmedUplink+0x40>)
 8014086:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
        MacCtx.AckTimeoutRetries )
 801408a:	4b0d      	ldr	r3, [pc, #52]	; (80140c0 <CheckRetransConfirmedUplink+0x40>)
 801408c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
    if( MacCtx.AckTimeoutRetriesCounter >=
 8014090:	429a      	cmp	r2, r3
 8014092:	d301      	bcc.n	8014098 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8014094:	2301      	movs	r3, #1
 8014096:	e00f      	b.n	80140b8 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8014098:	4b09      	ldr	r3, [pc, #36]	; (80140c0 <CheckRetransConfirmedUplink+0x40>)
 801409a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 801409e:	f003 0302 	and.w	r3, r3, #2
 80140a2:	b2db      	uxtb	r3, r3
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d006      	beq.n	80140b6 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 80140a8:	4b05      	ldr	r3, [pc, #20]	; (80140c0 <CheckRetransConfirmedUplink+0x40>)
 80140aa:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d001      	beq.n	80140b6 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 80140b2:	2301      	movs	r3, #1
 80140b4:	e000      	b.n	80140b8 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	46bd      	mov	sp, r7
 80140bc:	bc80      	pop	{r7}
 80140be:	4770      	bx	lr
 80140c0:	200033f0 	.word	0x200033f0

080140c4 <StopRetransmission>:

static bool StopRetransmission( void )
{
 80140c4:	b480      	push	{r7}
 80140c6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140c8:	4b1a      	ldr	r3, [pc, #104]	; (8014134 <StopRetransmission+0x70>)
 80140ca:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 80140ce:	f003 0302 	and.w	r3, r3, #2
 80140d2:	b2db      	uxtb	r3, r3
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d009      	beq.n	80140ec <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140d8:	4b16      	ldr	r3, [pc, #88]	; (8014134 <StopRetransmission+0x70>)
 80140da:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00e      	beq.n	8014100 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 80140e2:	4b14      	ldr	r3, [pc, #80]	; (8014134 <StopRetransmission+0x70>)
 80140e4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 80140e8:	2b01      	cmp	r3, #1
 80140ea:	d009      	beq.n	8014100 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80140ec:	4b12      	ldr	r3, [pc, #72]	; (8014138 <StopRetransmission+0x74>)
 80140ee:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d004      	beq.n	8014100 <StopRetransmission+0x3c>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 80140f6:	4b10      	ldr	r3, [pc, #64]	; (8014138 <StopRetransmission+0x74>)
 80140f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140fa:	3301      	adds	r3, #1
 80140fc:	4a0e      	ldr	r2, [pc, #56]	; (8014138 <StopRetransmission+0x74>)
 80140fe:	6293      	str	r3, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8014100:	4b0c      	ldr	r3, [pc, #48]	; (8014134 <StopRetransmission+0x70>)
 8014102:	2200      	movs	r2, #0
 8014104:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    MacCtx.NodeAckRequested = false;
 8014108:	4b0a      	ldr	r3, [pc, #40]	; (8014134 <StopRetransmission+0x70>)
 801410a:	2200      	movs	r2, #0
 801410c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    MacCtx.AckTimeoutRetry = false;
 8014110:	4b08      	ldr	r3, [pc, #32]	; (8014134 <StopRetransmission+0x70>)
 8014112:	2200      	movs	r2, #0
 8014114:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8014118:	4b06      	ldr	r3, [pc, #24]	; (8014134 <StopRetransmission+0x70>)
 801411a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801411e:	f023 0302 	bic.w	r3, r3, #2
 8014122:	4a04      	ldr	r2, [pc, #16]	; (8014134 <StopRetransmission+0x70>)
 8014124:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8014128:	2301      	movs	r3, #1
}
 801412a:	4618      	mov	r0, r3
 801412c:	46bd      	mov	sp, r7
 801412e:	bc80      	pop	{r7}
 8014130:	4770      	bx	lr
 8014132:	bf00      	nop
 8014134:	200033f0 	.word	0x200033f0
 8014138:	200038f8 	.word	0x200038f8

0801413c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	4603      	mov	r3, r0
 8014144:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014146:	4b0b      	ldr	r3, [pc, #44]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 8014148:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801414c:	2b00      	cmp	r3, #0
 801414e:	d00c      	beq.n	801416a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8014150:	4b08      	ldr	r3, [pc, #32]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 8014152:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014156:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8014158:	2b00      	cmp	r3, #0
 801415a:	d006      	beq.n	801416a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 801415c:	4b05      	ldr	r3, [pc, #20]	; (8014174 <CallNvmDataChangeCallback+0x38>)
 801415e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8014162:	68db      	ldr	r3, [r3, #12]
 8014164:	88fa      	ldrh	r2, [r7, #6]
 8014166:	4610      	mov	r0, r2
 8014168:	4798      	blx	r3
    }
}
 801416a:	bf00      	nop
 801416c:	3708      	adds	r7, #8
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	200033f0 	.word	0x200033f0

08014178 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801417e:	4b1b      	ldr	r3, [pc, #108]	; (80141ec <AckTimeoutRetriesProcess+0x74>)
 8014180:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 8014184:	4b19      	ldr	r3, [pc, #100]	; (80141ec <AckTimeoutRetriesProcess+0x74>)
 8014186:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801418a:	429a      	cmp	r2, r3
 801418c:	d229      	bcs.n	80141e2 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801418e:	4b17      	ldr	r3, [pc, #92]	; (80141ec <AckTimeoutRetriesProcess+0x74>)
 8014190:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 8014194:	3301      	adds	r3, #1
 8014196:	b2da      	uxtb	r2, r3
 8014198:	4b14      	ldr	r3, [pc, #80]	; (80141ec <AckTimeoutRetriesProcess+0x74>)
 801419a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801419e:	4b13      	ldr	r3, [pc, #76]	; (80141ec <AckTimeoutRetriesProcess+0x74>)
 80141a0:	f893 3412 	ldrb.w	r3, [r3, #1042]	; 0x412
 80141a4:	f003 0301 	and.w	r3, r3, #1
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d019      	beq.n	80141e2 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80141ae:	2322      	movs	r3, #34	; 0x22
 80141b0:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80141b2:	4b0f      	ldr	r3, [pc, #60]	; (80141f0 <AckTimeoutRetriesProcess+0x78>)
 80141b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80141b8:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80141ba:	4b0d      	ldr	r3, [pc, #52]	; (80141f0 <AckTimeoutRetriesProcess+0x78>)
 80141bc:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80141c0:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141c2:	4b0b      	ldr	r3, [pc, #44]	; (80141f0 <AckTimeoutRetriesProcess+0x78>)
 80141c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80141c8:	f107 0208 	add.w	r2, r7, #8
 80141cc:	4611      	mov	r1, r2
 80141ce:	4618      	mov	r0, r3
 80141d0:	f003 fb19 	bl	8017806 <RegionGetPhyParam>
 80141d4:	4603      	mov	r3, r0
 80141d6:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	b25a      	sxtb	r2, r3
 80141dc:	4b04      	ldr	r3, [pc, #16]	; (80141f0 <AckTimeoutRetriesProcess+0x78>)
 80141de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 80141e2:	bf00      	nop
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
 80141ea:	bf00      	nop
 80141ec:	200033f0 	.word	0x200033f0
 80141f0:	200038f8 	.word	0x200038f8

080141f4 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80141f4:	b580      	push	{r7, lr}
 80141f6:	b084      	sub	sp, #16
 80141f8:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80141fa:	4b14      	ldr	r3, [pc, #80]	; (801424c <AckTimeoutRetriesFinalize+0x58>)
 80141fc:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8014200:	f083 0301 	eor.w	r3, r3, #1
 8014204:	b2db      	uxtb	r3, r3
 8014206:	2b00      	cmp	r3, #0
 8014208:	d015      	beq.n	8014236 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801420a:	2302      	movs	r3, #2
 801420c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801420e:	4b10      	ldr	r3, [pc, #64]	; (8014250 <AckTimeoutRetriesFinalize+0x5c>)
 8014210:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8014212:	4b10      	ldr	r3, [pc, #64]	; (8014254 <AckTimeoutRetriesFinalize+0x60>)
 8014214:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014216:	4b10      	ldr	r3, [pc, #64]	; (8014258 <AckTimeoutRetriesFinalize+0x64>)
 8014218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801421c:	1d3a      	adds	r2, r7, #4
 801421e:	4611      	mov	r1, r2
 8014220:	4618      	mov	r0, r3
 8014222:	f003 fb28 	bl	8017876 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8014226:	4b09      	ldr	r3, [pc, #36]	; (801424c <AckTimeoutRetriesFinalize+0x58>)
 8014228:	2200      	movs	r2, #0
 801422a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        MacCtx.McpsConfirm.AckReceived = false;
 801422e:	4b07      	ldr	r3, [pc, #28]	; (801424c <AckTimeoutRetriesFinalize+0x58>)
 8014230:	2200      	movs	r2, #0
 8014232:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8014236:	4b05      	ldr	r3, [pc, #20]	; (801424c <AckTimeoutRetriesFinalize+0x58>)
 8014238:	f893 2412 	ldrb.w	r2, [r3, #1042]	; 0x412
 801423c:	4b03      	ldr	r3, [pc, #12]	; (801424c <AckTimeoutRetriesFinalize+0x58>)
 801423e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
}
 8014242:	bf00      	nop
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	200033f0 	.word	0x200033f0
 8014250:	20003ad0 	.word	0x20003ad0
 8014254:	20003b74 	.word	0x20003b74
 8014258:	200038f8 	.word	0x200038f8

0801425c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 801425c:	b480      	push	{r7}
 801425e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8014260:	4b0b      	ldr	r3, [pc, #44]	; (8014290 <IsRequestPending+0x34>)
 8014262:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014266:	f003 0304 	and.w	r3, r3, #4
 801426a:	b2db      	uxtb	r3, r3
 801426c:	2b00      	cmp	r3, #0
 801426e:	d107      	bne.n	8014280 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8014270:	4b07      	ldr	r3, [pc, #28]	; (8014290 <IsRequestPending+0x34>)
 8014272:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8014276:	f003 0301 	and.w	r3, r3, #1
 801427a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801427c:	2b00      	cmp	r3, #0
 801427e:	d001      	beq.n	8014284 <IsRequestPending+0x28>
    {
        return 1;
 8014280:	2301      	movs	r3, #1
 8014282:	e000      	b.n	8014286 <IsRequestPending+0x2a>
    }
    return 0;
 8014284:	2300      	movs	r3, #0
}
 8014286:	4618      	mov	r0, r3
 8014288:	46bd      	mov	sp, r7
 801428a:	bc80      	pop	{r7}
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	200033f0 	.word	0x200033f0

08014294 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8014294:	b590      	push	{r4, r7, lr}
 8014296:	b08f      	sub	sp, #60	; 0x3c
 8014298:	af02      	add	r7, sp, #8
 801429a:	6178      	str	r0, [r7, #20]
 801429c:	6139      	str	r1, [r7, #16]
 801429e:	4613      	mov	r3, r2
 80142a0:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d002      	beq.n	80142ae <LoRaMacInitialization+0x1a>
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d101      	bne.n	80142b2 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80142ae:	2303      	movs	r3, #3
 80142b0:	e275      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80142b2:	697b      	ldr	r3, [r7, #20]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d00b      	beq.n	80142d2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d007      	beq.n	80142d2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d003      	beq.n	80142d2 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d101      	bne.n	80142d6 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80142d2:	2303      	movs	r3, #3
 80142d4:	e263      	b.n	801479e <LoRaMacInitialization+0x50a>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80142d6:	7bfb      	ldrb	r3, [r7, #15]
 80142d8:	4618      	mov	r0, r3
 80142da:	f003 fa7f 	bl	80177dc <RegionIsActive>
 80142de:	4603      	mov	r3, r0
 80142e0:	f083 0301 	eor.w	r3, r3, #1
 80142e4:	b2db      	uxtb	r3, r3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d001      	beq.n	80142ee <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80142ea:	2309      	movs	r3, #9
 80142ec:	e257      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80142ee:	6978      	ldr	r0, [r7, #20]
 80142f0:	f001 fef6 	bl	80160e0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80142f4:	f44f 62c2 	mov.w	r2, #1552	; 0x610
 80142f8:	2100      	movs	r1, #0
 80142fa:	48c7      	ldr	r0, [pc, #796]	; (8014618 <LoRaMacInitialization+0x384>)
 80142fc:	f007 f98e 	bl	801b61c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8014300:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8014304:	2100      	movs	r1, #0
 8014306:	48c5      	ldr	r0, [pc, #788]	; (801461c <LoRaMacInitialization+0x388>)
 8014308:	f007 f988 	bl	801b61c <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 801430c:	4bc3      	ldr	r3, [pc, #780]	; (801461c <LoRaMacInitialization+0x388>)
 801430e:	2201      	movs	r2, #1
 8014310:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    MacCtx.AckTimeoutRetries = 1;
 8014314:	4bc1      	ldr	r3, [pc, #772]	; (801461c <LoRaMacInitialization+0x388>)
 8014316:	2201      	movs	r2, #1
 8014318:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    Nvm.MacGroup2.Region = region;
 801431c:	4abe      	ldr	r2, [pc, #760]	; (8014618 <LoRaMacInitialization+0x384>)
 801431e:	7bfb      	ldrb	r3, [r7, #15]
 8014320:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014324:	4bbc      	ldr	r3, [pc, #752]	; (8014618 <LoRaMacInitialization+0x384>)
 8014326:	2200      	movs	r2, #0
 8014328:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 801432c:	4bba      	ldr	r3, [pc, #744]	; (8014618 <LoRaMacInitialization+0x384>)
 801432e:	2200      	movs	r2, #0
 8014330:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014334:	4bb8      	ldr	r3, [pc, #736]	; (8014618 <LoRaMacInitialization+0x384>)
 8014336:	4aba      	ldr	r2, [pc, #744]	; (8014620 <LoRaMacInitialization+0x38c>)
 8014338:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801433c:	230f      	movs	r3, #15
 801433e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014342:	4bb5      	ldr	r3, [pc, #724]	; (8014618 <LoRaMacInitialization+0x384>)
 8014344:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014348:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801434c:	4611      	mov	r1, r2
 801434e:	4618      	mov	r0, r3
 8014350:	f003 fa59 	bl	8017806 <RegionGetPhyParam>
 8014354:	4603      	mov	r3, r0
 8014356:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	2b00      	cmp	r3, #0
 801435c:	bf14      	ite	ne
 801435e:	2301      	movne	r3, #1
 8014360:	2300      	moveq	r3, #0
 8014362:	b2da      	uxtb	r2, r3
 8014364:	4bac      	ldr	r3, [pc, #688]	; (8014618 <LoRaMacInitialization+0x384>)
 8014366:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801436a:	230a      	movs	r3, #10
 801436c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014370:	4ba9      	ldr	r3, [pc, #676]	; (8014618 <LoRaMacInitialization+0x384>)
 8014372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014376:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801437a:	4611      	mov	r1, r2
 801437c:	4618      	mov	r0, r3
 801437e:	f003 fa42 	bl	8017806 <RegionGetPhyParam>
 8014382:	4603      	mov	r3, r0
 8014384:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8014386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014388:	b25a      	sxtb	r2, r3
 801438a:	4ba3      	ldr	r3, [pc, #652]	; (8014618 <LoRaMacInitialization+0x384>)
 801438c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_TX_DR;
 8014390:	2306      	movs	r3, #6
 8014392:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014396:	4ba0      	ldr	r3, [pc, #640]	; (8014618 <LoRaMacInitialization+0x384>)
 8014398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801439c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143a0:	4611      	mov	r1, r2
 80143a2:	4618      	mov	r0, r3
 80143a4:	f003 fa2f 	bl	8017806 <RegionGetPhyParam>
 80143a8:	4603      	mov	r3, r0
 80143aa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 80143ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ae:	b25a      	sxtb	r2, r3
 80143b0:	4b99      	ldr	r3, [pc, #612]	; (8014618 <LoRaMacInitialization+0x384>)
 80143b2:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80143b6:	2310      	movs	r3, #16
 80143b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143bc:	4b96      	ldr	r3, [pc, #600]	; (8014618 <LoRaMacInitialization+0x384>)
 80143be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143c6:	4611      	mov	r1, r2
 80143c8:	4618      	mov	r0, r3
 80143ca:	f003 fa1c 	bl	8017806 <RegionGetPhyParam>
 80143ce:	4603      	mov	r3, r0
 80143d0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80143d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d4:	4a90      	ldr	r2, [pc, #576]	; (8014618 <LoRaMacInitialization+0x384>)
 80143d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80143da:	2311      	movs	r3, #17
 80143dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80143e0:	4b8d      	ldr	r3, [pc, #564]	; (8014618 <LoRaMacInitialization+0x384>)
 80143e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80143e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80143ea:	4611      	mov	r1, r2
 80143ec:	4618      	mov	r0, r3
 80143ee:	f003 fa0a 	bl	8017806 <RegionGetPhyParam>
 80143f2:	4603      	mov	r3, r0
 80143f4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80143f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f8:	4a87      	ldr	r2, [pc, #540]	; (8014618 <LoRaMacInitialization+0x384>)
 80143fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80143fe:	2312      	movs	r3, #18
 8014400:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014404:	4b84      	ldr	r3, [pc, #528]	; (8014618 <LoRaMacInitialization+0x384>)
 8014406:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801440a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801440e:	4611      	mov	r1, r2
 8014410:	4618      	mov	r0, r3
 8014412:	f003 f9f8 	bl	8017806 <RegionGetPhyParam>
 8014416:	4603      	mov	r3, r0
 8014418:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441c:	4a7e      	ldr	r2, [pc, #504]	; (8014618 <LoRaMacInitialization+0x384>)
 801441e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8014422:	2313      	movs	r3, #19
 8014424:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014428:	4b7b      	ldr	r3, [pc, #492]	; (8014618 <LoRaMacInitialization+0x384>)
 801442a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801442e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014432:	4611      	mov	r1, r2
 8014434:	4618      	mov	r0, r3
 8014436:	f003 f9e6 	bl	8017806 <RegionGetPhyParam>
 801443a:	4603      	mov	r3, r0
 801443c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014440:	4a75      	ldr	r2, [pc, #468]	; (8014618 <LoRaMacInitialization+0x384>)
 8014442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014446:	2314      	movs	r3, #20
 8014448:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801444c:	4b72      	ldr	r3, [pc, #456]	; (8014618 <LoRaMacInitialization+0x384>)
 801444e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014456:	4611      	mov	r1, r2
 8014458:	4618      	mov	r0, r3
 801445a:	f003 f9d4 	bl	8017806 <RegionGetPhyParam>
 801445e:	4603      	mov	r3, r0
 8014460:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014464:	4a6c      	ldr	r2, [pc, #432]	; (8014618 <LoRaMacInitialization+0x384>)
 8014466:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801446a:	2317      	movs	r3, #23
 801446c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014470:	4b69      	ldr	r3, [pc, #420]	; (8014618 <LoRaMacInitialization+0x384>)
 8014472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014476:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801447a:	4611      	mov	r1, r2
 801447c:	4618      	mov	r0, r3
 801447e:	f003 f9c2 	bl	8017806 <RegionGetPhyParam>
 8014482:	4603      	mov	r3, r0
 8014484:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014488:	b2da      	uxtb	r2, r3
 801448a:	4b63      	ldr	r3, [pc, #396]	; (8014618 <LoRaMacInitialization+0x384>)
 801448c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014490:	2318      	movs	r3, #24
 8014492:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014496:	4b60      	ldr	r3, [pc, #384]	; (8014618 <LoRaMacInitialization+0x384>)
 8014498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801449c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144a0:	4611      	mov	r1, r2
 80144a2:	4618      	mov	r0, r3
 80144a4:	f003 f9af 	bl	8017806 <RegionGetPhyParam>
 80144a8:	4603      	mov	r3, r0
 80144aa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80144ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ae:	4a5a      	ldr	r2, [pc, #360]	; (8014618 <LoRaMacInitialization+0x384>)
 80144b0:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	4a58      	ldr	r2, [pc, #352]	; (8014618 <LoRaMacInitialization+0x384>)
 80144b8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80144bc:	2319      	movs	r3, #25
 80144be:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144c2:	4b55      	ldr	r3, [pc, #340]	; (8014618 <LoRaMacInitialization+0x384>)
 80144c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144c8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144cc:	4611      	mov	r1, r2
 80144ce:	4618      	mov	r0, r3
 80144d0:	f003 f999 	bl	8017806 <RegionGetPhyParam>
 80144d4:	4603      	mov	r3, r0
 80144d6:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80144d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144da:	b2da      	uxtb	r2, r3
 80144dc:	4b4e      	ldr	r3, [pc, #312]	; (8014618 <LoRaMacInitialization+0x384>)
 80144de:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80144e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144e4:	b2da      	uxtb	r2, r3
 80144e6:	4b4c      	ldr	r3, [pc, #304]	; (8014618 <LoRaMacInitialization+0x384>)
 80144e8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80144ec:	231e      	movs	r3, #30
 80144ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80144f2:	4b49      	ldr	r3, [pc, #292]	; (8014618 <LoRaMacInitialization+0x384>)
 80144f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80144f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80144fc:	4611      	mov	r1, r2
 80144fe:	4618      	mov	r0, r3
 8014500:	f003 f981 	bl	8017806 <RegionGetPhyParam>
 8014504:	4603      	mov	r3, r0
 8014506:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	b2da      	uxtb	r2, r3
 801450c:	4b42      	ldr	r3, [pc, #264]	; (8014618 <LoRaMacInitialization+0x384>)
 801450e:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8014512:	231f      	movs	r3, #31
 8014514:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014518:	4b3f      	ldr	r3, [pc, #252]	; (8014618 <LoRaMacInitialization+0x384>)
 801451a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801451e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014522:	4611      	mov	r1, r2
 8014524:	4618      	mov	r0, r3
 8014526:	f003 f96e 	bl	8017806 <RegionGetPhyParam>
 801452a:	4603      	mov	r3, r0
 801452c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014530:	b2da      	uxtb	r2, r3
 8014532:	4b39      	ldr	r3, [pc, #228]	; (8014618 <LoRaMacInitialization+0x384>)
 8014534:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014538:	2320      	movs	r3, #32
 801453a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801453e:	4b36      	ldr	r3, [pc, #216]	; (8014618 <LoRaMacInitialization+0x384>)
 8014540:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014544:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014548:	4611      	mov	r1, r2
 801454a:	4618      	mov	r0, r3
 801454c:	f003 f95b 	bl	8017806 <RegionGetPhyParam>
 8014550:	4603      	mov	r3, r0
 8014552:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014556:	4a30      	ldr	r2, [pc, #192]	; (8014618 <LoRaMacInitialization+0x384>)
 8014558:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801455c:	2321      	movs	r3, #33	; 0x21
 801455e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014562:	4b2d      	ldr	r3, [pc, #180]	; (8014618 <LoRaMacInitialization+0x384>)
 8014564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014568:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801456c:	4611      	mov	r1, r2
 801456e:	4618      	mov	r0, r3
 8014570:	f003 f949 	bl	8017806 <RegionGetPhyParam>
 8014574:	4603      	mov	r3, r0
 8014576:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801457a:	4a27      	ldr	r2, [pc, #156]	; (8014618 <LoRaMacInitialization+0x384>)
 801457c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014580:	230b      	movs	r3, #11
 8014582:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014586:	4b24      	ldr	r3, [pc, #144]	; (8014618 <LoRaMacInitialization+0x384>)
 8014588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801458c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014590:	4611      	mov	r1, r2
 8014592:	4618      	mov	r0, r3
 8014594:	f003 f937 	bl	8017806 <RegionGetPhyParam>
 8014598:	4603      	mov	r3, r0
 801459a:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckLimit = phyParam.Value;
 801459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801459e:	b29a      	uxth	r2, r3
 80145a0:	4b1e      	ldr	r3, [pc, #120]	; (801461c <LoRaMacInitialization+0x388>)
 80145a2:	f8a3 23f4 	strh.w	r2, [r3, #1012]	; 0x3f4

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 80145a6:	230c      	movs	r3, #12
 80145a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80145ac:	4b1a      	ldr	r3, [pc, #104]	; (8014618 <LoRaMacInitialization+0x384>)
 80145ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80145b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80145b6:	4611      	mov	r1, r2
 80145b8:	4618      	mov	r0, r3
 80145ba:	f003 f924 	bl	8017806 <RegionGetPhyParam>
 80145be:	4603      	mov	r3, r0
 80145c0:	627b      	str	r3, [r7, #36]	; 0x24
    MacCtx.AdrAckDelay = phyParam.Value;
 80145c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145c4:	b29a      	uxth	r2, r3
 80145c6:	4b15      	ldr	r3, [pc, #84]	; (801461c <LoRaMacInitialization+0x388>)
 80145c8:	f8a3 23f6 	strh.w	r2, [r3, #1014]	; 0x3f6

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80145cc:	4b12      	ldr	r3, [pc, #72]	; (8014618 <LoRaMacInitialization+0x384>)
 80145ce:	2201      	movs	r2, #1
 80145d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80145d4:	4b10      	ldr	r3, [pc, #64]	; (8014618 <LoRaMacInitialization+0x384>)
 80145d6:	220a      	movs	r2, #10
 80145d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80145dc:	4b0e      	ldr	r3, [pc, #56]	; (8014618 <LoRaMacInitialization+0x384>)
 80145de:	2206      	movs	r2, #6
 80145e0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80145e4:	4b0c      	ldr	r3, [pc, #48]	; (8014618 <LoRaMacInitialization+0x384>)
 80145e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80145ea:	4a0b      	ldr	r2, [pc, #44]	; (8014618 <LoRaMacInitialization+0x384>)
 80145ec:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80145ee:	4b0a      	ldr	r3, [pc, #40]	; (8014618 <LoRaMacInitialization+0x384>)
 80145f0:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80145f4:	4b08      	ldr	r3, [pc, #32]	; (8014618 <LoRaMacInitialization+0x384>)
 80145f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80145fa:	4b07      	ldr	r3, [pc, #28]	; (8014618 <LoRaMacInitialization+0x384>)
 80145fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014600:	4a05      	ldr	r2, [pc, #20]	; (8014618 <LoRaMacInitialization+0x384>)
 8014602:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8014604:	4b04      	ldr	r3, [pc, #16]	; (8014618 <LoRaMacInitialization+0x384>)
 8014606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801460a:	4a03      	ldr	r2, [pc, #12]	; (8014618 <LoRaMacInitialization+0x384>)
 801460c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801460e:	4b02      	ldr	r3, [pc, #8]	; (8014618 <LoRaMacInitialization+0x384>)
 8014610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8014614:	e006      	b.n	8014624 <LoRaMacInitialization+0x390>
 8014616:	bf00      	nop
 8014618:	200038f8 	.word	0x200038f8
 801461c:	200033f0 	.word	0x200033f0
 8014620:	01000300 	.word	0x01000300
 8014624:	4a60      	ldr	r2, [pc, #384]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014626:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014628:	4b5f      	ldr	r3, [pc, #380]	; (80147a8 <LoRaMacInitialization+0x514>)
 801462a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801462e:	4a5e      	ldr	r2, [pc, #376]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014630:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8014632:	4b5d      	ldr	r3, [pc, #372]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014638:	4a5b      	ldr	r2, [pc, #364]	; (80147a8 <LoRaMacInitialization+0x514>)
 801463a:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801463c:	4b5a      	ldr	r3, [pc, #360]	; (80147a8 <LoRaMacInitialization+0x514>)
 801463e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8014642:	4b59      	ldr	r3, [pc, #356]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014644:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014648:	2300      	movs	r3, #0
 801464a:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801464e:	4b57      	ldr	r3, [pc, #348]	; (80147ac <LoRaMacInitialization+0x518>)
 8014650:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014652:	4b57      	ldr	r3, [pc, #348]	; (80147b0 <LoRaMacInitialization+0x51c>)
 8014654:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014656:	4b54      	ldr	r3, [pc, #336]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801465c:	f107 0218 	add.w	r2, r7, #24
 8014660:	4611      	mov	r1, r2
 8014662:	4618      	mov	r0, r3
 8014664:	f003 f907 	bl	8017876 <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 8014668:	4a52      	ldr	r2, [pc, #328]	; (80147b4 <LoRaMacInitialization+0x520>)
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8014670:	f7ff f85a 	bl	8013728 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014674:	4b4c      	ldr	r3, [pc, #304]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014676:	2201      	movs	r2, #1
 8014678:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    MacCtx.MacPrimitives = primitives;
 801467c:	4a4d      	ldr	r2, [pc, #308]	; (80147b4 <LoRaMacInitialization+0x520>)
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014684:	4b4b      	ldr	r3, [pc, #300]	; (80147b4 <LoRaMacInitialization+0x520>)
 8014686:	2200      	movs	r2, #0
 8014688:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 801468c:	4b49      	ldr	r3, [pc, #292]	; (80147b4 <LoRaMacInitialization+0x520>)
 801468e:	2201      	movs	r2, #1
 8014690:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014694:	4b44      	ldr	r3, [pc, #272]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014696:	2200      	movs	r2, #0
 8014698:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801469a:	4b43      	ldr	r3, [pc, #268]	; (80147a8 <LoRaMacInitialization+0x514>)
 801469c:	2200      	movs	r2, #0
 801469e:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80146a0:	2300      	movs	r3, #0
 80146a2:	9300      	str	r3, [sp, #0]
 80146a4:	4b44      	ldr	r3, [pc, #272]	; (80147b8 <LoRaMacInitialization+0x524>)
 80146a6:	2200      	movs	r2, #0
 80146a8:	f04f 31ff 	mov.w	r1, #4294967295
 80146ac:	4843      	ldr	r0, [pc, #268]	; (80147bc <LoRaMacInitialization+0x528>)
 80146ae:	f00b f911 	bl	801f8d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80146b2:	2300      	movs	r3, #0
 80146b4:	9300      	str	r3, [sp, #0]
 80146b6:	4b42      	ldr	r3, [pc, #264]	; (80147c0 <LoRaMacInitialization+0x52c>)
 80146b8:	2200      	movs	r2, #0
 80146ba:	f04f 31ff 	mov.w	r1, #4294967295
 80146be:	4841      	ldr	r0, [pc, #260]	; (80147c4 <LoRaMacInitialization+0x530>)
 80146c0:	f00b f908 	bl	801f8d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80146c4:	2300      	movs	r3, #0
 80146c6:	9300      	str	r3, [sp, #0]
 80146c8:	4b3f      	ldr	r3, [pc, #252]	; (80147c8 <LoRaMacInitialization+0x534>)
 80146ca:	2200      	movs	r2, #0
 80146cc:	f04f 31ff 	mov.w	r1, #4294967295
 80146d0:	483e      	ldr	r0, [pc, #248]	; (80147cc <LoRaMacInitialization+0x538>)
 80146d2:	f00b f8ff 	bl	801f8d4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80146d6:	2300      	movs	r3, #0
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	4b3d      	ldr	r3, [pc, #244]	; (80147d0 <LoRaMacInitialization+0x53c>)
 80146dc:	2200      	movs	r2, #0
 80146de:	f04f 31ff 	mov.w	r1, #4294967295
 80146e2:	483c      	ldr	r0, [pc, #240]	; (80147d4 <LoRaMacInitialization+0x540>)
 80146e4:	f00b f8f6 	bl	801f8d4 <UTIL_TIMER_Create>

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80146e8:	4c2f      	ldr	r4, [pc, #188]	; (80147a8 <LoRaMacInitialization+0x514>)
 80146ea:	463b      	mov	r3, r7
 80146ec:	4618      	mov	r0, r3
 80146ee:	f00a fea5 	bl	801f43c <SysTimeGetMcuTime>
 80146f2:	f504 7382 	add.w	r3, r4, #260	; 0x104
 80146f6:	463a      	mov	r2, r7
 80146f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80146fc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8014700:	4b2c      	ldr	r3, [pc, #176]	; (80147b4 <LoRaMacInitialization+0x520>)
 8014702:	4a35      	ldr	r2, [pc, #212]	; (80147d8 <LoRaMacInitialization+0x544>)
 8014704:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8014708:	4b2a      	ldr	r3, [pc, #168]	; (80147b4 <LoRaMacInitialization+0x520>)
 801470a:	4a34      	ldr	r2, [pc, #208]	; (80147dc <LoRaMacInitialization+0x548>)
 801470c:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8014710:	4b28      	ldr	r3, [pc, #160]	; (80147b4 <LoRaMacInitialization+0x520>)
 8014712:	4a33      	ldr	r2, [pc, #204]	; (80147e0 <LoRaMacInitialization+0x54c>)
 8014714:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014718:	4b26      	ldr	r3, [pc, #152]	; (80147b4 <LoRaMacInitialization+0x520>)
 801471a:	4a32      	ldr	r2, [pc, #200]	; (80147e4 <LoRaMacInitialization+0x550>)
 801471c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8014720:	4b24      	ldr	r3, [pc, #144]	; (80147b4 <LoRaMacInitialization+0x520>)
 8014722:	4a31      	ldr	r2, [pc, #196]	; (80147e8 <LoRaMacInitialization+0x554>)
 8014724:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014728:	4b30      	ldr	r3, [pc, #192]	; (80147ec <LoRaMacInitialization+0x558>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4830      	ldr	r0, [pc, #192]	; (80147f0 <LoRaMacInitialization+0x55c>)
 801472e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	689b      	ldr	r3, [r3, #8]
 8014734:	4619      	mov	r1, r3
 8014736:	482f      	ldr	r0, [pc, #188]	; (80147f4 <LoRaMacInitialization+0x560>)
 8014738:	f7fa fb02 	bl	800ed40 <SecureElementInit>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d001      	beq.n	8014746 <LoRaMacInitialization+0x4b2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014742:	2311      	movs	r3, #17
 8014744:	e02b      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014746:	4818      	ldr	r0, [pc, #96]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014748:	f002 f976 	bl	8016a38 <LoRaMacCryptoInit>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	d001      	beq.n	8014756 <LoRaMacInitialization+0x4c2>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014752:	2311      	movs	r3, #17
 8014754:	e023      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014756:	f001 fa95 	bl	8015c84 <LoRaMacCommandsInit>
 801475a:	4603      	mov	r3, r0
 801475c:	2b00      	cmp	r3, #0
 801475e:	d001      	beq.n	8014764 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014760:	2313      	movs	r3, #19
 8014762:	e01c      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014764:	4824      	ldr	r0, [pc, #144]	; (80147f8 <LoRaMacInitialization+0x564>)
 8014766:	f002 fa31 	bl	8016bcc <LoRaMacCryptoSetMulticastReference>
 801476a:	4603      	mov	r3, r0
 801476c:	2b00      	cmp	r3, #0
 801476e:	d001      	beq.n	8014774 <LoRaMacInitialization+0x4e0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014770:	2311      	movs	r3, #17
 8014772:	e014      	b.n	801479e <LoRaMacInitialization+0x50a>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014774:	4b1d      	ldr	r3, [pc, #116]	; (80147ec <LoRaMacInitialization+0x558>)
 8014776:	695b      	ldr	r3, [r3, #20]
 8014778:	4798      	blx	r3
 801477a:	4603      	mov	r3, r0
 801477c:	4618      	mov	r0, r3
 801477e:	f006 feed 	bl	801b55c <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014782:	4b1a      	ldr	r3, [pc, #104]	; (80147ec <LoRaMacInitialization+0x558>)
 8014784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014786:	4a08      	ldr	r2, [pc, #32]	; (80147a8 <LoRaMacInitialization+0x514>)
 8014788:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 801478c:	4610      	mov	r0, r2
 801478e:	4798      	blx	r3
    Radio.Sleep( );
 8014790:	4b16      	ldr	r3, [pc, #88]	; (80147ec <LoRaMacInitialization+0x558>)
 8014792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014794:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014796:	2001      	movs	r0, #1
 8014798:	f7fd faaa 	bl	8011cf0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801479c:	2300      	movs	r3, #0
}
 801479e:	4618      	mov	r0, r3
 80147a0:	3734      	adds	r7, #52	; 0x34
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd90      	pop	{r4, r7, pc}
 80147a6:	bf00      	nop
 80147a8:	200038f8 	.word	0x200038f8
 80147ac:	20003ad0 	.word	0x20003ad0
 80147b0:	20003b74 	.word	0x20003b74
 80147b4:	200033f0 	.word	0x200033f0
 80147b8:	08012279 	.word	0x08012279
 80147bc:	20003758 	.word	0x20003758
 80147c0:	080122ed 	.word	0x080122ed
 80147c4:	20003770 	.word	0x20003770
 80147c8:	08012359 	.word	0x08012359
 80147cc:	20003788 	.word	0x20003788
 80147d0:	080123cd 	.word	0x080123cd
 80147d4:	200037e8 	.word	0x200037e8
 80147d8:	08010e7d 	.word	0x08010e7d
 80147dc:	08010ef5 	.word	0x08010ef5
 80147e0:	08010fcd 	.word	0x08010fcd
 80147e4:	08010f81 	.word	0x08010f81
 80147e8:	08011009 	.word	0x08011009
 80147ec:	0802333c 	.word	0x0802333c
 80147f0:	2000373c 	.word	0x2000373c
 80147f4:	20003a10 	.word	0x20003a10
 80147f8:	200039c8 	.word	0x200039c8

080147fc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80147fc:	b480      	push	{r7}
 80147fe:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8014800:	4b04      	ldr	r3, [pc, #16]	; (8014814 <LoRaMacStart+0x18>)
 8014802:	2200      	movs	r2, #0
 8014804:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	46bd      	mov	sp, r7
 801480e:	bc80      	pop	{r7}
 8014810:	4770      	bx	lr
 8014812:	bf00      	nop
 8014814:	200033f0 	.word	0x200033f0

08014818 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b08a      	sub	sp, #40	; 0x28
 801481c:	af00      	add	r7, sp, #0
 801481e:	4603      	mov	r3, r0
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014824:	4b3e      	ldr	r3, [pc, #248]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014828:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801482a:	4b3d      	ldr	r3, [pc, #244]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 801482c:	f993 30c5 	ldrsb.w	r3, [r3, #197]	; 0xc5
 8014830:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014832:	4b3b      	ldr	r3, [pc, #236]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014834:	f993 30c4 	ldrsb.w	r3, [r3, #196]	; 0xc4
 8014838:	73bb      	strb	r3, [r7, #14]
    size_t macCmdsSize = 0;
 801483a:	2300      	movs	r3, #0
 801483c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d101      	bne.n	8014848 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014844:	2303      	movs	r3, #3
 8014846:	e066      	b.n	8014916 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8014848:	4b35      	ldr	r3, [pc, #212]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 801484a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801484e:	617b      	str	r3, [r7, #20]
    adrNext.UpdateChanMask = false;
 8014850:	2300      	movs	r3, #0
 8014852:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8014854:	4b32      	ldr	r3, [pc, #200]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014856:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 801485a:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801485c:	4b30      	ldr	r3, [pc, #192]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 801485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014860:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8014862:	4b30      	ldr	r3, [pc, #192]	; (8014924 <LoRaMacQueryTxPossible+0x10c>)
 8014864:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	; 0x3f4
 8014868:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801486a:	4b2e      	ldr	r3, [pc, #184]	; (8014924 <LoRaMacQueryTxPossible+0x10c>)
 801486c:	f8b3 33f6 	ldrh.w	r3, [r3, #1014]	; 0x3f6
 8014870:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8014872:	4b2b      	ldr	r3, [pc, #172]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014874:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014878:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801487c:	4b28      	ldr	r3, [pc, #160]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 801487e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8014882:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014886:	4b26      	ldr	r3, [pc, #152]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014888:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801488c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014890:	4b23      	ldr	r3, [pc, #140]	; (8014920 <LoRaMacQueryTxPossible+0x108>)
 8014892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801489a:	f107 0310 	add.w	r3, r7, #16
 801489e:	f107 020e 	add.w	r2, r7, #14
 80148a2:	f107 010f 	add.w	r1, r7, #15
 80148a6:	f107 0014 	add.w	r0, r7, #20
 80148aa:	f000 ffe1 	bl	8015870 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80148ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fd fed2 	bl	801265c <GetMaxAppPayloadWithoutFOptsLength>
 80148b8:	4603      	mov	r3, r0
 80148ba:	461a      	mov	r2, r3
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80148c0:	f107 0308 	add.w	r3, r7, #8
 80148c4:	4618      	mov	r0, r3
 80148c6:	f001 faab 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d001      	beq.n	80148d4 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80148d0:	2313      	movs	r3, #19
 80148d2:	e020      	b.n	8014916 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	2b0f      	cmp	r3, #15
 80148d8:	d819      	bhi.n	801490e <LoRaMacQueryTxPossible+0xf6>
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	785b      	ldrb	r3, [r3, #1]
 80148de:	461a      	mov	r2, r3
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d313      	bcc.n	801490e <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	785a      	ldrb	r2, [r3, #1]
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	1ad3      	subs	r3, r2, r3
 80148f0:	b2da      	uxtb	r2, r3
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	785b      	ldrb	r3, [r3, #1]
 80148fa:	4619      	mov	r1, r3
 80148fc:	79fa      	ldrb	r2, [r7, #7]
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	4413      	add	r3, r2
 8014902:	4299      	cmp	r1, r3
 8014904:	d301      	bcc.n	801490a <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014906:	2300      	movs	r3, #0
 8014908:	e005      	b.n	8014916 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801490a:	2308      	movs	r3, #8
 801490c:	e003      	b.n	8014916 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	2200      	movs	r2, #0
 8014912:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014914:	2308      	movs	r3, #8
    }
}
 8014916:	4618      	mov	r0, r3
 8014918:	3728      	adds	r7, #40	; 0x28
 801491a:	46bd      	mov	sp, r7
 801491c:	bd80      	pop	{r7, pc}
 801491e:	bf00      	nop
 8014920:	200038f8 	.word	0x200038f8
 8014924:	200033f0 	.word	0x200033f0

08014928 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014928:	b590      	push	{r4, r7, lr}
 801492a:	b087      	sub	sp, #28
 801492c:	af00      	add	r7, sp, #0
 801492e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014930:	2300      	movs	r3, #0
 8014932:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801493a:	2303      	movs	r3, #3
 801493c:	e14b      	b.n	8014bd6 <LoRaMacMibGetRequestConfirm+0x2ae>
    }

    switch( mibGet->Type )
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	2b28      	cmp	r3, #40	; 0x28
 8014944:	f200 8140 	bhi.w	8014bc8 <LoRaMacMibGetRequestConfirm+0x2a0>
 8014948:	a201      	add	r2, pc, #4	; (adr r2, 8014950 <LoRaMacMibGetRequestConfirm+0x28>)
 801494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801494e:	bf00      	nop
 8014950:	080149f5 	.word	0x080149f5
 8014954:	08014a01 	.word	0x08014a01
 8014958:	08014a0d 	.word	0x08014a0d
 801495c:	08014a19 	.word	0x08014a19
 8014960:	08014a25 	.word	0x08014a25
 8014964:	08014a31 	.word	0x08014a31
 8014968:	08014a3d 	.word	0x08014a3d
 801496c:	08014bc9 	.word	0x08014bc9
 8014970:	08014bc9 	.word	0x08014bc9
 8014974:	08014bc9 	.word	0x08014bc9
 8014978:	08014bc9 	.word	0x08014bc9
 801497c:	08014bc9 	.word	0x08014bc9
 8014980:	08014bc9 	.word	0x08014bc9
 8014984:	08014bc9 	.word	0x08014bc9
 8014988:	08014bc9 	.word	0x08014bc9
 801498c:	08014a49 	.word	0x08014a49
 8014990:	08014a55 	.word	0x08014a55
 8014994:	08014a61 	.word	0x08014a61
 8014998:	08014a83 	.word	0x08014a83
 801499c:	08014a95 	.word	0x08014a95
 80149a0:	08014aa7 	.word	0x08014aa7
 80149a4:	08014ab9 	.word	0x08014ab9
 80149a8:	08014aed 	.word	0x08014aed
 80149ac:	08014acb 	.word	0x08014acb
 80149b0:	08014b0f 	.word	0x08014b0f
 80149b4:	08014b1b 	.word	0x08014b1b
 80149b8:	08014b25 	.word	0x08014b25
 80149bc:	08014b2f 	.word	0x08014b2f
 80149c0:	08014b39 	.word	0x08014b39
 80149c4:	08014b43 	.word	0x08014b43
 80149c8:	08014b4d 	.word	0x08014b4d
 80149cc:	08014b59 	.word	0x08014b59
 80149d0:	08014b71 	.word	0x08014b71
 80149d4:	08014b65 	.word	0x08014b65
 80149d8:	08014b7d 	.word	0x08014b7d
 80149dc:	08014b87 	.word	0x08014b87
 80149e0:	08014b93 	.word	0x08014b93
 80149e4:	08014ba9 	.word	0x08014ba9
 80149e8:	08014b9d 	.word	0x08014b9d
 80149ec:	08014bc9 	.word	0x08014bc9
 80149f0:	08014bb5 	.word	0x08014bb5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80149f4:	4b7a      	ldr	r3, [pc, #488]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 80149f6:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	711a      	strb	r2, [r3, #4]
            break;
 80149fe:	e0e9      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8014a00:	4b77      	ldr	r3, [pc, #476]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a02:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	711a      	strb	r2, [r3, #4]
            break;
 8014a0a:	e0e3      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8014a0c:	f7fa fc58 	bl	800f2c0 <SecureElementGetDevEui>
 8014a10:	4602      	mov	r2, r0
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	605a      	str	r2, [r3, #4]
            break;
 8014a16:	e0dd      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8014a18:	f7fa fc74 	bl	800f304 <SecureElementGetJoinEui>
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	605a      	str	r2, [r3, #4]
            break;
 8014a22:	e0d7      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014a24:	4b6e      	ldr	r3, [pc, #440]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a26:	f893 20fe 	ldrb.w	r2, [r3, #254]	; 0xfe
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	711a      	strb	r2, [r3, #4]
            break;
 8014a2e:	e0d1      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014a30:	4b6b      	ldr	r3, [pc, #428]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a32:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	605a      	str	r2, [r3, #4]
            break;
 8014a3a:	e0cb      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8014a3c:	4b68      	ldr	r3, [pc, #416]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a3e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	605a      	str	r2, [r3, #4]
            break;
 8014a46:	e0c5      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014a48:	4b65      	ldr	r3, [pc, #404]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a4a:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	711a      	strb	r2, [r3, #4]
            break;
 8014a52:	e0bf      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014a54:	4b62      	ldr	r3, [pc, #392]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a56:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	711a      	strb	r2, [r3, #4]
            break;
 8014a5e:	e0b9      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014a60:	231d      	movs	r3, #29
 8014a62:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014a64:	4b5e      	ldr	r3, [pc, #376]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014a6a:	f107 0210 	add.w	r2, r7, #16
 8014a6e:	4611      	mov	r1, r2
 8014a70:	4618      	mov	r0, r3
 8014a72:	f002 fec8 	bl	8017806 <RegionGetPhyParam>
 8014a76:	4603      	mov	r3, r0
 8014a78:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014a7a:	68fa      	ldr	r2, [r7, #12]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	605a      	str	r2, [r3, #4]
            break;
 8014a80:	e0a8      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4a56      	ldr	r2, [pc, #344]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a86:	3304      	adds	r3, #4
 8014a88:	3264      	adds	r2, #100	; 0x64
 8014a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a8e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014a92:	e09f      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	4a52      	ldr	r2, [pc, #328]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014a98:	3304      	adds	r3, #4
 8014a9a:	32a4      	adds	r2, #164	; 0xa4
 8014a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014aa0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014aa4:	e096      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4a4d      	ldr	r2, [pc, #308]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014aaa:	3304      	adds	r3, #4
 8014aac:	326c      	adds	r2, #108	; 0x6c
 8014aae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ab2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ab6:	e08d      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	4a49      	ldr	r2, [pc, #292]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014abc:	3304      	adds	r3, #4
 8014abe:	32ac      	adds	r2, #172	; 0xac
 8014ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ac4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014ac8:	e084      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8014aca:	231b      	movs	r3, #27
 8014acc:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014ace:	4b44      	ldr	r3, [pc, #272]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ad4:	f107 0210 	add.w	r2, r7, #16
 8014ad8:	4611      	mov	r1, r2
 8014ada:	4618      	mov	r0, r3
 8014adc:	f002 fe93 	bl	8017806 <RegionGetPhyParam>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8014ae4:	68fa      	ldr	r2, [r7, #12]
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	605a      	str	r2, [r3, #4]
            break;
 8014aea:	e073      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8014aec:	231a      	movs	r3, #26
 8014aee:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014af0:	4b3b      	ldr	r3, [pc, #236]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014af6:	f107 0210 	add.w	r2, r7, #16
 8014afa:	4611      	mov	r1, r2
 8014afc:	4618      	mov	r0, r3
 8014afe:	f002 fe82 	bl	8017806 <RegionGetPhyParam>
 8014b02:	4603      	mov	r3, r0
 8014b04:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	605a      	str	r2, [r3, #4]
            break;
 8014b0c:	e062      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8014b0e:	4b34      	ldr	r3, [pc, #208]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b10:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	711a      	strb	r2, [r3, #4]
            break;
 8014b18:	e05c      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014b1a:	4b31      	ldr	r3, [pc, #196]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	605a      	str	r2, [r3, #4]
            break;
 8014b22:	e057      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014b24:	4b2e      	ldr	r3, [pc, #184]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	605a      	str	r2, [r3, #4]
            break;
 8014b2c:	e052      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014b2e:	4b2c      	ldr	r3, [pc, #176]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	605a      	str	r2, [r3, #4]
            break;
 8014b36:	e04d      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014b38:	4b29      	ldr	r3, [pc, #164]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	605a      	str	r2, [r3, #4]
            break;
 8014b40:	e048      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014b42:	4b27      	ldr	r3, [pc, #156]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	605a      	str	r2, [r3, #4]
            break;
 8014b4a:	e043      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014b4c:	4b24      	ldr	r3, [pc, #144]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b4e:	f993 20c5 	ldrsb.w	r2, [r3, #197]	; 0xc5
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	711a      	strb	r2, [r3, #4]
            break;
 8014b56:	e03d      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014b58:	4b21      	ldr	r3, [pc, #132]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b5a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	711a      	strb	r2, [r3, #4]
            break;
 8014b62:	e037      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014b64:	4b1e      	ldr	r3, [pc, #120]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b66:	f993 20c4 	ldrsb.w	r2, [r3, #196]	; 0xc4
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	711a      	strb	r2, [r3, #4]
            break;
 8014b6e:	e031      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014b70:	4b1b      	ldr	r3, [pc, #108]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b72:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	711a      	strb	r2, [r3, #4]
            break;
 8014b7a:	e02b      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014b7c:	4b18      	ldr	r3, [pc, #96]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	605a      	str	r2, [r3, #4]
            break;
 8014b84:	e026      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014b86:	4b16      	ldr	r3, [pc, #88]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	711a      	strb	r2, [r3, #4]
            break;
 8014b90:	e020      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014b92:	4b13      	ldr	r3, [pc, #76]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014b94:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	605a      	str	r2, [r3, #4]
            break;
 8014b9a:	e01b      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetNvmData( );
 8014b9c:	f7ff f934 	bl	8013e08 <GetNvmData>
 8014ba0:	4602      	mov	r2, r0
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	605a      	str	r2, [r3, #4]
            break;
 8014ba6:	e015      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014ba8:	4b0d      	ldr	r3, [pc, #52]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014baa:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	605a      	str	r2, [r3, #4]
            break;
 8014bb2:	e00f      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	4a0a      	ldr	r2, [pc, #40]	; (8014be0 <LoRaMacMibGetRequestConfirm+0x2b8>)
 8014bb8:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8014bbc:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014bbe:	687c      	ldr	r4, [r7, #4]
 8014bc0:	f003 f84a 	bl	8017c58 <RegionGetVersion>
 8014bc4:	60a0      	str	r0, [r4, #8]
            break;
 8014bc6:	e005      	b.n	8014bd4 <LoRaMacMibGetRequestConfirm+0x2ac>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f000 fefd 	bl	80159c8 <LoRaMacClassBMibGetRequestConfirm>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	75fb      	strb	r3, [r7, #23]
            break;
 8014bd2:	bf00      	nop
        }
    }
    return status;
 8014bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	371c      	adds	r7, #28
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd90      	pop	{r4, r7, pc}
 8014bde:	bf00      	nop
 8014be0:	200038f8 	.word	0x200038f8

08014be4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014bec:	2300      	movs	r3, #0
 8014bee:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d101      	bne.n	8014bfa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014bf6:	2303      	movs	r3, #3
 8014bf8:	e32b      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014bfa:	4bb4      	ldr	r3, [pc, #720]	; (8014ecc <LoRaMacMibSetRequestConfirm+0x2e8>)
 8014bfc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014c00:	f003 0302 	and.w	r3, r3, #2
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d001      	beq.n	8014c0c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014c08:	2301      	movs	r3, #1
 8014c0a:	e322      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
    }

    switch( mibSet->Type )
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	2b27      	cmp	r3, #39	; 0x27
 8014c12:	f200 82fc 	bhi.w	801520e <LoRaMacMibSetRequestConfirm+0x62a>
 8014c16:	a201      	add	r2, pc, #4	; (adr r2, 8014c1c <LoRaMacMibSetRequestConfirm+0x38>)
 8014c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c1c:	08014cbd 	.word	0x08014cbd
 8014c20:	08014ccd 	.word	0x08014ccd
 8014c24:	08014ce7 	.word	0x08014ce7
 8014c28:	08014cff 	.word	0x08014cff
 8014c2c:	08014d17 	.word	0x08014d17
 8014c30:	08014d23 	.word	0x08014d23
 8014c34:	08014d2f 	.word	0x08014d2f
 8014c38:	08014d3b 	.word	0x08014d3b
 8014c3c:	08014d61 	.word	0x08014d61
 8014c40:	08014d87 	.word	0x08014d87
 8014c44:	08014dad 	.word	0x08014dad
 8014c48:	08014dd3 	.word	0x08014dd3
 8014c4c:	08014df9 	.word	0x08014df9
 8014c50:	08014e1f 	.word	0x08014e1f
 8014c54:	08014e45 	.word	0x08014e45
 8014c58:	08014e6b 	.word	0x08014e6b
 8014c5c:	08014e8b 	.word	0x08014e8b
 8014c60:	0801520f 	.word	0x0801520f
 8014c64:	08014e97 	.word	0x08014e97
 8014c68:	08014f15 	.word	0x08014f15
 8014c6c:	08014f55 	.word	0x08014f55
 8014c70:	08014fb7 	.word	0x08014fb7
 8014c74:	08015027 	.word	0x08015027
 8014c78:	08014ff7 	.word	0x08014ff7
 8014c7c:	08015057 	.word	0x08015057
 8014c80:	08015079 	.word	0x08015079
 8014c84:	08015083 	.word	0x08015083
 8014c88:	0801508d 	.word	0x0801508d
 8014c8c:	08015097 	.word	0x08015097
 8014c90:	080150a1 	.word	0x080150a1
 8014c94:	080150ab 	.word	0x080150ab
 8014c98:	080150dd 	.word	0x080150dd
 8014c9c:	08015149 	.word	0x08015149
 8014ca0:	08015117 	.word	0x08015117
 8014ca4:	0801517b 	.word	0x0801517b
 8014ca8:	08015191 	.word	0x08015191
 8014cac:	080151b1 	.word	0x080151b1
 8014cb0:	080151bb 	.word	0x080151bb
 8014cb4:	080151c7 	.word	0x080151c7
 8014cb8:	080151e5 	.word	0x080151e5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	791b      	ldrb	r3, [r3, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f7fd fbfb 	bl	80124bc <SwitchClass>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	75fb      	strb	r3, [r7, #23]
            break;
 8014cca:	e2c1      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	791b      	ldrb	r3, [r3, #4]
 8014cd0:	2b02      	cmp	r3, #2
 8014cd2:	d005      	beq.n	8014ce0 <LoRaMacMibSetRequestConfirm+0xfc>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	791a      	ldrb	r2, [r3, #4]
 8014cd8:	4b7d      	ldr	r3, [pc, #500]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014cda:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014cde:	e2b7      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ce0:	2303      	movs	r3, #3
 8014ce2:	75fb      	strb	r3, [r7, #23]
            break;
 8014ce4:	e2b4      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7fa fad0 	bl	800f290 <SecureElementSetDevEui>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	f000 8291 	beq.w	801521a <LoRaMacMibSetRequestConfirm+0x636>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cf8:	2303      	movs	r3, #3
 8014cfa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cfc:	e28d      	b.n	801521a <LoRaMacMibSetRequestConfirm+0x636>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	4618      	mov	r0, r3
 8014d04:	f7fa fae6 	bl	800f2d4 <SecureElementSetJoinEui>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	f000 8287 	beq.w	801521e <LoRaMacMibSetRequestConfirm+0x63a>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d10:	2303      	movs	r3, #3
 8014d12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d14:	e283      	b.n	801521e <LoRaMacMibSetRequestConfirm+0x63a>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	791a      	ldrb	r2, [r3, #4]
 8014d1a:	4b6d      	ldr	r3, [pc, #436]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014d1c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            break;
 8014d20:	e296      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	685b      	ldr	r3, [r3, #4]
 8014d26:	4a6a      	ldr	r2, [pc, #424]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014d28:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
            break;
 8014d2c:	e290      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	685b      	ldr	r3, [r3, #4]
 8014d32:	4a67      	ldr	r2, [pc, #412]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014d34:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8014d38:	e28a      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d00b      	beq.n	8014d5a <LoRaMacMibSetRequestConfirm+0x176>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	4619      	mov	r1, r3
 8014d48:	2000      	movs	r0, #0
 8014d4a:	f001 ff67 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	f000 8266 	beq.w	8015222 <LoRaMacMibSetRequestConfirm+0x63e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d56:	2311      	movs	r3, #17
 8014d58:	e27b      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d5a:	2303      	movs	r3, #3
 8014d5c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d5e:	e260      	b.n	8015222 <LoRaMacMibSetRequestConfirm+0x63e>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	685b      	ldr	r3, [r3, #4]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d00b      	beq.n	8014d80 <LoRaMacMibSetRequestConfirm+0x19c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	2001      	movs	r0, #1
 8014d70:	f001 ff54 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	f000 8255 	beq.w	8015226 <LoRaMacMibSetRequestConfirm+0x642>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d7c:	2311      	movs	r3, #17
 8014d7e:	e268      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d80:	2303      	movs	r3, #3
 8014d82:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d84:	e24f      	b.n	8015226 <LoRaMacMibSetRequestConfirm+0x642>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d00b      	beq.n	8014da6 <LoRaMacMibSetRequestConfirm+0x1c2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	4619      	mov	r1, r3
 8014d94:	2002      	movs	r0, #2
 8014d96:	f001 ff41 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014d9a:	4603      	mov	r3, r0
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	f000 8244 	beq.w	801522a <LoRaMacMibSetRequestConfirm+0x646>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014da2:	2311      	movs	r3, #17
 8014da4:	e255      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014da6:	2303      	movs	r3, #3
 8014da8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014daa:	e23e      	b.n	801522a <LoRaMacMibSetRequestConfirm+0x646>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d00b      	beq.n	8014dcc <LoRaMacMibSetRequestConfirm+0x1e8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	685b      	ldr	r3, [r3, #4]
 8014db8:	4619      	mov	r1, r3
 8014dba:	2003      	movs	r0, #3
 8014dbc:	f001 ff2e 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	f000 8233 	beq.w	801522e <LoRaMacMibSetRequestConfirm+0x64a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014dc8:	2311      	movs	r3, #17
 8014dca:	e242      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dcc:	2303      	movs	r3, #3
 8014dce:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014dd0:	e22d      	b.n	801522e <LoRaMacMibSetRequestConfirm+0x64a>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	685b      	ldr	r3, [r3, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d00b      	beq.n	8014df2 <LoRaMacMibSetRequestConfirm+0x20e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	685b      	ldr	r3, [r3, #4]
 8014dde:	4619      	mov	r1, r3
 8014de0:	207f      	movs	r0, #127	; 0x7f
 8014de2:	f001 ff1b 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	f000 8222 	beq.w	8015232 <LoRaMacMibSetRequestConfirm+0x64e>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014dee:	2311      	movs	r3, #17
 8014df0:	e22f      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014df2:	2303      	movs	r3, #3
 8014df4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014df6:	e21c      	b.n	8015232 <LoRaMacMibSetRequestConfirm+0x64e>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d00b      	beq.n	8014e18 <LoRaMacMibSetRequestConfirm+0x234>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	685b      	ldr	r3, [r3, #4]
 8014e04:	4619      	mov	r1, r3
 8014e06:	2080      	movs	r0, #128	; 0x80
 8014e08:	f001 ff08 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	f000 8211 	beq.w	8015236 <LoRaMacMibSetRequestConfirm+0x652>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e14:	2311      	movs	r3, #17
 8014e16:	e21c      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e18:	2303      	movs	r3, #3
 8014e1a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e1c:	e20b      	b.n	8015236 <LoRaMacMibSetRequestConfirm+0x652>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d00b      	beq.n	8014e3e <LoRaMacMibSetRequestConfirm+0x25a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	685b      	ldr	r3, [r3, #4]
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	2081      	movs	r0, #129	; 0x81
 8014e2e:	f001 fef5 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014e32:	4603      	mov	r3, r0
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f000 8200 	beq.w	801523a <LoRaMacMibSetRequestConfirm+0x656>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e3a:	2311      	movs	r3, #17
 8014e3c:	e209      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e3e:	2303      	movs	r3, #3
 8014e40:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e42:	e1fa      	b.n	801523a <LoRaMacMibSetRequestConfirm+0x656>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00b      	beq.n	8014e64 <LoRaMacMibSetRequestConfirm+0x280>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	685b      	ldr	r3, [r3, #4]
 8014e50:	4619      	mov	r1, r3
 8014e52:	2082      	movs	r0, #130	; 0x82
 8014e54:	f001 fee2 	bl	8016c1c <LoRaMacCryptoSetKey>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	f000 81ef 	beq.w	801523e <LoRaMacMibSetRequestConfirm+0x65a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014e60:	2311      	movs	r3, #17
 8014e62:	e1f6      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e64:	2303      	movs	r3, #3
 8014e66:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014e68:	e1e9      	b.n	801523e <LoRaMacMibSetRequestConfirm+0x65a>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	791a      	ldrb	r2, [r3, #4]
 8014e6e:	4b18      	ldr	r3, [pc, #96]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e70:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014e74:	4b17      	ldr	r3, [pc, #92]	; (8014ed4 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8014e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e78:	4a15      	ldr	r2, [pc, #84]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e7a:	f892 20fd 	ldrb.w	r2, [r2, #253]	; 0xfd
 8014e7e:	4610      	mov	r0, r2
 8014e80:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8014e82:	4b14      	ldr	r3, [pc, #80]	; (8014ed4 <LoRaMacMibSetRequestConfirm+0x2f0>)
 8014e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e86:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8014e88:	e1e2      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	791a      	ldrb	r2, [r3, #4]
 8014e8e:	4b10      	ldr	r3, [pc, #64]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014e90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8014e94:	e1dc      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	7a1b      	ldrb	r3, [r3, #8]
 8014e9a:	b25b      	sxtb	r3, r3
 8014e9c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e9e:	4b0c      	ldr	r3, [pc, #48]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014ea0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014ea4:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014ea6:	4b0a      	ldr	r3, [pc, #40]	; (8014ed0 <LoRaMacMibSetRequestConfirm+0x2ec>)
 8014ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014eac:	f107 0108 	add.w	r1, r7, #8
 8014eb0:	2207      	movs	r2, #7
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f002 fcf7 	bl	80178a6 <RegionVerify>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	f083 0301 	eor.w	r3, r3, #1
 8014ebe:	b2db      	uxtb	r3, r3
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d009      	beq.n	8014ed8 <LoRaMacMibSetRequestConfirm+0x2f4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8014ec8:	e1c2      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
 8014eca:	bf00      	nop
 8014ecc:	200033f0 	.word	0x200033f0
 8014ed0:	200038f8 	.word	0x200038f8
 8014ed4:	0802333c 	.word	0x0802333c
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	685b      	ldr	r3, [r3, #4]
 8014edc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014ede:	4bb2      	ldr	r3, [pc, #712]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014ee4:	f107 0108 	add.w	r1, r7, #8
 8014ee8:	2200      	movs	r2, #0
 8014eea:	4618      	mov	r0, r3
 8014eec:	f002 fcdb 	bl	80178a6 <RegionVerify>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	f083 0301 	eor.w	r3, r3, #1
 8014ef6:	b2db      	uxtb	r3, r3
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d002      	beq.n	8014f02 <LoRaMacMibSetRequestConfirm+0x31e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014efc:	2303      	movs	r3, #3
 8014efe:	75fb      	strb	r3, [r7, #23]
            break;
 8014f00:	e1a6      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014f02:	4ba9      	ldr	r3, [pc, #676]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	3364      	adds	r3, #100	; 0x64
 8014f08:	3204      	adds	r2, #4
 8014f0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f0e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014f12:	e19d      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	7a1b      	ldrb	r3, [r3, #8]
 8014f18:	b25b      	sxtb	r3, r3
 8014f1a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f1c:	4ba2      	ldr	r3, [pc, #648]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f1e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f22:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014f24:	4ba0      	ldr	r3, [pc, #640]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f2a:	f107 0108 	add.w	r1, r7, #8
 8014f2e:	2207      	movs	r2, #7
 8014f30:	4618      	mov	r0, r3
 8014f32:	f002 fcb8 	bl	80178a6 <RegionVerify>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d008      	beq.n	8014f4e <LoRaMacMibSetRequestConfirm+0x36a>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014f3c:	4b9a      	ldr	r3, [pc, #616]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f3e:	687a      	ldr	r2, [r7, #4]
 8014f40:	33a4      	adds	r3, #164	; 0xa4
 8014f42:	3204      	adds	r2, #4
 8014f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f48:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f4c:	e180      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f4e:	2303      	movs	r3, #3
 8014f50:	75fb      	strb	r3, [r7, #23]
            break;
 8014f52:	e17d      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	7a1b      	ldrb	r3, [r3, #8]
 8014f58:	b25b      	sxtb	r3, r3
 8014f5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014f5c:	4b92      	ldr	r3, [pc, #584]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f5e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014f62:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014f64:	4b90      	ldr	r3, [pc, #576]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014f6a:	f107 0108 	add.w	r1, r7, #8
 8014f6e:	2207      	movs	r2, #7
 8014f70:	4618      	mov	r0, r3
 8014f72:	f002 fc98 	bl	80178a6 <RegionVerify>
 8014f76:	4603      	mov	r3, r0
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d019      	beq.n	8014fb0 <LoRaMacMibSetRequestConfirm+0x3cc>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014f7c:	4b8a      	ldr	r3, [pc, #552]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f7e:	687a      	ldr	r2, [r7, #4]
 8014f80:	336c      	adds	r3, #108	; 0x6c
 8014f82:	3204      	adds	r2, #4
 8014f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f88:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014f8c:	4b86      	ldr	r3, [pc, #536]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f8e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8014f92:	2b02      	cmp	r3, #2
 8014f94:	f040 8155 	bne.w	8015242 <LoRaMacMibSetRequestConfirm+0x65e>
 8014f98:	4b83      	ldr	r3, [pc, #524]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014f9a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	f000 814f 	beq.w	8015242 <LoRaMacMibSetRequestConfirm+0x65e>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014fa4:	4b81      	ldr	r3, [pc, #516]	; (80151ac <LoRaMacMibSetRequestConfirm+0x5c8>)
 8014fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa8:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014faa:	f7fe fcd9 	bl	8013960 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fae:	e148      	b.n	8015242 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fb0:	2303      	movs	r3, #3
 8014fb2:	75fb      	strb	r3, [r7, #23]
            break;
 8014fb4:	e145      	b.n	8015242 <LoRaMacMibSetRequestConfirm+0x65e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	7a1b      	ldrb	r3, [r3, #8]
 8014fba:	b25b      	sxtb	r3, r3
 8014fbc:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014fbe:	4b7a      	ldr	r3, [pc, #488]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014fc0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8014fc4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014fc6:	4b78      	ldr	r3, [pc, #480]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8014fcc:	f107 0108 	add.w	r1, r7, #8
 8014fd0:	2207      	movs	r2, #7
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f002 fc67 	bl	80178a6 <RegionVerify>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d008      	beq.n	8014ff0 <LoRaMacMibSetRequestConfirm+0x40c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014fde:	4b72      	ldr	r3, [pc, #456]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	33ac      	adds	r3, #172	; 0xac
 8014fe4:	3204      	adds	r2, #4
 8014fe6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fea:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fee:	e12f      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ff0:	2303      	movs	r3, #3
 8014ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8014ff4:	e12c      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015000:	4b69      	ldr	r3, [pc, #420]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015006:	f107 020c 	add.w	r2, r7, #12
 801500a:	4611      	mov	r1, r2
 801500c:	4618      	mov	r0, r3
 801500e:	f002 fc83 	bl	8017918 <RegionChanMaskSet>
 8015012:	4603      	mov	r3, r0
 8015014:	f083 0301 	eor.w	r3, r3, #1
 8015018:	b2db      	uxtb	r3, r3
 801501a:	2b00      	cmp	r3, #0
 801501c:	f000 8113 	beq.w	8015246 <LoRaMacMibSetRequestConfirm+0x662>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015020:	2303      	movs	r3, #3
 8015022:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015024:	e10f      	b.n	8015246 <LoRaMacMibSetRequestConfirm+0x662>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801502c:	2300      	movs	r3, #0
 801502e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8015030:	4b5d      	ldr	r3, [pc, #372]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015036:	f107 020c 	add.w	r2, r7, #12
 801503a:	4611      	mov	r1, r2
 801503c:	4618      	mov	r0, r3
 801503e:	f002 fc6b 	bl	8017918 <RegionChanMaskSet>
 8015042:	4603      	mov	r3, r0
 8015044:	f083 0301 	eor.w	r3, r3, #1
 8015048:	b2db      	uxtb	r3, r3
 801504a:	2b00      	cmp	r3, #0
 801504c:	f000 80fd 	beq.w	801524a <LoRaMacMibSetRequestConfirm+0x666>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015050:	2303      	movs	r3, #3
 8015052:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015054:	e0f9      	b.n	801524a <LoRaMacMibSetRequestConfirm+0x666>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	791b      	ldrb	r3, [r3, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d009      	beq.n	8015072 <LoRaMacMibSetRequestConfirm+0x48e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8015062:	2b0f      	cmp	r3, #15
 8015064:	d805      	bhi.n	8015072 <LoRaMacMibSetRequestConfirm+0x48e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	791a      	ldrb	r2, [r3, #4]
 801506a:	4b4f      	ldr	r3, [pc, #316]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801506c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015070:	e0ee      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015072:	2303      	movs	r3, #3
 8015074:	75fb      	strb	r3, [r7, #23]
            break;
 8015076:	e0eb      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	685b      	ldr	r3, [r3, #4]
 801507c:	4a4a      	ldr	r2, [pc, #296]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801507e:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015080:	e0e6      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	4a48      	ldr	r2, [pc, #288]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015088:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 801508a:	e0e1      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	4a45      	ldr	r2, [pc, #276]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015092:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8015094:	e0dc      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	685b      	ldr	r3, [r3, #4]
 801509a:	4a43      	ldr	r2, [pc, #268]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801509c:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 801509e:	e0d7      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	685b      	ldr	r3, [r3, #4]
 80150a4:	4a40      	ldr	r2, [pc, #256]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150a6:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80150a8:	e0d2      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80150b0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80150b2:	4b3d      	ldr	r3, [pc, #244]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150b8:	f107 0108 	add.w	r1, r7, #8
 80150bc:	2206      	movs	r2, #6
 80150be:	4618      	mov	r0, r3
 80150c0:	f002 fbf1 	bl	80178a6 <RegionVerify>
 80150c4:	4603      	mov	r3, r0
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d005      	beq.n	80150d6 <LoRaMacMibSetRequestConfirm+0x4f2>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80150ca:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80150ce:	4b36      	ldr	r3, [pc, #216]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150d0:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80150d4:	e0bc      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150d6:	2303      	movs	r3, #3
 80150d8:	75fb      	strb	r3, [r7, #23]
            break;
 80150da:	e0b9      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80150e2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80150e4:	4b30      	ldr	r3, [pc, #192]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80150ea:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80150ec:	4b2e      	ldr	r3, [pc, #184]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80150ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80150f2:	f107 0108 	add.w	r1, r7, #8
 80150f6:	2205      	movs	r2, #5
 80150f8:	4618      	mov	r0, r3
 80150fa:	f002 fbd4 	bl	80178a6 <RegionVerify>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d005      	beq.n	8015110 <LoRaMacMibSetRequestConfirm+0x52c>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015104:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015108:	4b27      	ldr	r3, [pc, #156]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801510a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801510e:	e09f      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015110:	2303      	movs	r3, #3
 8015112:	75fb      	strb	r3, [r7, #23]
            break;
 8015114:	e09c      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801511c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 801511e:	4b22      	ldr	r3, [pc, #136]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015124:	f107 0108 	add.w	r1, r7, #8
 8015128:	220a      	movs	r2, #10
 801512a:	4618      	mov	r0, r3
 801512c:	f002 fbbb 	bl	80178a6 <RegionVerify>
 8015130:	4603      	mov	r3, r0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d005      	beq.n	8015142 <LoRaMacMibSetRequestConfirm+0x55e>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8015136:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801513a:	4b1b      	ldr	r3, [pc, #108]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801513c:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015140:	e086      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015142:	2303      	movs	r3, #3
 8015144:	75fb      	strb	r3, [r7, #23]
            break;
 8015146:	e083      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801514e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015150:	4b15      	ldr	r3, [pc, #84]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015156:	f107 0108 	add.w	r1, r7, #8
 801515a:	2209      	movs	r2, #9
 801515c:	4618      	mov	r0, r3
 801515e:	f002 fba2 	bl	80178a6 <RegionVerify>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d005      	beq.n	8015174 <LoRaMacMibSetRequestConfirm+0x590>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8015168:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801516c:	4b0e      	ldr	r3, [pc, #56]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801516e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015172:	e06d      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015174:	2303      	movs	r3, #3
 8015176:	75fb      	strb	r3, [r7, #23]
            break;
 8015178:	e06a      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	4a0a      	ldr	r2, [pc, #40]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8015184:	4b08      	ldr	r3, [pc, #32]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801518a:	4a07      	ldr	r2, [pc, #28]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801518c:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 801518e:	e05f      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	791a      	ldrb	r2, [r3, #4]
 8015194:	4b04      	ldr	r3, [pc, #16]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 8015196:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 801519a:	4b03      	ldr	r3, [pc, #12]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 801519c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80151a0:	4b01      	ldr	r3, [pc, #4]	; (80151a8 <LoRaMacMibSetRequestConfirm+0x5c4>)
 80151a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80151a6:	e053      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
 80151a8:	200038f8 	.word	0x200038f8
 80151ac:	0802333c 	.word	0x0802333c
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	685b      	ldr	r3, [r3, #4]
 80151b4:	4a29      	ldr	r2, [pc, #164]	; (801525c <LoRaMacMibSetRequestConfirm+0x678>)
 80151b6:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80151b8:	e04a      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	4a27      	ldr	r2, [pc, #156]	; (801525c <LoRaMacMibSetRequestConfirm+0x678>)
 80151c0:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
            break;
 80151c4:	e044      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	685b      	ldr	r3, [r3, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d007      	beq.n	80151de <LoRaMacMibSetRequestConfirm+0x5fa>
            {
                status = RestoreNvmData( mibSet->Param.Contexts );
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	685b      	ldr	r3, [r3, #4]
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7fe fe22 	bl	8013e1c <RestoreNvmData>
 80151d8:	4603      	mov	r3, r0
 80151da:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80151dc:	e038      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80151de:	2303      	movs	r3, #3
 80151e0:	75fb      	strb	r3, [r7, #23]
            break;
 80151e2:	e035      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	799b      	ldrb	r3, [r3, #6]
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d80d      	bhi.n	8015208 <LoRaMacMibSetRequestConfirm+0x624>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 80151ec:	4a1b      	ldr	r2, [pc, #108]	; (801525c <LoRaMacMibSetRequestConfirm+0x678>)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6858      	ldr	r0, [r3, #4]
 80151fa:	f001 fc49 	bl	8016a90 <LoRaMacCryptoSetLrWanVersion>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d024      	beq.n	801524e <LoRaMacMibSetRequestConfirm+0x66a>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8015204:	2311      	movs	r3, #17
 8015206:	e024      	b.n	8015252 <LoRaMacMibSetRequestConfirm+0x66e>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015208:	2303      	movs	r3, #3
 801520a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801520c:	e01f      	b.n	801524e <LoRaMacMibSetRequestConfirm+0x66a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f000 fbe4 	bl	80159dc <LoRaMacMibClassBSetRequestConfirm>
 8015214:	4603      	mov	r3, r0
 8015216:	75fb      	strb	r3, [r7, #23]
            break;
 8015218:	e01a      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801521a:	bf00      	nop
 801521c:	e018      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801521e:	bf00      	nop
 8015220:	e016      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015222:	bf00      	nop
 8015224:	e014      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015226:	bf00      	nop
 8015228:	e012      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801522a:	bf00      	nop
 801522c:	e010      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801522e:	bf00      	nop
 8015230:	e00e      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015232:	bf00      	nop
 8015234:	e00c      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015236:	bf00      	nop
 8015238:	e00a      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801523a:	bf00      	nop
 801523c:	e008      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801523e:	bf00      	nop
 8015240:	e006      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015242:	bf00      	nop
 8015244:	e004      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 8015246:	bf00      	nop
 8015248:	e002      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801524a:	bf00      	nop
 801524c:	e000      	b.n	8015250 <LoRaMacMibSetRequestConfirm+0x66c>
            break;
 801524e:	bf00      	nop
        }
    }
    return status;
 8015250:	7dfb      	ldrb	r3, [r7, #23]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3718      	adds	r7, #24
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	200038f8 	.word	0x200038f8

08015260 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b086      	sub	sp, #24
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015268:	2302      	movs	r3, #2
 801526a:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 801526c:	2300      	movs	r3, #0
 801526e:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d101      	bne.n	801527a <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015276:	2303      	movs	r3, #3
 8015278:	e127      	b.n	80154ca <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacIsBusy( ) == true )
 801527a:	f7fc fd23 	bl	8011cc4 <LoRaMacIsBusy>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	d001      	beq.n	8015288 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015284:	2301      	movs	r3, #1
 8015286:	e120      	b.n	80154ca <LoRaMacMlmeRequest+0x26a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015288:	f001 f8a6 	bl	80163d8 <LoRaMacConfirmQueueIsFull>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d001      	beq.n	8015296 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8015292:	2301      	movs	r3, #1
 8015294:	e119      	b.n	80154ca <LoRaMacMlmeRequest+0x26a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015296:	f001 f893 	bl	80163c0 <LoRaMacConfirmQueueGetCnt>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	d104      	bne.n	80152aa <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 80152a0:	2214      	movs	r2, #20
 80152a2:	2100      	movs	r1, #0
 80152a4:	488b      	ldr	r0, [pc, #556]	; (80154d4 <LoRaMacMlmeRequest+0x274>)
 80152a6:	f006 f9b9 	bl	801b61c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80152aa:	4b8b      	ldr	r3, [pc, #556]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 80152ac:	2201      	movs	r2, #1
 80152ae:	f883 244d 	strb.w	r2, [r3, #1101]	; 0x44d

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 80152b2:	4a89      	ldr	r2, [pc, #548]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 80152b4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80152b8:	f043 0304 	orr.w	r3, r3, #4
 80152bc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80152c6:	2301      	movs	r3, #1
 80152c8:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80152ca:	2300      	movs	r3, #0
 80152cc:	74fb      	strb	r3, [r7, #19]

    switch( mlmeRequest->Type )
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	781b      	ldrb	r3, [r3, #0]
 80152d2:	3b01      	subs	r3, #1
 80152d4:	2b0d      	cmp	r3, #13
 80152d6:	f200 80ce 	bhi.w	8015476 <LoRaMacMlmeRequest+0x216>
 80152da:	a201      	add	r2, pc, #4	; (adr r2, 80152e0 <LoRaMacMlmeRequest+0x80>)
 80152dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152e0:	08015319 	.word	0x08015319
 80152e4:	08015477 	.word	0x08015477
 80152e8:	08015477 	.word	0x08015477
 80152ec:	08015383 	.word	0x08015383
 80152f0:	080153a1 	.word	0x080153a1
 80152f4:	080153b1 	.word	0x080153b1
 80152f8:	08015477 	.word	0x08015477
 80152fc:	08015477 	.word	0x08015477
 8015300:	08015477 	.word	0x08015477
 8015304:	080153cd 	.word	0x080153cd
 8015308:	08015477 	.word	0x08015477
 801530c:	0801544b 	.word	0x0801544b
 8015310:	080153eb 	.word	0x080153eb
 8015314:	0801542d 	.word	0x0801542d
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8015318:	4b6f      	ldr	r3, [pc, #444]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 801531a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801531e:	f003 0320 	and.w	r3, r3, #32
 8015322:	2b00      	cmp	r3, #0
 8015324:	d001      	beq.n	801532a <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 8015326:	2301      	movs	r3, #1
 8015328:	e0cf      	b.n	80154ca <LoRaMacMlmeRequest+0x26a>
            }

            ResetMacParameters( );
 801532a:	f7fe f9fd 	bl	8013728 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801532e:	4b6b      	ldr	r3, [pc, #428]	; (80154dc <LoRaMacMlmeRequest+0x27c>)
 8015330:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	791b      	ldrb	r3, [r3, #4]
 8015338:	b25b      	sxtb	r3, r3
 801533a:	2200      	movs	r2, #0
 801533c:	4619      	mov	r1, r3
 801533e:	f002 fbfc 	bl	8017b3a <RegionAlternateDr>
 8015342:	4603      	mov	r3, r0
 8015344:	461a      	mov	r2, r3
 8015346:	4b65      	ldr	r3, [pc, #404]	; (80154dc <LoRaMacMlmeRequest+0x27c>)
 8015348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801534c:	2307      	movs	r3, #7
 801534e:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8015350:	20ff      	movs	r0, #255	; 0xff
 8015352:	f7fd ff61 	bl	8013218 <SendReJoinReq>
 8015356:	4603      	mov	r3, r0
 8015358:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801535a:	7dfb      	ldrb	r3, [r7, #23]
 801535c:	2b00      	cmp	r3, #0
 801535e:	f000 808c 	beq.w	801547a <LoRaMacMlmeRequest+0x21a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015362:	4b5e      	ldr	r3, [pc, #376]	; (80154dc <LoRaMacMlmeRequest+0x27c>)
 8015364:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	791b      	ldrb	r3, [r3, #4]
 801536c:	b25b      	sxtb	r3, r3
 801536e:	2201      	movs	r2, #1
 8015370:	4619      	mov	r1, r3
 8015372:	f002 fbe2 	bl	8017b3a <RegionAlternateDr>
 8015376:	4603      	mov	r3, r0
 8015378:	461a      	mov	r2, r3
 801537a:	4b58      	ldr	r3, [pc, #352]	; (80154dc <LoRaMacMlmeRequest+0x27c>)
 801537c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            break;
 8015380:	e07b      	b.n	801547a <LoRaMacMlmeRequest+0x21a>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015382:	2300      	movs	r3, #0
 8015384:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015386:	f107 030c 	add.w	r3, r7, #12
 801538a:	2200      	movs	r2, #0
 801538c:	4619      	mov	r1, r3
 801538e:	2002      	movs	r0, #2
 8015390:	f000 fc88 	bl	8015ca4 <LoRaMacCommandsAddCmd>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	d071      	beq.n	801547e <LoRaMacMlmeRequest+0x21e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801539a:	2313      	movs	r3, #19
 801539c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801539e:	e06e      	b.n	801547e <LoRaMacMlmeRequest+0x21e>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	889b      	ldrh	r3, [r3, #4]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fe fcdb 	bl	8013d60 <SetTxContinuousWave>
 80153aa:	4603      	mov	r3, r0
 80153ac:	75fb      	strb	r3, [r7, #23]
            break;
 80153ae:	e06d      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	8898      	ldrh	r0, [r3, #4]
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6899      	ldr	r1, [r3, #8]
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	461a      	mov	r2, r3
 80153c2:	f7fe fd01 	bl	8013dc8 <SetTxContinuousWave1>
 80153c6:	4603      	mov	r3, r0
 80153c8:	75fb      	strb	r3, [r7, #23]
            break;
 80153ca:	e05f      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80153cc:	2300      	movs	r3, #0
 80153ce:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80153d0:	f107 030c 	add.w	r3, r7, #12
 80153d4:	2200      	movs	r2, #0
 80153d6:	4619      	mov	r1, r3
 80153d8:	200d      	movs	r0, #13
 80153da:	f000 fc63 	bl	8015ca4 <LoRaMacCommandsAddCmd>
 80153de:	4603      	mov	r3, r0
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d04e      	beq.n	8015482 <LoRaMacMlmeRequest+0x222>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80153e4:	2313      	movs	r3, #19
 80153e6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80153e8:	e04b      	b.n	8015482 <LoRaMacMlmeRequest+0x222>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80153ea:	4b3c      	ldr	r3, [pc, #240]	; (80154dc <LoRaMacMlmeRequest+0x27c>)
 80153ec:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d148      	bne.n	8015486 <LoRaMacMlmeRequest+0x226>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	791b      	ldrb	r3, [r3, #4]
 80153f8:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	791b      	ldrb	r3, [r3, #4]
 80153fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8015402:	b2db      	uxtb	r3, r3
 8015404:	4618      	mov	r0, r3
 8015406:	f000 fabe 	bl	8015986 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801540a:	7dbb      	ldrb	r3, [r7, #22]
 801540c:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 801540e:	2300      	movs	r3, #0
 8015410:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015412:	f107 030c 	add.w	r3, r7, #12
 8015416:	2201      	movs	r2, #1
 8015418:	4619      	mov	r1, r3
 801541a:	2010      	movs	r0, #16
 801541c:	f000 fc42 	bl	8015ca4 <LoRaMacCommandsAddCmd>
 8015420:	4603      	mov	r3, r0
 8015422:	2b00      	cmp	r3, #0
 8015424:	d02f      	beq.n	8015486 <LoRaMacMlmeRequest+0x226>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015426:	2313      	movs	r3, #19
 8015428:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 801542a:	e02c      	b.n	8015486 <LoRaMacMlmeRequest+0x226>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801542c:	2300      	movs	r3, #0
 801542e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015430:	f107 030c 	add.w	r3, r7, #12
 8015434:	2200      	movs	r2, #0
 8015436:	4619      	mov	r1, r3
 8015438:	2012      	movs	r0, #18
 801543a:	f000 fc33 	bl	8015ca4 <LoRaMacCommandsAddCmd>
 801543e:	4603      	mov	r3, r0
 8015440:	2b00      	cmp	r3, #0
 8015442:	d022      	beq.n	801548a <LoRaMacMlmeRequest+0x22a>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015444:	2313      	movs	r3, #19
 8015446:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015448:	e01f      	b.n	801548a <LoRaMacMlmeRequest+0x22a>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801544a:	2301      	movs	r3, #1
 801544c:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 801544e:	f000 fa50 	bl	80158f2 <LoRaMacClassBIsAcquisitionInProgress>
 8015452:	4603      	mov	r3, r0
 8015454:	f083 0301 	eor.w	r3, r3, #1
 8015458:	b2db      	uxtb	r3, r3
 801545a:	2b00      	cmp	r3, #0
 801545c:	d008      	beq.n	8015470 <LoRaMacMlmeRequest+0x210>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 801545e:	2000      	movs	r0, #0
 8015460:	f000 fa29 	bl	80158b6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015464:	2000      	movs	r0, #0
 8015466:	f000 fa4b 	bl	8015900 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801546a:	2300      	movs	r3, #0
 801546c:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801546e:	e00d      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
                status = LORAMAC_STATUS_BUSY;
 8015470:	2301      	movs	r3, #1
 8015472:	75fb      	strb	r3, [r7, #23]
            break;
 8015474:	e00a      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
        }
        default:
            break;
 8015476:	bf00      	nop
 8015478:	e008      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
            break;
 801547a:	bf00      	nop
 801547c:	e006      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
            break;
 801547e:	bf00      	nop
 8015480:	e004      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
            break;
 8015482:	bf00      	nop
 8015484:	e002      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
            break;
 8015486:	bf00      	nop
 8015488:	e000      	b.n	801548c <LoRaMacMlmeRequest+0x22c>
            break;
 801548a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801548c:	4b12      	ldr	r3, [pc, #72]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 801548e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015496:	7dfb      	ldrb	r3, [r7, #23]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d010      	beq.n	80154be <LoRaMacMlmeRequest+0x25e>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801549c:	f000 ff90 	bl	80163c0 <LoRaMacConfirmQueueGetCnt>
 80154a0:	4603      	mov	r3, r0
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d110      	bne.n	80154c8 <LoRaMacMlmeRequest+0x268>
        {
            MacCtx.NodeAckRequested = false;
 80154a6:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 80154a8:	2200      	movs	r2, #0
 80154aa:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80154ae:	4a0a      	ldr	r2, [pc, #40]	; (80154d8 <LoRaMacMlmeRequest+0x278>)
 80154b0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80154b4:	f36f 0382 	bfc	r3, #2, #1
 80154b8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80154bc:	e004      	b.n	80154c8 <LoRaMacMlmeRequest+0x268>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80154be:	f107 0310 	add.w	r3, r7, #16
 80154c2:	4618      	mov	r0, r3
 80154c4:	f000 fe2e 	bl	8016124 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80154c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80154ca:	4618      	mov	r0, r3
 80154cc:	3718      	adds	r7, #24
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	2000383c 	.word	0x2000383c
 80154d8:	200033f0 	.word	0x200033f0
 80154dc:	200038f8 	.word	0x200038f8

080154e0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b08c      	sub	sp, #48	; 0x30
 80154e4:	af02      	add	r7, sp, #8
 80154e6:	6078      	str	r0, [r7, #4]
 80154e8:	460b      	mov	r3, r1
 80154ea:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80154ec:	2302      	movs	r3, #2
 80154ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80154f2:	2300      	movs	r3, #0
 80154f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80154f8:	2300      	movs	r3, #0
 80154fa:	623b      	str	r3, [r7, #32]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80154fc:	2300      	movs	r3, #0
 80154fe:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015500:	2300      	movs	r3, #0
 8015502:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d101      	bne.n	801550e <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801550a:	2303      	movs	r3, #3
 801550c:	e0d4      	b.n	80156b8 <LoRaMacMcpsRequest+0x1d8>
    }
    if( LoRaMacIsBusy( ) == true )
 801550e:	f7fc fbd9 	bl	8011cc4 <LoRaMacIsBusy>
 8015512:	4603      	mov	r3, r0
 8015514:	2b00      	cmp	r3, #0
 8015516:	d001      	beq.n	801551c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015518:	2301      	movs	r3, #1
 801551a:	e0cd      	b.n	80156b8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801551c:	2300      	movs	r3, #0
 801551e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015520:	2214      	movs	r2, #20
 8015522:	2100      	movs	r1, #0
 8015524:	4866      	ldr	r0, [pc, #408]	; (80156c0 <LoRaMacMcpsRequest+0x1e0>)
 8015526:	f006 f879 	bl	801b61c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801552a:	4b66      	ldr	r3, [pc, #408]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 801552c:	2201      	movs	r2, #1
 801552e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015532:	4b64      	ldr	r3, [pc, #400]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 8015534:	2201      	movs	r2, #1
 8015536:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412

    switch( mcpsRequest->Type )
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	781b      	ldrb	r3, [r3, #0]
 801553e:	2b03      	cmp	r3, #3
 8015540:	d03d      	beq.n	80155be <LoRaMacMcpsRequest+0xde>
 8015542:	2b03      	cmp	r3, #3
 8015544:	dc4f      	bgt.n	80155e6 <LoRaMacMcpsRequest+0x106>
 8015546:	2b00      	cmp	r3, #0
 8015548:	d002      	beq.n	8015550 <LoRaMacMcpsRequest+0x70>
 801554a:	2b01      	cmp	r3, #1
 801554c:	d019      	beq.n	8015582 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801554e:	e04a      	b.n	80155e6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015550:	2301      	movs	r3, #1
 8015552:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015554:	4b5b      	ldr	r3, [pc, #364]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 8015556:	2201      	movs	r2, #1
 8015558:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801555c:	7b3b      	ldrb	r3, [r7, #12]
 801555e:	2202      	movs	r2, #2
 8015560:	f362 1347 	bfi	r3, r2, #5, #3
 8015564:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	791b      	ldrb	r3, [r3, #4]
 801556a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	689b      	ldr	r3, [r3, #8]
 8015572:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	899b      	ldrh	r3, [r3, #12]
 8015578:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7b9b      	ldrb	r3, [r3, #14]
 801557e:	777b      	strb	r3, [r7, #29]
            break;
 8015580:	e032      	b.n	80155e8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015582:	2301      	movs	r3, #1
 8015584:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	7bdb      	ldrb	r3, [r3, #15]
 801558a:	2b08      	cmp	r3, #8
 801558c:	bf28      	it	cs
 801558e:	2308      	movcs	r3, #8
 8015590:	b2da      	uxtb	r2, r3
 8015592:	4b4c      	ldr	r3, [pc, #304]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 8015594:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015598:	7b3b      	ldrb	r3, [r7, #12]
 801559a:	2204      	movs	r2, #4
 801559c:	f362 1347 	bfi	r3, r2, #5, #3
 80155a0:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	791b      	ldrb	r3, [r3, #4]
 80155a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	689b      	ldr	r3, [r3, #8]
 80155ae:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	899b      	ldrh	r3, [r3, #12]
 80155b4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	7b9b      	ldrb	r3, [r3, #14]
 80155ba:	777b      	strb	r3, [r7, #29]
            break;
 80155bc:	e014      	b.n	80155e8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80155be:	2301      	movs	r3, #1
 80155c0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80155c2:	4b40      	ldr	r3, [pc, #256]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 80155c4:	2201      	movs	r2, #1
 80155c6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80155ca:	7b3b      	ldrb	r3, [r7, #12]
 80155cc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80155d0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	891b      	ldrh	r3, [r3, #8]
 80155dc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	7a9b      	ldrb	r3, [r3, #10]
 80155e2:	777b      	strb	r3, [r7, #29]
            break;
 80155e4:	e000      	b.n	80155e8 <LoRaMacMcpsRequest+0x108>
            break;
 80155e6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80155e8:	2302      	movs	r3, #2
 80155ea:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80155ec:	4b36      	ldr	r3, [pc, #216]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 80155ee:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80155f2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80155f4:	4b34      	ldr	r3, [pc, #208]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 80155f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80155fa:	f107 0214 	add.w	r2, r7, #20
 80155fe:	4611      	mov	r1, r2
 8015600:	4618      	mov	r0, r3
 8015602:	f002 f900 	bl	8017806 <RegionGetPhyParam>
 8015606:	4603      	mov	r3, r0
 8015608:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801560a:	693b      	ldr	r3, [r7, #16]
 801560c:	b25b      	sxtb	r3, r3
 801560e:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015612:	4293      	cmp	r3, r2
 8015614:	bfb8      	it	lt
 8015616:	4613      	movlt	r3, r2
 8015618:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801561a:	7f3b      	ldrb	r3, [r7, #28]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d044      	beq.n	80156aa <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015620:	4b29      	ldr	r3, [pc, #164]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 8015622:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8015626:	f083 0301 	eor.w	r3, r3, #1
 801562a:	b2db      	uxtb	r3, r3
 801562c:	2b00      	cmp	r3, #0
 801562e:	d019      	beq.n	8015664 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015630:	7f7b      	ldrb	r3, [r7, #29]
 8015632:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015634:	4b24      	ldr	r3, [pc, #144]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 8015636:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801563a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801563c:	4b22      	ldr	r3, [pc, #136]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 801563e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8015642:	f107 0108 	add.w	r1, r7, #8
 8015646:	2205      	movs	r2, #5
 8015648:	4618      	mov	r0, r3
 801564a:	f002 f92c 	bl	80178a6 <RegionVerify>
 801564e:	4603      	mov	r3, r0
 8015650:	2b00      	cmp	r3, #0
 8015652:	d005      	beq.n	8015660 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015654:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015658:	4b1b      	ldr	r3, [pc, #108]	; (80156c8 <LoRaMacMcpsRequest+0x1e8>)
 801565a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801565e:	e001      	b.n	8015664 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015660:	2303      	movs	r3, #3
 8015662:	e029      	b.n	80156b8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8015664:	8bfa      	ldrh	r2, [r7, #30]
 8015666:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801566a:	f107 000c 	add.w	r0, r7, #12
 801566e:	78fb      	ldrb	r3, [r7, #3]
 8015670:	9300      	str	r3, [sp, #0]
 8015672:	4613      	mov	r3, r2
 8015674:	6a3a      	ldr	r2, [r7, #32]
 8015676:	f7fd fcef 	bl	8013058 <Send>
 801567a:	4603      	mov	r3, r0
 801567c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015684:	2b00      	cmp	r3, #0
 8015686:	d10c      	bne.n	80156a2 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	781a      	ldrb	r2, [r3, #0]
 801568c:	4b0d      	ldr	r3, [pc, #52]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 801568e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015692:	4a0c      	ldr	r2, [pc, #48]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 8015694:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015698:	f043 0301 	orr.w	r3, r3, #1
 801569c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80156a0:	e003      	b.n	80156aa <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80156a2:	4b08      	ldr	r3, [pc, #32]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 80156a4:	2200      	movs	r2, #0
 80156a6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        }
    }

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80156aa:	4b06      	ldr	r3, [pc, #24]	; (80156c4 <LoRaMacMcpsRequest+0x1e4>)
 80156ac:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	611a      	str	r2, [r3, #16]

    return status;
 80156b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80156b8:	4618      	mov	r0, r3
 80156ba:	3728      	adds	r7, #40	; 0x28
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	20003828 	.word	0x20003828
 80156c4:	200033f0 	.word	0x200033f0
 80156c8:	200038f8 	.word	0x200038f8

080156cc <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b084      	sub	sp, #16
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	4603      	mov	r3, r0
 80156d4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80156d6:	79fb      	ldrb	r3, [r7, #7]
 80156d8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80156da:	4b0a      	ldr	r3, [pc, #40]	; (8015704 <LoRaMacTestSetDutyCycleOn+0x38>)
 80156dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80156e0:	f107 010c 	add.w	r1, r7, #12
 80156e4:	220f      	movs	r2, #15
 80156e6:	4618      	mov	r0, r3
 80156e8:	f002 f8dd 	bl	80178a6 <RegionVerify>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d003      	beq.n	80156fa <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80156f2:	4a04      	ldr	r2, [pc, #16]	; (8015704 <LoRaMacTestSetDutyCycleOn+0x38>)
 80156f4:	79fb      	ldrb	r3, [r7, #7]
 80156f6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
    }
}
 80156fa:	bf00      	nop
 80156fc:	3710      	adds	r7, #16
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}
 8015702:	bf00      	nop
 8015704:	200038f8 	.word	0x200038f8

08015708 <CalcNextV10X>:

#include "Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08c      	sub	sp, #48	; 0x30
 801570c:	af00      	add	r7, sp, #0
 801570e:	60f8      	str	r0, [r7, #12]
 8015710:	60b9      	str	r1, [r7, #8]
 8015712:	607a      	str	r2, [r7, #4]
 8015714:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015716:	2300      	movs	r3, #0
 8015718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	7c1b      	ldrb	r3, [r3, #16]
 8015720:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	7c5b      	ldrb	r3, [r3, #17]
 8015728:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	689a      	ldr	r2, [r3, #8]
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	795b      	ldrb	r3, [r3, #5]
 8015738:	2b00      	cmp	r3, #0
 801573a:	f000 808b 	beq.w	8015854 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801573e:	2302      	movs	r3, #2
 8015740:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	7c9b      	ldrb	r3, [r3, #18]
 8015748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	7cdb      	ldrb	r3, [r3, #19]
 8015750:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015754:	4611      	mov	r1, r2
 8015756:	4618      	mov	r0, r3
 8015758:	f002 f855 	bl	8017806 <RegionGetPhyParam>
 801575c:	4603      	mov	r3, r0
 801575e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8015760:	6a3b      	ldr	r3, [r7, #32]
 8015762:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8015766:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 801576a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801576e:	4293      	cmp	r3, r2
 8015770:	bfb8      	it	lt
 8015772:	4613      	movlt	r3, r2
 8015774:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 8015778:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801577c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015780:	429a      	cmp	r2, r3
 8015782:	d106      	bne.n	8015792 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801578a:	2300      	movs	r3, #0
 801578c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015790:	e060      	b.n	8015854 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	689b      	ldr	r3, [r3, #8]
 8015796:	68fa      	ldr	r2, [r7, #12]
 8015798:	8992      	ldrh	r2, [r2, #12]
 801579a:	4293      	cmp	r3, r2
 801579c:	d303      	bcc.n	80157a6 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801579e:	2301      	movs	r3, #1
 80157a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80157a4:	e002      	b.n	80157ac <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80157a6:	2300      	movs	r3, #0
 80157a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	689b      	ldr	r3, [r3, #8]
 80157b0:	68fa      	ldr	r2, [r7, #12]
 80157b2:	8992      	ldrh	r2, [r2, #12]
 80157b4:	4611      	mov	r1, r2
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	89d2      	ldrh	r2, [r2, #14]
 80157ba:	440a      	add	r2, r1
 80157bc:	4293      	cmp	r3, r2
 80157be:	d349      	bcc.n	8015854 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80157c0:	2308      	movs	r3, #8
 80157c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	7cdb      	ldrb	r3, [r3, #19]
 80157ca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80157ce:	4611      	mov	r1, r2
 80157d0:	4618      	mov	r0, r3
 80157d2:	f002 f818 	bl	8017806 <RegionGetPhyParam>
 80157d6:	4603      	mov	r3, r0
 80157d8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80157da:	6a3b      	ldr	r3, [r7, #32]
 80157dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	689b      	ldr	r3, [r3, #8]
 80157e4:	68fa      	ldr	r2, [r7, #12]
 80157e6:	89d2      	ldrh	r2, [r2, #14]
 80157e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80157ec:	fb01 f202 	mul.w	r2, r1, r2
 80157f0:	1a9b      	subs	r3, r3, r2
 80157f2:	2b01      	cmp	r3, #1
 80157f4:	d12e      	bne.n	8015854 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80157f6:	2322      	movs	r3, #34	; 0x22
 80157f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 80157fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015800:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	7c9b      	ldrb	r3, [r3, #18]
 8015808:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	7cdb      	ldrb	r3, [r3, #19]
 8015810:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015814:	4611      	mov	r1, r2
 8015816:	4618      	mov	r0, r3
 8015818:	f001 fff5 	bl	8017806 <RegionGetPhyParam>
 801581c:	4603      	mov	r3, r0
 801581e:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015820:	6a3b      	ldr	r3, [r7, #32]
 8015822:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015826:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801582a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801582e:	429a      	cmp	r2, r3
 8015830:	d110      	bne.n	8015854 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015832:	2300      	movs	r3, #0
 8015834:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	791b      	ldrb	r3, [r3, #4]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d009      	beq.n	8015854 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015840:	2302      	movs	r3, #2
 8015842:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	7cdb      	ldrb	r3, [r3, #19]
 8015848:	f107 0214 	add.w	r2, r7, #20
 801584c:	4611      	mov	r1, r2
 801584e:	4618      	mov	r0, r3
 8015850:	f002 f811 	bl	8017876 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 801585a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015862:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8015864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015868:	4618      	mov	r0, r3
 801586a:	3730      	adds	r7, #48	; 0x30
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}

08015870 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	60f8      	str	r0, [r7, #12]
 8015878:	60b9      	str	r1, [r7, #8]
 801587a:	607a      	str	r2, [r7, #4]
 801587c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	789b      	ldrb	r3, [r3, #2]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d107      	bne.n	8015896 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	687a      	ldr	r2, [r7, #4]
 801588a:	68b9      	ldr	r1, [r7, #8]
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f7ff ff3b 	bl	8015708 <CalcNextV10X>
 8015892:	4603      	mov	r3, r0
 8015894:	e000      	b.n	8015898 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <LoRaMacClassBInit>:
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks,
                        LoRaMacClassBNvmData_t* nvm )
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ac:	bf00      	nop
 80158ae:	3714      	adds	r7, #20
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bc80      	pop	{r7}
 80158b4:	4770      	bx	lr

080158b6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80158b6:	b480      	push	{r7}
 80158b8:	b083      	sub	sp, #12
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	4603      	mov	r3, r0
 80158be:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158c0:	bf00      	nop
 80158c2:	370c      	adds	r7, #12
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bc80      	pop	{r7}
 80158c8:	4770      	bx	lr

080158ca <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 80158ca:	b480      	push	{r7}
 80158cc:	b083      	sub	sp, #12
 80158ce:	af00      	add	r7, sp, #0
 80158d0:	4603      	mov	r3, r0
 80158d2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158d4:	bf00      	nop
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	bc80      	pop	{r7}
 80158dc:	4770      	bx	lr

080158de <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 80158de:	b480      	push	{r7}
 80158e0:	b083      	sub	sp, #12
 80158e2:	af00      	add	r7, sp, #0
 80158e4:	4603      	mov	r3, r0
 80158e6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e8:	bf00      	nop
 80158ea:	370c      	adds	r7, #12
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bc80      	pop	{r7}
 80158f0:	4770      	bx	lr

080158f2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 80158f2:	b480      	push	{r7}
 80158f4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 80158f6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bc80      	pop	{r7}
 80158fe:	4770      	bx	lr

08015900 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015900:	b480      	push	{r7}
 8015902:	b083      	sub	sp, #12
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015908:	bf00      	nop
 801590a:	370c      	adds	r7, #12
 801590c:	46bd      	mov	sp, r7
 801590e:	bc80      	pop	{r7}
 8015910:	4770      	bx	lr

08015912 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015912:	b480      	push	{r7}
 8015914:	b083      	sub	sp, #12
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801591a:	bf00      	nop
 801591c:	370c      	adds	r7, #12
 801591e:	46bd      	mov	sp, r7
 8015920:	bc80      	pop	{r7}
 8015922:	4770      	bx	lr

08015924 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801592c:	bf00      	nop
 801592e:	370c      	adds	r7, #12
 8015930:	46bd      	mov	sp, r7
 8015932:	bc80      	pop	{r7}
 8015934:	4770      	bx	lr

08015936 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8015936:	b480      	push	{r7}
 8015938:	b083      	sub	sp, #12
 801593a:	af00      	add	r7, sp, #0
 801593c:	6078      	str	r0, [r7, #4]
 801593e:	460b      	mov	r3, r1
 8015940:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015942:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015944:	4618      	mov	r0, r3
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	bc80      	pop	{r7}
 801594c:	4770      	bx	lr

0801594e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801594e:	b480      	push	{r7}
 8015950:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015952:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015954:	4618      	mov	r0, r3
 8015956:	46bd      	mov	sp, r7
 8015958:	bc80      	pop	{r7}
 801595a:	4770      	bx	lr

0801595c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801595c:	b480      	push	{r7}
 801595e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8015960:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015962:	4618      	mov	r0, r3
 8015964:	46bd      	mov	sp, r7
 8015966:	bc80      	pop	{r7}
 8015968:	4770      	bx	lr

0801596a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801596a:	b480      	push	{r7}
 801596c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801596e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015970:	4618      	mov	r0, r3
 8015972:	46bd      	mov	sp, r7
 8015974:	bc80      	pop	{r7}
 8015976:	4770      	bx	lr

08015978 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8015978:	b480      	push	{r7}
 801597a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801597c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801597e:	4618      	mov	r0, r3
 8015980:	46bd      	mov	sp, r7
 8015982:	bc80      	pop	{r7}
 8015984:	4770      	bx	lr

08015986 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8015986:	b480      	push	{r7}
 8015988:	b083      	sub	sp, #12
 801598a:	af00      	add	r7, sp, #0
 801598c:	4603      	mov	r3, r0
 801598e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	bc80      	pop	{r7}
 8015998:	4770      	bx	lr

0801599a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801599a:	b480      	push	{r7}
 801599c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599e:	bf00      	nop
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bc80      	pop	{r7}
 80159a4:	4770      	bx	lr

080159a6 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80159a6:	b480      	push	{r7}
 80159a8:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159aa:	bf00      	nop
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bc80      	pop	{r7}
 80159b0:	4770      	bx	lr

080159b2 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80159b2:	b480      	push	{r7}
 80159b4:	b083      	sub	sp, #12
 80159b6:	af00      	add	r7, sp, #0
 80159b8:	4603      	mov	r3, r0
 80159ba:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159bc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159be:	4618      	mov	r0, r3
 80159c0:	370c      	adds	r7, #12
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bc80      	pop	{r7}
 80159c6:	4770      	bx	lr

080159c8 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 80159c8:	b480      	push	{r7}
 80159ca:	b083      	sub	sp, #12
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159d0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159d2:	4618      	mov	r0, r3
 80159d4:	370c      	adds	r7, #12
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bc80      	pop	{r7}
 80159da:	4770      	bx	lr

080159dc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 80159dc:	b480      	push	{r7}
 80159de:	b083      	sub	sp, #12
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80159e4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	370c      	adds	r7, #12
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bc80      	pop	{r7}
 80159ee:	4770      	bx	lr

080159f0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 80159f0:	b480      	push	{r7}
 80159f2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159f4:	bf00      	nop
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bc80      	pop	{r7}
 80159fa:	4770      	bx	lr

080159fc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 80159fc:	b480      	push	{r7}
 80159fe:	b083      	sub	sp, #12
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	4603      	mov	r3, r0
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015a08:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	370c      	adds	r7, #12
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bc80      	pop	{r7}
 8015a12:	4770      	bx	lr

08015a14 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015a14:	b480      	push	{r7}
 8015a16:	b083      	sub	sp, #12
 8015a18:	af00      	add	r7, sp, #0
 8015a1a:	4603      	mov	r3, r0
 8015a1c:	603a      	str	r2, [r7, #0]
 8015a1e:	80fb      	strh	r3, [r7, #6]
 8015a20:	460b      	mov	r3, r1
 8015a22:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a24:	bf00      	nop
 8015a26:	370c      	adds	r7, #12
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bc80      	pop	{r7}
 8015a2c:	4770      	bx	lr

08015a2e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015a2e:	b480      	push	{r7}
 8015a30:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a32:	bf00      	nop
 8015a34:	46bd      	mov	sp, r7
 8015a36:	bc80      	pop	{r7}
 8015a38:	4770      	bx	lr

08015a3a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8015a3a:	b480      	push	{r7}
 8015a3c:	b083      	sub	sp, #12
 8015a3e:	af00      	add	r7, sp, #0
 8015a40:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015a42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	370c      	adds	r7, #12
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	bc80      	pop	{r7}
 8015a4c:	4770      	bx	lr

08015a4e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8015a4e:	b480      	push	{r7}
 8015a50:	b083      	sub	sp, #12
 8015a52:	af00      	add	r7, sp, #0
 8015a54:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8015a56:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	370c      	adds	r7, #12
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bc80      	pop	{r7}
 8015a60:	4770      	bx	lr

08015a62 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8015a62:	b480      	push	{r7}
 8015a64:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a66:	bf00      	nop
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bc80      	pop	{r7}
 8015a6c:	4770      	bx	lr

08015a6e <LoRaMacClassBProcess>:
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}

void LoRaMacClassBProcess( void )
{
 8015a6e:	b480      	push	{r7}
 8015a70:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015a72:	bf00      	nop
 8015a74:	46bd      	mov	sp, r7
 8015a76:	bc80      	pop	{r7}
 8015a78:	4770      	bx	lr

08015a7a <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8015a7a:	b480      	push	{r7}
 8015a7c:	b085      	sub	sp, #20
 8015a7e:	af00      	add	r7, sp, #0
 8015a80:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a86:	2300      	movs	r3, #0
 8015a88:	81fb      	strh	r3, [r7, #14]
 8015a8a:	e00a      	b.n	8015aa2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8015a8c:	89fb      	ldrh	r3, [r7, #14]
 8015a8e:	68ba      	ldr	r2, [r7, #8]
 8015a90:	4413      	add	r3, r2
 8015a92:	781b      	ldrb	r3, [r3, #0]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d001      	beq.n	8015a9c <IsSlotFree+0x22>
        {
            return false;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	e006      	b.n	8015aaa <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a9c:	89fb      	ldrh	r3, [r7, #14]
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	81fb      	strh	r3, [r7, #14]
 8015aa2:	89fb      	ldrh	r3, [r7, #14]
 8015aa4:	2b0f      	cmp	r3, #15
 8015aa6:	d9f1      	bls.n	8015a8c <IsSlotFree+0x12>
        }
    }
    return true;
 8015aa8:	2301      	movs	r3, #1
}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3714      	adds	r7, #20
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bc80      	pop	{r7}
 8015ab2:	4770      	bx	lr

08015ab4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b082      	sub	sp, #8
 8015ab8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015aba:	2300      	movs	r3, #0
 8015abc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015abe:	e007      	b.n	8015ad0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015ac0:	79fb      	ldrb	r3, [r7, #7]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015ac6:	79fb      	ldrb	r3, [r7, #7]
 8015ac8:	2b0f      	cmp	r3, #15
 8015aca:	d101      	bne.n	8015ad0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015acc:	2300      	movs	r3, #0
 8015ace:	e012      	b.n	8015af6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015ad0:	79fb      	ldrb	r3, [r7, #7]
 8015ad2:	011b      	lsls	r3, r3, #4
 8015ad4:	3308      	adds	r3, #8
 8015ad6:	4a0a      	ldr	r2, [pc, #40]	; (8015b00 <MallocNewMacCommandSlot+0x4c>)
 8015ad8:	4413      	add	r3, r2
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7ff ffcd 	bl	8015a7a <IsSlotFree>
 8015ae0:	4603      	mov	r3, r0
 8015ae2:	f083 0301 	eor.w	r3, r3, #1
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d1e9      	bne.n	8015ac0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015aec:	79fb      	ldrb	r3, [r7, #7]
 8015aee:	011b      	lsls	r3, r3, #4
 8015af0:	3308      	adds	r3, #8
 8015af2:	4a03      	ldr	r2, [pc, #12]	; (8015b00 <MallocNewMacCommandSlot+0x4c>)
 8015af4:	4413      	add	r3, r2
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3708      	adds	r7, #8
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}
 8015afe:	bf00      	nop
 8015b00:	20003f20 	.word	0x20003f20

08015b04 <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <FreeMacCommandSlot+0x12>
    {
        return false;
 8015b12:	2300      	movs	r3, #0
 8015b14:	e005      	b.n	8015b22 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015b16:	2210      	movs	r2, #16
 8015b18:	2100      	movs	r1, #0
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f005 fd7e 	bl	801b61c <memset1>

    return true;
 8015b20:	2301      	movs	r3, #1
}
 8015b22:	4618      	mov	r0, r3
 8015b24:	3708      	adds	r7, #8
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}

08015b2a <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015b2a:	b480      	push	{r7}
 8015b2c:	b083      	sub	sp, #12
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d101      	bne.n	8015b3c <LinkedListInit+0x12>
    {
        return false;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	e006      	b.n	8015b4a <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2200      	movs	r2, #0
 8015b40:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	2200      	movs	r2, #0
 8015b46:	605a      	str	r2, [r3, #4]

    return true;
 8015b48:	2301      	movs	r3, #1
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	370c      	adds	r7, #12
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bc80      	pop	{r7}
 8015b52:	4770      	bx	lr

08015b54 <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
 8015b5c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d002      	beq.n	8015b6a <LinkedListAdd+0x16>
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <LinkedListAdd+0x1a>
    {
        return false;
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	e015      	b.n	8015b9a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d102      	bne.n	8015b7c <LinkedListAdd+0x28>
    {
        list->First = element;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	683a      	ldr	r2, [r7, #0]
 8015b7a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	685b      	ldr	r3, [r3, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d003      	beq.n	8015b8c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	685b      	ldr	r3, [r3, #4]
 8015b88:	683a      	ldr	r2, [r7, #0]
 8015b8a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	683a      	ldr	r2, [r7, #0]
 8015b96:	605a      	str	r2, [r3, #4]

    return true;
 8015b98:	2301      	movs	r3, #1
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	370c      	adds	r7, #12
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bc80      	pop	{r7}
 8015ba2:	4770      	bx	lr

08015ba4 <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015ba4:	b480      	push	{r7}
 8015ba6:	b085      	sub	sp, #20
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d002      	beq.n	8015bba <LinkedListGetPrevious+0x16>
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d101      	bne.n	8015bbe <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	e016      	b.n	8015bec <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015bc4:	683a      	ldr	r2, [r7, #0]
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d00c      	beq.n	8015be6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bcc:	e002      	b.n	8015bd4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015bd4:	68fb      	ldr	r3, [r7, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d007      	beq.n	8015bea <LinkedListGetPrevious+0x46>
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	681b      	ldr	r3, [r3, #0]
 8015bde:	683a      	ldr	r2, [r7, #0]
 8015be0:	429a      	cmp	r2, r3
 8015be2:	d1f4      	bne.n	8015bce <LinkedListGetPrevious+0x2a>
 8015be4:	e001      	b.n	8015bea <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015be6:	2300      	movs	r3, #0
 8015be8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015bea:	68fb      	ldr	r3, [r7, #12]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3714      	adds	r7, #20
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bc80      	pop	{r7}
 8015bf4:	4770      	bx	lr

08015bf6 <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b084      	sub	sp, #16
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	6078      	str	r0, [r7, #4]
 8015bfe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d002      	beq.n	8015c0c <LinkedListRemove+0x16>
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d101      	bne.n	8015c10 <LinkedListRemove+0x1a>
    {
        return false;
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	e020      	b.n	8015c52 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015c10:	6839      	ldr	r1, [r7, #0]
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f7ff ffc6 	bl	8015ba4 <LinkedListGetPrevious>
 8015c18:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	683a      	ldr	r2, [r7, #0]
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d103      	bne.n	8015c2c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	681a      	ldr	r2, [r3, #0]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	685b      	ldr	r3, [r3, #4]
 8015c30:	683a      	ldr	r2, [r7, #0]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d102      	bne.n	8015c3c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	68fa      	ldr	r2, [r7, #12]
 8015c3a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d003      	beq.n	8015c4a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	681a      	ldr	r2, [r3, #0]
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	601a      	str	r2, [r3, #0]

    return true;
 8015c50:	2301      	movs	r3, #1
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3710      	adds	r7, #16
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}

08015c5a <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015c5a:	b480      	push	{r7}
 8015c5c:	b083      	sub	sp, #12
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	4603      	mov	r3, r0
 8015c62:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	2b05      	cmp	r3, #5
 8015c68:	d004      	beq.n	8015c74 <IsSticky+0x1a>
 8015c6a:	2b05      	cmp	r3, #5
 8015c6c:	db04      	blt.n	8015c78 <IsSticky+0x1e>
 8015c6e:	3b08      	subs	r3, #8
 8015c70:	2b02      	cmp	r3, #2
 8015c72:	d801      	bhi.n	8015c78 <IsSticky+0x1e>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
            return true;
 8015c74:	2301      	movs	r3, #1
 8015c76:	e000      	b.n	8015c7a <IsSticky+0x20>
        default:
            return false;
 8015c78:	2300      	movs	r3, #0
    }
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	370c      	adds	r7, #12
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bc80      	pop	{r7}
 8015c82:	4770      	bx	lr

08015c84 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c88:	22fc      	movs	r2, #252	; 0xfc
 8015c8a:	2100      	movs	r1, #0
 8015c8c:	4804      	ldr	r0, [pc, #16]	; (8015ca0 <LoRaMacCommandsInit+0x1c>)
 8015c8e:	f005 fcc5 	bl	801b61c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c92:	4803      	ldr	r0, [pc, #12]	; (8015ca0 <LoRaMacCommandsInit+0x1c>)
 8015c94:	f7ff ff49 	bl	8015b2a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	20003f20 	.word	0x20003f20

08015ca4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b086      	sub	sp, #24
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	4603      	mov	r3, r0
 8015cac:	60b9      	str	r1, [r7, #8]
 8015cae:	607a      	str	r2, [r7, #4]
 8015cb0:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d101      	bne.n	8015cbc <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cb8:	2301      	movs	r3, #1
 8015cba:	e033      	b.n	8015d24 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015cbc:	f7ff fefa 	bl	8015ab4 <MallocNewMacCommandSlot>
 8015cc0:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015cc2:	697b      	ldr	r3, [r7, #20]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d101      	bne.n	8015ccc <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015cc8:	2302      	movs	r3, #2
 8015cca:	e02b      	b.n	8015d24 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015ccc:	6979      	ldr	r1, [r7, #20]
 8015cce:	4817      	ldr	r0, [pc, #92]	; (8015d2c <LoRaMacCommandsAddCmd+0x88>)
 8015cd0:	f7ff ff40 	bl	8015b54 <LinkedListAdd>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	f083 0301 	eor.w	r3, r3, #1
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d001      	beq.n	8015ce4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015ce0:	2305      	movs	r3, #5
 8015ce2:	e01f      	b.n	8015d24 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8015ce4:	697b      	ldr	r3, [r7, #20]
 8015ce6:	7bfa      	ldrb	r2, [r7, #15]
 8015ce8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015cea:	697b      	ldr	r3, [r7, #20]
 8015cec:	687a      	ldr	r2, [r7, #4]
 8015cee:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	3305      	adds	r3, #5
 8015cf4:	687a      	ldr	r2, [r7, #4]
 8015cf6:	b292      	uxth	r2, r2
 8015cf8:	68b9      	ldr	r1, [r7, #8]
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f005 fc53 	bl	801b5a6 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015d00:	7bfb      	ldrb	r3, [r7, #15]
 8015d02:	4618      	mov	r0, r3
 8015d04:	f7ff ffa9 	bl	8015c5a <IsSticky>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	461a      	mov	r2, r3
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015d10:	4b06      	ldr	r3, [pc, #24]	; (8015d2c <LoRaMacCommandsAddCmd+0x88>)
 8015d12:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	4413      	add	r3, r2
 8015d1a:	3301      	adds	r3, #1
 8015d1c:	4a03      	ldr	r2, [pc, #12]	; (8015d2c <LoRaMacCommandsAddCmd+0x88>)
 8015d1e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015d22:	2300      	movs	r3, #0
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	3718      	adds	r7, #24
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	bd80      	pop	{r7, pc}
 8015d2c:	20003f20 	.word	0x20003f20

08015d30 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b082      	sub	sp, #8
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d101      	bne.n	8015d42 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e021      	b.n	8015d86 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015d42:	6879      	ldr	r1, [r7, #4]
 8015d44:	4812      	ldr	r0, [pc, #72]	; (8015d90 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d46:	f7ff ff56 	bl	8015bf6 <LinkedListRemove>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	f083 0301 	eor.w	r3, r3, #1
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d001      	beq.n	8015d5a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d56:	2303      	movs	r3, #3
 8015d58:	e015      	b.n	8015d86 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015d5a:	4b0d      	ldr	r3, [pc, #52]	; (8015d90 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d5c:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	689b      	ldr	r3, [r3, #8]
 8015d64:	1ad3      	subs	r3, r2, r3
 8015d66:	3b01      	subs	r3, #1
 8015d68:	4a09      	ldr	r2, [pc, #36]	; (8015d90 <LoRaMacCommandsRemoveCmd+0x60>)
 8015d6a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f7ff fec8 	bl	8015b04 <FreeMacCommandSlot>
 8015d74:	4603      	mov	r3, r0
 8015d76:	f083 0301 	eor.w	r3, r3, #1
 8015d7a:	b2db      	uxtb	r3, r3
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d001      	beq.n	8015d84 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d80:	2305      	movs	r3, #5
 8015d82:	e000      	b.n	8015d86 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d84:	2300      	movs	r3, #0
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3708      	adds	r7, #8
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}
 8015d8e:	bf00      	nop
 8015d90:	20003f20 	.word	0x20003f20

08015d94 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d9a:	4b0f      	ldr	r3, [pc, #60]	; (8015dd8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015da0:	e012      	b.n	8015dc8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	7b1b      	ldrb	r3, [r3, #12]
 8015da6:	f083 0301 	eor.w	r3, r3, #1
 8015daa:	b2db      	uxtb	r3, r3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d008      	beq.n	8015dc2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f7ff ffba 	bl	8015d30 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	607b      	str	r3, [r7, #4]
 8015dc0:	e002      	b.n	8015dc8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d1e9      	bne.n	8015da2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dce:	2300      	movs	r3, #0
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3708      	adds	r7, #8
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	bd80      	pop	{r7, pc}
 8015dd8:	20003f20 	.word	0x20003f20

08015ddc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015de2:	4b0e      	ldr	r3, [pc, #56]	; (8015e1c <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015de8:	e00f      	b.n	8015e0a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	791b      	ldrb	r3, [r3, #4]
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7ff ff30 	bl	8015c5a <IsSticky>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d002      	beq.n	8015e06 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f7ff ff95 	bl	8015d30 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d1ec      	bne.n	8015dea <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e10:	2300      	movs	r3, #0
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20003f20 	.word	0x20003f20

08015e20 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015e20:	b480      	push	{r7}
 8015e22:	b083      	sub	sp, #12
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d101      	bne.n	8015e32 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e2e:	2301      	movs	r3, #1
 8015e30:	e005      	b.n	8015e3e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e32:	4b05      	ldr	r3, [pc, #20]	; (8015e48 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e34:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e3c:	2300      	movs	r3, #0
}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	370c      	adds	r7, #12
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bc80      	pop	{r7}
 8015e46:	4770      	bx	lr
 8015e48:	20003f20 	.word	0x20003f20

08015e4c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b088      	sub	sp, #32
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	60f8      	str	r0, [r7, #12]
 8015e54:	60b9      	str	r1, [r7, #8]
 8015e56:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e58:	4b25      	ldr	r3, [pc, #148]	; (8015ef0 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e5e:	2300      	movs	r3, #0
 8015e60:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d002      	beq.n	8015e6e <LoRaMacCommandsSerializeCmds+0x22>
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d126      	bne.n	8015ebc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e039      	b.n	8015ee6 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e72:	7efb      	ldrb	r3, [r7, #27]
 8015e74:	68fa      	ldr	r2, [r7, #12]
 8015e76:	1ad2      	subs	r2, r2, r3
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	3301      	adds	r3, #1
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d320      	bcc.n	8015ec4 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e82:	7efb      	ldrb	r3, [r7, #27]
 8015e84:	1c5a      	adds	r2, r3, #1
 8015e86:	76fa      	strb	r2, [r7, #27]
 8015e88:	461a      	mov	r2, r3
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	69fa      	ldr	r2, [r7, #28]
 8015e90:	7912      	ldrb	r2, [r2, #4]
 8015e92:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e94:	7efb      	ldrb	r3, [r7, #27]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	18d0      	adds	r0, r2, r3
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	1d59      	adds	r1, r3, #5
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	b29b      	uxth	r3, r3
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	f005 fb7e 	bl	801b5a6 <memcpy1>
            itr += curElement->PayloadSize;
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	689b      	ldr	r3, [r3, #8]
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	7efb      	ldrb	r3, [r7, #27]
 8015eb2:	4413      	add	r3, r2
 8015eb4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015eb6:	69fb      	ldr	r3, [r7, #28]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1d7      	bne.n	8015e72 <LoRaMacCommandsSerializeCmds+0x26>
 8015ec2:	e009      	b.n	8015ed8 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015ec4:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015ec6:	e007      	b.n	8015ed8 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015ec8:	69fb      	ldr	r3, [r7, #28]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015ece:	69f8      	ldr	r0, [r7, #28]
 8015ed0:	f7ff ff2e 	bl	8015d30 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015ed4:	697b      	ldr	r3, [r7, #20]
 8015ed6:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ed8:	69fb      	ldr	r3, [r7, #28]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1f4      	bne.n	8015ec8 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015ede:	68b8      	ldr	r0, [r7, #8]
 8015ee0:	f7ff ff9e 	bl	8015e20 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ee4:	2300      	movs	r3, #0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	3720      	adds	r7, #32
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	20003f20 	.word	0x20003f20

08015ef4 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8015ef4:	b480      	push	{r7}
 8015ef6:	b085      	sub	sp, #20
 8015ef8:	af00      	add	r7, sp, #0
 8015efa:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d101      	bne.n	8015f06 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015f02:	2301      	movs	r3, #1
 8015f04:	e016      	b.n	8015f34 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8015f06:	4b0e      	ldr	r3, [pc, #56]	; (8015f40 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8015f12:	e00b      	b.n	8015f2c <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	7b1b      	ldrb	r3, [r3, #12]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d004      	beq.n	8015f26 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	2201      	movs	r2, #1
 8015f20:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8015f22:	2300      	movs	r3, #0
 8015f24:	e006      	b.n	8015f34 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d1f0      	bne.n	8015f14 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015f32:	2300      	movs	r3, #0
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3714      	adds	r7, #20
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bc80      	pop	{r7}
 8015f3c:	4770      	bx	lr
 8015f3e:	bf00      	nop
 8015f40:	20003f20 	.word	0x20003f20

08015f44 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015f44:	b480      	push	{r7}
 8015f46:	b085      	sub	sp, #20
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015f52:	79fb      	ldrb	r3, [r7, #7]
 8015f54:	3b02      	subs	r3, #2
 8015f56:	2b11      	cmp	r3, #17
 8015f58:	d850      	bhi.n	8015ffc <LoRaMacCommandsGetCmdSize+0xb8>
 8015f5a:	a201      	add	r2, pc, #4	; (adr r2, 8015f60 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f60:	08015fa9 	.word	0x08015fa9
 8015f64:	08015faf 	.word	0x08015faf
 8015f68:	08015fb5 	.word	0x08015fb5
 8015f6c:	08015fbb 	.word	0x08015fbb
 8015f70:	08015fc1 	.word	0x08015fc1
 8015f74:	08015fc7 	.word	0x08015fc7
 8015f78:	08015fcd 	.word	0x08015fcd
 8015f7c:	08015fd3 	.word	0x08015fd3
 8015f80:	08015fd9 	.word	0x08015fd9
 8015f84:	08015ffd 	.word	0x08015ffd
 8015f88:	08015ffd 	.word	0x08015ffd
 8015f8c:	08015fdf 	.word	0x08015fdf
 8015f90:	08015ffd 	.word	0x08015ffd
 8015f94:	08015ffd 	.word	0x08015ffd
 8015f98:	08015fe5 	.word	0x08015fe5
 8015f9c:	08015feb 	.word	0x08015feb
 8015fa0:	08015ff1 	.word	0x08015ff1
 8015fa4:	08015ff7 	.word	0x08015ff7
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015fa8:	2303      	movs	r3, #3
 8015faa:	73fb      	strb	r3, [r7, #15]
            break;
 8015fac:	e027      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015fae:	2305      	movs	r3, #5
 8015fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb2:	e024      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015fb4:	2302      	movs	r3, #2
 8015fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8015fb8:	e021      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015fba:	2305      	movs	r3, #5
 8015fbc:	73fb      	strb	r3, [r7, #15]
            break;
 8015fbe:	e01e      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	73fb      	strb	r3, [r7, #15]
            break;
 8015fc4:	e01b      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015fc6:	2306      	movs	r3, #6
 8015fc8:	73fb      	strb	r3, [r7, #15]
            break;
 8015fca:	e018      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015fcc:	2302      	movs	r3, #2
 8015fce:	73fb      	strb	r3, [r7, #15]
            break;
 8015fd0:	e015      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015fd2:	2302      	movs	r3, #2
 8015fd4:	73fb      	strb	r3, [r7, #15]
            break;
 8015fd6:	e012      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015fd8:	2305      	movs	r3, #5
 8015fda:	73fb      	strb	r3, [r7, #15]
            break;
 8015fdc:	e00f      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015fde:	2306      	movs	r3, #6
 8015fe0:	73fb      	strb	r3, [r7, #15]
            break;
 8015fe2:	e00c      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015fe4:	2301      	movs	r3, #1
 8015fe6:	73fb      	strb	r3, [r7, #15]
            break;
 8015fe8:	e009      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015fea:	2305      	movs	r3, #5
 8015fec:	73fb      	strb	r3, [r7, #15]
            break;
 8015fee:	e006      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015ff0:	2304      	movs	r3, #4
 8015ff2:	73fb      	strb	r3, [r7, #15]
            break;
 8015ff4:	e003      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015ff6:	2304      	movs	r3, #4
 8015ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8015ffa:	e000      	b.n	8015ffe <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015ffc:	bf00      	nop
        }
    }
    return cidSize;
 8015ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016000:	4618      	mov	r0, r3
 8016002:	3714      	adds	r7, #20
 8016004:	46bd      	mov	sp, r7
 8016006:	bc80      	pop	{r7}
 8016008:	4770      	bx	lr
 801600a:	bf00      	nop

0801600c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	4a07      	ldr	r2, [pc, #28]	; (8016034 <IncreaseBufferPointer+0x28>)
 8016018:	4293      	cmp	r3, r2
 801601a:	d102      	bne.n	8016022 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801601c:	4b06      	ldr	r3, [pc, #24]	; (8016038 <IncreaseBufferPointer+0x2c>)
 801601e:	607b      	str	r3, [r7, #4]
 8016020:	e002      	b.n	8016028 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	3304      	adds	r3, #4
 8016026:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8016028:	687b      	ldr	r3, [r7, #4]
}
 801602a:	4618      	mov	r0, r3
 801602c:	370c      	adds	r7, #12
 801602e:	46bd      	mov	sp, r7
 8016030:	bc80      	pop	{r7}
 8016032:	4770      	bx	lr
 8016034:	20004038 	.word	0x20004038
 8016038:	20004028 	.word	0x20004028

0801603c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	4603      	mov	r3, r0
 8016044:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8016046:	79fb      	ldrb	r3, [r7, #7]
 8016048:	2b00      	cmp	r3, #0
 801604a:	d101      	bne.n	8016050 <IsListEmpty+0x14>
    {
        return true;
 801604c:	2301      	movs	r3, #1
 801604e:	e000      	b.n	8016052 <IsListEmpty+0x16>
    }
    return false;
 8016050:	2300      	movs	r3, #0
}
 8016052:	4618      	mov	r0, r3
 8016054:	370c      	adds	r7, #12
 8016056:	46bd      	mov	sp, r7
 8016058:	bc80      	pop	{r7}
 801605a:	4770      	bx	lr

0801605c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801605c:	b480      	push	{r7}
 801605e:	b083      	sub	sp, #12
 8016060:	af00      	add	r7, sp, #0
 8016062:	4603      	mov	r3, r0
 8016064:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8016066:	79fb      	ldrb	r3, [r7, #7]
 8016068:	2b04      	cmp	r3, #4
 801606a:	d901      	bls.n	8016070 <IsListFull+0x14>
    {
        return true;
 801606c:	2301      	movs	r3, #1
 801606e:	e000      	b.n	8016072 <IsListFull+0x16>
    }
    return false;
 8016070:	2300      	movs	r3, #0
}
 8016072:	4618      	mov	r0, r3
 8016074:	370c      	adds	r7, #12
 8016076:	46bd      	mov	sp, r7
 8016078:	bc80      	pop	{r7}
 801607a:	4770      	bx	lr

0801607c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b086      	sub	sp, #24
 8016080:	af00      	add	r7, sp, #0
 8016082:	4603      	mov	r3, r0
 8016084:	60b9      	str	r1, [r7, #8]
 8016086:	607a      	str	r2, [r7, #4]
 8016088:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801608e:	4b13      	ldr	r3, [pc, #76]	; (80160dc <GetElement+0x60>)
 8016090:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016094:	4618      	mov	r0, r3
 8016096:	f7ff ffd1 	bl	801603c <IsListEmpty>
 801609a:	4603      	mov	r3, r0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d001      	beq.n	80160a4 <GetElement+0x28>
    {
        return NULL;
 80160a0:	2300      	movs	r3, #0
 80160a2:	e017      	b.n	80160d4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80160a4:	2300      	movs	r3, #0
 80160a6:	74fb      	strb	r3, [r7, #19]
 80160a8:	e00d      	b.n	80160c6 <GetElement+0x4a>
    {
        if( element->Request == request )
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	7bfa      	ldrb	r2, [r7, #15]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d101      	bne.n	80160b8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80160b4:	697b      	ldr	r3, [r7, #20]
 80160b6:	e00d      	b.n	80160d4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80160b8:	6978      	ldr	r0, [r7, #20]
 80160ba:	f7ff ffa7 	bl	801600c <IncreaseBufferPointer>
 80160be:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80160c0:	7cfb      	ldrb	r3, [r7, #19]
 80160c2:	3301      	adds	r3, #1
 80160c4:	74fb      	strb	r3, [r7, #19]
 80160c6:	4b05      	ldr	r3, [pc, #20]	; (80160dc <GetElement+0x60>)
 80160c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160cc:	7cfa      	ldrb	r2, [r7, #19]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	d3eb      	bcc.n	80160aa <GetElement+0x2e>
    }

    return NULL;
 80160d2:	2300      	movs	r3, #0
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	2000401c 	.word	0x2000401c

080160e0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80160e8:	4a0c      	ldr	r2, [pc, #48]	; (801611c <LoRaMacConfirmQueueInit+0x3c>)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80160ee:	4b0b      	ldr	r3, [pc, #44]	; (801611c <LoRaMacConfirmQueueInit+0x3c>)
 80160f0:	2200      	movs	r2, #0
 80160f2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160f6:	4b09      	ldr	r3, [pc, #36]	; (801611c <LoRaMacConfirmQueueInit+0x3c>)
 80160f8:	4a09      	ldr	r2, [pc, #36]	; (8016120 <LoRaMacConfirmQueueInit+0x40>)
 80160fa:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160fc:	4b07      	ldr	r3, [pc, #28]	; (801611c <LoRaMacConfirmQueueInit+0x3c>)
 80160fe:	4a08      	ldr	r2, [pc, #32]	; (8016120 <LoRaMacConfirmQueueInit+0x40>)
 8016100:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8016102:	2214      	movs	r2, #20
 8016104:	21ff      	movs	r1, #255	; 0xff
 8016106:	4806      	ldr	r0, [pc, #24]	; (8016120 <LoRaMacConfirmQueueInit+0x40>)
 8016108:	f005 fa88 	bl	801b61c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801610c:	4b03      	ldr	r3, [pc, #12]	; (801611c <LoRaMacConfirmQueueInit+0x3c>)
 801610e:	2201      	movs	r2, #1
 8016110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8016114:	bf00      	nop
 8016116:	3708      	adds	r7, #8
 8016118:	46bd      	mov	sp, r7
 801611a:	bd80      	pop	{r7, pc}
 801611c:	2000401c 	.word	0x2000401c
 8016120:	20004028 	.word	0x20004028

08016124 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801612c:	4b19      	ldr	r3, [pc, #100]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 801612e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016132:	4618      	mov	r0, r3
 8016134:	f7ff ff92 	bl	801605c <IsListFull>
 8016138:	4603      	mov	r3, r0
 801613a:	2b00      	cmp	r3, #0
 801613c:	d001      	beq.n	8016142 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801613e:	2300      	movs	r3, #0
 8016140:	e023      	b.n	801618a <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8016142:	4b14      	ldr	r3, [pc, #80]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 8016144:	689b      	ldr	r3, [r3, #8]
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	7812      	ldrb	r2, [r2, #0]
 801614a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801614c:	4b11      	ldr	r3, [pc, #68]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	7852      	ldrb	r2, [r2, #1]
 8016154:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8016156:	4b0f      	ldr	r3, [pc, #60]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 8016158:	689b      	ldr	r3, [r3, #8]
 801615a:	687a      	ldr	r2, [r7, #4]
 801615c:	78d2      	ldrb	r2, [r2, #3]
 801615e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016160:	4b0c      	ldr	r3, [pc, #48]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 8016162:	689b      	ldr	r3, [r3, #8]
 8016164:	2200      	movs	r2, #0
 8016166:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8016168:	4b0a      	ldr	r3, [pc, #40]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 801616a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801616e:	3301      	adds	r3, #1
 8016170:	b2da      	uxtb	r2, r3
 8016172:	4b08      	ldr	r3, [pc, #32]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 8016174:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016178:	4b06      	ldr	r3, [pc, #24]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 801617a:	689b      	ldr	r3, [r3, #8]
 801617c:	4618      	mov	r0, r3
 801617e:	f7ff ff45 	bl	801600c <IncreaseBufferPointer>
 8016182:	4603      	mov	r3, r0
 8016184:	4a03      	ldr	r2, [pc, #12]	; (8016194 <LoRaMacConfirmQueueAdd+0x70>)
 8016186:	6093      	str	r3, [r2, #8]

    return true;
 8016188:	2301      	movs	r3, #1
}
 801618a:	4618      	mov	r0, r3
 801618c:	3708      	adds	r7, #8
 801618e:	46bd      	mov	sp, r7
 8016190:	bd80      	pop	{r7, pc}
 8016192:	bf00      	nop
 8016194:	2000401c 	.word	0x2000401c

08016198 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016198:	b580      	push	{r7, lr}
 801619a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801619c:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801619e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7ff ff4a 	bl	801603c <IsListEmpty>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d001      	beq.n	80161b2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80161ae:	2300      	movs	r3, #0
 80161b0:	e010      	b.n	80161d4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80161b2:	4b09      	ldr	r3, [pc, #36]	; (80161d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161b8:	3b01      	subs	r3, #1
 80161ba:	b2da      	uxtb	r2, r3
 80161bc:	4b06      	ldr	r3, [pc, #24]	; (80161d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161be:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80161c2:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161c4:	685b      	ldr	r3, [r3, #4]
 80161c6:	4618      	mov	r0, r3
 80161c8:	f7ff ff20 	bl	801600c <IncreaseBufferPointer>
 80161cc:	4603      	mov	r3, r0
 80161ce:	4a02      	ldr	r2, [pc, #8]	; (80161d8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80161d0:	6053      	str	r3, [r2, #4]

    return true;
 80161d2:	2301      	movs	r3, #1
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	2000401c 	.word	0x2000401c

080161dc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	4603      	mov	r3, r0
 80161e4:	460a      	mov	r2, r1
 80161e6:	71fb      	strb	r3, [r7, #7]
 80161e8:	4613      	mov	r3, r2
 80161ea:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80161ec:	2300      	movs	r3, #0
 80161ee:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161f0:	4b10      	ldr	r3, [pc, #64]	; (8016234 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7ff ff20 	bl	801603c <IsListEmpty>
 80161fc:	4603      	mov	r3, r0
 80161fe:	f083 0301 	eor.w	r3, r3, #1
 8016202:	b2db      	uxtb	r3, r3
 8016204:	2b00      	cmp	r3, #0
 8016206:	d011      	beq.n	801622c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016208:	4b0a      	ldr	r3, [pc, #40]	; (8016234 <LoRaMacConfirmQueueSetStatus+0x58>)
 801620a:	6859      	ldr	r1, [r3, #4]
 801620c:	4b09      	ldr	r3, [pc, #36]	; (8016234 <LoRaMacConfirmQueueSetStatus+0x58>)
 801620e:	689a      	ldr	r2, [r3, #8]
 8016210:	79bb      	ldrb	r3, [r7, #6]
 8016212:	4618      	mov	r0, r3
 8016214:	f7ff ff32 	bl	801607c <GetElement>
 8016218:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2b00      	cmp	r3, #0
 801621e:	d005      	beq.n	801622c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	79fa      	ldrb	r2, [r7, #7]
 8016224:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	2201      	movs	r2, #1
 801622a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801622c:	bf00      	nop
 801622e:	3710      	adds	r7, #16
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	2000401c 	.word	0x2000401c

08016238 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	4603      	mov	r3, r0
 8016240:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8016242:	2300      	movs	r3, #0
 8016244:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016246:	4b10      	ldr	r3, [pc, #64]	; (8016288 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016248:	f893 3020 	ldrb.w	r3, [r3, #32]
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff fef5 	bl	801603c <IsListEmpty>
 8016252:	4603      	mov	r3, r0
 8016254:	f083 0301 	eor.w	r3, r3, #1
 8016258:	b2db      	uxtb	r3, r3
 801625a:	2b00      	cmp	r3, #0
 801625c:	d00e      	beq.n	801627c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801625e:	4b0a      	ldr	r3, [pc, #40]	; (8016288 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016260:	6859      	ldr	r1, [r3, #4]
 8016262:	4b09      	ldr	r3, [pc, #36]	; (8016288 <LoRaMacConfirmQueueGetStatus+0x50>)
 8016264:	689a      	ldr	r2, [r3, #8]
 8016266:	79fb      	ldrb	r3, [r7, #7]
 8016268:	4618      	mov	r0, r3
 801626a:	f7ff ff07 	bl	801607c <GetElement>
 801626e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d002      	beq.n	801627c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	785b      	ldrb	r3, [r3, #1]
 801627a:	e000      	b.n	801627e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801627c:	2301      	movs	r3, #1
}
 801627e:	4618      	mov	r0, r3
 8016280:	3710      	adds	r7, #16
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	2000401c 	.word	0x2000401c

0801628c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b084      	sub	sp, #16
 8016290:	af00      	add	r7, sp, #0
 8016292:	4603      	mov	r3, r0
 8016294:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016296:	4b16      	ldr	r3, [pc, #88]	; (80162f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801629c:	4a14      	ldr	r2, [pc, #80]	; (80162f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801629e:	79fb      	ldrb	r3, [r7, #7]
 80162a0:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80162a4:	4b12      	ldr	r3, [pc, #72]	; (80162f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162aa:	4618      	mov	r0, r3
 80162ac:	f7ff fec6 	bl	801603c <IsListEmpty>
 80162b0:	4603      	mov	r3, r0
 80162b2:	f083 0301 	eor.w	r3, r3, #1
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d015      	beq.n	80162e8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	79fa      	ldrb	r2, [r7, #7]
 80162c0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80162c2:	68fb      	ldr	r3, [r7, #12]
 80162c4:	78db      	ldrb	r3, [r3, #3]
 80162c6:	f083 0301 	eor.w	r3, r3, #1
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d002      	beq.n	80162d6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	2201      	movs	r2, #1
 80162d4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80162d6:	68f8      	ldr	r0, [r7, #12]
 80162d8:	f7ff fe98 	bl	801600c <IncreaseBufferPointer>
 80162dc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80162de:	4b04      	ldr	r3, [pc, #16]	; (80162f0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80162e0:	689b      	ldr	r3, [r3, #8]
 80162e2:	68fa      	ldr	r2, [r7, #12]
 80162e4:	429a      	cmp	r2, r3
 80162e6:	d1e9      	bne.n	80162bc <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80162e8:	bf00      	nop
 80162ea:	3710      	adds	r7, #16
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	2000401c 	.word	0x2000401c

080162f4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b082      	sub	sp, #8
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	4603      	mov	r3, r0
 80162fc:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80162fe:	4b09      	ldr	r3, [pc, #36]	; (8016324 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016300:	6859      	ldr	r1, [r3, #4]
 8016302:	4b08      	ldr	r3, [pc, #32]	; (8016324 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016304:	689a      	ldr	r2, [r3, #8]
 8016306:	79fb      	ldrb	r3, [r7, #7]
 8016308:	4618      	mov	r0, r3
 801630a:	f7ff feb7 	bl	801607c <GetElement>
 801630e:	4603      	mov	r3, r0
 8016310:	2b00      	cmp	r3, #0
 8016312:	d001      	beq.n	8016318 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8016314:	2301      	movs	r3, #1
 8016316:	e000      	b.n	801631a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8016318:	2300      	movs	r3, #0
}
 801631a:	4618      	mov	r0, r3
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
 8016322:	bf00      	nop
 8016324:	2000401c 	.word	0x2000401c

08016328 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016330:	4b22      	ldr	r3, [pc, #136]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016336:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8016338:	2300      	movs	r3, #0
 801633a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 801633c:	2300      	movs	r3, #0
 801633e:	73fb      	strb	r3, [r7, #15]
 8016340:	e032      	b.n	80163a8 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8016342:	4b1e      	ldr	r3, [pc, #120]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016344:	685b      	ldr	r3, [r3, #4]
 8016346:	781a      	ldrb	r2, [r3, #0]
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801634c:	4b1b      	ldr	r3, [pc, #108]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 801634e:	685b      	ldr	r3, [r3, #4]
 8016350:	785a      	ldrb	r2, [r3, #1]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016356:	4b19      	ldr	r3, [pc, #100]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	789b      	ldrb	r3, [r3, #2]
 801635c:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801635e:	7b7b      	ldrb	r3, [r7, #13]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d005      	beq.n	8016370 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016364:	4b15      	ldr	r3, [pc, #84]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	689b      	ldr	r3, [r3, #8]
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	4798      	blx	r3
 801636e:	e00b      	b.n	8016388 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016370:	4b12      	ldr	r3, [pc, #72]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016378:	4b10      	ldr	r3, [pc, #64]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	785b      	ldrb	r3, [r3, #1]
 801637e:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016380:	4b0e      	ldr	r3, [pc, #56]	; (80163bc <LoRaMacConfirmQueueHandleCb+0x94>)
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	78db      	ldrb	r3, [r3, #3]
 8016386:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016388:	f7ff ff06 	bl	8016198 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801638c:	7b7b      	ldrb	r3, [r7, #13]
 801638e:	f083 0301 	eor.w	r3, r3, #1
 8016392:	b2db      	uxtb	r3, r3
 8016394:	2b00      	cmp	r3, #0
 8016396:	d004      	beq.n	80163a2 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016398:	f107 0308 	add.w	r3, r7, #8
 801639c:	4618      	mov	r0, r3
 801639e:	f7ff fec1 	bl	8016124 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80163a2:	7bfb      	ldrb	r3, [r7, #15]
 80163a4:	3301      	adds	r3, #1
 80163a6:	73fb      	strb	r3, [r7, #15]
 80163a8:	7bfa      	ldrb	r2, [r7, #15]
 80163aa:	7bbb      	ldrb	r3, [r7, #14]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d3c8      	bcc.n	8016342 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 80163b0:	bf00      	nop
 80163b2:	bf00      	nop
 80163b4:	3710      	adds	r7, #16
 80163b6:	46bd      	mov	sp, r7
 80163b8:	bd80      	pop	{r7, pc}
 80163ba:	bf00      	nop
 80163bc:	2000401c 	.word	0x2000401c

080163c0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80163c0:	b480      	push	{r7}
 80163c2:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80163c4:	4b03      	ldr	r3, [pc, #12]	; (80163d4 <LoRaMacConfirmQueueGetCnt+0x14>)
 80163c6:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bc80      	pop	{r7}
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
 80163d4:	2000401c 	.word	0x2000401c

080163d8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80163d8:	b580      	push	{r7, lr}
 80163da:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80163dc:	4b06      	ldr	r3, [pc, #24]	; (80163f8 <LoRaMacConfirmQueueIsFull+0x20>)
 80163de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7ff fe3a 	bl	801605c <IsListFull>
 80163e8:	4603      	mov	r3, r0
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d001      	beq.n	80163f2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80163ee:	2301      	movs	r3, #1
 80163f0:	e000      	b.n	80163f4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80163f2:	2300      	movs	r3, #0
    }
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	2000401c 	.word	0x2000401c

080163fc <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163fc:	b580      	push	{r7, lr}
 80163fe:	b08e      	sub	sp, #56	; 0x38
 8016400:	af00      	add	r7, sp, #0
 8016402:	60f8      	str	r0, [r7, #12]
 8016404:	607b      	str	r3, [r7, #4]
 8016406:	460b      	mov	r3, r1
 8016408:	817b      	strh	r3, [r7, #10]
 801640a:	4613      	mov	r3, r2
 801640c:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2b00      	cmp	r3, #0
 8016412:	d101      	bne.n	8016418 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016414:	230a      	movs	r3, #10
 8016416:	e086      	b.n	8016526 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8016418:	2300      	movs	r3, #0
 801641a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 801641e:	2301      	movs	r3, #1
 8016420:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8016422:	2300      	movs	r3, #0
 8016424:	623b      	str	r3, [r7, #32]
 8016426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801642a:	2200      	movs	r2, #0
 801642c:	601a      	str	r2, [r3, #0]
 801642e:	605a      	str	r2, [r3, #4]
 8016430:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8016432:	2300      	movs	r3, #0
 8016434:	613b      	str	r3, [r7, #16]
 8016436:	f107 0314 	add.w	r3, r7, #20
 801643a:	2200      	movs	r2, #0
 801643c:	601a      	str	r2, [r3, #0]
 801643e:	605a      	str	r2, [r3, #4]
 8016440:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8016442:	2301      	movs	r3, #1
 8016444:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8016446:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801644a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	b2db      	uxtb	r3, r3
 8016450:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	0a1b      	lsrs	r3, r3, #8
 8016456:	b2db      	uxtb	r3, r3
 8016458:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	0c1b      	lsrs	r3, r3, #16
 801645e:	b2db      	uxtb	r3, r3
 8016460:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	0e1b      	lsrs	r3, r3, #24
 8016466:	b2db      	uxtb	r3, r3
 8016468:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801646a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801646c:	b2db      	uxtb	r3, r3
 801646e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016472:	0a1b      	lsrs	r3, r3, #8
 8016474:	b2db      	uxtb	r3, r3
 8016476:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801647a:	0c1b      	lsrs	r3, r3, #16
 801647c:	b2db      	uxtb	r3, r3
 801647e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016482:	0e1b      	lsrs	r3, r3, #24
 8016484:	b2db      	uxtb	r3, r3
 8016486:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016488:	e048      	b.n	801651c <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801648a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801648c:	b2db      	uxtb	r3, r3
 801648e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016490:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016492:	3301      	adds	r3, #1
 8016494:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016496:	f107 0320 	add.w	r3, r7, #32
 801649a:	7a7a      	ldrb	r2, [r7, #9]
 801649c:	f107 0010 	add.w	r0, r7, #16
 80164a0:	2110      	movs	r1, #16
 80164a2:	f7f8 fdba 	bl	800f01a <SecureElementAesEncrypt>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d001      	beq.n	80164b0 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80164ac:	230f      	movs	r3, #15
 80164ae:	e03a      	b.n	8016526 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80164b0:	2300      	movs	r3, #0
 80164b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164b6:	e01e      	b.n	80164f6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80164b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80164bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164c0:	4413      	add	r3, r2
 80164c2:	461a      	mov	r2, r3
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	4413      	add	r3, r2
 80164c8:	7819      	ldrb	r1, [r3, #0]
 80164ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164ce:	3338      	adds	r3, #56	; 0x38
 80164d0:	443b      	add	r3, r7
 80164d2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80164d6:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80164da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164de:	4403      	add	r3, r0
 80164e0:	4618      	mov	r0, r3
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	4403      	add	r3, r0
 80164e6:	404a      	eors	r2, r1
 80164e8:	b2d2      	uxtb	r2, r2
 80164ea:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80164ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164f0:	3301      	adds	r3, #1
 80164f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164fe:	2a10      	cmp	r2, #16
 8016500:	bfa8      	it	ge
 8016502:	2210      	movge	r2, #16
 8016504:	b212      	sxth	r2, r2
 8016506:	4293      	cmp	r3, r2
 8016508:	dbd6      	blt.n	80164b8 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801650a:	897b      	ldrh	r3, [r7, #10]
 801650c:	3b10      	subs	r3, #16
 801650e:	b29b      	uxth	r3, r3
 8016510:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8016512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016516:	3310      	adds	r3, #16
 8016518:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 801651c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016520:	2b00      	cmp	r3, #0
 8016522:	dcb2      	bgt.n	801648a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016524:	2300      	movs	r3, #0
}
 8016526:	4618      	mov	r0, r3
 8016528:	3738      	adds	r7, #56	; 0x38
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}

0801652e <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801652e:	b490      	push	{r4, r7}
 8016530:	b082      	sub	sp, #8
 8016532:	af00      	add	r7, sp, #0
 8016534:	4604      	mov	r4, r0
 8016536:	4608      	mov	r0, r1
 8016538:	4611      	mov	r1, r2
 801653a:	461a      	mov	r2, r3
 801653c:	4623      	mov	r3, r4
 801653e:	80fb      	strh	r3, [r7, #6]
 8016540:	4603      	mov	r3, r0
 8016542:	717b      	strb	r3, [r7, #5]
 8016544:	460b      	mov	r3, r1
 8016546:	713b      	strb	r3, [r7, #4]
 8016548:	4613      	mov	r3, r2
 801654a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801654c:	69bb      	ldr	r3, [r7, #24]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d101      	bne.n	8016556 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016552:	230a      	movs	r3, #10
 8016554:	e04e      	b.n	80165f4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016556:	69bb      	ldr	r3, [r7, #24]
 8016558:	2249      	movs	r2, #73	; 0x49
 801655a:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 801655c:	69bb      	ldr	r3, [r7, #24]
 801655e:	3301      	adds	r3, #1
 8016560:	2200      	movs	r2, #0
 8016562:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	3302      	adds	r3, #2
 8016568:	2200      	movs	r2, #0
 801656a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801656c:	69bb      	ldr	r3, [r7, #24]
 801656e:	3303      	adds	r3, #3
 8016570:	2200      	movs	r2, #0
 8016572:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	3304      	adds	r3, #4
 8016578:	2200      	movs	r2, #0
 801657a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	3305      	adds	r3, #5
 8016580:	78fa      	ldrb	r2, [r7, #3]
 8016582:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016584:	69bb      	ldr	r3, [r7, #24]
 8016586:	3306      	adds	r3, #6
 8016588:	693a      	ldr	r2, [r7, #16]
 801658a:	b2d2      	uxtb	r2, r2
 801658c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	0a1a      	lsrs	r2, r3, #8
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	3307      	adds	r3, #7
 8016596:	b2d2      	uxtb	r2, r2
 8016598:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801659a:	693b      	ldr	r3, [r7, #16]
 801659c:	0c1a      	lsrs	r2, r3, #16
 801659e:	69bb      	ldr	r3, [r7, #24]
 80165a0:	3308      	adds	r3, #8
 80165a2:	b2d2      	uxtb	r2, r2
 80165a4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80165a6:	693b      	ldr	r3, [r7, #16]
 80165a8:	0e1a      	lsrs	r2, r3, #24
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	3309      	adds	r3, #9
 80165ae:	b2d2      	uxtb	r2, r2
 80165b0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	330a      	adds	r3, #10
 80165b6:	697a      	ldr	r2, [r7, #20]
 80165b8:	b2d2      	uxtb	r2, r2
 80165ba:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80165bc:	697b      	ldr	r3, [r7, #20]
 80165be:	0a1a      	lsrs	r2, r3, #8
 80165c0:	69bb      	ldr	r3, [r7, #24]
 80165c2:	330b      	adds	r3, #11
 80165c4:	b2d2      	uxtb	r2, r2
 80165c6:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	0c1a      	lsrs	r2, r3, #16
 80165cc:	69bb      	ldr	r3, [r7, #24]
 80165ce:	330c      	adds	r3, #12
 80165d0:	b2d2      	uxtb	r2, r2
 80165d2:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	0e1a      	lsrs	r2, r3, #24
 80165d8:	69bb      	ldr	r3, [r7, #24]
 80165da:	330d      	adds	r3, #13
 80165dc:	b2d2      	uxtb	r2, r2
 80165de:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	330e      	adds	r3, #14
 80165e4:	2200      	movs	r2, #0
 80165e6:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80165e8:	69bb      	ldr	r3, [r7, #24]
 80165ea:	330f      	adds	r3, #15
 80165ec:	88fa      	ldrh	r2, [r7, #6]
 80165ee:	b2d2      	uxtb	r2, r2
 80165f0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165f2:	2300      	movs	r3, #0
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	3708      	adds	r7, #8
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bc90      	pop	{r4, r7}
 80165fc:	4770      	bx	lr

080165fe <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165fe:	b590      	push	{r4, r7, lr}
 8016600:	b08b      	sub	sp, #44	; 0x2c
 8016602:	af04      	add	r7, sp, #16
 8016604:	6078      	str	r0, [r7, #4]
 8016606:	4608      	mov	r0, r1
 8016608:	4611      	mov	r1, r2
 801660a:	461a      	mov	r2, r3
 801660c:	4603      	mov	r3, r0
 801660e:	807b      	strh	r3, [r7, #2]
 8016610:	460b      	mov	r3, r1
 8016612:	707b      	strb	r3, [r7, #1]
 8016614:	4613      	mov	r3, r2
 8016616:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d002      	beq.n	8016624 <ComputeCmacB0+0x26>
 801661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016620:	2b00      	cmp	r3, #0
 8016622:	d101      	bne.n	8016628 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016624:	230a      	movs	r3, #10
 8016626:	e024      	b.n	8016672 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016628:	887b      	ldrh	r3, [r7, #2]
 801662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801662e:	d901      	bls.n	8016634 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016630:	230e      	movs	r3, #14
 8016632:	e01e      	b.n	8016672 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016634:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8016638:	783a      	ldrb	r2, [r7, #0]
 801663a:	7879      	ldrb	r1, [r7, #1]
 801663c:	8878      	ldrh	r0, [r7, #2]
 801663e:	f107 0308 	add.w	r3, r7, #8
 8016642:	9302      	str	r3, [sp, #8]
 8016644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016646:	9301      	str	r3, [sp, #4]
 8016648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801664a:	9300      	str	r3, [sp, #0]
 801664c:	4623      	mov	r3, r4
 801664e:	f7ff ff6e 	bl	801652e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016652:	7879      	ldrb	r1, [r7, #1]
 8016654:	887a      	ldrh	r2, [r7, #2]
 8016656:	f107 0008 	add.w	r0, r7, #8
 801665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801665c:	9300      	str	r3, [sp, #0]
 801665e:	460b      	mov	r3, r1
 8016660:	6879      	ldr	r1, [r7, #4]
 8016662:	f7f8 fc8d 	bl	800ef80 <SecureElementComputeAesCmac>
 8016666:	4603      	mov	r3, r0
 8016668:	2b00      	cmp	r3, #0
 801666a:	d001      	beq.n	8016670 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801666c:	230f      	movs	r3, #15
 801666e:	e000      	b.n	8016672 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016670:	2300      	movs	r3, #0
}
 8016672:	4618      	mov	r0, r3
 8016674:	371c      	adds	r7, #28
 8016676:	46bd      	mov	sp, r7
 8016678:	bd90      	pop	{r4, r7, pc}

0801667a <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801667a:	b590      	push	{r4, r7, lr}
 801667c:	b0cd      	sub	sp, #308	; 0x134
 801667e:	af04      	add	r7, sp, #16
 8016680:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016684:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016688:	6020      	str	r0, [r4, #0]
 801668a:	460c      	mov	r4, r1
 801668c:	4610      	mov	r0, r2
 801668e:	4619      	mov	r1, r3
 8016690:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016694:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016698:	4622      	mov	r2, r4
 801669a:	801a      	strh	r2, [r3, #0]
 801669c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166a0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166a4:	4602      	mov	r2, r0
 80166a6:	701a      	strb	r2, [r3, #0]
 80166a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166b0:	460a      	mov	r2, r1
 80166b2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80166b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d101      	bne.n	80166c6 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80166c2:	230a      	movs	r3, #10
 80166c4:	e063      	b.n	801678e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80166c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ca:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166ce:	881b      	ldrh	r3, [r3, #0]
 80166d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166d4:	d901      	bls.n	80166da <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80166d6:	230e      	movs	r3, #14
 80166d8:	e059      	b.n	801678e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80166da:	f107 030c 	add.w	r3, r7, #12
 80166de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80166e2:	2100      	movs	r1, #0
 80166e4:	4618      	mov	r0, r3
 80166e6:	f004 ff99 	bl	801b61c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80166ea:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80166ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166f6:	781a      	ldrb	r2, [r3, #0]
 80166f8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166fc:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016700:	7819      	ldrb	r1, [r3, #0]
 8016702:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016706:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801670a:	8818      	ldrh	r0, [r3, #0]
 801670c:	f107 030c 	add.w	r3, r7, #12
 8016710:	9302      	str	r3, [sp, #8]
 8016712:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016716:	9301      	str	r3, [sp, #4]
 8016718:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801671c:	9300      	str	r3, [sp, #0]
 801671e:	4623      	mov	r3, r4
 8016720:	f7ff ff05 	bl	801652e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8016724:	f107 030c 	add.w	r3, r7, #12
 8016728:	3310      	adds	r3, #16
 801672a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 801672e:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8016732:	8812      	ldrh	r2, [r2, #0]
 8016734:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8016738:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 801673c:	6809      	ldr	r1, [r1, #0]
 801673e:	4618      	mov	r0, r3
 8016740:	f004 ff31 	bl	801b5a6 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016744:	2306      	movs	r3, #6
 8016746:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801674a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801674e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016752:	881b      	ldrh	r3, [r3, #0]
 8016754:	3310      	adds	r3, #16
 8016756:	b299      	uxth	r1, r3
 8016758:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801675c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016760:	781b      	ldrb	r3, [r3, #0]
 8016762:	f107 000c 	add.w	r0, r7, #12
 8016766:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801676a:	f7f8 fc27 	bl	800efbc <SecureElementVerifyAesCmac>
 801676e:	4603      	mov	r3, r0
 8016770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016778:	2b00      	cmp	r3, #0
 801677a:	d101      	bne.n	8016780 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801677c:	2300      	movs	r3, #0
 801677e:	e006      	b.n	801678e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016784:	2b01      	cmp	r3, #1
 8016786:	d101      	bne.n	801678c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016788:	2301      	movs	r3, #1
 801678a:	e000      	b.n	801678e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801678c:	230f      	movs	r3, #15
}
 801678e:	4618      	mov	r0, r3
 8016790:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016794:	46bd      	mov	sp, r7
 8016796:	bd90      	pop	{r4, r7, pc}

08016798 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016798:	b480      	push	{r7}
 801679a:	b085      	sub	sp, #20
 801679c:	af00      	add	r7, sp, #0
 801679e:	4603      	mov	r3, r0
 80167a0:	6039      	str	r1, [r7, #0]
 80167a2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80167a4:	2300      	movs	r3, #0
 80167a6:	73fb      	strb	r3, [r7, #15]
 80167a8:	e011      	b.n	80167ce <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80167aa:	7bfb      	ldrb	r3, [r7, #15]
 80167ac:	4a0c      	ldr	r2, [pc, #48]	; (80167e0 <GetKeyAddrItem+0x48>)
 80167ae:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80167b2:	79fa      	ldrb	r2, [r7, #7]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d107      	bne.n	80167c8 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80167b8:	7bfb      	ldrb	r3, [r7, #15]
 80167ba:	009b      	lsls	r3, r3, #2
 80167bc:	4a08      	ldr	r2, [pc, #32]	; (80167e0 <GetKeyAddrItem+0x48>)
 80167be:	441a      	add	r2, r3
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80167c4:	2300      	movs	r3, #0
 80167c6:	e006      	b.n	80167d6 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80167c8:	7bfb      	ldrb	r3, [r7, #15]
 80167ca:	3301      	adds	r3, #1
 80167cc:	73fb      	strb	r3, [r7, #15]
 80167ce:	7bfb      	ldrb	r3, [r7, #15]
 80167d0:	2b01      	cmp	r3, #1
 80167d2:	d9ea      	bls.n	80167aa <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80167d4:	230c      	movs	r3, #12
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3714      	adds	r7, #20
 80167da:	46bd      	mov	sp, r7
 80167dc:	bc80      	pop	{r7}
 80167de:	4770      	bx	lr
 80167e0:	20000104 	.word	0x20000104

080167e4 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b088      	sub	sp, #32
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60b9      	str	r1, [r7, #8]
 80167ec:	607a      	str	r2, [r7, #4]
 80167ee:	461a      	mov	r2, r3
 80167f0:	4603      	mov	r3, r0
 80167f2:	73fb      	strb	r3, [r7, #15]
 80167f4:	4613      	mov	r3, r2
 80167f6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167f8:	2300      	movs	r3, #0
 80167fa:	613b      	str	r3, [r7, #16]
 80167fc:	f107 0314 	add.w	r3, r7, #20
 8016800:	2200      	movs	r2, #0
 8016802:	601a      	str	r2, [r3, #0]
 8016804:	605a      	str	r2, [r3, #4]
 8016806:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8016808:	7bfb      	ldrb	r3, [r7, #15]
 801680a:	2b02      	cmp	r3, #2
 801680c:	d002      	beq.n	8016814 <DeriveSessionKey10x+0x30>
 801680e:	2b03      	cmp	r3, #3
 8016810:	d003      	beq.n	801681a <DeriveSessionKey10x+0x36>
 8016812:	e005      	b.n	8016820 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8016814:	2301      	movs	r3, #1
 8016816:	743b      	strb	r3, [r7, #16]
            break;
 8016818:	e004      	b.n	8016824 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801681a:	2302      	movs	r3, #2
 801681c:	743b      	strb	r3, [r7, #16]
            break;
 801681e:	e001      	b.n	8016824 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8016820:	230b      	movs	r3, #11
 8016822:	e02a      	b.n	801687a <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8016824:	68bb      	ldr	r3, [r7, #8]
 8016826:	b2db      	uxtb	r3, r3
 8016828:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	0a1b      	lsrs	r3, r3, #8
 801682e:	b2db      	uxtb	r3, r3
 8016830:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	0c1b      	lsrs	r3, r3, #16
 8016836:	b2db      	uxtb	r3, r3
 8016838:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	b2db      	uxtb	r3, r3
 801683e:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	0a1b      	lsrs	r3, r3, #8
 8016844:	b2db      	uxtb	r3, r3
 8016846:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	0c1b      	lsrs	r3, r3, #16
 801684c:	b2db      	uxtb	r3, r3
 801684e:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016850:	89bb      	ldrh	r3, [r7, #12]
 8016852:	b2db      	uxtb	r3, r3
 8016854:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016856:	89bb      	ldrh	r3, [r7, #12]
 8016858:	0a1b      	lsrs	r3, r3, #8
 801685a:	b29b      	uxth	r3, r3
 801685c:	b2db      	uxtb	r3, r3
 801685e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016860:	7bfa      	ldrb	r2, [r7, #15]
 8016862:	f107 0310 	add.w	r3, r7, #16
 8016866:	2101      	movs	r1, #1
 8016868:	4618      	mov	r0, r3
 801686a:	f7f8 fc3d 	bl	800f0e8 <SecureElementDeriveAndStoreKey>
 801686e:	4603      	mov	r3, r0
 8016870:	2b00      	cmp	r3, #0
 8016872:	d001      	beq.n	8016878 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016874:	230f      	movs	r3, #15
 8016876:	e000      	b.n	801687a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016878:	2300      	movs	r3, #0
}
 801687a:	4618      	mov	r0, r3
 801687c:	3720      	adds	r7, #32
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
	...

08016884 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	6039      	str	r1, [r7, #0]
 801688e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d101      	bne.n	801689a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016896:	230a      	movs	r3, #10
 8016898:	e03b      	b.n	8016912 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801689a:	79fb      	ldrb	r3, [r7, #7]
 801689c:	3b01      	subs	r3, #1
 801689e:	2b03      	cmp	r3, #3
 80168a0:	d834      	bhi.n	801690c <GetLastFcntDown+0x88>
 80168a2:	a201      	add	r2, pc, #4	; (adr r2, 80168a8 <GetLastFcntDown+0x24>)
 80168a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168a8:	080168b9 	.word	0x080168b9
 80168ac:	080168d1 	.word	0x080168d1
 80168b0:	080168e9 	.word	0x080168e9
 80168b4:	08016901 	.word	0x08016901
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80168b8:	4b18      	ldr	r3, [pc, #96]	; (801691c <GetLastFcntDown+0x98>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	691a      	ldr	r2, [r3, #16]
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 80168c2:	4b16      	ldr	r3, [pc, #88]	; (801691c <GetLastFcntDown+0x98>)
 80168c4:	681a      	ldr	r2, [r3, #0]
 80168c6:	4b15      	ldr	r3, [pc, #84]	; (801691c <GetLastFcntDown+0x98>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	6912      	ldr	r2, [r2, #16]
 80168cc:	621a      	str	r2, [r3, #32]
            break;
 80168ce:	e01f      	b.n	8016910 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80168d0:	4b12      	ldr	r3, [pc, #72]	; (801691c <GetLastFcntDown+0x98>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	695a      	ldr	r2, [r3, #20]
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80168da:	4b10      	ldr	r3, [pc, #64]	; (801691c <GetLastFcntDown+0x98>)
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	4b0f      	ldr	r3, [pc, #60]	; (801691c <GetLastFcntDown+0x98>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	6952      	ldr	r2, [r2, #20]
 80168e4:	621a      	str	r2, [r3, #32]
            break;
 80168e6:	e013      	b.n	8016910 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80168e8:	4b0c      	ldr	r3, [pc, #48]	; (801691c <GetLastFcntDown+0x98>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	699a      	ldr	r2, [r3, #24]
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80168f2:	4b0a      	ldr	r3, [pc, #40]	; (801691c <GetLastFcntDown+0x98>)
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	4b09      	ldr	r3, [pc, #36]	; (801691c <GetLastFcntDown+0x98>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	6992      	ldr	r2, [r2, #24]
 80168fc:	621a      	str	r2, [r3, #32]
            break;
 80168fe:	e007      	b.n	8016910 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016900:	4b06      	ldr	r3, [pc, #24]	; (801691c <GetLastFcntDown+0x98>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	69da      	ldr	r2, [r3, #28]
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	601a      	str	r2, [r3, #0]
            break;
 801690a:	e001      	b.n	8016910 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801690c:	2305      	movs	r3, #5
 801690e:	e000      	b.n	8016912 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016910:	2300      	movs	r3, #0
}
 8016912:	4618      	mov	r0, r3
 8016914:	370c      	adds	r7, #12
 8016916:	46bd      	mov	sp, r7
 8016918:	bc80      	pop	{r7}
 801691a:	4770      	bx	lr
 801691c:	20004040 	.word	0x20004040

08016920 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b084      	sub	sp, #16
 8016924:	af00      	add	r7, sp, #0
 8016926:	4603      	mov	r3, r0
 8016928:	6039      	str	r1, [r7, #0]
 801692a:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 801692c:	2300      	movs	r3, #0
 801692e:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8016930:	f107 020c 	add.w	r2, r7, #12
 8016934:	79fb      	ldrb	r3, [r7, #7]
 8016936:	4611      	mov	r1, r2
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff ffa3 	bl	8016884 <GetLastFcntDown>
 801693e:	4603      	mov	r3, r0
 8016940:	2b00      	cmp	r3, #0
 8016942:	d001      	beq.n	8016948 <CheckFCntDown+0x28>
    {
        return false;
 8016944:	2300      	movs	r3, #0
 8016946:	e00a      	b.n	801695e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	683a      	ldr	r2, [r7, #0]
 801694c:	429a      	cmp	r2, r3
 801694e:	d803      	bhi.n	8016958 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8016950:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8016952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016956:	d101      	bne.n	801695c <CheckFCntDown+0x3c>
    {
        return true;
 8016958:	2301      	movs	r3, #1
 801695a:	e000      	b.n	801695e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 801695c:	2300      	movs	r3, #0
    }
}
 801695e:	4618      	mov	r0, r3
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
	...

08016968 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	4603      	mov	r3, r0
 8016970:	6039      	str	r1, [r7, #0]
 8016972:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016974:	79fb      	ldrb	r3, [r7, #7]
 8016976:	3b01      	subs	r3, #1
 8016978:	2b03      	cmp	r3, #3
 801697a:	d81f      	bhi.n	80169bc <UpdateFCntDown+0x54>
 801697c:	a201      	add	r2, pc, #4	; (adr r2, 8016984 <UpdateFCntDown+0x1c>)
 801697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016982:	bf00      	nop
 8016984:	08016995 	.word	0x08016995
 8016988:	0801699f 	.word	0x0801699f
 801698c:	080169a9 	.word	0x080169a9
 8016990:	080169b3 	.word	0x080169b3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016994:	4b0c      	ldr	r3, [pc, #48]	; (80169c8 <UpdateFCntDown+0x60>)
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	683a      	ldr	r2, [r7, #0]
 801699a:	611a      	str	r2, [r3, #16]
            break;
 801699c:	e00f      	b.n	80169be <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801699e:	4b0a      	ldr	r3, [pc, #40]	; (80169c8 <UpdateFCntDown+0x60>)
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	683a      	ldr	r2, [r7, #0]
 80169a4:	615a      	str	r2, [r3, #20]
            break;
 80169a6:	e00a      	b.n	80169be <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80169a8:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <UpdateFCntDown+0x60>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	683a      	ldr	r2, [r7, #0]
 80169ae:	619a      	str	r2, [r3, #24]
            break;
 80169b0:	e005      	b.n	80169be <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80169b2:	4b05      	ldr	r3, [pc, #20]	; (80169c8 <UpdateFCntDown+0x60>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	683a      	ldr	r2, [r7, #0]
 80169b8:	61da      	str	r2, [r3, #28]
            break;
 80169ba:	e000      	b.n	80169be <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80169bc:	bf00      	nop
    }
}
 80169be:	bf00      	nop
 80169c0:	370c      	adds	r7, #12
 80169c2:	46bd      	mov	sp, r7
 80169c4:	bc80      	pop	{r7}
 80169c6:	4770      	bx	lr
 80169c8:	20004040 	.word	0x20004040

080169cc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80169cc:	b480      	push	{r7}
 80169ce:	b083      	sub	sp, #12
 80169d0:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80169d2:	4b18      	ldr	r3, [pc, #96]	; (8016a34 <ResetFCnts+0x68>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2200      	movs	r2, #0
 80169d8:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80169da:	4b16      	ldr	r3, [pc, #88]	; (8016a34 <ResetFCnts+0x68>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	f04f 32ff 	mov.w	r2, #4294967295
 80169e2:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80169e4:	4b13      	ldr	r3, [pc, #76]	; (8016a34 <ResetFCnts+0x68>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	f04f 32ff 	mov.w	r2, #4294967295
 80169ec:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80169ee:	4b11      	ldr	r3, [pc, #68]	; (8016a34 <ResetFCnts+0x68>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	f04f 32ff 	mov.w	r2, #4294967295
 80169f6:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80169f8:	4b0e      	ldr	r3, [pc, #56]	; (8016a34 <ResetFCnts+0x68>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	4b0d      	ldr	r3, [pc, #52]	; (8016a34 <ResetFCnts+0x68>)
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	6992      	ldr	r2, [r2, #24]
 8016a02:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a04:	2300      	movs	r3, #0
 8016a06:	607b      	str	r3, [r7, #4]
 8016a08:	e00b      	b.n	8016a22 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8016a0a:	4b0a      	ldr	r3, [pc, #40]	; (8016a34 <ResetFCnts+0x68>)
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	3306      	adds	r3, #6
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	4413      	add	r3, r2
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	3301      	adds	r3, #1
 8016a20:	607b      	str	r3, [r7, #4]
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	ddf0      	ble.n	8016a0a <ResetFCnts+0x3e>
    }
}
 8016a28:	bf00      	nop
 8016a2a:	bf00      	nop
 8016a2c:	370c      	adds	r7, #12
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bc80      	pop	{r7}
 8016a32:	4770      	bx	lr
 8016a34:	20004040 	.word	0x20004040

08016a38 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016a38:	b580      	push	{r7, lr}
 8016a3a:	b082      	sub	sp, #8
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d101      	bne.n	8016a4a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a46:	2309      	movs	r3, #9
 8016a48:	e01c      	b.n	8016a84 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a4a:	4a10      	ldr	r2, [pc, #64]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a50:	4b0e      	ldr	r3, [pc, #56]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	2228      	movs	r2, #40	; 0x28
 8016a56:	2100      	movs	r1, #0
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f004 fddf 	bl	801b61c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a5e:	4b0b      	ldr	r3, [pc, #44]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2201      	movs	r2, #1
 8016a64:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a66:	4b09      	ldr	r3, [pc, #36]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a6e:	4b07      	ldr	r3, [pc, #28]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	2201      	movs	r2, #1
 8016a74:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a76:	4b05      	ldr	r3, [pc, #20]	; (8016a8c <LoRaMacCryptoInit+0x54>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a7e:	f7ff ffa5 	bl	80169cc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3708      	adds	r7, #8
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	20004040 	.word	0x20004040

08016a90 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a90:	b480      	push	{r7}
 8016a92:	b083      	sub	sp, #12
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a98:	4b04      	ldr	r3, [pc, #16]	; (8016aac <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016aa0:	2300      	movs	r3, #0
}
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	370c      	adds	r7, #12
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bc80      	pop	{r7}
 8016aaa:	4770      	bx	lr
 8016aac:	20004040 	.word	0x20004040

08016ab0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b083      	sub	sp, #12
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d101      	bne.n	8016ac2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016abe:	230a      	movs	r3, #10
 8016ac0:	e006      	b.n	8016ad0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016ac2:	4b06      	ldr	r3, [pc, #24]	; (8016adc <LoRaMacCryptoGetFCntUp+0x2c>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	68db      	ldr	r3, [r3, #12]
 8016ac8:	1c5a      	adds	r2, r3, #1
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ace:	2300      	movs	r3, #0
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bc80      	pop	{r7}
 8016ad8:	4770      	bx	lr
 8016ada:	bf00      	nop
 8016adc:	20004040 	.word	0x20004040

08016ae0 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016ae4:	b08a      	sub	sp, #40	; 0x28
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	613a      	str	r2, [r7, #16]
 8016aea:	60fb      	str	r3, [r7, #12]
 8016aec:	4603      	mov	r3, r0
 8016aee:	75fb      	strb	r3, [r7, #23]
 8016af0:	460b      	mov	r3, r1
 8016af2:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016af4:	2300      	movs	r3, #0
 8016af6:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016af8:	2300      	movs	r3, #0
 8016afa:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016afc:	2313      	movs	r3, #19
 8016afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d101      	bne.n	8016b0c <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b08:	230a      	movs	r3, #10
 8016b0a:	e057      	b.n	8016bbc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016b0c:	f107 021c 	add.w	r2, r7, #28
 8016b10:	7dfb      	ldrb	r3, [r7, #23]
 8016b12:	4611      	mov	r1, r2
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7ff feb5 	bl	8016884 <GetLastFcntDown>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d002      	beq.n	8016b2e <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016b2c:	e046      	b.n	8016bbc <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8016b2e:	69fb      	ldr	r3, [r7, #28]
 8016b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b34:	d103      	bne.n	8016b3e <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	693a      	ldr	r2, [r7, #16]
 8016b3a:	601a      	str	r2, [r3, #0]
 8016b3c:	e01e      	b.n	8016b7c <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b3e:	69fb      	ldr	r3, [r7, #28]
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	693a      	ldr	r2, [r7, #16]
 8016b44:	1ad3      	subs	r3, r2, r3
 8016b46:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	dd05      	ble.n	8016b5a <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b4e:	69fa      	ldr	r2, [r7, #28]
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	441a      	add	r2, r3
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	601a      	str	r2, [r3, #0]
 8016b58:	e010      	b.n	8016b7c <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d104      	bne.n	8016b6a <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b60:	69fa      	ldr	r2, [r7, #28]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b66:	2307      	movs	r3, #7
 8016b68:	e028      	b.n	8016bbc <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b6a:	69fb      	ldr	r3, [r7, #28]
 8016b6c:	0c1b      	lsrs	r3, r3, #16
 8016b6e:	041b      	lsls	r3, r3, #16
 8016b70:	693a      	ldr	r2, [r7, #16]
 8016b72:	4413      	add	r3, r2
 8016b74:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b7c:	4b12      	ldr	r3, [pc, #72]	; (8016bc8 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	789b      	ldrb	r3, [r3, #2]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d119      	bne.n	8016bba <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	603b      	str	r3, [r7, #0]
 8016b8e:	607a      	str	r2, [r7, #4]
 8016b90:	69fb      	ldr	r3, [r7, #28]
 8016b92:	2200      	movs	r2, #0
 8016b94:	469a      	mov	sl, r3
 8016b96:	4693      	mov	fp, r2
 8016b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b9c:	4611      	mov	r1, r2
 8016b9e:	ebb1 040a 	subs.w	r4, r1, sl
 8016ba2:	eb63 050b 	sbc.w	r5, r3, fp
 8016ba6:	8abb      	ldrh	r3, [r7, #20]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	4698      	mov	r8, r3
 8016bac:	4691      	mov	r9, r2
 8016bae:	4544      	cmp	r4, r8
 8016bb0:	eb75 0309 	sbcs.w	r3, r5, r9
 8016bb4:	db01      	blt.n	8016bba <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016bb6:	2308      	movs	r3, #8
 8016bb8:	e000      	b.n	8016bbc <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bba:	2300      	movs	r3, #0
}
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	3728      	adds	r7, #40	; 0x28
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20004040 	.word	0x20004040

08016bcc <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016bcc:	b480      	push	{r7}
 8016bce:	b085      	sub	sp, #20
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d101      	bne.n	8016bde <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016bda:	230a      	movs	r3, #10
 8016bdc:	e017      	b.n	8016c0e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bde:	2300      	movs	r3, #0
 8016be0:	60fb      	str	r3, [r7, #12]
 8016be2:	e010      	b.n	8016c06 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016be4:	4b0c      	ldr	r3, [pc, #48]	; (8016c18 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8016be6:	6819      	ldr	r1, [r3, #0]
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	222c      	movs	r2, #44	; 0x2c
 8016bec:	fb02 f303 	mul.w	r3, r2, r3
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	4413      	add	r3, r2
 8016bf4:	68fa      	ldr	r2, [r7, #12]
 8016bf6:	3206      	adds	r2, #6
 8016bf8:	0092      	lsls	r2, r2, #2
 8016bfa:	440a      	add	r2, r1
 8016bfc:	3204      	adds	r2, #4
 8016bfe:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	3301      	adds	r3, #1
 8016c04:	60fb      	str	r3, [r7, #12]
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	ddeb      	ble.n	8016be4 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016c0c:	2300      	movs	r3, #0
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3714      	adds	r7, #20
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bc80      	pop	{r7}
 8016c16:	4770      	bx	lr
 8016c18:	20004040 	.word	0x20004040

08016c1c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	4603      	mov	r3, r0
 8016c24:	6039      	str	r1, [r7, #0]
 8016c26:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016c28:	79fb      	ldrb	r3, [r7, #7]
 8016c2a:	6839      	ldr	r1, [r7, #0]
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7f8 f949 	bl	800eec4 <SecureElementSetKey>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d001      	beq.n	8016c3c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c38:	230f      	movs	r3, #15
 8016c3a:	e018      	b.n	8016c6e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8016c3c:	79fb      	ldrb	r3, [r7, #7]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d114      	bne.n	8016c6c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8016c42:	4b0d      	ldr	r3, [pc, #52]	; (8016c78 <LoRaMacCryptoSetKey+0x5c>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	789b      	ldrb	r3, [r3, #2]
 8016c48:	79fa      	ldrb	r2, [r7, #7]
 8016c4a:	4611      	mov	r1, r2
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f000 fa3f 	bl	80170d0 <LoRaMacCryptoDeriveMcRootKey>
 8016c52:	4603      	mov	r3, r0
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d001      	beq.n	8016c5c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c58:	230f      	movs	r3, #15
 8016c5a:	e008      	b.n	8016c6e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c5c:	2004      	movs	r0, #4
 8016c5e:	f000 fa62 	bl	8017126 <LoRaMacCryptoDeriveMcKEKey>
 8016c62:	4603      	mov	r3, r0
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d001      	beq.n	8016c6c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c68:	230f      	movs	r3, #15
 8016c6a:	e000      	b.n	8016c6e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c6c:	2300      	movs	r3, #0
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	20004040 	.word	0x20004040

08016c7c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b086      	sub	sp, #24
 8016c80:	af02      	add	r7, sp, #8
 8016c82:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d101      	bne.n	8016c8e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c8a:	230a      	movs	r3, #10
 8016c8c:	e033      	b.n	8016cf6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c8e:	2301      	movs	r3, #1
 8016c90:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c92:	2300      	movs	r3, #0
 8016c94:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c96:	f107 0308 	add.w	r3, r7, #8
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7f8 fae2 	bl	800f264 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016ca0:	68ba      	ldr	r2, [r7, #8]
 8016ca2:	4b17      	ldr	r3, [pc, #92]	; (8016d00 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	b292      	uxth	r2, r2
 8016ca8:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016caa:	4b15      	ldr	r3, [pc, #84]	; (8016d00 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	889a      	ldrh	r2, [r3, #4]
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f000 fc18 	bl	80174ea <LoRaMacSerializerJoinRequest>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cc0:	2311      	movs	r3, #17
 8016cc2:	e018      	b.n	8016cf6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	6819      	ldr	r1, [r3, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	3318      	adds	r3, #24
 8016ccc:	7bfa      	ldrb	r2, [r7, #15]
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	2213      	movs	r2, #19
 8016cd4:	2000      	movs	r0, #0
 8016cd6:	f7f8 f953 	bl	800ef80 <SecureElementComputeAesCmac>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d001      	beq.n	8016ce4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ce0:	230f      	movs	r3, #15
 8016ce2:	e008      	b.n	8016cf6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016ce4:	6878      	ldr	r0, [r7, #4]
 8016ce6:	f000 fc00 	bl	80174ea <LoRaMacSerializerJoinRequest>
 8016cea:	4603      	mov	r3, r0
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d001      	beq.n	8016cf4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cf0:	2311      	movs	r3, #17
 8016cf2:	e000      	b.n	8016cf6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cf4:	2300      	movs	r3, #0
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3710      	adds	r7, #16
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	20004040 	.word	0x20004040

08016d04 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016d04:	b590      	push	{r4, r7, lr}
 8016d06:	b097      	sub	sp, #92	; 0x5c
 8016d08:	af04      	add	r7, sp, #16
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	60b9      	str	r1, [r7, #8]
 8016d0e:	607a      	str	r2, [r7, #4]
 8016d10:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d002      	beq.n	8016d1e <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d101      	bne.n	8016d22 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016d1e:	230a      	movs	r3, #10
 8016d20:	e0bd      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d22:	2313      	movs	r3, #19
 8016d24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d28:	2300      	movs	r3, #0
 8016d2a:	61bb      	str	r3, [r7, #24]
 8016d2c:	f107 031c 	add.w	r3, r7, #28
 8016d30:	221d      	movs	r2, #29
 8016d32:	2100      	movs	r1, #0
 8016d34:	4618      	mov	r0, r3
 8016d36:	f009 fec3 	bl	8020ac0 <memset>
    uint8_t versionMinor         = 0;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d3e:	4b5a      	ldr	r3, [pc, #360]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	889b      	ldrh	r3, [r3, #4]
 8016d44:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681c      	ldr	r4, [r3, #0]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	791b      	ldrb	r3, [r3, #4]
 8016d50:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d54:	7bf8      	ldrb	r0, [r7, #15]
 8016d56:	f107 0217 	add.w	r2, r7, #23
 8016d5a:	9202      	str	r2, [sp, #8]
 8016d5c:	f107 0218 	add.w	r2, r7, #24
 8016d60:	9201      	str	r2, [sp, #4]
 8016d62:	9300      	str	r3, [sp, #0]
 8016d64:	4623      	mov	r3, r4
 8016d66:	460a      	mov	r2, r1
 8016d68:	68b9      	ldr	r1, [r7, #8]
 8016d6a:	f7f8 f9fd 	bl	800f168 <SecureElementProcessJoinAccept>
 8016d6e:	4603      	mov	r3, r0
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d001      	beq.n	8016d78 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d74:	230f      	movs	r3, #15
 8016d76:	e092      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6818      	ldr	r0, [r3, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	791b      	ldrb	r3, [r3, #4]
 8016d80:	b29a      	uxth	r2, r3
 8016d82:	f107 0318 	add.w	r3, r7, #24
 8016d86:	4619      	mov	r1, r3
 8016d88:	f004 fc0d 	bl	801b5a6 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f000 f9ed 	bl	801716c <LoRaMacParserJoinAccept>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d001      	beq.n	8016d9c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d98:	2310      	movs	r3, #16
 8016d9a:	e080      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	799b      	ldrb	r3, [r3, #6]
 8016da0:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	79db      	ldrb	r3, [r3, #7]
 8016da6:	021b      	lsls	r3, r3, #8
 8016da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016daa:	4313      	orrs	r3, r2
 8016dac:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	7a1b      	ldrb	r3, [r3, #8]
 8016db2:	041b      	lsls	r3, r3, #16
 8016db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016db6:	4313      	orrs	r3, r2
 8016db8:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8016dba:	4b3b      	ldr	r3, [pc, #236]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	689b      	ldr	r3, [r3, #8]
 8016dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016dc2:	429a      	cmp	r2, r3
 8016dc4:	d010      	beq.n	8016de8 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016dc6:	4b38      	ldr	r3, [pc, #224]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016dcc:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8016dce:	7dfb      	ldrb	r3, [r7, #23]
 8016dd0:	2100      	movs	r1, #0
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f000 f97c 	bl	80170d0 <LoRaMacCryptoDeriveMcRootKey>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d005      	beq.n	8016df2 <LoRaMacCryptoHandleJoinAccept+0xee>
 8016de6:	e001      	b.n	8016dec <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016de8:	2303      	movs	r3, #3
 8016dea:	e058      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8016dec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df0:	e055      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8016df2:	2004      	movs	r0, #4
 8016df4:	f000 f997 	bl	8017126 <LoRaMacCryptoDeriveMcKEKey>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dfe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d002      	beq.n	8016e0c <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8016e06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e0a:	e048      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	7a5b      	ldrb	r3, [r3, #9]
 8016e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	7a9b      	ldrb	r3, [r3, #10]
 8016e16:	021b      	lsls	r3, r3, #8
 8016e18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e1a:	4313      	orrs	r3, r2
 8016e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	7adb      	ldrb	r3, [r3, #11]
 8016e22:	041b      	lsls	r3, r3, #16
 8016e24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e26:	4313      	orrs	r3, r2
 8016e28:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e2a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e32:	2003      	movs	r0, #3
 8016e34:	f7ff fcd6 	bl	80167e4 <DeriveSessionKey10x>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d002      	beq.n	8016e4c <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8016e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e4a:	e028      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016e52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e54:	2002      	movs	r0, #2
 8016e56:	f7ff fcc5 	bl	80167e4 <DeriveSessionKey10x>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d002      	beq.n	8016e6e <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8016e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e6c:	e017      	b.n	8016e9e <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e6e:	4b0e      	ldr	r3, [pc, #56]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	7dfa      	ldrb	r2, [r7, #23]
 8016e74:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e76:	4b0c      	ldr	r3, [pc, #48]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e7e:	4b0a      	ldr	r3, [pc, #40]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f04f 32ff 	mov.w	r2, #4294967295
 8016e86:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e88:	4b07      	ldr	r3, [pc, #28]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8016e90:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8016e92:	4b05      	ldr	r3, [pc, #20]	; (8016ea8 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	f04f 32ff 	mov.w	r2, #4294967295
 8016e9a:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e9c:	2300      	movs	r3, #0
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	374c      	adds	r7, #76	; 0x4c
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd90      	pop	{r4, r7, pc}
 8016ea6:	bf00      	nop
 8016ea8:	20004040 	.word	0x20004040

08016eac <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016eac:	b590      	push	{r4, r7, lr}
 8016eae:	b08b      	sub	sp, #44	; 0x2c
 8016eb0:	af04      	add	r7, sp, #16
 8016eb2:	60f8      	str	r0, [r7, #12]
 8016eb4:	607b      	str	r3, [r7, #4]
 8016eb6:	460b      	mov	r3, r1
 8016eb8:	72fb      	strb	r3, [r7, #11]
 8016eba:	4613      	mov	r3, r2
 8016ebc:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016ebe:	2313      	movs	r3, #19
 8016ec0:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016ec2:	2303      	movs	r3, #3
 8016ec4:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d101      	bne.n	8016ed0 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ecc:	230a      	movs	r3, #10
 8016ece:	e05f      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016ed0:	4b31      	ldr	r3, [pc, #196]	; (8016f98 <LoRaMacCryptoSecureMessage+0xec>)
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	68db      	ldr	r3, [r3, #12]
 8016ed6:	68fa      	ldr	r2, [r7, #12]
 8016ed8:	429a      	cmp	r2, r3
 8016eda:	d201      	bcs.n	8016ee0 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016edc:	2306      	movs	r3, #6
 8016ede:	e057      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d101      	bne.n	8016eee <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016eea:	2302      	movs	r3, #2
 8016eec:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016eee:	4b2a      	ldr	r3, [pc, #168]	; (8016f98 <LoRaMacCryptoSecureMessage+0xec>)
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	68fa      	ldr	r2, [r7, #12]
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d916      	bls.n	8016f28 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f04:	b219      	sxth	r1, r3
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	689c      	ldr	r4, [r3, #8]
 8016f0a:	7dfa      	ldrb	r2, [r7, #23]
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	2300      	movs	r3, #0
 8016f12:	9300      	str	r3, [sp, #0]
 8016f14:	4623      	mov	r3, r4
 8016f16:	f7ff fa71 	bl	80163fc <PayloadEncrypt>
 8016f1a:	4603      	mov	r3, r0
 8016f1c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f1e:	7dbb      	ldrb	r3, [r7, #22]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f24:	7dbb      	ldrb	r3, [r7, #22]
 8016f26:	e033      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f28:	6878      	ldr	r0, [r7, #4]
 8016f2a:	f000 fb60 	bl	80175ee <LoRaMacSerializerData>
 8016f2e:	4603      	mov	r3, r0
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d001      	beq.n	8016f38 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f34:	2311      	movs	r3, #17
 8016f36:	e02b      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f38:	2302      	movs	r3, #2
 8016f3a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6818      	ldr	r0, [r3, #0]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	791b      	ldrb	r3, [r3, #4]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	3b04      	subs	r3, #4
 8016f48:	b299      	uxth	r1, r3
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	689b      	ldr	r3, [r3, #8]
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	322c      	adds	r2, #44	; 0x2c
 8016f52:	7dfc      	ldrb	r4, [r7, #23]
 8016f54:	9203      	str	r2, [sp, #12]
 8016f56:	68fa      	ldr	r2, [r7, #12]
 8016f58:	9202      	str	r2, [sp, #8]
 8016f5a:	9301      	str	r3, [sp, #4]
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	2300      	movs	r3, #0
 8016f62:	4622      	mov	r2, r4
 8016f64:	f7ff fb4b 	bl	80165fe <ComputeCmacB0>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f6c:	7dbb      	ldrb	r3, [r7, #22]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d001      	beq.n	8016f76 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f72:	7dbb      	ldrb	r3, [r7, #22]
 8016f74:	e00c      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f000 fb39 	bl	80175ee <LoRaMacSerializerData>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d001      	beq.n	8016f86 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f82:	2311      	movs	r3, #17
 8016f84:	e004      	b.n	8016f90 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f86:	4b04      	ldr	r3, [pc, #16]	; (8016f98 <LoRaMacCryptoSecureMessage+0xec>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	68fa      	ldr	r2, [r7, #12]
 8016f8c:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f8e:	2300      	movs	r3, #0
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	371c      	adds	r7, #28
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd90      	pop	{r4, r7, pc}
 8016f98:	20004040 	.word	0x20004040

08016f9c <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016f9c:	b590      	push	{r4, r7, lr}
 8016f9e:	b08b      	sub	sp, #44	; 0x2c
 8016fa0:	af04      	add	r7, sp, #16
 8016fa2:	60b9      	str	r1, [r7, #8]
 8016fa4:	607b      	str	r3, [r7, #4]
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	73fb      	strb	r3, [r7, #15]
 8016faa:	4613      	mov	r3, r2
 8016fac:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d101      	bne.n	8016fb8 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fb4:	230a      	movs	r3, #10
 8016fb6:	e084      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016fb8:	7bbb      	ldrb	r3, [r7, #14]
 8016fba:	6879      	ldr	r1, [r7, #4]
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	f7ff fcaf 	bl	8016920 <CheckFCntDown>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	f083 0301 	eor.w	r3, r3, #1
 8016fc8:	b2db      	uxtb	r3, r3
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d001      	beq.n	8016fd2 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016fce:	2306      	movs	r3, #6
 8016fd0:	e077      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016fd2:	2313      	movs	r3, #19
 8016fd4:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016fd6:	2303      	movs	r3, #3
 8016fd8:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016fda:	2302      	movs	r3, #2
 8016fdc:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fe0:	f000 f98f 	bl	8017302 <LoRaMacParserData>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d001      	beq.n	8016fee <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016fea:	2310      	movs	r3, #16
 8016fec:	e069      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016fee:	f107 0210 	add.w	r2, r7, #16
 8016ff2:	7bfb      	ldrb	r3, [r7, #15]
 8016ff4:	4611      	mov	r1, r2
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f7ff fbce 	bl	8016798 <GetKeyAddrItem>
 8016ffc:	4603      	mov	r3, r0
 8016ffe:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017000:	7d7b      	ldrb	r3, [r7, #21]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d001      	beq.n	801700a <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8017006:	7d7b      	ldrb	r3, [r7, #21]
 8017008:	e05b      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	785b      	ldrb	r3, [r3, #1]
 801700e:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	789b      	ldrb	r3, [r3, #2]
 8017014:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8017016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017018:	689b      	ldr	r3, [r3, #8]
 801701a:	68ba      	ldr	r2, [r7, #8]
 801701c:	429a      	cmp	r2, r3
 801701e:	d001      	beq.n	8017024 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017020:	2302      	movs	r3, #2
 8017022:	e04e      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8017024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017026:	7b1b      	ldrb	r3, [r3, #12]
 8017028:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801702c:	b2db      	uxtb	r3, r3
 801702e:	2b00      	cmp	r3, #0
 8017030:	bf14      	ite	ne
 8017032:	2301      	movne	r3, #1
 8017034:	2300      	moveq	r3, #0
 8017036:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017038:	4b24      	ldr	r3, [pc, #144]	; (80170cc <LoRaMacCryptoUnsecureMessage+0x130>)
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	789b      	ldrb	r3, [r3, #2]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d101      	bne.n	8017046 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017042:	2300      	movs	r3, #0
 8017044:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8017046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017048:	6818      	ldr	r0, [r3, #0]
 801704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704c:	791b      	ldrb	r3, [r3, #4]
 801704e:	b29b      	uxth	r3, r3
 8017050:	3b04      	subs	r3, #4
 8017052:	b299      	uxth	r1, r3
 8017054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017058:	7dbc      	ldrb	r4, [r7, #22]
 801705a:	7d3a      	ldrb	r2, [r7, #20]
 801705c:	9303      	str	r3, [sp, #12]
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	9302      	str	r3, [sp, #8]
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	9301      	str	r3, [sp, #4]
 8017066:	2301      	movs	r3, #1
 8017068:	9300      	str	r3, [sp, #0]
 801706a:	4623      	mov	r3, r4
 801706c:	f7ff fb05 	bl	801667a <VerifyCmacB0>
 8017070:	4603      	mov	r3, r0
 8017072:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017074:	7d7b      	ldrb	r3, [r7, #21]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d001      	beq.n	801707e <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801707a:	7d7b      	ldrb	r3, [r7, #21]
 801707c:	e021      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017080:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d101      	bne.n	801708c <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8017088:	2302      	movs	r3, #2
 801708a:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017096:	b219      	sxth	r1, r3
 8017098:	7dfa      	ldrb	r2, [r7, #23]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	9301      	str	r3, [sp, #4]
 801709e:	2301      	movs	r3, #1
 80170a0:	9300      	str	r3, [sp, #0]
 80170a2:	68bb      	ldr	r3, [r7, #8]
 80170a4:	f7ff f9aa 	bl	80163fc <PayloadEncrypt>
 80170a8:	4603      	mov	r3, r0
 80170aa:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170ac:	7d7b      	ldrb	r3, [r7, #21]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170b2:	7d7b      	ldrb	r3, [r7, #21]
 80170b4:	e005      	b.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80170b6:	7bbb      	ldrb	r3, [r7, #14]
 80170b8:	6879      	ldr	r1, [r7, #4]
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7ff fc54 	bl	8016968 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170c0:	2300      	movs	r3, #0
}
 80170c2:	4618      	mov	r0, r3
 80170c4:	371c      	adds	r7, #28
 80170c6:	46bd      	mov	sp, r7
 80170c8:	bd90      	pop	{r4, r7, pc}
 80170ca:	bf00      	nop
 80170cc:	20004040 	.word	0x20004040

080170d0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b086      	sub	sp, #24
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	4603      	mov	r3, r0
 80170d8:	460a      	mov	r2, r1
 80170da:	71fb      	strb	r3, [r7, #7]
 80170dc:	4613      	mov	r3, r2
 80170de:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80170e0:	79bb      	ldrb	r3, [r7, #6]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d001      	beq.n	80170ea <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80170e6:	230b      	movs	r3, #11
 80170e8:	e019      	b.n	801711e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 80170ea:	2300      	movs	r3, #0
 80170ec:	60bb      	str	r3, [r7, #8]
 80170ee:	f107 030c 	add.w	r3, r7, #12
 80170f2:	2200      	movs	r2, #0
 80170f4:	601a      	str	r2, [r3, #0]
 80170f6:	605a      	str	r2, [r3, #4]
 80170f8:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 80170fa:	79fb      	ldrb	r3, [r7, #7]
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d101      	bne.n	8017104 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8017100:	2320      	movs	r3, #32
 8017102:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8017104:	79b9      	ldrb	r1, [r7, #6]
 8017106:	f107 0308 	add.w	r3, r7, #8
 801710a:	2204      	movs	r2, #4
 801710c:	4618      	mov	r0, r3
 801710e:	f7f7 ffeb 	bl	800f0e8 <SecureElementDeriveAndStoreKey>
 8017112:	4603      	mov	r3, r0
 8017114:	2b00      	cmp	r3, #0
 8017116:	d001      	beq.n	801711c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017118:	230f      	movs	r3, #15
 801711a:	e000      	b.n	801711e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801711c:	2300      	movs	r3, #0
}
 801711e:	4618      	mov	r0, r3
 8017120:	3718      	adds	r7, #24
 8017122:	46bd      	mov	sp, r7
 8017124:	bd80      	pop	{r7, pc}

08017126 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8017126:	b580      	push	{r7, lr}
 8017128:	b086      	sub	sp, #24
 801712a:	af00      	add	r7, sp, #0
 801712c:	4603      	mov	r3, r0
 801712e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8017130:	79fb      	ldrb	r3, [r7, #7]
 8017132:	2b04      	cmp	r3, #4
 8017134:	d001      	beq.n	801713a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017136:	230b      	movs	r3, #11
 8017138:	e014      	b.n	8017164 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 801713a:	2300      	movs	r3, #0
 801713c:	60bb      	str	r3, [r7, #8]
 801713e:	f107 030c 	add.w	r3, r7, #12
 8017142:	2200      	movs	r2, #0
 8017144:	601a      	str	r2, [r3, #0]
 8017146:	605a      	str	r2, [r3, #4]
 8017148:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 801714a:	79f9      	ldrb	r1, [r7, #7]
 801714c:	f107 0308 	add.w	r3, r7, #8
 8017150:	227f      	movs	r2, #127	; 0x7f
 8017152:	4618      	mov	r0, r3
 8017154:	f7f7 ffc8 	bl	800f0e8 <SecureElementDeriveAndStoreKey>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	d001      	beq.n	8017162 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801715e:	230f      	movs	r3, #15
 8017160:	e000      	b.n	8017164 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017162:	2300      	movs	r3, #0
}
 8017164:	4618      	mov	r0, r3
 8017166:	3718      	adds	r7, #24
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}

0801716c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d003      	beq.n	8017182 <LoRaMacParserJoinAccept+0x16>
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	2b00      	cmp	r3, #0
 8017180:	d101      	bne.n	8017186 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017182:	2302      	movs	r3, #2
 8017184:	e0b9      	b.n	80172fa <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017186:	2300      	movs	r3, #0
 8017188:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	89fb      	ldrh	r3, [r7, #14]
 8017190:	1c59      	adds	r1, r3, #1
 8017192:	81f9      	strh	r1, [r7, #14]
 8017194:	4413      	add	r3, r2
 8017196:	781a      	ldrb	r2, [r3, #0]
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	1d98      	adds	r0, r3, #6
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681a      	ldr	r2, [r3, #0]
 80171a4:	89fb      	ldrh	r3, [r7, #14]
 80171a6:	4413      	add	r3, r2
 80171a8:	2203      	movs	r2, #3
 80171aa:	4619      	mov	r1, r3
 80171ac:	f004 f9fb 	bl	801b5a6 <memcpy1>
    bufItr = bufItr + 3;
 80171b0:	89fb      	ldrh	r3, [r7, #14]
 80171b2:	3303      	adds	r3, #3
 80171b4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f103 0009 	add.w	r0, r3, #9
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681a      	ldr	r2, [r3, #0]
 80171c0:	89fb      	ldrh	r3, [r7, #14]
 80171c2:	4413      	add	r3, r2
 80171c4:	2203      	movs	r2, #3
 80171c6:	4619      	mov	r1, r3
 80171c8:	f004 f9ed 	bl	801b5a6 <memcpy1>
    bufItr = bufItr + 3;
 80171cc:	89fb      	ldrh	r3, [r7, #14]
 80171ce:	3303      	adds	r3, #3
 80171d0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	89fb      	ldrh	r3, [r7, #14]
 80171d8:	1c59      	adds	r1, r3, #1
 80171da:	81f9      	strh	r1, [r7, #14]
 80171dc:	4413      	add	r3, r2
 80171de:	781b      	ldrb	r3, [r3, #0]
 80171e0:	461a      	mov	r2, r3
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	89fb      	ldrh	r3, [r7, #14]
 80171ec:	1c59      	adds	r1, r3, #1
 80171ee:	81f9      	strh	r1, [r7, #14]
 80171f0:	4413      	add	r3, r2
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	021a      	lsls	r2, r3, #8
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	431a      	orrs	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	89fb      	ldrh	r3, [r7, #14]
 8017206:	1c59      	adds	r1, r3, #1
 8017208:	81f9      	strh	r1, [r7, #14]
 801720a:	4413      	add	r3, r2
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	041a      	lsls	r2, r3, #16
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	431a      	orrs	r2, r3
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	89fb      	ldrh	r3, [r7, #14]
 8017220:	1c59      	adds	r1, r3, #1
 8017222:	81f9      	strh	r1, [r7, #14]
 8017224:	4413      	add	r3, r2
 8017226:	781b      	ldrb	r3, [r3, #0]
 8017228:	061a      	lsls	r2, r3, #24
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	68db      	ldr	r3, [r3, #12]
 801722e:	431a      	orrs	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	89fb      	ldrh	r3, [r7, #14]
 801723a:	1c59      	adds	r1, r3, #1
 801723c:	81f9      	strh	r1, [r7, #14]
 801723e:	4413      	add	r3, r2
 8017240:	781a      	ldrb	r2, [r3, #0]
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	681a      	ldr	r2, [r3, #0]
 801724a:	89fb      	ldrh	r3, [r7, #14]
 801724c:	1c59      	adds	r1, r3, #1
 801724e:	81f9      	strh	r1, [r7, #14]
 8017250:	4413      	add	r3, r2
 8017252:	781a      	ldrb	r2, [r3, #0]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	791b      	ldrb	r3, [r3, #4]
 801725c:	1f1a      	subs	r2, r3, #4
 801725e:	89fb      	ldrh	r3, [r7, #14]
 8017260:	1ad3      	subs	r3, r2, r3
 8017262:	2b10      	cmp	r3, #16
 8017264:	d10e      	bne.n	8017284 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	f103 0012 	add.w	r0, r3, #18
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	681a      	ldr	r2, [r3, #0]
 8017270:	89fb      	ldrh	r3, [r7, #14]
 8017272:	4413      	add	r3, r2
 8017274:	2210      	movs	r2, #16
 8017276:	4619      	mov	r1, r3
 8017278:	f004 f995 	bl	801b5a6 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801727c:	89fb      	ldrh	r3, [r7, #14]
 801727e:	3310      	adds	r3, #16
 8017280:	81fb      	strh	r3, [r7, #14]
 8017282:	e008      	b.n	8017296 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	791b      	ldrb	r3, [r3, #4]
 8017288:	1f1a      	subs	r2, r3, #4
 801728a:	89fb      	ldrh	r3, [r7, #14]
 801728c:	1ad3      	subs	r3, r2, r3
 801728e:	2b00      	cmp	r3, #0
 8017290:	dd01      	ble.n	8017296 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017292:	2301      	movs	r3, #1
 8017294:	e031      	b.n	80172fa <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681a      	ldr	r2, [r3, #0]
 801729a:	89fb      	ldrh	r3, [r7, #14]
 801729c:	1c59      	adds	r1, r3, #1
 801729e:	81f9      	strh	r1, [r7, #14]
 80172a0:	4413      	add	r3, r2
 80172a2:	781b      	ldrb	r3, [r3, #0]
 80172a4:	461a      	mov	r2, r3
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	89fb      	ldrh	r3, [r7, #14]
 80172b0:	1c59      	adds	r1, r3, #1
 80172b2:	81f9      	strh	r1, [r7, #14]
 80172b4:	4413      	add	r3, r2
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	021a      	lsls	r2, r3, #8
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172be:	431a      	orrs	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	89fb      	ldrh	r3, [r7, #14]
 80172ca:	1c59      	adds	r1, r3, #1
 80172cc:	81f9      	strh	r1, [r7, #14]
 80172ce:	4413      	add	r3, r2
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	041a      	lsls	r2, r3, #16
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d8:	431a      	orrs	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681a      	ldr	r2, [r3, #0]
 80172e2:	89fb      	ldrh	r3, [r7, #14]
 80172e4:	1c59      	adds	r1, r3, #1
 80172e6:	81f9      	strh	r1, [r7, #14]
 80172e8:	4413      	add	r3, r2
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	061a      	lsls	r2, r3, #24
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172f2:	431a      	orrs	r2, r3
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172f8:	2300      	movs	r3, #0
}
 80172fa:	4618      	mov	r0, r3
 80172fc:	3710      	adds	r7, #16
 80172fe:	46bd      	mov	sp, r7
 8017300:	bd80      	pop	{r7, pc}

08017302 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8017302:	b580      	push	{r7, lr}
 8017304:	b084      	sub	sp, #16
 8017306:	af00      	add	r7, sp, #0
 8017308:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d003      	beq.n	8017318 <LoRaMacParserData+0x16>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d101      	bne.n	801731c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017318:	2302      	movs	r3, #2
 801731a:	e0e2      	b.n	80174e2 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 801731c:	2300      	movs	r3, #0
 801731e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	681a      	ldr	r2, [r3, #0]
 8017324:	89fb      	ldrh	r3, [r7, #14]
 8017326:	1c59      	adds	r1, r3, #1
 8017328:	81f9      	strh	r1, [r7, #14]
 801732a:	4413      	add	r3, r2
 801732c:	781a      	ldrb	r2, [r3, #0]
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681a      	ldr	r2, [r3, #0]
 8017336:	89fb      	ldrh	r3, [r7, #14]
 8017338:	1c59      	adds	r1, r3, #1
 801733a:	81f9      	strh	r1, [r7, #14]
 801733c:	4413      	add	r3, r2
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	461a      	mov	r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681a      	ldr	r2, [r3, #0]
 801734a:	89fb      	ldrh	r3, [r7, #14]
 801734c:	1c59      	adds	r1, r3, #1
 801734e:	81f9      	strh	r1, [r7, #14]
 8017350:	4413      	add	r3, r2
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	021a      	lsls	r2, r3, #8
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	689b      	ldr	r3, [r3, #8]
 801735a:	431a      	orrs	r2, r3
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	89fb      	ldrh	r3, [r7, #14]
 8017366:	1c59      	adds	r1, r3, #1
 8017368:	81f9      	strh	r1, [r7, #14]
 801736a:	4413      	add	r3, r2
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	041a      	lsls	r2, r3, #16
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	431a      	orrs	r2, r3
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681a      	ldr	r2, [r3, #0]
 801737e:	89fb      	ldrh	r3, [r7, #14]
 8017380:	1c59      	adds	r1, r3, #1
 8017382:	81f9      	strh	r1, [r7, #14]
 8017384:	4413      	add	r3, r2
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	061a      	lsls	r2, r3, #24
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	689b      	ldr	r3, [r3, #8]
 801738e:	431a      	orrs	r2, r3
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	89fb      	ldrh	r3, [r7, #14]
 801739a:	1c59      	adds	r1, r3, #1
 801739c:	81f9      	strh	r1, [r7, #14]
 801739e:	4413      	add	r3, r2
 80173a0:	781a      	ldrb	r2, [r3, #0]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681a      	ldr	r2, [r3, #0]
 80173aa:	89fb      	ldrh	r3, [r7, #14]
 80173ac:	1c59      	adds	r1, r3, #1
 80173ae:	81f9      	strh	r1, [r7, #14]
 80173b0:	4413      	add	r3, r2
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	b29a      	uxth	r2, r3
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	681a      	ldr	r2, [r3, #0]
 80173be:	89fb      	ldrh	r3, [r7, #14]
 80173c0:	1c59      	adds	r1, r3, #1
 80173c2:	81f9      	strh	r1, [r7, #14]
 80173c4:	4413      	add	r3, r2
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	0219      	lsls	r1, r3, #8
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	89db      	ldrh	r3, [r3, #14]
 80173ce:	b21a      	sxth	r2, r3
 80173d0:	b20b      	sxth	r3, r1
 80173d2:	4313      	orrs	r3, r2
 80173d4:	b21b      	sxth	r3, r3
 80173d6:	b29a      	uxth	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	f103 0010 	add.w	r0, r3, #16
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	681a      	ldr	r2, [r3, #0]
 80173e6:	89fb      	ldrh	r3, [r7, #14]
 80173e8:	18d1      	adds	r1, r2, r3
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	7b1b      	ldrb	r3, [r3, #12]
 80173ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	b29b      	uxth	r3, r3
 80173f6:	461a      	mov	r2, r3
 80173f8:	f004 f8d5 	bl	801b5a6 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	7b1b      	ldrb	r3, [r3, #12]
 8017400:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017404:	b2db      	uxtb	r3, r3
 8017406:	b29a      	uxth	r2, r3
 8017408:	89fb      	ldrh	r3, [r7, #14]
 801740a:	4413      	add	r3, r2
 801740c:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2200      	movs	r2, #0
 8017412:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2200      	movs	r2, #0
 801741a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	791b      	ldrb	r3, [r3, #4]
 8017422:	461a      	mov	r2, r3
 8017424:	89fb      	ldrh	r3, [r7, #14]
 8017426:	1ad3      	subs	r3, r2, r3
 8017428:	2b04      	cmp	r3, #4
 801742a:	dd28      	ble.n	801747e <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	681a      	ldr	r2, [r3, #0]
 8017430:	89fb      	ldrh	r3, [r7, #14]
 8017432:	1c59      	adds	r1, r3, #1
 8017434:	81f9      	strh	r1, [r7, #14]
 8017436:	4413      	add	r3, r2
 8017438:	781a      	ldrb	r2, [r3, #0]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	791a      	ldrb	r2, [r3, #4]
 8017444:	89fb      	ldrh	r3, [r7, #14]
 8017446:	b2db      	uxtb	r3, r3
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	b2db      	uxtb	r3, r3
 801744c:	3b04      	subs	r3, #4
 801744e:	b2da      	uxtb	r2, r3
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	89fb      	ldrh	r3, [r7, #14]
 8017460:	18d1      	adds	r1, r2, r3
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017468:	b29b      	uxth	r3, r3
 801746a:	461a      	mov	r2, r3
 801746c:	f004 f89b 	bl	801b5a6 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017476:	b29a      	uxth	r2, r3
 8017478:	89fb      	ldrh	r3, [r7, #14]
 801747a:	4413      	add	r3, r2
 801747c:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	681a      	ldr	r2, [r3, #0]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	791b      	ldrb	r3, [r3, #4]
 8017486:	3b04      	subs	r3, #4
 8017488:	4413      	add	r3, r2
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	461a      	mov	r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6819      	ldr	r1, [r3, #0]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	791b      	ldrb	r3, [r3, #4]
 801749e:	3b03      	subs	r3, #3
 80174a0:	440b      	add	r3, r1
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	021b      	lsls	r3, r3, #8
 80174a6:	431a      	orrs	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6819      	ldr	r1, [r3, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	791b      	ldrb	r3, [r3, #4]
 80174b8:	3b02      	subs	r3, #2
 80174ba:	440b      	add	r3, r1
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	041b      	lsls	r3, r3, #16
 80174c0:	431a      	orrs	r2, r3
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6819      	ldr	r1, [r3, #0]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	791b      	ldrb	r3, [r3, #4]
 80174d2:	3b01      	subs	r3, #1
 80174d4:	440b      	add	r3, r1
 80174d6:	781b      	ldrb	r3, [r3, #0]
 80174d8:	061b      	lsls	r3, r3, #24
 80174da:	431a      	orrs	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3710      	adds	r7, #16
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}

080174ea <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174ea:	b580      	push	{r7, lr}
 80174ec:	b084      	sub	sp, #16
 80174ee:	af00      	add	r7, sp, #0
 80174f0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d003      	beq.n	8017500 <LoRaMacSerializerJoinRequest+0x16>
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d101      	bne.n	8017504 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017500:	2301      	movs	r3, #1
 8017502:	e070      	b.n	80175e6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8017504:	2300      	movs	r3, #0
 8017506:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	791b      	ldrb	r3, [r3, #4]
 801750c:	2b16      	cmp	r3, #22
 801750e:	d801      	bhi.n	8017514 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017510:	2302      	movs	r3, #2
 8017512:	e068      	b.n	80175e6 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	89fb      	ldrh	r3, [r7, #14]
 801751a:	1c59      	adds	r1, r3, #1
 801751c:	81f9      	strh	r1, [r7, #14]
 801751e:	4413      	add	r3, r2
 8017520:	687a      	ldr	r2, [r7, #4]
 8017522:	7952      	ldrb	r2, [r2, #5]
 8017524:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	89fb      	ldrh	r3, [r7, #14]
 801752c:	18d0      	adds	r0, r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	3306      	adds	r3, #6
 8017532:	2208      	movs	r2, #8
 8017534:	4619      	mov	r1, r3
 8017536:	f004 f851 	bl	801b5dc <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801753a:	89fb      	ldrh	r3, [r7, #14]
 801753c:	3308      	adds	r3, #8
 801753e:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681a      	ldr	r2, [r3, #0]
 8017544:	89fb      	ldrh	r3, [r7, #14]
 8017546:	18d0      	adds	r0, r2, r3
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	330e      	adds	r3, #14
 801754c:	2208      	movs	r2, #8
 801754e:	4619      	mov	r1, r3
 8017550:	f004 f844 	bl	801b5dc <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017554:	89fb      	ldrh	r3, [r7, #14]
 8017556:	3308      	adds	r3, #8
 8017558:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	8ad9      	ldrh	r1, [r3, #22]
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	681a      	ldr	r2, [r3, #0]
 8017562:	89fb      	ldrh	r3, [r7, #14]
 8017564:	1c58      	adds	r0, r3, #1
 8017566:	81f8      	strh	r0, [r7, #14]
 8017568:	4413      	add	r3, r2
 801756a:	b2ca      	uxtb	r2, r1
 801756c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	8adb      	ldrh	r3, [r3, #22]
 8017572:	0a1b      	lsrs	r3, r3, #8
 8017574:	b299      	uxth	r1, r3
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	89fb      	ldrh	r3, [r7, #14]
 801757c:	1c58      	adds	r0, r3, #1
 801757e:	81f8      	strh	r0, [r7, #14]
 8017580:	4413      	add	r3, r2
 8017582:	b2ca      	uxtb	r2, r1
 8017584:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6999      	ldr	r1, [r3, #24]
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681a      	ldr	r2, [r3, #0]
 801758e:	89fb      	ldrh	r3, [r7, #14]
 8017590:	1c58      	adds	r0, r3, #1
 8017592:	81f8      	strh	r0, [r7, #14]
 8017594:	4413      	add	r3, r2
 8017596:	b2ca      	uxtb	r2, r1
 8017598:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	699b      	ldr	r3, [r3, #24]
 801759e:	0a19      	lsrs	r1, r3, #8
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	681a      	ldr	r2, [r3, #0]
 80175a4:	89fb      	ldrh	r3, [r7, #14]
 80175a6:	1c58      	adds	r0, r3, #1
 80175a8:	81f8      	strh	r0, [r7, #14]
 80175aa:	4413      	add	r3, r2
 80175ac:	b2ca      	uxtb	r2, r1
 80175ae:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	699b      	ldr	r3, [r3, #24]
 80175b4:	0c19      	lsrs	r1, r3, #16
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	89fb      	ldrh	r3, [r7, #14]
 80175bc:	1c58      	adds	r0, r3, #1
 80175be:	81f8      	strh	r0, [r7, #14]
 80175c0:	4413      	add	r3, r2
 80175c2:	b2ca      	uxtb	r2, r1
 80175c4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	699b      	ldr	r3, [r3, #24]
 80175ca:	0e19      	lsrs	r1, r3, #24
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	89fb      	ldrh	r3, [r7, #14]
 80175d2:	1c58      	adds	r0, r3, #1
 80175d4:	81f8      	strh	r0, [r7, #14]
 80175d6:	4413      	add	r3, r2
 80175d8:	b2ca      	uxtb	r2, r1
 80175da:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175dc:	89fb      	ldrh	r3, [r7, #14]
 80175de:	b2da      	uxtb	r2, r3
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175e4:	2300      	movs	r3, #0
}
 80175e6:	4618      	mov	r0, r3
 80175e8:	3710      	adds	r7, #16
 80175ea:	46bd      	mov	sp, r7
 80175ec:	bd80      	pop	{r7, pc}

080175ee <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175ee:	b580      	push	{r7, lr}
 80175f0:	b084      	sub	sp, #16
 80175f2:	af00      	add	r7, sp, #0
 80175f4:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d003      	beq.n	8017604 <LoRaMacSerializerData+0x16>
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d101      	bne.n	8017608 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8017604:	2301      	movs	r3, #1
 8017606:	e0e5      	b.n	80177d4 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8017608:	2300      	movs	r3, #0
 801760a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 801760c:	2308      	movs	r3, #8
 801760e:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	7b1b      	ldrb	r3, [r3, #12]
 8017614:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017618:	b2db      	uxtb	r3, r3
 801761a:	b29a      	uxth	r2, r3
 801761c:	89bb      	ldrh	r3, [r7, #12]
 801761e:	4413      	add	r3, r2
 8017620:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017628:	2b00      	cmp	r3, #0
 801762a:	d002      	beq.n	8017632 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801762c:	89bb      	ldrh	r3, [r7, #12]
 801762e:	3301      	adds	r3, #1
 8017630:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017638:	b29a      	uxth	r2, r3
 801763a:	89bb      	ldrh	r3, [r7, #12]
 801763c:	4413      	add	r3, r2
 801763e:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017640:	89bb      	ldrh	r3, [r7, #12]
 8017642:	3304      	adds	r3, #4
 8017644:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	791b      	ldrb	r3, [r3, #4]
 801764a:	b29b      	uxth	r3, r3
 801764c:	89ba      	ldrh	r2, [r7, #12]
 801764e:	429a      	cmp	r2, r3
 8017650:	d901      	bls.n	8017656 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017652:	2302      	movs	r3, #2
 8017654:	e0be      	b.n	80177d4 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681a      	ldr	r2, [r3, #0]
 801765a:	89fb      	ldrh	r3, [r7, #14]
 801765c:	1c59      	adds	r1, r3, #1
 801765e:	81f9      	strh	r1, [r7, #14]
 8017660:	4413      	add	r3, r2
 8017662:	687a      	ldr	r2, [r7, #4]
 8017664:	7952      	ldrb	r2, [r2, #5]
 8017666:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	6899      	ldr	r1, [r3, #8]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681a      	ldr	r2, [r3, #0]
 8017670:	89fb      	ldrh	r3, [r7, #14]
 8017672:	1c58      	adds	r0, r3, #1
 8017674:	81f8      	strh	r0, [r7, #14]
 8017676:	4413      	add	r3, r2
 8017678:	b2ca      	uxtb	r2, r1
 801767a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	689b      	ldr	r3, [r3, #8]
 8017680:	0a19      	lsrs	r1, r3, #8
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681a      	ldr	r2, [r3, #0]
 8017686:	89fb      	ldrh	r3, [r7, #14]
 8017688:	1c58      	adds	r0, r3, #1
 801768a:	81f8      	strh	r0, [r7, #14]
 801768c:	4413      	add	r3, r2
 801768e:	b2ca      	uxtb	r2, r1
 8017690:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	689b      	ldr	r3, [r3, #8]
 8017696:	0c19      	lsrs	r1, r3, #16
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	681a      	ldr	r2, [r3, #0]
 801769c:	89fb      	ldrh	r3, [r7, #14]
 801769e:	1c58      	adds	r0, r3, #1
 80176a0:	81f8      	strh	r0, [r7, #14]
 80176a2:	4413      	add	r3, r2
 80176a4:	b2ca      	uxtb	r2, r1
 80176a6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	689b      	ldr	r3, [r3, #8]
 80176ac:	0e19      	lsrs	r1, r3, #24
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681a      	ldr	r2, [r3, #0]
 80176b2:	89fb      	ldrh	r3, [r7, #14]
 80176b4:	1c58      	adds	r0, r3, #1
 80176b6:	81f8      	strh	r0, [r7, #14]
 80176b8:	4413      	add	r3, r2
 80176ba:	b2ca      	uxtb	r2, r1
 80176bc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681a      	ldr	r2, [r3, #0]
 80176c2:	89fb      	ldrh	r3, [r7, #14]
 80176c4:	1c59      	adds	r1, r3, #1
 80176c6:	81f9      	strh	r1, [r7, #14]
 80176c8:	4413      	add	r3, r2
 80176ca:	687a      	ldr	r2, [r7, #4]
 80176cc:	7b12      	ldrb	r2, [r2, #12]
 80176ce:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	89d9      	ldrh	r1, [r3, #14]
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681a      	ldr	r2, [r3, #0]
 80176d8:	89fb      	ldrh	r3, [r7, #14]
 80176da:	1c58      	adds	r0, r3, #1
 80176dc:	81f8      	strh	r0, [r7, #14]
 80176de:	4413      	add	r3, r2
 80176e0:	b2ca      	uxtb	r2, r1
 80176e2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	89db      	ldrh	r3, [r3, #14]
 80176e8:	0a1b      	lsrs	r3, r3, #8
 80176ea:	b299      	uxth	r1, r3
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	89fb      	ldrh	r3, [r7, #14]
 80176f2:	1c58      	adds	r0, r3, #1
 80176f4:	81f8      	strh	r0, [r7, #14]
 80176f6:	4413      	add	r3, r2
 80176f8:	b2ca      	uxtb	r2, r1
 80176fa:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681a      	ldr	r2, [r3, #0]
 8017700:	89fb      	ldrh	r3, [r7, #14]
 8017702:	18d0      	adds	r0, r2, r3
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f103 0110 	add.w	r1, r3, #16
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	7b1b      	ldrb	r3, [r3, #12]
 801770e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017712:	b2db      	uxtb	r3, r3
 8017714:	b29b      	uxth	r3, r3
 8017716:	461a      	mov	r2, r3
 8017718:	f003 ff45 	bl	801b5a6 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	7b1b      	ldrb	r3, [r3, #12]
 8017720:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8017724:	b2db      	uxtb	r3, r3
 8017726:	b29a      	uxth	r2, r3
 8017728:	89fb      	ldrh	r3, [r7, #14]
 801772a:	4413      	add	r3, r2
 801772c:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017734:	2b00      	cmp	r3, #0
 8017736:	d009      	beq.n	801774c <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681a      	ldr	r2, [r3, #0]
 801773c:	89fb      	ldrh	r3, [r7, #14]
 801773e:	1c59      	adds	r1, r3, #1
 8017740:	81f9      	strh	r1, [r7, #14]
 8017742:	4413      	add	r3, r2
 8017744:	687a      	ldr	r2, [r7, #4]
 8017746:	f892 2020 	ldrb.w	r2, [r2, #32]
 801774a:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	681a      	ldr	r2, [r3, #0]
 8017750:	89fb      	ldrh	r3, [r7, #14]
 8017752:	18d0      	adds	r0, r2, r3
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801775e:	b29b      	uxth	r3, r3
 8017760:	461a      	mov	r2, r3
 8017762:	f003 ff20 	bl	801b5a6 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801776c:	b29a      	uxth	r2, r3
 801776e:	89fb      	ldrh	r3, [r7, #14]
 8017770:	4413      	add	r3, r2
 8017772:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681a      	ldr	r2, [r3, #0]
 801777c:	89fb      	ldrh	r3, [r7, #14]
 801777e:	1c58      	adds	r0, r3, #1
 8017780:	81f8      	strh	r0, [r7, #14]
 8017782:	4413      	add	r3, r2
 8017784:	b2ca      	uxtb	r2, r1
 8017786:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801778c:	0a19      	lsrs	r1, r3, #8
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	681a      	ldr	r2, [r3, #0]
 8017792:	89fb      	ldrh	r3, [r7, #14]
 8017794:	1c58      	adds	r0, r3, #1
 8017796:	81f8      	strh	r0, [r7, #14]
 8017798:	4413      	add	r3, r2
 801779a:	b2ca      	uxtb	r2, r1
 801779c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a2:	0c19      	lsrs	r1, r3, #16
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681a      	ldr	r2, [r3, #0]
 80177a8:	89fb      	ldrh	r3, [r7, #14]
 80177aa:	1c58      	adds	r0, r3, #1
 80177ac:	81f8      	strh	r0, [r7, #14]
 80177ae:	4413      	add	r3, r2
 80177b0:	b2ca      	uxtb	r2, r1
 80177b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177b8:	0e19      	lsrs	r1, r3, #24
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	681a      	ldr	r2, [r3, #0]
 80177be:	89fb      	ldrh	r3, [r7, #14]
 80177c0:	1c58      	adds	r0, r3, #1
 80177c2:	81f8      	strh	r0, [r7, #14]
 80177c4:	4413      	add	r3, r2
 80177c6:	b2ca      	uxtb	r2, r1
 80177c8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80177ca:	89fb      	ldrh	r3, [r7, #14]
 80177cc:	b2da      	uxtb	r2, r3
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177d2:	2300      	movs	r3, #0
}
 80177d4:	4618      	mov	r0, r3
 80177d6:	3710      	adds	r7, #16
 80177d8:	46bd      	mov	sp, r7
 80177da:	bd80      	pop	{r7, pc}

080177dc <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177dc:	b480      	push	{r7}
 80177de:	b083      	sub	sp, #12
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	4603      	mov	r3, r0
 80177e4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177e6:	79fb      	ldrb	r3, [r7, #7]
 80177e8:	2b05      	cmp	r3, #5
 80177ea:	d002      	beq.n	80177f2 <RegionIsActive+0x16>
 80177ec:	2b08      	cmp	r3, #8
 80177ee:	d002      	beq.n	80177f6 <RegionIsActive+0x1a>
 80177f0:	e003      	b.n	80177fa <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177f2:	2301      	movs	r3, #1
 80177f4:	e002      	b.n	80177fc <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80177f6:	2301      	movs	r3, #1
 80177f8:	e000      	b.n	80177fc <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177fa:	2300      	movs	r3, #0
        }
    }
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	370c      	adds	r7, #12
 8017800:	46bd      	mov	sp, r7
 8017802:	bc80      	pop	{r7}
 8017804:	4770      	bx	lr

08017806 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8017806:	b580      	push	{r7, lr}
 8017808:	b084      	sub	sp, #16
 801780a:	af00      	add	r7, sp, #0
 801780c:	4603      	mov	r3, r0
 801780e:	6039      	str	r1, [r7, #0]
 8017810:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8017812:	2300      	movs	r3, #0
 8017814:	60bb      	str	r3, [r7, #8]
    switch( region )
 8017816:	79fb      	ldrb	r3, [r7, #7]
 8017818:	2b05      	cmp	r3, #5
 801781a:	d002      	beq.n	8017822 <RegionGetPhyParam+0x1c>
 801781c:	2b08      	cmp	r3, #8
 801781e:	d006      	beq.n	801782e <RegionGetPhyParam+0x28>
 8017820:	e00b      	b.n	801783a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8017822:	6838      	ldr	r0, [r7, #0]
 8017824:	f001 fae8 	bl	8018df8 <RegionEU868GetPhyParam>
 8017828:	4603      	mov	r3, r0
 801782a:	60fb      	str	r3, [r7, #12]
 801782c:	e007      	b.n	801783e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801782e:	6838      	ldr	r0, [r7, #0]
 8017830:	f002 fcb6 	bl	801a1a0 <RegionUS915GetPhyParam>
 8017834:	4603      	mov	r3, r0
 8017836:	60fb      	str	r3, [r7, #12]
 8017838:	e001      	b.n	801783e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801783a:	68bb      	ldr	r3, [r7, #8]
 801783c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	4618      	mov	r0, r3
 8017842:	3710      	adds	r7, #16
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}

08017848 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b082      	sub	sp, #8
 801784c:	af00      	add	r7, sp, #0
 801784e:	4603      	mov	r3, r0
 8017850:	6039      	str	r1, [r7, #0]
 8017852:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017854:	79fb      	ldrb	r3, [r7, #7]
 8017856:	2b05      	cmp	r3, #5
 8017858:	d002      	beq.n	8017860 <RegionSetBandTxDone+0x18>
 801785a:	2b08      	cmp	r3, #8
 801785c:	d004      	beq.n	8017868 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801785e:	e007      	b.n	8017870 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8017860:	6838      	ldr	r0, [r7, #0]
 8017862:	f001 fc15 	bl	8019090 <RegionEU868SetBandTxDone>
 8017866:	e003      	b.n	8017870 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8017868:	6838      	ldr	r0, [r7, #0]
 801786a:	f002 fdfb 	bl	801a464 <RegionUS915SetBandTxDone>
 801786e:	bf00      	nop
        }
    }
}
 8017870:	3708      	adds	r7, #8
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}

08017876 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017876:	b580      	push	{r7, lr}
 8017878:	b082      	sub	sp, #8
 801787a:	af00      	add	r7, sp, #0
 801787c:	4603      	mov	r3, r0
 801787e:	6039      	str	r1, [r7, #0]
 8017880:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017882:	79fb      	ldrb	r3, [r7, #7]
 8017884:	2b05      	cmp	r3, #5
 8017886:	d002      	beq.n	801788e <RegionInitDefaults+0x18>
 8017888:	2b08      	cmp	r3, #8
 801788a:	d004      	beq.n	8017896 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801788c:	e007      	b.n	801789e <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 801788e:	6838      	ldr	r0, [r7, #0]
 8017890:	f001 fc2a 	bl	80190e8 <RegionEU868InitDefaults>
 8017894:	e003      	b.n	801789e <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 8017896:	6838      	ldr	r0, [r7, #0]
 8017898:	f002 fe10 	bl	801a4bc <RegionUS915InitDefaults>
 801789c:	bf00      	nop
        }
    }
}
 801789e:	bf00      	nop
 80178a0:	3708      	adds	r7, #8
 80178a2:	46bd      	mov	sp, r7
 80178a4:	bd80      	pop	{r7, pc}

080178a6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80178a6:	b580      	push	{r7, lr}
 80178a8:	b082      	sub	sp, #8
 80178aa:	af00      	add	r7, sp, #0
 80178ac:	4603      	mov	r3, r0
 80178ae:	6039      	str	r1, [r7, #0]
 80178b0:	71fb      	strb	r3, [r7, #7]
 80178b2:	4613      	mov	r3, r2
 80178b4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80178b6:	79fb      	ldrb	r3, [r7, #7]
 80178b8:	2b05      	cmp	r3, #5
 80178ba:	d002      	beq.n	80178c2 <RegionVerify+0x1c>
 80178bc:	2b08      	cmp	r3, #8
 80178be:	d007      	beq.n	80178d0 <RegionVerify+0x2a>
 80178c0:	e00d      	b.n	80178de <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80178c2:	79bb      	ldrb	r3, [r7, #6]
 80178c4:	4619      	mov	r1, r3
 80178c6:	6838      	ldr	r0, [r7, #0]
 80178c8:	f001 fcac 	bl	8019224 <RegionEU868Verify>
 80178cc:	4603      	mov	r3, r0
 80178ce:	e007      	b.n	80178e0 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80178d0:	79bb      	ldrb	r3, [r7, #6]
 80178d2:	4619      	mov	r1, r3
 80178d4:	6838      	ldr	r0, [r7, #0]
 80178d6:	f002 ff23 	bl	801a720 <RegionUS915Verify>
 80178da:	4603      	mov	r3, r0
 80178dc:	e000      	b.n	80178e0 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80178de:	2300      	movs	r3, #0
        }
    }
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	4603      	mov	r3, r0
 80178f0:	6039      	str	r1, [r7, #0]
 80178f2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178f4:	79fb      	ldrb	r3, [r7, #7]
 80178f6:	2b05      	cmp	r3, #5
 80178f8:	d002      	beq.n	8017900 <RegionApplyCFList+0x18>
 80178fa:	2b08      	cmp	r3, #8
 80178fc:	d004      	beq.n	8017908 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80178fe:	e007      	b.n	8017910 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8017900:	6838      	ldr	r0, [r7, #0]
 8017902:	f001 fd0b 	bl	801931c <RegionEU868ApplyCFList>
 8017906:	e003      	b.n	8017910 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8017908:	6838      	ldr	r0, [r7, #0]
 801790a:	f002 ff71 	bl	801a7f0 <RegionUS915ApplyCFList>
 801790e:	bf00      	nop
        }
    }
}
 8017910:	bf00      	nop
 8017912:	3708      	adds	r7, #8
 8017914:	46bd      	mov	sp, r7
 8017916:	bd80      	pop	{r7, pc}

08017918 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b082      	sub	sp, #8
 801791c:	af00      	add	r7, sp, #0
 801791e:	4603      	mov	r3, r0
 8017920:	6039      	str	r1, [r7, #0]
 8017922:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017924:	79fb      	ldrb	r3, [r7, #7]
 8017926:	2b05      	cmp	r3, #5
 8017928:	d002      	beq.n	8017930 <RegionChanMaskSet+0x18>
 801792a:	2b08      	cmp	r3, #8
 801792c:	d005      	beq.n	801793a <RegionChanMaskSet+0x22>
 801792e:	e009      	b.n	8017944 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8017930:	6838      	ldr	r0, [r7, #0]
 8017932:	f001 fd67 	bl	8019404 <RegionEU868ChanMaskSet>
 8017936:	4603      	mov	r3, r0
 8017938:	e005      	b.n	8017946 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 801793a:	6838      	ldr	r0, [r7, #0]
 801793c:	f002 ffce 	bl	801a8dc <RegionUS915ChanMaskSet>
 8017940:	4603      	mov	r3, r0
 8017942:	e000      	b.n	8017946 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8017944:	2300      	movs	r3, #0
        }
    }
}
 8017946:	4618      	mov	r0, r3
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801794e:	b580      	push	{r7, lr}
 8017950:	b082      	sub	sp, #8
 8017952:	af00      	add	r7, sp, #0
 8017954:	603b      	str	r3, [r7, #0]
 8017956:	4603      	mov	r3, r0
 8017958:	71fb      	strb	r3, [r7, #7]
 801795a:	460b      	mov	r3, r1
 801795c:	71bb      	strb	r3, [r7, #6]
 801795e:	4613      	mov	r3, r2
 8017960:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017962:	79fb      	ldrb	r3, [r7, #7]
 8017964:	2b05      	cmp	r3, #5
 8017966:	d002      	beq.n	801796e <RegionComputeRxWindowParameters+0x20>
 8017968:	2b08      	cmp	r3, #8
 801796a:	d008      	beq.n	801797e <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801796c:	e00f      	b.n	801798e <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801796e:	7979      	ldrb	r1, [r7, #5]
 8017970:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017974:	693b      	ldr	r3, [r7, #16]
 8017976:	683a      	ldr	r2, [r7, #0]
 8017978:	f001 fd6e 	bl	8019458 <RegionEU868ComputeRxWindowParameters>
 801797c:	e007      	b.n	801798e <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 801797e:	7979      	ldrb	r1, [r7, #5]
 8017980:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8017984:	693b      	ldr	r3, [r7, #16]
 8017986:	683a      	ldr	r2, [r7, #0]
 8017988:	f003 f812 	bl	801a9b0 <RegionUS915ComputeRxWindowParameters>
 801798c:	bf00      	nop
        }
    }
}
 801798e:	bf00      	nop
 8017990:	3708      	adds	r7, #8
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}

08017996 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017996:	b580      	push	{r7, lr}
 8017998:	b084      	sub	sp, #16
 801799a:	af00      	add	r7, sp, #0
 801799c:	4603      	mov	r3, r0
 801799e:	60b9      	str	r1, [r7, #8]
 80179a0:	607a      	str	r2, [r7, #4]
 80179a2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179a4:	7bfb      	ldrb	r3, [r7, #15]
 80179a6:	2b05      	cmp	r3, #5
 80179a8:	d002      	beq.n	80179b0 <RegionRxConfig+0x1a>
 80179aa:	2b08      	cmp	r3, #8
 80179ac:	d006      	beq.n	80179bc <RegionRxConfig+0x26>
 80179ae:	e00b      	b.n	80179c8 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80179b0:	6879      	ldr	r1, [r7, #4]
 80179b2:	68b8      	ldr	r0, [r7, #8]
 80179b4:	f001 fdaa 	bl	801950c <RegionEU868RxConfig>
 80179b8:	4603      	mov	r3, r0
 80179ba:	e006      	b.n	80179ca <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80179bc:	6879      	ldr	r1, [r7, #4]
 80179be:	68b8      	ldr	r0, [r7, #8]
 80179c0:	f003 f840 	bl	801aa44 <RegionUS915RxConfig>
 80179c4:	4603      	mov	r3, r0
 80179c6:	e000      	b.n	80179ca <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80179c8:	2300      	movs	r3, #0
        }
    }
}
 80179ca:	4618      	mov	r0, r3
 80179cc:	3710      	adds	r7, #16
 80179ce:	46bd      	mov	sp, r7
 80179d0:	bd80      	pop	{r7, pc}

080179d2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80179d2:	b580      	push	{r7, lr}
 80179d4:	b084      	sub	sp, #16
 80179d6:	af00      	add	r7, sp, #0
 80179d8:	60b9      	str	r1, [r7, #8]
 80179da:	607a      	str	r2, [r7, #4]
 80179dc:	603b      	str	r3, [r7, #0]
 80179de:	4603      	mov	r3, r0
 80179e0:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80179e2:	7bfb      	ldrb	r3, [r7, #15]
 80179e4:	2b05      	cmp	r3, #5
 80179e6:	d002      	beq.n	80179ee <RegionTxConfig+0x1c>
 80179e8:	2b08      	cmp	r3, #8
 80179ea:	d007      	beq.n	80179fc <RegionTxConfig+0x2a>
 80179ec:	e00d      	b.n	8017a0a <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80179ee:	683a      	ldr	r2, [r7, #0]
 80179f0:	6879      	ldr	r1, [r7, #4]
 80179f2:	68b8      	ldr	r0, [r7, #8]
 80179f4:	f001 fe5a 	bl	80196ac <RegionEU868TxConfig>
 80179f8:	4603      	mov	r3, r0
 80179fa:	e007      	b.n	8017a0c <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 80179fc:	683a      	ldr	r2, [r7, #0]
 80179fe:	6879      	ldr	r1, [r7, #4]
 8017a00:	68b8      	ldr	r0, [r7, #8]
 8017a02:	f003 f8a3 	bl	801ab4c <RegionUS915TxConfig>
 8017a06:	4603      	mov	r3, r0
 8017a08:	e000      	b.n	8017a0c <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017a0a:	2300      	movs	r3, #0
        }
    }
}
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	3710      	adds	r7, #16
 8017a10:	46bd      	mov	sp, r7
 8017a12:	bd80      	pop	{r7, pc}

08017a14 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b086      	sub	sp, #24
 8017a18:	af02      	add	r7, sp, #8
 8017a1a:	60b9      	str	r1, [r7, #8]
 8017a1c:	607a      	str	r2, [r7, #4]
 8017a1e:	603b      	str	r3, [r7, #0]
 8017a20:	4603      	mov	r3, r0
 8017a22:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a24:	7bfb      	ldrb	r3, [r7, #15]
 8017a26:	2b05      	cmp	r3, #5
 8017a28:	d002      	beq.n	8017a30 <RegionLinkAdrReq+0x1c>
 8017a2a:	2b08      	cmp	r3, #8
 8017a2c:	d00a      	beq.n	8017a44 <RegionLinkAdrReq+0x30>
 8017a2e:	e013      	b.n	8017a58 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017a30:	69fb      	ldr	r3, [r7, #28]
 8017a32:	9300      	str	r3, [sp, #0]
 8017a34:	69bb      	ldr	r3, [r7, #24]
 8017a36:	683a      	ldr	r2, [r7, #0]
 8017a38:	6879      	ldr	r1, [r7, #4]
 8017a3a:	68b8      	ldr	r0, [r7, #8]
 8017a3c:	f001 ff06 	bl	801984c <RegionEU868LinkAdrReq>
 8017a40:	4603      	mov	r3, r0
 8017a42:	e00a      	b.n	8017a5a <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	69bb      	ldr	r3, [r7, #24]
 8017a4a:	683a      	ldr	r2, [r7, #0]
 8017a4c:	6879      	ldr	r1, [r7, #4]
 8017a4e:	68b8      	ldr	r0, [r7, #8]
 8017a50:	f003 f928 	bl	801aca4 <RegionUS915LinkAdrReq>
 8017a54:	4603      	mov	r3, r0
 8017a56:	e000      	b.n	8017a5a <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017a58:	2300      	movs	r3, #0
        }
    }
}
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3710      	adds	r7, #16
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}

08017a62 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017a62:	b580      	push	{r7, lr}
 8017a64:	b082      	sub	sp, #8
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	4603      	mov	r3, r0
 8017a6a:	6039      	str	r1, [r7, #0]
 8017a6c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a6e:	79fb      	ldrb	r3, [r7, #7]
 8017a70:	2b05      	cmp	r3, #5
 8017a72:	d002      	beq.n	8017a7a <RegionRxParamSetupReq+0x18>
 8017a74:	2b08      	cmp	r3, #8
 8017a76:	d005      	beq.n	8017a84 <RegionRxParamSetupReq+0x22>
 8017a78:	e009      	b.n	8017a8e <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8017a7a:	6838      	ldr	r0, [r7, #0]
 8017a7c:	f002 f808 	bl	8019a90 <RegionEU868RxParamSetupReq>
 8017a80:	4603      	mov	r3, r0
 8017a82:	e005      	b.n	8017a90 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8017a84:	6838      	ldr	r0, [r7, #0]
 8017a86:	f003 fb31 	bl	801b0ec <RegionUS915RxParamSetupReq>
 8017a8a:	4603      	mov	r3, r0
 8017a8c:	e000      	b.n	8017a90 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017a8e:	2300      	movs	r3, #0
        }
    }
}
 8017a90:	4618      	mov	r0, r3
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	6039      	str	r1, [r7, #0]
 8017aa2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017aa4:	79fb      	ldrb	r3, [r7, #7]
 8017aa6:	2b05      	cmp	r3, #5
 8017aa8:	d002      	beq.n	8017ab0 <RegionNewChannelReq+0x18>
 8017aaa:	2b08      	cmp	r3, #8
 8017aac:	d005      	beq.n	8017aba <RegionNewChannelReq+0x22>
 8017aae:	e009      	b.n	8017ac4 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8017ab0:	6838      	ldr	r0, [r7, #0]
 8017ab2:	f002 f82b 	bl	8019b0c <RegionEU868NewChannelReq>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	e005      	b.n	8017ac6 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8017aba:	6838      	ldr	r0, [r7, #0]
 8017abc:	f003 fb62 	bl	801b184 <RegionUS915NewChannelReq>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	e000      	b.n	8017ac6 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017ac4:	2300      	movs	r3, #0
        }
    }
}
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	3708      	adds	r7, #8
 8017aca:	46bd      	mov	sp, r7
 8017acc:	bd80      	pop	{r7, pc}

08017ace <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8017ace:	b580      	push	{r7, lr}
 8017ad0:	b082      	sub	sp, #8
 8017ad2:	af00      	add	r7, sp, #0
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	6039      	str	r1, [r7, #0]
 8017ad8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017ada:	79fb      	ldrb	r3, [r7, #7]
 8017adc:	2b05      	cmp	r3, #5
 8017ade:	d002      	beq.n	8017ae6 <RegionTxParamSetupReq+0x18>
 8017ae0:	2b08      	cmp	r3, #8
 8017ae2:	d005      	beq.n	8017af0 <RegionTxParamSetupReq+0x22>
 8017ae4:	e009      	b.n	8017afa <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8017ae6:	6838      	ldr	r0, [r7, #0]
 8017ae8:	f002 f86e 	bl	8019bc8 <RegionEU868TxParamSetupReq>
 8017aec:	4603      	mov	r3, r0
 8017aee:	e005      	b.n	8017afc <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8017af0:	6838      	ldr	r0, [r7, #0]
 8017af2:	f003 fb52 	bl	801b19a <RegionUS915TxParamSetupReq>
 8017af6:	4603      	mov	r3, r0
 8017af8:	e000      	b.n	8017afc <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017afa:	2300      	movs	r3, #0
        }
    }
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	6039      	str	r1, [r7, #0]
 8017b0e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017b10:	79fb      	ldrb	r3, [r7, #7]
 8017b12:	2b05      	cmp	r3, #5
 8017b14:	d002      	beq.n	8017b1c <RegionDlChannelReq+0x18>
 8017b16:	2b08      	cmp	r3, #8
 8017b18:	d005      	beq.n	8017b26 <RegionDlChannelReq+0x22>
 8017b1a:	e009      	b.n	8017b30 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017b1c:	6838      	ldr	r0, [r7, #0]
 8017b1e:	f002 f85f 	bl	8019be0 <RegionEU868DlChannelReq>
 8017b22:	4603      	mov	r3, r0
 8017b24:	e005      	b.n	8017b32 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8017b26:	6838      	ldr	r0, [r7, #0]
 8017b28:	f003 fb42 	bl	801b1b0 <RegionUS915DlChannelReq>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	e000      	b.n	8017b32 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017b30:	2300      	movs	r3, #0
        }
    }
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3708      	adds	r7, #8
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bd80      	pop	{r7, pc}

08017b3a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017b3a:	b580      	push	{r7, lr}
 8017b3c:	b082      	sub	sp, #8
 8017b3e:	af00      	add	r7, sp, #0
 8017b40:	4603      	mov	r3, r0
 8017b42:	71fb      	strb	r3, [r7, #7]
 8017b44:	460b      	mov	r3, r1
 8017b46:	71bb      	strb	r3, [r7, #6]
 8017b48:	4613      	mov	r3, r2
 8017b4a:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017b4c:	79fb      	ldrb	r3, [r7, #7]
 8017b4e:	2b05      	cmp	r3, #5
 8017b50:	d002      	beq.n	8017b58 <RegionAlternateDr+0x1e>
 8017b52:	2b08      	cmp	r3, #8
 8017b54:	d009      	beq.n	8017b6a <RegionAlternateDr+0x30>
 8017b56:	e011      	b.n	8017b7c <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017b58:	797a      	ldrb	r2, [r7, #5]
 8017b5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b5e:	4611      	mov	r1, r2
 8017b60:	4618      	mov	r0, r3
 8017b62:	f002 f881 	bl	8019c68 <RegionEU868AlternateDr>
 8017b66:	4603      	mov	r3, r0
 8017b68:	e009      	b.n	8017b7e <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8017b6a:	797a      	ldrb	r2, [r7, #5]
 8017b6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017b70:	4611      	mov	r1, r2
 8017b72:	4618      	mov	r0, r3
 8017b74:	f003 fb28 	bl	801b1c8 <RegionUS915AlternateDr>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	e000      	b.n	8017b7e <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017b7c:	2300      	movs	r3, #0
        }
    }
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3708      	adds	r7, #8
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017b86:	b580      	push	{r7, lr}
 8017b88:	b084      	sub	sp, #16
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	60b9      	str	r1, [r7, #8]
 8017b8e:	607a      	str	r2, [r7, #4]
 8017b90:	603b      	str	r3, [r7, #0]
 8017b92:	4603      	mov	r3, r0
 8017b94:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017b96:	7bfb      	ldrb	r3, [r7, #15]
 8017b98:	2b05      	cmp	r3, #5
 8017b9a:	d002      	beq.n	8017ba2 <RegionNextChannel+0x1c>
 8017b9c:	2b08      	cmp	r3, #8
 8017b9e:	d008      	beq.n	8017bb2 <RegionNextChannel+0x2c>
 8017ba0:	e00f      	b.n	8017bc2 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017ba2:	69bb      	ldr	r3, [r7, #24]
 8017ba4:	683a      	ldr	r2, [r7, #0]
 8017ba6:	6879      	ldr	r1, [r7, #4]
 8017ba8:	68b8      	ldr	r0, [r7, #8]
 8017baa:	f002 f86d 	bl	8019c88 <RegionEU868NextChannel>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	e008      	b.n	8017bc4 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	683a      	ldr	r2, [r7, #0]
 8017bb6:	6879      	ldr	r1, [r7, #4]
 8017bb8:	68b8      	ldr	r0, [r7, #8]
 8017bba:	f003 fb41 	bl	801b240 <RegionUS915NextChannel>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	e000      	b.n	8017bc4 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017bc2:	2309      	movs	r3, #9
        }
    }
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3710      	adds	r7, #16
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	6039      	str	r1, [r7, #0]
 8017bd6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017bd8:	79fb      	ldrb	r3, [r7, #7]
 8017bda:	2b05      	cmp	r3, #5
 8017bdc:	d002      	beq.n	8017be4 <RegionSetContinuousWave+0x18>
 8017bde:	2b08      	cmp	r3, #8
 8017be0:	d004      	beq.n	8017bec <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017be2:	e007      	b.n	8017bf4 <RegionSetContinuousWave+0x28>
        EU868_SET_CONTINUOUS_WAVE( );
 8017be4:	6838      	ldr	r0, [r7, #0]
 8017be6:	f002 f9c9 	bl	8019f7c <RegionEU868SetContinuousWave>
 8017bea:	e003      	b.n	8017bf4 <RegionSetContinuousWave+0x28>
        US915_SET_CONTINUOUS_WAVE( );
 8017bec:	6838      	ldr	r0, [r7, #0]
 8017bee:	f003 fc1b 	bl	801b428 <RegionUS915SetContinuousWave>
 8017bf2:	bf00      	nop
        }
    }
}
 8017bf4:	bf00      	nop
 8017bf6:	3708      	adds	r7, #8
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}

08017bfc <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017bfc:	b590      	push	{r4, r7, lr}
 8017bfe:	b083      	sub	sp, #12
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	4604      	mov	r4, r0
 8017c04:	4608      	mov	r0, r1
 8017c06:	4611      	mov	r1, r2
 8017c08:	461a      	mov	r2, r3
 8017c0a:	4623      	mov	r3, r4
 8017c0c:	71fb      	strb	r3, [r7, #7]
 8017c0e:	4603      	mov	r3, r0
 8017c10:	71bb      	strb	r3, [r7, #6]
 8017c12:	460b      	mov	r3, r1
 8017c14:	717b      	strb	r3, [r7, #5]
 8017c16:	4613      	mov	r3, r2
 8017c18:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017c1a:	79fb      	ldrb	r3, [r7, #7]
 8017c1c:	2b05      	cmp	r3, #5
 8017c1e:	d002      	beq.n	8017c26 <RegionApplyDrOffset+0x2a>
 8017c20:	2b08      	cmp	r3, #8
 8017c22:	d00a      	beq.n	8017c3a <RegionApplyDrOffset+0x3e>
 8017c24:	e013      	b.n	8017c4e <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017c26:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c2a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c2e:	79bb      	ldrb	r3, [r7, #6]
 8017c30:	4618      	mov	r0, r3
 8017c32:	f002 f9f1 	bl	801a018 <RegionEU868ApplyDrOffset>
 8017c36:	4603      	mov	r3, r0
 8017c38:	e00a      	b.n	8017c50 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8017c3a:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017c3e:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017c42:	79bb      	ldrb	r3, [r7, #6]
 8017c44:	4618      	mov	r0, r3
 8017c46:	f003 fc45 	bl	801b4d4 <RegionUS915ApplyDrOffset>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	e000      	b.n	8017c50 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017c4e:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	370c      	adds	r7, #12
 8017c54:	46bd      	mov	sp, r7
 8017c56:	bd90      	pop	{r4, r7, pc}

08017c58 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017c58:	b480      	push	{r7}
 8017c5a:	b083      	sub	sp, #12
 8017c5c:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017c5e:	4b04      	ldr	r3, [pc, #16]	; (8017c70 <RegionGetVersion+0x18>)
 8017c60:	607b      	str	r3, [r7, #4]

    return version;
 8017c62:	687b      	ldr	r3, [r7, #4]
}
 8017c64:	4618      	mov	r0, r3
 8017c66:	370c      	adds	r7, #12
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bc80      	pop	{r7}
 8017c6c:	4770      	bx	lr
 8017c6e:	bf00      	nop
 8017c70:	01000300 	.word	0x01000300

08017c74 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8017c74:	b480      	push	{r7}
 8017c76:	b087      	sub	sp, #28
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	607a      	str	r2, [r7, #4]
 8017c80:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8017c82:	68bb      	ldr	r3, [r7, #8]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d002      	beq.n	8017c8e <FindAvailable125kHzChannels+0x1a>
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d101      	bne.n	8017c92 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017c8e:	2303      	movs	r3, #3
 8017c90:	e021      	b.n	8017cd6 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2200      	movs	r2, #0
 8017c96:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017c98:	2300      	movs	r3, #0
 8017c9a:	75fb      	strb	r3, [r7, #23]
 8017c9c:	e017      	b.n	8017cce <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8017c9e:	89fa      	ldrh	r2, [r7, #14]
 8017ca0:	7dfb      	ldrb	r3, [r7, #23]
 8017ca2:	fa42 f303 	asr.w	r3, r2, r3
 8017ca6:	f003 0301 	and.w	r3, r3, #1
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d00c      	beq.n	8017cc8 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	461a      	mov	r2, r3
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	4413      	add	r3, r2
 8017cb8:	7dfa      	ldrb	r2, [r7, #23]
 8017cba:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	781b      	ldrb	r3, [r3, #0]
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	b2da      	uxtb	r2, r3
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8017cc8:	7dfb      	ldrb	r3, [r7, #23]
 8017cca:	3301      	adds	r3, #1
 8017ccc:	75fb      	strb	r3, [r7, #23]
 8017cce:	7dfb      	ldrb	r3, [r7, #23]
 8017cd0:	2b07      	cmp	r3, #7
 8017cd2:	d9e4      	bls.n	8017c9e <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8017cd4:	2300      	movs	r3, #0
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	371c      	adds	r7, #28
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bc80      	pop	{r7}
 8017cde:	4770      	bx	lr

08017ce0 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8017ce0:	b590      	push	{r4, r7, lr}
 8017ce2:	b089      	sub	sp, #36	; 0x24
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8017cec:	2300      	movs	r3, #0
 8017cee:	617b      	str	r3, [r7, #20]
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d005      	beq.n	8017d0a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d002      	beq.n	8017d0a <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d101      	bne.n	8017d0e <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d0a:	2303      	movs	r3, #3
 8017d0c:	e055      	b.n	8017dba <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	781b      	ldrb	r3, [r3, #0]
 8017d12:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8017d14:	7f7b      	ldrb	r3, [r7, #29]
 8017d16:	085b      	lsrs	r3, r3, #1
 8017d18:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8017d1a:	7f7b      	ldrb	r3, [r7, #29]
 8017d1c:	f003 0301 	and.w	r3, r3, #1
 8017d20:	b2db      	uxtb	r3, r3
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d107      	bne.n	8017d36 <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8017d26:	7f3b      	ldrb	r3, [r7, #28]
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	68fa      	ldr	r2, [r7, #12]
 8017d2c:	4413      	add	r3, r2
 8017d2e:	881b      	ldrh	r3, [r3, #0]
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	83fb      	strh	r3, [r7, #30]
 8017d34:	e006      	b.n	8017d44 <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8017d36:	7f3b      	ldrb	r3, [r7, #28]
 8017d38:	005b      	lsls	r3, r3, #1
 8017d3a:	68fa      	ldr	r2, [r7, #12]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	881b      	ldrh	r3, [r3, #0]
 8017d40:	0a1b      	lsrs	r3, r3, #8
 8017d42:	83fb      	strh	r3, [r7, #30]
        }


        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017d44:	f107 0213 	add.w	r2, r7, #19
 8017d48:	f107 0114 	add.w	r1, r7, #20
 8017d4c:	8bfb      	ldrh	r3, [r7, #30]
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7ff ff90 	bl	8017c74 <FindAvailable125kHzChannels>
 8017d54:	4603      	mov	r3, r0
 8017d56:	2b03      	cmp	r3, #3
 8017d58:	d101      	bne.n	8017d5e <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8017d5a:	2303      	movs	r3, #3
 8017d5c:	e02d      	b.n	8017dba <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8017d5e:	7cfb      	ldrb	r3, [r7, #19]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d011      	beq.n	8017d88 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8017d64:	7f7b      	ldrb	r3, [r7, #29]
 8017d66:	00db      	lsls	r3, r3, #3
 8017d68:	b2dc      	uxtb	r4, r3
 8017d6a:	7cfb      	ldrb	r3, [r7, #19]
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	4619      	mov	r1, r3
 8017d70:	2000      	movs	r0, #0
 8017d72:	f003 fc01 	bl	801b578 <randr>
 8017d76:	4603      	mov	r3, r0
 8017d78:	3320      	adds	r3, #32
 8017d7a:	443b      	add	r3, r7
 8017d7c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8017d80:	4423      	add	r3, r4
 8017d82:	b2da      	uxtb	r2, r3
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8017d88:	7f7b      	ldrb	r3, [r7, #29]
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8017d8e:	7f7b      	ldrb	r3, [r7, #29]
 8017d90:	2b07      	cmp	r3, #7
 8017d92:	d901      	bls.n	8017d98 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8017d94:	2300      	movs	r3, #0
 8017d96:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8017d98:	7cfb      	ldrb	r3, [r7, #19]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d104      	bne.n	8017da8 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	781b      	ldrb	r3, [r3, #0]
 8017da2:	7f7a      	ldrb	r2, [r7, #29]
 8017da4:	429a      	cmp	r2, r3
 8017da6:	d1b5      	bne.n	8017d14 <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8017da8:	7cfb      	ldrb	r3, [r7, #19]
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d004      	beq.n	8017db8 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	7f7a      	ldrb	r2, [r7, #29]
 8017db2:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017db4:	2300      	movs	r3, #0
 8017db6:	e000      	b.n	8017dba <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017db8:	2303      	movs	r3, #3
}
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3724      	adds	r7, #36	; 0x24
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd90      	pop	{r4, r7, pc}

08017dc2 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8017dc2:	b480      	push	{r7}
 8017dc4:	b085      	sub	sp, #20
 8017dc6:	af00      	add	r7, sp, #0
 8017dc8:	4603      	mov	r3, r0
 8017dca:	60b9      	str	r1, [r7, #8]
 8017dcc:	607a      	str	r2, [r7, #4]
 8017dce:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8017dd0:	7bfb      	ldrb	r3, [r7, #15]
 8017dd2:	687a      	ldr	r2, [r7, #4]
 8017dd4:	fb03 f202 	mul.w	r2, r3, r2
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	4413      	add	r3, r2
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3714      	adds	r7, #20
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bc80      	pop	{r7}
 8017de4:	4770      	bx	lr

08017de6 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017de6:	b480      	push	{r7}
 8017de8:	b087      	sub	sp, #28
 8017dea:	af00      	add	r7, sp, #0
 8017dec:	60f8      	str	r0, [r7, #12]
 8017dee:	4608      	mov	r0, r1
 8017df0:	4639      	mov	r1, r7
 8017df2:	e881 000c 	stmia.w	r1, {r2, r3}
 8017df6:	4603      	mov	r3, r0
 8017df8:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	881b      	ldrh	r3, [r3, #0]
 8017dfe:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017e00:	7afb      	ldrb	r3, [r7, #11]
 8017e02:	f083 0301 	eor.w	r3, r3, #1
 8017e06:	b2db      	uxtb	r3, r3
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d01b      	beq.n	8017e44 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e10:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017e12:	683b      	ldr	r3, [r7, #0]
 8017e14:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017e18:	d202      	bcs.n	8017e20 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017e1a:	2364      	movs	r3, #100	; 0x64
 8017e1c:	82bb      	strh	r3, [r7, #20]
 8017e1e:	e00b      	b.n	8017e38 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017e20:	683b      	ldr	r3, [r7, #0]
 8017e22:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017e26:	4293      	cmp	r3, r2
 8017e28:	d803      	bhi.n	8017e32 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017e2e:	82bb      	strh	r3, [r7, #20]
 8017e30:	e002      	b.n	8017e38 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017e32:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e36:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017e38:	8aba      	ldrh	r2, [r7, #20]
 8017e3a:	8afb      	ldrh	r3, [r7, #22]
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	bf38      	it	cc
 8017e40:	4613      	movcc	r3, r2
 8017e42:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017e44:	8afb      	ldrh	r3, [r7, #22]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d101      	bne.n	8017e4e <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017e4e:	8afb      	ldrh	r3, [r7, #22]
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	371c      	adds	r7, #28
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bc80      	pop	{r7}
 8017e58:	4770      	bx	lr
	...

08017e5c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b08e      	sub	sp, #56	; 0x38
 8017e60:	af02      	add	r7, sp, #8
 8017e62:	60f8      	str	r0, [r7, #12]
 8017e64:	4608      	mov	r0, r1
 8017e66:	4639      	mov	r1, r7
 8017e68:	e881 000c 	stmia.w	r1, {r2, r3}
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	881b      	ldrh	r3, [r3, #0]
 8017e74:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017e76:	4b4b      	ldr	r3, [pc, #300]	; (8017fa4 <SetMaxTimeCredits+0x148>)
 8017e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017e7a:	463b      	mov	r3, r7
 8017e7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017e80:	f007 fafc 	bl	801f47c <SysTimeToMs>
 8017e84:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017e86:	f107 0314 	add.w	r3, r7, #20
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	601a      	str	r2, [r3, #0]
 8017e8e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017e90:	7af9      	ldrb	r1, [r7, #11]
 8017e92:	463b      	mov	r3, r7
 8017e94:	cb0c      	ldmia	r3, {r2, r3}
 8017e96:	68f8      	ldr	r0, [r7, #12]
 8017e98:	f7ff ffa5 	bl	8017de6 <GetDutyCycle>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017ea0:	7afb      	ldrb	r3, [r7, #11]
 8017ea2:	f083 0301 	eor.w	r3, r3, #1
 8017ea6:	b2db      	uxtb	r3, r3
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d062      	beq.n	8017f72 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017eac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017eae:	2b64      	cmp	r3, #100	; 0x64
 8017eb0:	d105      	bne.n	8017ebe <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017eb2:	4b3c      	ldr	r3, [pc, #240]	; (8017fa4 <SetMaxTimeCredits+0x148>)
 8017eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017eba:	609a      	str	r2, [r3, #8]
 8017ebc:	e00b      	b.n	8017ed6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017ebe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017ec4:	d105      	bne.n	8017ed2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017ec6:	4b38      	ldr	r3, [pc, #224]	; (8017fa8 <SetMaxTimeCredits+0x14c>)
 8017ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ece:	609a      	str	r2, [r3, #8]
 8017ed0:	e001      	b.n	8017ed6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017ed2:	4b36      	ldr	r3, [pc, #216]	; (8017fac <SetMaxTimeCredits+0x150>)
 8017ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	689a      	ldr	r2, [r3, #8]
 8017eda:	f107 031c 	add.w	r3, r7, #28
 8017ede:	4611      	mov	r1, r2
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f007 faf3 	bl	801f4cc <SysTimeFromMs>
 8017ee6:	f107 0014 	add.w	r0, r7, #20
 8017eea:	6a3b      	ldr	r3, [r7, #32]
 8017eec:	9300      	str	r3, [sp, #0]
 8017eee:	69fb      	ldr	r3, [r7, #28]
 8017ef0:	463a      	mov	r2, r7
 8017ef2:	ca06      	ldmia	r2, {r1, r2}
 8017ef4:	f007 fa03 	bl	801f2fe <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017ef8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017efc:	f083 0301 	eor.w	r3, r3, #1
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d006      	beq.n	8017f14 <SetMaxTimeCredits+0xb8>
 8017f06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017f0a:	f083 0301 	eor.w	r3, r3, #1
 8017f0e:	b2db      	uxtb	r3, r3
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d108      	bne.n	8017f26 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d103      	bne.n	8017f26 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017f1e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017f20:	4a23      	ldr	r2, [pc, #140]	; (8017fb0 <SetMaxTimeCredits+0x154>)
 8017f22:	4293      	cmp	r3, r2
 8017f24:	d92f      	bls.n	8017f86 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f2a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	4a21      	ldr	r2, [pc, #132]	; (8017fb4 <SetMaxTimeCredits+0x158>)
 8017f30:	4293      	cmp	r3, r2
 8017f32:	d928      	bls.n	8017f86 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017f3a:	3b30      	subs	r3, #48	; 0x30
 8017f3c:	4a1e      	ldr	r2, [pc, #120]	; (8017fb8 <SetMaxTimeCredits+0x15c>)
 8017f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8017f42:	0c1b      	lsrs	r3, r3, #16
 8017f44:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	4a1c      	ldr	r2, [pc, #112]	; (8017fbc <SetMaxTimeCredits+0x160>)
 8017f4a:	fb02 f303 	mul.w	r3, r2, r3
 8017f4e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017f50:	697b      	ldr	r3, [r7, #20]
 8017f52:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017f56:	3330      	adds	r3, #48	; 0x30
 8017f58:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017f5e:	f107 0314 	add.w	r3, r7, #20
 8017f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017f66:	f007 fa89 	bl	801f47c <SysTimeToMs>
 8017f6a:	4602      	mov	r2, r0
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	609a      	str	r2, [r3, #8]
 8017f70:	e009      	b.n	8017f86 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017f72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017f76:	f083 0301 	eor.w	r3, r3, #1
 8017f7a:	b2db      	uxtb	r3, r3
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d002      	beq.n	8017f86 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f84:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	685b      	ldr	r3, [r3, #4]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d102      	bne.n	8017f94 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f92:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017f98:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017f9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017f9c:	4618      	mov	r0, r3
 8017f9e:	3730      	adds	r7, #48	; 0x30
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}
 8017fa4:	001b7740 	.word	0x001b7740
 8017fa8:	0112a880 	.word	0x0112a880
 8017fac:	02932e00 	.word	0x02932e00
 8017fb0:	0001517f 	.word	0x0001517f
 8017fb4:	0001ec2f 	.word	0x0001ec2f
 8017fb8:	c22e4507 	.word	0xc22e4507
 8017fbc:	00015180 	.word	0x00015180

08017fc0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b086      	sub	sp, #24
 8017fc4:	af02      	add	r7, sp, #8
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	4608      	mov	r0, r1
 8017fca:	4611      	mov	r1, r2
 8017fcc:	461a      	mov	r2, r3
 8017fce:	4603      	mov	r3, r0
 8017fd0:	70fb      	strb	r3, [r7, #3]
 8017fd2:	460b      	mov	r3, r1
 8017fd4:	70bb      	strb	r3, [r7, #2]
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017fda:	78f9      	ldrb	r1, [r7, #3]
 8017fdc:	787b      	ldrb	r3, [r7, #1]
 8017fde:	9301      	str	r3, [sp, #4]
 8017fe0:	78bb      	ldrb	r3, [r7, #2]
 8017fe2:	9300      	str	r3, [sp, #0]
 8017fe4:	f107 0318 	add.w	r3, r7, #24
 8017fe8:	cb0c      	ldmia	r3, {r2, r3}
 8017fea:	6878      	ldr	r0, [r7, #4]
 8017fec:	f7ff ff36 	bl	8017e5c <SetMaxTimeCredits>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017ff4:	78fb      	ldrb	r3, [r7, #3]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d00a      	beq.n	8018010 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	685b      	ldr	r3, [r3, #4]
 8017ffe:	4618      	mov	r0, r3
 8018000:	f007 fe38 	bl	801fc74 <UTIL_TIMER_GetElapsedTime>
 8018004:	4602      	mov	r2, r0
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	68db      	ldr	r3, [r3, #12]
 801800a:	441a      	add	r2, r3
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	68da      	ldr	r2, [r3, #12]
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	691b      	ldr	r3, [r3, #16]
 8018018:	429a      	cmp	r2, r3
 801801a:	d903      	bls.n	8018024 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	691a      	ldr	r2, [r3, #16]
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	6a3a      	ldr	r2, [r7, #32]
 8018028:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 801802a:	89fb      	ldrh	r3, [r7, #14]
}
 801802c:	4618      	mov	r0, r3
 801802e:	3710      	adds	r7, #16
 8018030:	46bd      	mov	sp, r7
 8018032:	bd80      	pop	{r7, pc}

08018034 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8018034:	b480      	push	{r7}
 8018036:	b085      	sub	sp, #20
 8018038:	af00      	add	r7, sp, #0
 801803a:	4603      	mov	r3, r0
 801803c:	460a      	mov	r2, r1
 801803e:	80fb      	strh	r3, [r7, #6]
 8018040:	4613      	mov	r3, r2
 8018042:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8018044:	2300      	movs	r3, #0
 8018046:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8018048:	2300      	movs	r3, #0
 801804a:	73bb      	strb	r3, [r7, #14]
 801804c:	e011      	b.n	8018072 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 801804e:	88fa      	ldrh	r2, [r7, #6]
 8018050:	7bbb      	ldrb	r3, [r7, #14]
 8018052:	2101      	movs	r1, #1
 8018054:	fa01 f303 	lsl.w	r3, r1, r3
 8018058:	401a      	ands	r2, r3
 801805a:	7bbb      	ldrb	r3, [r7, #14]
 801805c:	2101      	movs	r1, #1
 801805e:	fa01 f303 	lsl.w	r3, r1, r3
 8018062:	429a      	cmp	r2, r3
 8018064:	d102      	bne.n	801806c <CountChannels+0x38>
        {
            nbActiveBits++;
 8018066:	7bfb      	ldrb	r3, [r7, #15]
 8018068:	3301      	adds	r3, #1
 801806a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 801806c:	7bbb      	ldrb	r3, [r7, #14]
 801806e:	3301      	adds	r3, #1
 8018070:	73bb      	strb	r3, [r7, #14]
 8018072:	7bba      	ldrb	r2, [r7, #14]
 8018074:	797b      	ldrb	r3, [r7, #5]
 8018076:	429a      	cmp	r2, r3
 8018078:	d3e9      	bcc.n	801804e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 801807a:	7bfb      	ldrb	r3, [r7, #15]
}
 801807c:	4618      	mov	r0, r3
 801807e:	3714      	adds	r7, #20
 8018080:	46bd      	mov	sp, r7
 8018082:	bc80      	pop	{r7}
 8018084:	4770      	bx	lr

08018086 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8018086:	b580      	push	{r7, lr}
 8018088:	b084      	sub	sp, #16
 801808a:	af00      	add	r7, sp, #0
 801808c:	6039      	str	r1, [r7, #0]
 801808e:	4611      	mov	r1, r2
 8018090:	461a      	mov	r2, r3
 8018092:	4603      	mov	r3, r0
 8018094:	71fb      	strb	r3, [r7, #7]
 8018096:	460b      	mov	r3, r1
 8018098:	71bb      	strb	r3, [r7, #6]
 801809a:	4613      	mov	r3, r2
 801809c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801809e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80180a2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80180a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f000 f85d 	bl	801816a <RegionCommonValueInRange>
 80180b0:	4603      	mov	r3, r0
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d101      	bne.n	80180ba <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80180b6:	2300      	movs	r3, #0
 80180b8:	e053      	b.n	8018162 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80180ba:	2300      	movs	r3, #0
 80180bc:	73fb      	strb	r3, [r7, #15]
 80180be:	2300      	movs	r3, #0
 80180c0:	73bb      	strb	r3, [r7, #14]
 80180c2:	e049      	b.n	8018158 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80180c4:	2300      	movs	r3, #0
 80180c6:	737b      	strb	r3, [r7, #13]
 80180c8:	e03d      	b.n	8018146 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80180ca:	7bbb      	ldrb	r3, [r7, #14]
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	683a      	ldr	r2, [r7, #0]
 80180d0:	4413      	add	r3, r2
 80180d2:	881b      	ldrh	r3, [r3, #0]
 80180d4:	461a      	mov	r2, r3
 80180d6:	7b7b      	ldrb	r3, [r7, #13]
 80180d8:	fa42 f303 	asr.w	r3, r2, r3
 80180dc:	f003 0301 	and.w	r3, r3, #1
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d02d      	beq.n	8018140 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80180e4:	7bfa      	ldrb	r2, [r7, #15]
 80180e6:	7b7b      	ldrb	r3, [r7, #13]
 80180e8:	4413      	add	r3, r2
 80180ea:	461a      	mov	r2, r3
 80180ec:	4613      	mov	r3, r2
 80180ee:	005b      	lsls	r3, r3, #1
 80180f0:	4413      	add	r3, r2
 80180f2:	009b      	lsls	r3, r3, #2
 80180f4:	461a      	mov	r2, r3
 80180f6:	69fb      	ldr	r3, [r7, #28]
 80180f8:	4413      	add	r3, r2
 80180fa:	7a1b      	ldrb	r3, [r3, #8]
 80180fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8018100:	b25b      	sxtb	r3, r3
 8018102:	f003 030f 	and.w	r3, r3, #15
 8018106:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8018108:	7bfa      	ldrb	r2, [r7, #15]
 801810a:	7b7b      	ldrb	r3, [r7, #13]
 801810c:	4413      	add	r3, r2
 801810e:	461a      	mov	r2, r3
 8018110:	4613      	mov	r3, r2
 8018112:	005b      	lsls	r3, r3, #1
 8018114:	4413      	add	r3, r2
 8018116:	009b      	lsls	r3, r3, #2
 8018118:	461a      	mov	r2, r3
 801811a:	69fb      	ldr	r3, [r7, #28]
 801811c:	4413      	add	r3, r2
 801811e:	7a1b      	ldrb	r3, [r3, #8]
 8018120:	f343 1303 	sbfx	r3, r3, #4, #4
 8018124:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8018126:	f003 030f 	and.w	r3, r3, #15
 801812a:	b25a      	sxtb	r2, r3
 801812c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018130:	4618      	mov	r0, r3
 8018132:	f000 f81a 	bl	801816a <RegionCommonValueInRange>
 8018136:	4603      	mov	r3, r0
 8018138:	2b01      	cmp	r3, #1
 801813a:	d101      	bne.n	8018140 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 801813c:	2301      	movs	r3, #1
 801813e:	e010      	b.n	8018162 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8018140:	7b7b      	ldrb	r3, [r7, #13]
 8018142:	3301      	adds	r3, #1
 8018144:	737b      	strb	r3, [r7, #13]
 8018146:	7b7b      	ldrb	r3, [r7, #13]
 8018148:	2b0f      	cmp	r3, #15
 801814a:	d9be      	bls.n	80180ca <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801814c:	7bfb      	ldrb	r3, [r7, #15]
 801814e:	3310      	adds	r3, #16
 8018150:	73fb      	strb	r3, [r7, #15]
 8018152:	7bbb      	ldrb	r3, [r7, #14]
 8018154:	3301      	adds	r3, #1
 8018156:	73bb      	strb	r3, [r7, #14]
 8018158:	7bfa      	ldrb	r2, [r7, #15]
 801815a:	79fb      	ldrb	r3, [r7, #7]
 801815c:	429a      	cmp	r2, r3
 801815e:	d3b1      	bcc.n	80180c4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8018160:	2300      	movs	r3, #0
}
 8018162:	4618      	mov	r0, r3
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}

0801816a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 801816a:	b480      	push	{r7}
 801816c:	b083      	sub	sp, #12
 801816e:	af00      	add	r7, sp, #0
 8018170:	4603      	mov	r3, r0
 8018172:	71fb      	strb	r3, [r7, #7]
 8018174:	460b      	mov	r3, r1
 8018176:	71bb      	strb	r3, [r7, #6]
 8018178:	4613      	mov	r3, r2
 801817a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 801817c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8018180:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018184:	429a      	cmp	r2, r3
 8018186:	db07      	blt.n	8018198 <RegionCommonValueInRange+0x2e>
 8018188:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801818c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018190:	429a      	cmp	r2, r3
 8018192:	dc01      	bgt.n	8018198 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8018194:	2301      	movs	r3, #1
 8018196:	e000      	b.n	801819a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8018198:	2300      	movs	r3, #0
}
 801819a:	4618      	mov	r0, r3
 801819c:	370c      	adds	r7, #12
 801819e:	46bd      	mov	sp, r7
 80181a0:	bc80      	pop	{r7}
 80181a2:	4770      	bx	lr

080181a4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80181a4:	b480      	push	{r7}
 80181a6:	b085      	sub	sp, #20
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	6078      	str	r0, [r7, #4]
 80181ac:	460b      	mov	r3, r1
 80181ae:	70fb      	strb	r3, [r7, #3]
 80181b0:	4613      	mov	r3, r2
 80181b2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 80181b4:	78fb      	ldrb	r3, [r7, #3]
 80181b6:	091b      	lsrs	r3, r3, #4
 80181b8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80181ba:	78bb      	ldrb	r3, [r7, #2]
 80181bc:	091b      	lsrs	r3, r3, #4
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	7bfa      	ldrb	r2, [r7, #15]
 80181c2:	429a      	cmp	r2, r3
 80181c4:	d803      	bhi.n	80181ce <RegionCommonChanDisable+0x2a>
 80181c6:	78fa      	ldrb	r2, [r7, #3]
 80181c8:	78bb      	ldrb	r3, [r7, #2]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d301      	bcc.n	80181d2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 80181ce:	2300      	movs	r3, #0
 80181d0:	e017      	b.n	8018202 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80181d2:	7bfb      	ldrb	r3, [r7, #15]
 80181d4:	005b      	lsls	r3, r3, #1
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	4413      	add	r3, r2
 80181da:	881b      	ldrh	r3, [r3, #0]
 80181dc:	b21a      	sxth	r2, r3
 80181de:	78fb      	ldrb	r3, [r7, #3]
 80181e0:	f003 030f 	and.w	r3, r3, #15
 80181e4:	2101      	movs	r1, #1
 80181e6:	fa01 f303 	lsl.w	r3, r1, r3
 80181ea:	b21b      	sxth	r3, r3
 80181ec:	43db      	mvns	r3, r3
 80181ee:	b21b      	sxth	r3, r3
 80181f0:	4013      	ands	r3, r2
 80181f2:	b219      	sxth	r1, r3
 80181f4:	7bfb      	ldrb	r3, [r7, #15]
 80181f6:	005b      	lsls	r3, r3, #1
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	4413      	add	r3, r2
 80181fc:	b28a      	uxth	r2, r1
 80181fe:	801a      	strh	r2, [r3, #0]

    return true;
 8018200:	2301      	movs	r3, #1
}
 8018202:	4618      	mov	r0, r3
 8018204:	3714      	adds	r7, #20
 8018206:	46bd      	mov	sp, r7
 8018208:	bc80      	pop	{r7}
 801820a:	4770      	bx	lr

0801820c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	460b      	mov	r3, r1
 8018216:	70fb      	strb	r3, [r7, #3]
 8018218:	4613      	mov	r3, r2
 801821a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801821c:	2300      	movs	r3, #0
 801821e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d101      	bne.n	801822a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8018226:	2300      	movs	r3, #0
 8018228:	e018      	b.n	801825c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801822a:	78fb      	ldrb	r3, [r7, #3]
 801822c:	73bb      	strb	r3, [r7, #14]
 801822e:	e010      	b.n	8018252 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8018230:	7bbb      	ldrb	r3, [r7, #14]
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	4413      	add	r3, r2
 8018238:	881b      	ldrh	r3, [r3, #0]
 801823a:	2110      	movs	r1, #16
 801823c:	4618      	mov	r0, r3
 801823e:	f7ff fef9 	bl	8018034 <CountChannels>
 8018242:	4603      	mov	r3, r0
 8018244:	461a      	mov	r2, r3
 8018246:	7bfb      	ldrb	r3, [r7, #15]
 8018248:	4413      	add	r3, r2
 801824a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801824c:	7bbb      	ldrb	r3, [r7, #14]
 801824e:	3301      	adds	r3, #1
 8018250:	73bb      	strb	r3, [r7, #14]
 8018252:	7bba      	ldrb	r2, [r7, #14]
 8018254:	78bb      	ldrb	r3, [r7, #2]
 8018256:	429a      	cmp	r2, r3
 8018258:	d3ea      	bcc.n	8018230 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 801825a:	7bfb      	ldrb	r3, [r7, #15]
}
 801825c:	4618      	mov	r0, r3
 801825e:	3710      	adds	r7, #16
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}

08018264 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8018264:	b480      	push	{r7}
 8018266:	b087      	sub	sp, #28
 8018268:	af00      	add	r7, sp, #0
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	60b9      	str	r1, [r7, #8]
 801826e:	4613      	mov	r3, r2
 8018270:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d016      	beq.n	80182a6 <RegionCommonChanMaskCopy+0x42>
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d013      	beq.n	80182a6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 801827e:	2300      	movs	r3, #0
 8018280:	75fb      	strb	r3, [r7, #23]
 8018282:	e00c      	b.n	801829e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8018284:	7dfb      	ldrb	r3, [r7, #23]
 8018286:	005b      	lsls	r3, r3, #1
 8018288:	68ba      	ldr	r2, [r7, #8]
 801828a:	441a      	add	r2, r3
 801828c:	7dfb      	ldrb	r3, [r7, #23]
 801828e:	005b      	lsls	r3, r3, #1
 8018290:	68f9      	ldr	r1, [r7, #12]
 8018292:	440b      	add	r3, r1
 8018294:	8812      	ldrh	r2, [r2, #0]
 8018296:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8018298:	7dfb      	ldrb	r3, [r7, #23]
 801829a:	3301      	adds	r3, #1
 801829c:	75fb      	strb	r3, [r7, #23]
 801829e:	7dfa      	ldrb	r2, [r7, #23]
 80182a0:	79fb      	ldrb	r3, [r7, #7]
 80182a2:	429a      	cmp	r2, r3
 80182a4:	d3ee      	bcc.n	8018284 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80182a6:	bf00      	nop
 80182a8:	371c      	adds	r7, #28
 80182aa:	46bd      	mov	sp, r7
 80182ac:	bc80      	pop	{r7}
 80182ae:	4770      	bx	lr

080182b0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80182b0:	b082      	sub	sp, #8
 80182b2:	b580      	push	{r7, lr}
 80182b4:	b086      	sub	sp, #24
 80182b6:	af00      	add	r7, sp, #0
 80182b8:	60f8      	str	r0, [r7, #12]
 80182ba:	60b9      	str	r1, [r7, #8]
 80182bc:	627b      	str	r3, [r7, #36]	; 0x24
 80182be:	4613      	mov	r3, r2
 80182c0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80182c2:	79f9      	ldrb	r1, [r7, #7]
 80182c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80182c8:	cb0c      	ldmia	r3, {r2, r3}
 80182ca:	68f8      	ldr	r0, [r7, #12]
 80182cc:	f7ff fd8b 	bl	8017de6 <GetDutyCycle>
 80182d0:	4603      	mov	r3, r0
 80182d2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	68da      	ldr	r2, [r3, #12]
 80182d8:	8afb      	ldrh	r3, [r7, #22]
 80182da:	68b9      	ldr	r1, [r7, #8]
 80182dc:	fb01 f303 	mul.w	r3, r1, r3
 80182e0:	429a      	cmp	r2, r3
 80182e2:	d909      	bls.n	80182f8 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	68da      	ldr	r2, [r3, #12]
 80182e8:	8afb      	ldrh	r3, [r7, #22]
 80182ea:	68b9      	ldr	r1, [r7, #8]
 80182ec:	fb01 f303 	mul.w	r3, r1, r3
 80182f0:	1ad2      	subs	r2, r2, r3
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80182f6:	e002      	b.n	80182fe <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	2200      	movs	r2, #0
 80182fc:	60da      	str	r2, [r3, #12]
}
 80182fe:	bf00      	nop
 8018300:	3718      	adds	r7, #24
 8018302:	46bd      	mov	sp, r7
 8018304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018308:	b002      	add	sp, #8
 801830a:	4770      	bx	lr

0801830c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801830c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801830e:	b08f      	sub	sp, #60	; 0x3c
 8018310:	af04      	add	r7, sp, #16
 8018312:	6039      	str	r1, [r7, #0]
 8018314:	4611      	mov	r1, r2
 8018316:	461a      	mov	r2, r3
 8018318:	4603      	mov	r3, r0
 801831a:	71fb      	strb	r3, [r7, #7]
 801831c:	460b      	mov	r3, r1
 801831e:	71bb      	strb	r3, [r7, #6]
 8018320:	4613      	mov	r3, r2
 8018322:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018324:	f04f 33ff 	mov.w	r3, #4294967295
 8018328:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801832a:	f007 fc91 	bl	801fc50 <UTIL_TIMER_GetCurrentTime>
 801832e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018330:	2300      	movs	r3, #0
 8018332:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018334:	2301      	movs	r3, #1
 8018336:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018338:	2300      	movs	r3, #0
 801833a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801833e:	2300      	movs	r3, #0
 8018340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018344:	e0ba      	b.n	80184bc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018346:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801834a:	4613      	mov	r3, r2
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	4413      	add	r3, r2
 8018350:	00db      	lsls	r3, r3, #3
 8018352:	461a      	mov	r2, r3
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	189c      	adds	r4, r3, r2
 8018358:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801835c:	797a      	ldrb	r2, [r7, #5]
 801835e:	79fd      	ldrb	r5, [r7, #7]
 8018360:	69fb      	ldr	r3, [r7, #28]
 8018362:	9302      	str	r3, [sp, #8]
 8018364:	46ec      	mov	ip, sp
 8018366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801836a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801836e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018372:	4633      	mov	r3, r6
 8018374:	4629      	mov	r1, r5
 8018376:	4620      	mov	r0, r4
 8018378:	f7ff fe22 	bl	8017fc0 <UpdateTimeCredits>
 801837c:	4603      	mov	r3, r0
 801837e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8018380:	8afa      	ldrh	r2, [r7, #22]
 8018382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018384:	fb02 f303 	mul.w	r3, r2, r3
 8018388:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 801838a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801838e:	4613      	mov	r3, r2
 8018390:	005b      	lsls	r3, r3, #1
 8018392:	4413      	add	r3, r2
 8018394:	00db      	lsls	r3, r3, #3
 8018396:	461a      	mov	r2, r3
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	4413      	add	r3, r2
 801839c:	68db      	ldr	r3, [r3, #12]
 801839e:	69ba      	ldr	r2, [r7, #24]
 80183a0:	429a      	cmp	r2, r3
 80183a2:	d308      	bcc.n	80183b6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183a4:	797b      	ldrb	r3, [r7, #5]
 80183a6:	f083 0301 	eor.w	r3, r3, #1
 80183aa:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d013      	beq.n	80183d8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80183b0:	79fb      	ldrb	r3, [r7, #7]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d010      	beq.n	80183d8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80183b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183ba:	4613      	mov	r3, r2
 80183bc:	005b      	lsls	r3, r3, #1
 80183be:	4413      	add	r3, r2
 80183c0:	00db      	lsls	r3, r3, #3
 80183c2:	461a      	mov	r2, r3
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	4413      	add	r3, r2
 80183c8:	2201      	movs	r2, #1
 80183ca:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80183cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80183d0:	3301      	adds	r3, #1
 80183d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80183d6:	e06c      	b.n	80184b2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80183d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183dc:	4613      	mov	r3, r2
 80183de:	005b      	lsls	r3, r3, #1
 80183e0:	4413      	add	r3, r2
 80183e2:	00db      	lsls	r3, r3, #3
 80183e4:	461a      	mov	r2, r3
 80183e6:	683b      	ldr	r3, [r7, #0]
 80183e8:	4413      	add	r3, r2
 80183ea:	2200      	movs	r2, #0
 80183ec:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80183ee:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80183f2:	4613      	mov	r3, r2
 80183f4:	005b      	lsls	r3, r3, #1
 80183f6:	4413      	add	r3, r2
 80183f8:	00db      	lsls	r3, r3, #3
 80183fa:	461a      	mov	r2, r3
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	4413      	add	r3, r2
 8018400:	691b      	ldr	r3, [r3, #16]
 8018402:	69ba      	ldr	r2, [r7, #24]
 8018404:	429a      	cmp	r2, r3
 8018406:	d215      	bcs.n	8018434 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018408:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801840c:	4613      	mov	r3, r2
 801840e:	005b      	lsls	r3, r3, #1
 8018410:	4413      	add	r3, r2
 8018412:	00db      	lsls	r3, r3, #3
 8018414:	461a      	mov	r2, r3
 8018416:	683b      	ldr	r3, [r7, #0]
 8018418:	4413      	add	r3, r2
 801841a:	68db      	ldr	r3, [r3, #12]
 801841c:	69ba      	ldr	r2, [r7, #24]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018422:	4293      	cmp	r3, r2
 8018424:	bf28      	it	cs
 8018426:	4613      	movcs	r3, r2
 8018428:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801842a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801842e:	3301      	adds	r3, #1
 8018430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018434:	79fb      	ldrb	r3, [r7, #7]
 8018436:	f083 0301 	eor.w	r3, r3, #1
 801843a:	b2db      	uxtb	r3, r3
 801843c:	2b00      	cmp	r3, #0
 801843e:	d038      	beq.n	80184b2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018440:	2300      	movs	r3, #0
 8018442:	60fb      	str	r3, [r7, #12]
 8018444:	2300      	movs	r3, #0
 8018446:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018448:	8afb      	ldrh	r3, [r7, #22]
 801844a:	2b64      	cmp	r3, #100	; 0x64
 801844c:	d103      	bne.n	8018456 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801844e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018452:	60fb      	str	r3, [r7, #12]
 8018454:	e009      	b.n	801846a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018456:	8afb      	ldrh	r3, [r7, #22]
 8018458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801845c:	d103      	bne.n	8018466 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801845e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018462:	60fb      	str	r3, [r7, #12]
 8018464:	e001      	b.n	801846a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018466:	4b1e      	ldr	r3, [pc, #120]	; (80184e0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018468:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801846a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801846c:	4a1c      	ldr	r2, [pc, #112]	; (80184e0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801846e:	4293      	cmp	r3, r2
 8018470:	d90e      	bls.n	8018490 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8018472:	68fa      	ldr	r2, [r7, #12]
 8018474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018476:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801847a:	3b30      	subs	r3, #48	; 0x30
 801847c:	4919      	ldr	r1, [pc, #100]	; (80184e4 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801847e:	fba1 1303 	umull	r1, r3, r1, r3
 8018482:	0c1b      	lsrs	r3, r3, #16
 8018484:	3301      	adds	r3, #1
 8018486:	4918      	ldr	r1, [pc, #96]	; (80184e8 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018488:	fb01 f303 	mul.w	r3, r1, r3
 801848c:	4413      	add	r3, r2
 801848e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8018490:	f107 000c 	add.w	r0, r7, #12
 8018494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018496:	9300      	str	r3, [sp, #0]
 8018498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801849a:	f107 020c 	add.w	r2, r7, #12
 801849e:	ca06      	ldmia	r2, {r1, r2}
 80184a0:	f006 ff2d 	bl	801f2fe <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80184a4:	f107 030c 	add.w	r3, r7, #12
 80184a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80184ac:	f006 ffe6 	bl	801f47c <SysTimeToMs>
 80184b0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80184b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80184b6:	3301      	adds	r3, #1
 80184b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80184bc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80184c0:	79bb      	ldrb	r3, [r7, #6]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	f4ff af3f 	bcc.w	8018346 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }


    if( validBands == 0 )
 80184c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d102      	bne.n	80184d6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80184d0:	f04f 33ff 	mov.w	r3, #4294967295
 80184d4:	e000      	b.n	80184d8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80184d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80184d8:	4618      	mov	r0, r3
 80184da:	372c      	adds	r7, #44	; 0x2c
 80184dc:	46bd      	mov	sp, r7
 80184de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184e0:	0001ec30 	.word	0x0001ec30
 80184e4:	c22e4507 	.word	0xc22e4507
 80184e8:	00015180 	.word	0x00015180

080184ec <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80184ec:	b480      	push	{r7}
 80184ee:	b085      	sub	sp, #20
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	6078      	str	r0, [r7, #4]
 80184f4:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80184f6:	2300      	movs	r3, #0
 80184f8:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	2b03      	cmp	r3, #3
 8018500:	d13f      	bne.n	8018582 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	3301      	adds	r3, #1
 8018506:	781b      	ldrb	r3, [r3, #0]
 8018508:	b25a      	sxtb	r2, r3
 801850a:	683b      	ldr	r3, [r7, #0]
 801850c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018514:	f003 030f 	and.w	r3, r3, #15
 8018518:	b25a      	sxtb	r2, r3
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018524:	b2db      	uxtb	r3, r3
 8018526:	091b      	lsrs	r3, r3, #4
 8018528:	b2db      	uxtb	r3, r3
 801852a:	b25a      	sxtb	r2, r3
 801852c:	683b      	ldr	r3, [r7, #0]
 801852e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	3302      	adds	r3, #2
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	b29a      	uxth	r2, r3
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801853c:	683b      	ldr	r3, [r7, #0]
 801853e:	889b      	ldrh	r3, [r3, #4]
 8018540:	b21a      	sxth	r2, r3
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	3303      	adds	r3, #3
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	021b      	lsls	r3, r3, #8
 801854a:	b21b      	sxth	r3, r3
 801854c:	4313      	orrs	r3, r2
 801854e:	b21b      	sxth	r3, r3
 8018550:	b29a      	uxth	r2, r3
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	791a      	ldrb	r2, [r3, #4]
 801855a:	683b      	ldr	r3, [r7, #0]
 801855c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801855e:	683b      	ldr	r3, [r7, #0]
 8018560:	781b      	ldrb	r3, [r3, #0]
 8018562:	091b      	lsrs	r3, r3, #4
 8018564:	b2db      	uxtb	r3, r3
 8018566:	f003 0307 	and.w	r3, r3, #7
 801856a:	b2da      	uxtb	r2, r3
 801856c:	683b      	ldr	r3, [r7, #0]
 801856e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	781b      	ldrb	r3, [r3, #0]
 8018574:	f003 030f 	and.w	r3, r3, #15
 8018578:	b2da      	uxtb	r2, r3
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801857e:	2305      	movs	r3, #5
 8018580:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8018582:	7bfb      	ldrb	r3, [r7, #15]
}
 8018584:	4618      	mov	r0, r3
 8018586:	3714      	adds	r7, #20
 8018588:	46bd      	mov	sp, r7
 801858a:	bc80      	pop	{r7}
 801858c:	4770      	bx	lr

0801858e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801858e:	b5b0      	push	{r4, r5, r7, lr}
 8018590:	b088      	sub	sp, #32
 8018592:	af02      	add	r7, sp, #8
 8018594:	60f8      	str	r0, [r7, #12]
 8018596:	60b9      	str	r1, [r7, #8]
 8018598:	607a      	str	r2, [r7, #4]
 801859a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	791b      	ldrb	r3, [r3, #4]
 80185a0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	799b      	ldrb	r3, [r3, #6]
 80185a6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	79db      	ldrb	r3, [r3, #7]
 80185ac:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	7a1b      	ldrb	r3, [r3, #8]
 80185b2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	795b      	ldrb	r3, [r3, #5]
 80185b8:	f083 0301 	eor.w	r3, r3, #1
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d008      	beq.n	80185d4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	7adb      	ldrb	r3, [r3, #11]
 80185c6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	7a5b      	ldrb	r3, [r3, #9]
 80185cc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	7a9b      	ldrb	r3, [r3, #10]
 80185d2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80185d4:	7dfb      	ldrb	r3, [r7, #23]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d03a      	beq.n	8018650 <RegionCommonLinkAdrReqVerifyParams+0xc2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80185da:	68fb      	ldr	r3, [r7, #12]
 80185dc:	7b18      	ldrb	r0, [r3, #12]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	6919      	ldr	r1, [r3, #16]
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80185ee:	68fa      	ldr	r2, [r7, #12]
 80185f0:	6992      	ldr	r2, [r2, #24]
 80185f2:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80185f6:	9201      	str	r2, [sp, #4]
 80185f8:	9300      	str	r3, [sp, #0]
 80185fa:	462b      	mov	r3, r5
 80185fc:	4622      	mov	r2, r4
 80185fe:	f7ff fd42 	bl	8018086 <RegionCommonChanVerifyDr>
 8018602:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018604:	f083 0301 	eor.w	r3, r3, #1
 8018608:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801860a:	2b00      	cmp	r3, #0
 801860c:	d003      	beq.n	8018616 <RegionCommonLinkAdrReqVerifyParams+0x88>
        {
            status &= 0xFD; // Datarate KO
 801860e:	7dfb      	ldrb	r3, [r7, #23]
 8018610:	f023 0302 	bic.w	r3, r3, #2
 8018614:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018622:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018626:	4618      	mov	r0, r3
 8018628:	f7ff fd9f 	bl	801816a <RegionCommonValueInRange>
 801862c:	4603      	mov	r3, r0
 801862e:	2b00      	cmp	r3, #0
 8018630:	d10e      	bne.n	8018650 <RegionCommonLinkAdrReqVerifyParams+0xc2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018638:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801863c:	429a      	cmp	r2, r3
 801863e:	da03      	bge.n	8018648 <RegionCommonLinkAdrReqVerifyParams+0xba>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	7f5b      	ldrb	r3, [r3, #29]
 8018644:	757b      	strb	r3, [r7, #21]
 8018646:	e003      	b.n	8018650 <RegionCommonLinkAdrReqVerifyParams+0xc2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018648:	7dfb      	ldrb	r3, [r7, #23]
 801864a:	f023 0304 	bic.w	r3, r3, #4
 801864e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018650:	7dfb      	ldrb	r3, [r7, #23]
 8018652:	2b07      	cmp	r3, #7
 8018654:	d105      	bne.n	8018662 <RegionCommonLinkAdrReqVerifyParams+0xd4>
    {
        if( nbRepetitions == 0 )
 8018656:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d101      	bne.n	8018662 <RegionCommonLinkAdrReqVerifyParams+0xd4>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801865e:	2301      	movs	r3, #1
 8018660:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8018662:	68bb      	ldr	r3, [r7, #8]
 8018664:	7dba      	ldrb	r2, [r7, #22]
 8018666:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	7d7a      	ldrb	r2, [r7, #21]
 801866c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801866e:	7d3a      	ldrb	r2, [r7, #20]
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	701a      	strb	r2, [r3, #0]

    return status;
 8018674:	7dfb      	ldrb	r3, [r7, #23]
}
 8018676:	4618      	mov	r0, r3
 8018678:	3718      	adds	r7, #24
 801867a:	46bd      	mov	sp, r7
 801867c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018680 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8018680:	b480      	push	{r7}
 8018682:	b083      	sub	sp, #12
 8018684:	af00      	add	r7, sp, #0
 8018686:	4603      	mov	r3, r0
 8018688:	6039      	str	r1, [r7, #0]
 801868a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801868c:	79fb      	ldrb	r3, [r7, #7]
 801868e:	4a06      	ldr	r2, [pc, #24]	; (80186a8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8018690:	fa02 f303 	lsl.w	r3, r2, r3
 8018694:	461a      	mov	r2, r3
 8018696:	683b      	ldr	r3, [r7, #0]
 8018698:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801869c:	4618      	mov	r0, r3
 801869e:	370c      	adds	r7, #12
 80186a0:	46bd      	mov	sp, r7
 80186a2:	bc80      	pop	{r7}
 80186a4:	4770      	bx	lr
 80186a6:	bf00      	nop
 80186a8:	000f4240 	.word	0x000f4240

080186ac <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	4603      	mov	r3, r0
 80186b4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80186b6:	79fb      	ldrb	r3, [r7, #7]
 80186b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80186bc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80186c0:	4618      	mov	r0, r3
 80186c2:	370c      	adds	r7, #12
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bc80      	pop	{r7}
 80186c8:	4770      	bx	lr
	...

080186cc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80186cc:	b480      	push	{r7}
 80186ce:	b085      	sub	sp, #20
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	607a      	str	r2, [r7, #4]
 80186d6:	603b      	str	r3, [r7, #0]
 80186d8:	460b      	mov	r3, r1
 80186da:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80186dc:	7afa      	ldrb	r2, [r7, #11]
 80186de:	7afb      	ldrb	r3, [r7, #11]
 80186e0:	3b04      	subs	r3, #4
 80186e2:	4619      	mov	r1, r3
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	fb03 f101 	mul.w	r1, r3, r1
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80186f0:	fb00 f303 	mul.w	r3, r0, r3
 80186f4:	440b      	add	r3, r1
 80186f6:	005b      	lsls	r3, r3, #1
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d013      	beq.n	8018724 <RegionCommonComputeRxWindowParameters+0x58>
 80186fc:	7afb      	ldrb	r3, [r7, #11]
 80186fe:	3b04      	subs	r3, #4
 8018700:	4619      	mov	r1, r3
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	fb03 f101 	mul.w	r1, r3, r1
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801870e:	fb00 f303 	mul.w	r3, r0, r3
 8018712:	440b      	add	r3, r1
 8018714:	0059      	lsls	r1, r3, #1
 8018716:	68fb      	ldr	r3, [r7, #12]
 8018718:	440b      	add	r3, r1
 801871a:	1e59      	subs	r1, r3, #1
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	fbb1 f3f3 	udiv	r3, r1, r3
 8018722:	e00f      	b.n	8018744 <RegionCommonComputeRxWindowParameters+0x78>
 8018724:	7afb      	ldrb	r3, [r7, #11]
 8018726:	3b04      	subs	r3, #4
 8018728:	4619      	mov	r1, r3
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	fb03 f101 	mul.w	r1, r3, r1
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018736:	fb00 f303 	mul.w	r3, r0, r3
 801873a:	440b      	add	r3, r1
 801873c:	0059      	lsls	r1, r3, #1
 801873e:	68fb      	ldr	r3, [r7, #12]
 8018740:	fbb1 f3f3 	udiv	r3, r1, r3
 8018744:	429a      	cmp	r2, r3
 8018746:	bf38      	it	cc
 8018748:	461a      	movcc	r2, r3
 801874a:	69bb      	ldr	r3, [r7, #24]
 801874c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	009b      	lsls	r3, r3, #2
 8018752:	4619      	mov	r1, r3
 8018754:	69bb      	ldr	r3, [r7, #24]
 8018756:	681b      	ldr	r3, [r3, #0]
 8018758:	68fa      	ldr	r2, [r7, #12]
 801875a:	fb02 f303 	mul.w	r3, r2, r3
 801875e:	2b00      	cmp	r3, #0
 8018760:	d007      	beq.n	8018772 <RegionCommonComputeRxWindowParameters+0xa6>
 8018762:	69bb      	ldr	r3, [r7, #24]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	68fa      	ldr	r2, [r7, #12]
 8018768:	fb02 f303 	mul.w	r3, r2, r3
 801876c:	3301      	adds	r3, #1
 801876e:	085b      	lsrs	r3, r3, #1
 8018770:	e005      	b.n	801877e <RegionCommonComputeRxWindowParameters+0xb2>
 8018772:	69bb      	ldr	r3, [r7, #24]
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	68fa      	ldr	r2, [r7, #12]
 8018778:	fb02 f303 	mul.w	r3, r2, r3
 801877c:	085b      	lsrs	r3, r3, #1
 801877e:	1acb      	subs	r3, r1, r3
 8018780:	683a      	ldr	r2, [r7, #0]
 8018782:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018786:	fb01 f202 	mul.w	r2, r1, r2
 801878a:	1a9b      	subs	r3, r3, r2
 801878c:	2b00      	cmp	r3, #0
 801878e:	dd27      	ble.n	80187e0 <RegionCommonComputeRxWindowParameters+0x114>
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	009b      	lsls	r3, r3, #2
 8018794:	4619      	mov	r1, r3
 8018796:	69bb      	ldr	r3, [r7, #24]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	68fa      	ldr	r2, [r7, #12]
 801879c:	fb02 f303 	mul.w	r3, r2, r3
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d007      	beq.n	80187b4 <RegionCommonComputeRxWindowParameters+0xe8>
 80187a4:	69bb      	ldr	r3, [r7, #24]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	68fa      	ldr	r2, [r7, #12]
 80187aa:	fb02 f303 	mul.w	r3, r2, r3
 80187ae:	3301      	adds	r3, #1
 80187b0:	085b      	lsrs	r3, r3, #1
 80187b2:	e005      	b.n	80187c0 <RegionCommonComputeRxWindowParameters+0xf4>
 80187b4:	69bb      	ldr	r3, [r7, #24]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	68fa      	ldr	r2, [r7, #12]
 80187ba:	fb02 f303 	mul.w	r3, r2, r3
 80187be:	085b      	lsrs	r3, r3, #1
 80187c0:	1acb      	subs	r3, r1, r3
 80187c2:	683a      	ldr	r2, [r7, #0]
 80187c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80187c8:	fb01 f202 	mul.w	r2, r1, r2
 80187cc:	1a9b      	subs	r3, r3, r2
 80187ce:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80187d2:	4a19      	ldr	r2, [pc, #100]	; (8018838 <RegionCommonComputeRxWindowParameters+0x16c>)
 80187d4:	fb82 1203 	smull	r1, r2, r2, r3
 80187d8:	1192      	asrs	r2, r2, #6
 80187da:	17db      	asrs	r3, r3, #31
 80187dc:	1ad3      	subs	r3, r2, r3
 80187de:	e024      	b.n	801882a <RegionCommonComputeRxWindowParameters+0x15e>
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	4619      	mov	r1, r3
 80187e6:	69bb      	ldr	r3, [r7, #24]
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	68fa      	ldr	r2, [r7, #12]
 80187ec:	fb02 f303 	mul.w	r3, r2, r3
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d007      	beq.n	8018804 <RegionCommonComputeRxWindowParameters+0x138>
 80187f4:	69bb      	ldr	r3, [r7, #24]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	68fa      	ldr	r2, [r7, #12]
 80187fa:	fb02 f303 	mul.w	r3, r2, r3
 80187fe:	3301      	adds	r3, #1
 8018800:	085b      	lsrs	r3, r3, #1
 8018802:	e005      	b.n	8018810 <RegionCommonComputeRxWindowParameters+0x144>
 8018804:	69bb      	ldr	r3, [r7, #24]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	68fa      	ldr	r2, [r7, #12]
 801880a:	fb02 f303 	mul.w	r3, r2, r3
 801880e:	085b      	lsrs	r3, r3, #1
 8018810:	1acb      	subs	r3, r1, r3
 8018812:	683a      	ldr	r2, [r7, #0]
 8018814:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018818:	fb01 f202 	mul.w	r2, r1, r2
 801881c:	1a9b      	subs	r3, r3, r2
 801881e:	4a06      	ldr	r2, [pc, #24]	; (8018838 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018820:	fb82 1203 	smull	r1, r2, r2, r3
 8018824:	1192      	asrs	r2, r2, #6
 8018826:	17db      	asrs	r3, r3, #31
 8018828:	1ad3      	subs	r3, r2, r3
 801882a:	69fa      	ldr	r2, [r7, #28]
 801882c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801882e:	bf00      	nop
 8018830:	3714      	adds	r7, #20
 8018832:	46bd      	mov	sp, r7
 8018834:	bc80      	pop	{r7}
 8018836:	4770      	bx	lr
 8018838:	10624dd3 	.word	0x10624dd3

0801883c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b086      	sub	sp, #24
 8018840:	af00      	add	r7, sp, #0
 8018842:	4603      	mov	r3, r0
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	607a      	str	r2, [r7, #4]
 8018848:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801884a:	2300      	movs	r3, #0
 801884c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801884e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018852:	005b      	lsls	r3, r3, #1
 8018854:	4618      	mov	r0, r3
 8018856:	f7e7 ffbd 	bl	80007d4 <__aeabi_ui2f>
 801885a:	4603      	mov	r3, r0
 801885c:	4619      	mov	r1, r3
 801885e:	68b8      	ldr	r0, [r7, #8]
 8018860:	f7e7 ff06 	bl	8000670 <__aeabi_fsub>
 8018864:	4603      	mov	r3, r0
 8018866:	6879      	ldr	r1, [r7, #4]
 8018868:	4618      	mov	r0, r3
 801886a:	f7e7 ff01 	bl	8000670 <__aeabi_fsub>
 801886e:	4603      	mov	r3, r0
 8018870:	4618      	mov	r0, r3
 8018872:	f7e7 fdf1 	bl	8000458 <__aeabi_f2d>
 8018876:	4602      	mov	r2, r0
 8018878:	460b      	mov	r3, r1
 801887a:	4610      	mov	r0, r2
 801887c:	4619      	mov	r1, r3
 801887e:	f008 f93b 	bl	8020af8 <floor>
 8018882:	4602      	mov	r2, r0
 8018884:	460b      	mov	r3, r1
 8018886:	4610      	mov	r0, r2
 8018888:	4619      	mov	r1, r3
 801888a:	f7e7 fec5 	bl	8000618 <__aeabi_d2iz>
 801888e:	4603      	mov	r3, r0
 8018890:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8018892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018896:	4618      	mov	r0, r3
 8018898:	3718      	adds	r7, #24
 801889a:	46bd      	mov	sp, r7
 801889c:	bd80      	pop	{r7, pc}

0801889e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801889e:	b590      	push	{r4, r7, lr}
 80188a0:	b087      	sub	sp, #28
 80188a2:	af00      	add	r7, sp, #0
 80188a4:	60f8      	str	r0, [r7, #12]
 80188a6:	60b9      	str	r1, [r7, #8]
 80188a8:	607a      	str	r2, [r7, #4]
 80188aa:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80188ac:	2300      	movs	r3, #0
 80188ae:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80188b0:	2300      	movs	r3, #0
 80188b2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80188b4:	2300      	movs	r3, #0
 80188b6:	757b      	strb	r3, [r7, #21]
 80188b8:	2300      	movs	r3, #0
 80188ba:	753b      	strb	r3, [r7, #20]
 80188bc:	e09c      	b.n	80189f8 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80188be:	2300      	movs	r3, #0
 80188c0:	74fb      	strb	r3, [r7, #19]
 80188c2:	e08f      	b.n	80189e4 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80188c4:	68fb      	ldr	r3, [r7, #12]
 80188c6:	685a      	ldr	r2, [r3, #4]
 80188c8:	7d3b      	ldrb	r3, [r7, #20]
 80188ca:	005b      	lsls	r3, r3, #1
 80188cc:	4413      	add	r3, r2
 80188ce:	881b      	ldrh	r3, [r3, #0]
 80188d0:	461a      	mov	r2, r3
 80188d2:	7cfb      	ldrb	r3, [r7, #19]
 80188d4:	fa42 f303 	asr.w	r3, r2, r3
 80188d8:	f003 0301 	and.w	r3, r3, #1
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d07e      	beq.n	80189de <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	689a      	ldr	r2, [r3, #8]
 80188e4:	7d79      	ldrb	r1, [r7, #21]
 80188e6:	7cfb      	ldrb	r3, [r7, #19]
 80188e8:	440b      	add	r3, r1
 80188ea:	4619      	mov	r1, r3
 80188ec:	460b      	mov	r3, r1
 80188ee:	005b      	lsls	r3, r3, #1
 80188f0:	440b      	add	r3, r1
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	4413      	add	r3, r2
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d06b      	beq.n	80189d4 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	781b      	ldrb	r3, [r3, #0]
 8018900:	f083 0301 	eor.w	r3, r3, #1
 8018904:	b2db      	uxtb	r3, r3
 8018906:	2b00      	cmp	r3, #0
 8018908:	d011      	beq.n	801892e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801890e:	2b00      	cmp	r3, #0
 8018910:	d00d      	beq.n	801892e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	695a      	ldr	r2, [r3, #20]
 8018916:	7d3b      	ldrb	r3, [r7, #20]
 8018918:	005b      	lsls	r3, r3, #1
 801891a:	4413      	add	r3, r2
 801891c:	881b      	ldrh	r3, [r3, #0]
 801891e:	461a      	mov	r2, r3
 8018920:	7cfb      	ldrb	r3, [r7, #19]
 8018922:	fa42 f303 	asr.w	r3, r2, r3
 8018926:	f003 0301 	and.w	r3, r3, #1
 801892a:	2b00      	cmp	r3, #0
 801892c:	d054      	beq.n	80189d8 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801892e:	68fb      	ldr	r3, [r7, #12]
 8018930:	785b      	ldrb	r3, [r3, #1]
 8018932:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	689a      	ldr	r2, [r3, #8]
 8018938:	7d79      	ldrb	r1, [r7, #21]
 801893a:	7cfb      	ldrb	r3, [r7, #19]
 801893c:	440b      	add	r3, r1
 801893e:	4619      	mov	r1, r3
 8018940:	460b      	mov	r3, r1
 8018942:	005b      	lsls	r3, r3, #1
 8018944:	440b      	add	r3, r1
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	4413      	add	r3, r2
 801894a:	7a1b      	ldrb	r3, [r3, #8]
 801894c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018950:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018952:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	689a      	ldr	r2, [r3, #8]
 8018958:	7d79      	ldrb	r1, [r7, #21]
 801895a:	7cfb      	ldrb	r3, [r7, #19]
 801895c:	440b      	add	r3, r1
 801895e:	4619      	mov	r1, r3
 8018960:	460b      	mov	r3, r1
 8018962:	005b      	lsls	r3, r3, #1
 8018964:	440b      	add	r3, r1
 8018966:	009b      	lsls	r3, r3, #2
 8018968:	4413      	add	r3, r2
 801896a:	7a1b      	ldrb	r3, [r3, #8]
 801896c:	f343 1303 	sbfx	r3, r3, #4, #4
 8018970:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018972:	461a      	mov	r2, r3
 8018974:	4621      	mov	r1, r4
 8018976:	f7ff fbf8 	bl	801816a <RegionCommonValueInRange>
 801897a:	4603      	mov	r3, r0
 801897c:	2b00      	cmp	r3, #0
 801897e:	d02d      	beq.n	80189dc <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	68da      	ldr	r2, [r3, #12]
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	6899      	ldr	r1, [r3, #8]
 8018988:	7d78      	ldrb	r0, [r7, #21]
 801898a:	7cfb      	ldrb	r3, [r7, #19]
 801898c:	4403      	add	r3, r0
 801898e:	4618      	mov	r0, r3
 8018990:	4603      	mov	r3, r0
 8018992:	005b      	lsls	r3, r3, #1
 8018994:	4403      	add	r3, r0
 8018996:	009b      	lsls	r3, r3, #2
 8018998:	440b      	add	r3, r1
 801899a:	7a5b      	ldrb	r3, [r3, #9]
 801899c:	4619      	mov	r1, r3
 801899e:	460b      	mov	r3, r1
 80189a0:	005b      	lsls	r3, r3, #1
 80189a2:	440b      	add	r3, r1
 80189a4:	00db      	lsls	r3, r3, #3
 80189a6:	4413      	add	r3, r2
 80189a8:	7d1b      	ldrb	r3, [r3, #20]
 80189aa:	f083 0301 	eor.w	r3, r3, #1
 80189ae:	b2db      	uxtb	r3, r3
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d003      	beq.n	80189bc <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80189b4:	7dbb      	ldrb	r3, [r7, #22]
 80189b6:	3301      	adds	r3, #1
 80189b8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80189ba:	e010      	b.n	80189de <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80189bc:	7dfb      	ldrb	r3, [r7, #23]
 80189be:	1c5a      	adds	r2, r3, #1
 80189c0:	75fa      	strb	r2, [r7, #23]
 80189c2:	461a      	mov	r2, r3
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	4413      	add	r3, r2
 80189c8:	7d79      	ldrb	r1, [r7, #21]
 80189ca:	7cfa      	ldrb	r2, [r7, #19]
 80189cc:	440a      	add	r2, r1
 80189ce:	b2d2      	uxtb	r2, r2
 80189d0:	701a      	strb	r2, [r3, #0]
 80189d2:	e004      	b.n	80189de <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80189d4:	bf00      	nop
 80189d6:	e002      	b.n	80189de <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80189d8:	bf00      	nop
 80189da:	e000      	b.n	80189de <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80189dc:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80189de:	7cfb      	ldrb	r3, [r7, #19]
 80189e0:	3301      	adds	r3, #1
 80189e2:	74fb      	strb	r3, [r7, #19]
 80189e4:	7cfb      	ldrb	r3, [r7, #19]
 80189e6:	2b0f      	cmp	r3, #15
 80189e8:	f67f af6c 	bls.w	80188c4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80189ec:	7d7b      	ldrb	r3, [r7, #21]
 80189ee:	3310      	adds	r3, #16
 80189f0:	757b      	strb	r3, [r7, #21]
 80189f2:	7d3b      	ldrb	r3, [r7, #20]
 80189f4:	3301      	adds	r3, #1
 80189f6:	753b      	strb	r3, [r7, #20]
 80189f8:	7d7b      	ldrb	r3, [r7, #21]
 80189fa:	b29a      	uxth	r2, r3
 80189fc:	68fb      	ldr	r3, [r7, #12]
 80189fe:	8a1b      	ldrh	r3, [r3, #16]
 8018a00:	429a      	cmp	r2, r3
 8018a02:	f4ff af5c 	bcc.w	80188be <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	7dfa      	ldrb	r2, [r7, #23]
 8018a0a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	7dba      	ldrb	r2, [r7, #22]
 8018a10:	701a      	strb	r2, [r3, #0]
}
 8018a12:	bf00      	nop
 8018a14:	371c      	adds	r7, #28
 8018a16:	46bd      	mov	sp, r7
 8018a18:	bd90      	pop	{r4, r7, pc}

08018a1a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a1c:	b08b      	sub	sp, #44	; 0x2c
 8018a1e:	af04      	add	r7, sp, #16
 8018a20:	60f8      	str	r0, [r7, #12]
 8018a22:	60b9      	str	r1, [r7, #8]
 8018a24:	607a      	str	r2, [r7, #4]
 8018a26:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f007 f921 	bl	801fc74 <UTIL_TIMER_GetElapsedTime>
 8018a32:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	681a      	ldr	r2, [r3, #0]
 8018a38:	697b      	ldr	r3, [r7, #20]
 8018a3a:	1ad2      	subs	r2, r2, r3
 8018a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a3e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a42:	2201      	movs	r2, #1
 8018a44:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	2200      	movs	r2, #0
 8018a4a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	685b      	ldr	r3, [r3, #4]
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d004      	beq.n	8018a5e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018a58:	697a      	ldr	r2, [r7, #20]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d32b      	bcc.n	8018ab6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	2200      	movs	r2, #0
 8018a62:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	69db      	ldr	r3, [r3, #28]
 8018a68:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018a6e:	68dd      	ldr	r5, [r3, #12]
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	7a5e      	ldrb	r6, [r3, #9]
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	f893 c008 	ldrb.w	ip, [r3, #8]
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	7d1b      	ldrb	r3, [r3, #20]
 8018a7e:	68fa      	ldr	r2, [r7, #12]
 8018a80:	6992      	ldr	r2, [r2, #24]
 8018a82:	9203      	str	r2, [sp, #12]
 8018a84:	68fa      	ldr	r2, [r7, #12]
 8018a86:	f10d 0e04 	add.w	lr, sp, #4
 8018a8a:	320c      	adds	r2, #12
 8018a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a90:	e88e 0003 	stmia.w	lr, {r0, r1}
 8018a94:	9300      	str	r3, [sp, #0]
 8018a96:	4663      	mov	r3, ip
 8018a98:	4632      	mov	r2, r6
 8018a9a:	4629      	mov	r1, r5
 8018a9c:	4620      	mov	r0, r4
 8018a9e:	f7ff fc35 	bl	801830c <RegionCommonUpdateBandTimeOff>
 8018aa2:	4602      	mov	r2, r0
 8018aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aa6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	69d8      	ldr	r0, [r3, #28]
 8018aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aae:	683a      	ldr	r2, [r7, #0]
 8018ab0:	6879      	ldr	r1, [r7, #4]
 8018ab2:	f7ff fef4 	bl	801889e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8018ab6:	683b      	ldr	r3, [r7, #0]
 8018ab8:	781b      	ldrb	r3, [r3, #0]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d004      	beq.n	8018ac8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	e006      	b.n	8018ad6 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aca:	781b      	ldrb	r3, [r3, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d001      	beq.n	8018ad4 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018ad0:	230b      	movs	r3, #11
 8018ad2:	e000      	b.n	8018ad6 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018ad4:	230c      	movs	r3, #12
    }
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	371c      	adds	r7, #28
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018ade <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018ade:	b5b0      	push	{r4, r5, r7, lr}
 8018ae0:	b086      	sub	sp, #24
 8018ae2:	af02      	add	r7, sp, #8
 8018ae4:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	781b      	ldrb	r3, [r3, #0]
 8018aea:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f993 2000 	ldrsb.w	r2, [r3]
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018af8:	429a      	cmp	r2, r3
 8018afa:	d103      	bne.n	8018b04 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018b02:	e026      	b.n	8018b52 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018b04:	7bfb      	ldrb	r3, [r7, #15]
 8018b06:	3b01      	subs	r3, #1
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018b12:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d019      	beq.n	8018b4e <RegionCommonGetNextLowerTxDr+0x70>
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	78d8      	ldrb	r0, [r3, #3]
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	6859      	ldr	r1, [r3, #4]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018b2e:	687a      	ldr	r2, [r7, #4]
 8018b30:	6892      	ldr	r2, [r2, #8]
 8018b32:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018b36:	9201      	str	r2, [sp, #4]
 8018b38:	9300      	str	r3, [sp, #0]
 8018b3a:	462b      	mov	r3, r5
 8018b3c:	4622      	mov	r2, r4
 8018b3e:	f7ff faa2 	bl	8018086 <RegionCommonChanVerifyDr>
 8018b42:	4603      	mov	r3, r0
 8018b44:	f083 0301 	eor.w	r3, r3, #1
 8018b48:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d1da      	bne.n	8018b04 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3710      	adds	r7, #16
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bdb0      	pop	{r4, r5, r7, pc}

08018b5a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8018b5a:	b480      	push	{r7}
 8018b5c:	b083      	sub	sp, #12
 8018b5e:	af00      	add	r7, sp, #0
 8018b60:	4603      	mov	r3, r0
 8018b62:	460a      	mov	r2, r1
 8018b64:	71fb      	strb	r3, [r7, #7]
 8018b66:	4613      	mov	r3, r2
 8018b68:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8018b6a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018b72:	4293      	cmp	r3, r2
 8018b74:	bfb8      	it	lt
 8018b76:	4613      	movlt	r3, r2
 8018b78:	b25b      	sxtb	r3, r3
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	370c      	adds	r7, #12
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bc80      	pop	{r7}
 8018b82:	4770      	bx	lr

08018b84 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	009b      	lsls	r3, r3, #2
 8018b92:	683a      	ldr	r2, [r7, #0]
 8018b94:	4413      	add	r3, r2
 8018b96:	681b      	ldr	r3, [r3, #0]
 8018b98:	4a07      	ldr	r2, [pc, #28]	; (8018bb8 <RegionCommonGetBandwidth+0x34>)
 8018b9a:	4293      	cmp	r3, r2
 8018b9c:	d004      	beq.n	8018ba8 <RegionCommonGetBandwidth+0x24>
 8018b9e:	4a07      	ldr	r2, [pc, #28]	; (8018bbc <RegionCommonGetBandwidth+0x38>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d003      	beq.n	8018bac <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8018ba4:	2300      	movs	r3, #0
 8018ba6:	e002      	b.n	8018bae <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8018ba8:	2301      	movs	r3, #1
 8018baa:	e000      	b.n	8018bae <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8018bac:	2302      	movs	r3, #2
    }
}
 8018bae:	4618      	mov	r0, r3
 8018bb0:	370c      	adds	r7, #12
 8018bb2:	46bd      	mov	sp, r7
 8018bb4:	bc80      	pop	{r7}
 8018bb6:	4770      	bx	lr
 8018bb8:	0003d090 	.word	0x0003d090
 8018bbc:	0007a120 	.word	0x0007a120

08018bc0 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018bc0:	b5b0      	push	{r4, r5, r7, lr}
 8018bc2:	b08c      	sub	sp, #48	; 0x30
 8018bc4:	af04      	add	r7, sp, #16
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	6039      	str	r1, [r7, #0]
 8018bca:	71fb      	strb	r3, [r7, #7]
 8018bcc:	4613      	mov	r3, r2
 8018bce:	71bb      	strb	r3, [r7, #6]
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 8018bd0:	4b17      	ldr	r3, [pc, #92]	; (8018c30 <RegionCommonRxConfigPrint+0x70>)
 8018bd2:	f107 0408 	add.w	r4, r7, #8
 8018bd6:	461d      	mov	r5, r3
 8018bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018bdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018be0:	e884 0003 	stmia.w	r4, {r0, r1}

    if ( rxSlot < RX_SLOT_NONE )
 8018be4:	79fb      	ldrb	r3, [r7, #7]
 8018be6:	2b05      	cmp	r3, #5
 8018be8:	d812      	bhi.n	8018c10 <RegionCommonRxConfigPrint+0x50>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 8018bea:	79fb      	ldrb	r3, [r7, #7]
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	3320      	adds	r3, #32
 8018bf0:	443b      	add	r3, r7
 8018bf2:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8018bf6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018bfa:	9202      	str	r2, [sp, #8]
 8018bfc:	683a      	ldr	r2, [r7, #0]
 8018bfe:	9201      	str	r2, [sp, #4]
 8018c00:	9300      	str	r3, [sp, #0]
 8018c02:	4b0c      	ldr	r3, [pc, #48]	; (8018c34 <RegionCommonRxConfigPrint+0x74>)
 8018c04:	2201      	movs	r2, #1
 8018c06:	2100      	movs	r1, #0
 8018c08:	2002      	movs	r0, #2
 8018c0a:	f005 fe2f 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018c0e:	e00a      	b.n	8018c26 <RegionCommonRxConfigPrint+0x66>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c14:	9301      	str	r3, [sp, #4]
 8018c16:	683b      	ldr	r3, [r7, #0]
 8018c18:	9300      	str	r3, [sp, #0]
 8018c1a:	4b07      	ldr	r3, [pc, #28]	; (8018c38 <RegionCommonRxConfigPrint+0x78>)
 8018c1c:	2201      	movs	r2, #1
 8018c1e:	2100      	movs	r1, #0
 8018c20:	2002      	movs	r0, #2
 8018c22:	f005 fe23 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8018c26:	bf00      	nop
 8018c28:	3720      	adds	r7, #32
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	08022948 	.word	0x08022948
 8018c34:	0802290c 	.word	0x0802290c
 8018c38:	0802292c 	.word	0x0802292c

08018c3c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af02      	add	r7, sp, #8
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	460b      	mov	r3, r1
 8018c46:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018c48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c4c:	9301      	str	r3, [sp, #4]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	9300      	str	r3, [sp, #0]
 8018c52:	4b05      	ldr	r3, [pc, #20]	; (8018c68 <RegionCommonTxConfigPrint+0x2c>)
 8018c54:	2201      	movs	r2, #1
 8018c56:	2100      	movs	r1, #0
 8018c58:	2002      	movs	r0, #2
 8018c5a:	f005 fe07 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
}
 8018c5e:	bf00      	nop
 8018c60:	3708      	adds	r7, #8
 8018c62:	46bd      	mov	sp, r7
 8018c64:	bd80      	pop	{r7, pc}
 8018c66:	bf00      	nop
 8018c68:	08022960 	.word	0x08022960

08018c6c <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b082      	sub	sp, #8
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
 8018c74:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8018c76:	4b2d      	ldr	r3, [pc, #180]	; (8018d2c <VerifyRfFreq+0xc0>)
 8018c78:	6a1b      	ldr	r3, [r3, #32]
 8018c7a:	6878      	ldr	r0, [r7, #4]
 8018c7c:	4798      	blx	r3
 8018c7e:	4603      	mov	r3, r0
 8018c80:	f083 0301 	eor.w	r3, r3, #1
 8018c84:	b2db      	uxtb	r3, r3
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d001      	beq.n	8018c8e <VerifyRfFreq+0x22>
    {
        return false;
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	e04a      	b.n	8018d24 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	4a27      	ldr	r2, [pc, #156]	; (8018d30 <VerifyRfFreq+0xc4>)
 8018c92:	4293      	cmp	r3, r2
 8018c94:	d307      	bcc.n	8018ca6 <VerifyRfFreq+0x3a>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	4a26      	ldr	r2, [pc, #152]	; (8018d34 <VerifyRfFreq+0xc8>)
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d803      	bhi.n	8018ca6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8018c9e:	683b      	ldr	r3, [r7, #0]
 8018ca0:	2202      	movs	r2, #2
 8018ca2:	701a      	strb	r2, [r3, #0]
 8018ca4:	e03d      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	4a22      	ldr	r2, [pc, #136]	; (8018d34 <VerifyRfFreq+0xc8>)
 8018caa:	4293      	cmp	r3, r2
 8018cac:	d907      	bls.n	8018cbe <VerifyRfFreq+0x52>
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	4a21      	ldr	r2, [pc, #132]	; (8018d38 <VerifyRfFreq+0xcc>)
 8018cb2:	4293      	cmp	r3, r2
 8018cb4:	d803      	bhi.n	8018cbe <VerifyRfFreq+0x52>
    {
        *band = 0;
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	2200      	movs	r2, #0
 8018cba:	701a      	strb	r2, [r3, #0]
 8018cbc:	e031      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4a1d      	ldr	r2, [pc, #116]	; (8018d38 <VerifyRfFreq+0xcc>)
 8018cc2:	4293      	cmp	r3, r2
 8018cc4:	d907      	bls.n	8018cd6 <VerifyRfFreq+0x6a>
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4a1c      	ldr	r2, [pc, #112]	; (8018d3c <VerifyRfFreq+0xd0>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d803      	bhi.n	8018cd6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8018cce:	683b      	ldr	r3, [r7, #0]
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	701a      	strb	r2, [r3, #0]
 8018cd4:	e025      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	4a19      	ldr	r2, [pc, #100]	; (8018d40 <VerifyRfFreq+0xd4>)
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d907      	bls.n	8018cee <VerifyRfFreq+0x82>
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4a18      	ldr	r2, [pc, #96]	; (8018d44 <VerifyRfFreq+0xd8>)
 8018ce2:	4293      	cmp	r3, r2
 8018ce4:	d803      	bhi.n	8018cee <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	2205      	movs	r2, #5
 8018cea:	701a      	strb	r2, [r3, #0]
 8018cec:	e019      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	4a15      	ldr	r2, [pc, #84]	; (8018d48 <VerifyRfFreq+0xdc>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d907      	bls.n	8018d06 <VerifyRfFreq+0x9a>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4a14      	ldr	r2, [pc, #80]	; (8018d4c <VerifyRfFreq+0xe0>)
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d803      	bhi.n	8018d06 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018cfe:	683b      	ldr	r3, [r7, #0]
 8018d00:	2203      	movs	r2, #3
 8018d02:	701a      	strb	r2, [r3, #0]
 8018d04:	e00d      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	4a11      	ldr	r2, [pc, #68]	; (8018d50 <VerifyRfFreq+0xe4>)
 8018d0a:	4293      	cmp	r3, r2
 8018d0c:	d307      	bcc.n	8018d1e <VerifyRfFreq+0xb2>
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	4a10      	ldr	r2, [pc, #64]	; (8018d54 <VerifyRfFreq+0xe8>)
 8018d12:	4293      	cmp	r3, r2
 8018d14:	d803      	bhi.n	8018d1e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	2204      	movs	r2, #4
 8018d1a:	701a      	strb	r2, [r3, #0]
 8018d1c:	e001      	b.n	8018d22 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018d1e:	2300      	movs	r3, #0
 8018d20:	e000      	b.n	8018d24 <VerifyRfFreq+0xb8>
    }
    return true;
 8018d22:	2301      	movs	r3, #1
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	3708      	adds	r7, #8
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	bd80      	pop	{r7, pc}
 8018d2c:	0802333c 	.word	0x0802333c
 8018d30:	337055c0 	.word	0x337055c0
 8018d34:	338eda3f 	.word	0x338eda3f
 8018d38:	33bca100 	.word	0x33bca100
 8018d3c:	33c5c8c0 	.word	0x33c5c8c0
 8018d40:	33c74f5f 	.word	0x33c74f5f
 8018d44:	33cef080 	.word	0x33cef080
 8018d48:	33d1fdbf 	.word	0x33d1fdbf
 8018d4c:	33d5ce50 	.word	0x33d5ce50
 8018d50:	33d691a0 	.word	0x33d691a0
 8018d54:	33db2580 	.word	0x33db2580

08018d58 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018d58:	b590      	push	{r4, r7, lr}
 8018d5a:	b08b      	sub	sp, #44	; 0x2c
 8018d5c:	af04      	add	r7, sp, #16
 8018d5e:	4603      	mov	r3, r0
 8018d60:	460a      	mov	r2, r1
 8018d62:	71fb      	strb	r3, [r7, #7]
 8018d64:	4613      	mov	r3, r2
 8018d66:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d6c:	4a1f      	ldr	r2, [pc, #124]	; (8018dec <GetTimeOnAir+0x94>)
 8018d6e:	5cd3      	ldrb	r3, [r2, r3]
 8018d70:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d76:	491e      	ldr	r1, [pc, #120]	; (8018df0 <GetTimeOnAir+0x98>)
 8018d78:	4618      	mov	r0, r3
 8018d7a:	f7ff ff03 	bl	8018b84 <RegionCommonGetBandwidth>
 8018d7e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018d80:	2300      	movs	r3, #0
 8018d82:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018d88:	2b07      	cmp	r3, #7
 8018d8a:	d118      	bne.n	8018dbe <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018d8c:	4b19      	ldr	r3, [pc, #100]	; (8018df4 <GetTimeOnAir+0x9c>)
 8018d8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018d90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018d98:	fb02 f303 	mul.w	r3, r2, r3
 8018d9c:	4619      	mov	r1, r3
 8018d9e:	88bb      	ldrh	r3, [r7, #4]
 8018da0:	b2db      	uxtb	r3, r3
 8018da2:	2201      	movs	r2, #1
 8018da4:	9203      	str	r2, [sp, #12]
 8018da6:	9302      	str	r3, [sp, #8]
 8018da8:	2300      	movs	r3, #0
 8018daa:	9301      	str	r3, [sp, #4]
 8018dac:	2305      	movs	r3, #5
 8018dae:	9300      	str	r3, [sp, #0]
 8018db0:	2300      	movs	r3, #0
 8018db2:	460a      	mov	r2, r1
 8018db4:	68f9      	ldr	r1, [r7, #12]
 8018db6:	2000      	movs	r0, #0
 8018db8:	47a0      	blx	r4
 8018dba:	6178      	str	r0, [r7, #20]
 8018dbc:	e011      	b.n	8018de2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018dbe:	4b0d      	ldr	r3, [pc, #52]	; (8018df4 <GetTimeOnAir+0x9c>)
 8018dc0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018dc2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018dc6:	88bb      	ldrh	r3, [r7, #4]
 8018dc8:	b2db      	uxtb	r3, r3
 8018dca:	2101      	movs	r1, #1
 8018dcc:	9103      	str	r1, [sp, #12]
 8018dce:	9302      	str	r3, [sp, #8]
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	9301      	str	r3, [sp, #4]
 8018dd4:	2308      	movs	r3, #8
 8018dd6:	9300      	str	r3, [sp, #0]
 8018dd8:	2301      	movs	r3, #1
 8018dda:	68f9      	ldr	r1, [r7, #12]
 8018ddc:	2001      	movs	r0, #1
 8018dde:	47a0      	blx	r4
 8018de0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018de2:	697b      	ldr	r3, [r7, #20]
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	371c      	adds	r7, #28
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd90      	pop	{r4, r7, pc}
 8018dec:	08023280 	.word	0x08023280
 8018df0:	08023288 	.word	0x08023288
 8018df4:	0802333c 	.word	0x0802333c

08018df8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b088      	sub	sp, #32
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018e00:	2300      	movs	r3, #0
 8018e02:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	781b      	ldrb	r3, [r3, #0]
 8018e08:	3b01      	subs	r3, #1
 8018e0a:	2b38      	cmp	r3, #56	; 0x38
 8018e0c:	f200 8128 	bhi.w	8019060 <RegionEU868GetPhyParam+0x268>
 8018e10:	a201      	add	r2, pc, #4	; (adr r2, 8018e18 <RegionEU868GetPhyParam+0x20>)
 8018e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e16:	bf00      	nop
 8018e18:	08018efd 	.word	0x08018efd
 8018e1c:	08018f03 	.word	0x08018f03
 8018e20:	08019061 	.word	0x08019061
 8018e24:	08019061 	.word	0x08019061
 8018e28:	08019061 	.word	0x08019061
 8018e2c:	08018f09 	.word	0x08018f09
 8018e30:	08019061 	.word	0x08019061
 8018e34:	08018f43 	.word	0x08018f43
 8018e38:	08019061 	.word	0x08019061
 8018e3c:	08018f49 	.word	0x08018f49
 8018e40:	08018f4f 	.word	0x08018f4f
 8018e44:	08018f55 	.word	0x08018f55
 8018e48:	08018f5b 	.word	0x08018f5b
 8018e4c:	08018f6b 	.word	0x08018f6b
 8018e50:	08018f7b 	.word	0x08018f7b
 8018e54:	08018f81 	.word	0x08018f81
 8018e58:	08018f89 	.word	0x08018f89
 8018e5c:	08018f91 	.word	0x08018f91
 8018e60:	08018f99 	.word	0x08018f99
 8018e64:	08018fa1 	.word	0x08018fa1
 8018e68:	08018fa9 	.word	0x08018fa9
 8018e6c:	08018fb1 	.word	0x08018fb1
 8018e70:	08018fc5 	.word	0x08018fc5
 8018e74:	08018fcb 	.word	0x08018fcb
 8018e78:	08018fd1 	.word	0x08018fd1
 8018e7c:	08018fd7 	.word	0x08018fd7
 8018e80:	08018fe3 	.word	0x08018fe3
 8018e84:	08018fef 	.word	0x08018fef
 8018e88:	08018ff5 	.word	0x08018ff5
 8018e8c:	08018ffd 	.word	0x08018ffd
 8018e90:	08019003 	.word	0x08019003
 8018e94:	08019009 	.word	0x08019009
 8018e98:	08019011 	.word	0x08019011
 8018e9c:	08018f0f 	.word	0x08018f0f
 8018ea0:	08019061 	.word	0x08019061
 8018ea4:	08019061 	.word	0x08019061
 8018ea8:	08019061 	.word	0x08019061
 8018eac:	08019061 	.word	0x08019061
 8018eb0:	08019061 	.word	0x08019061
 8018eb4:	08019061 	.word	0x08019061
 8018eb8:	08019061 	.word	0x08019061
 8018ebc:	08019061 	.word	0x08019061
 8018ec0:	08019061 	.word	0x08019061
 8018ec4:	08019061 	.word	0x08019061
 8018ec8:	08019061 	.word	0x08019061
 8018ecc:	08019061 	.word	0x08019061
 8018ed0:	08019061 	.word	0x08019061
 8018ed4:	08019017 	.word	0x08019017
 8018ed8:	0801901d 	.word	0x0801901d
 8018edc:	0801902b 	.word	0x0801902b
 8018ee0:	08019061 	.word	0x08019061
 8018ee4:	08019061 	.word	0x08019061
 8018ee8:	08019031 	.word	0x08019031
 8018eec:	08019037 	.word	0x08019037
 8018ef0:	08019061 	.word	0x08019061
 8018ef4:	0801903d 	.word	0x0801903d
 8018ef8:	0801904d 	.word	0x0801904d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018efc:	2300      	movs	r3, #0
 8018efe:	61bb      	str	r3, [r7, #24]
            break;
 8018f00:	e0af      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018f02:	2300      	movs	r3, #0
 8018f04:	61bb      	str	r3, [r7, #24]
            break;
 8018f06:	e0ac      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018f08:	2300      	movs	r3, #0
 8018f0a:	61bb      	str	r3, [r7, #24]
            break;
 8018f0c:	e0a9      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f14:	733b      	strb	r3, [r7, #12]
 8018f16:	2307      	movs	r3, #7
 8018f18:	737b      	strb	r3, [r7, #13]
 8018f1a:	2300      	movs	r3, #0
 8018f1c:	73bb      	strb	r3, [r7, #14]
 8018f1e:	2310      	movs	r3, #16
 8018f20:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018f22:	4b53      	ldr	r3, [pc, #332]	; (8019070 <RegionEU868GetPhyParam+0x278>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f2a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018f2c:	4b50      	ldr	r3, [pc, #320]	; (8019070 <RegionEU868GetPhyParam+0x278>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018f30:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018f32:	f107 030c 	add.w	r3, r7, #12
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7ff fdd1 	bl	8018ade <RegionCommonGetNextLowerTxDr>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	61bb      	str	r3, [r7, #24]
            break;
 8018f40:	e08f      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018f42:	2300      	movs	r3, #0
 8018f44:	61bb      	str	r3, [r7, #24]
            break;
 8018f46:	e08c      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018f48:	2300      	movs	r3, #0
 8018f4a:	61bb      	str	r3, [r7, #24]
            break;
 8018f4c:	e089      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018f4e:	2340      	movs	r3, #64	; 0x40
 8018f50:	61bb      	str	r3, [r7, #24]
            break;
 8018f52:	e086      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018f54:	2320      	movs	r3, #32
 8018f56:	61bb      	str	r3, [r7, #24]
            break;
 8018f58:	e083      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f60:	461a      	mov	r2, r3
 8018f62:	4b44      	ldr	r3, [pc, #272]	; (8019074 <RegionEU868GetPhyParam+0x27c>)
 8018f64:	5c9b      	ldrb	r3, [r3, r2]
 8018f66:	61bb      	str	r3, [r7, #24]
            break;
 8018f68:	e07b      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018f70:	461a      	mov	r2, r3
 8018f72:	4b41      	ldr	r3, [pc, #260]	; (8019078 <RegionEU868GetPhyParam+0x280>)
 8018f74:	5c9b      	ldrb	r3, [r3, r2]
 8018f76:	61bb      	str	r3, [r7, #24]
            break;
 8018f78:	e073      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018f7a:	2301      	movs	r3, #1
 8018f7c:	61bb      	str	r3, [r7, #24]
            break;
 8018f7e:	e070      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018f80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018f84:	61bb      	str	r3, [r7, #24]
            break;
 8018f86:	e06c      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018f8c:	61bb      	str	r3, [r7, #24]
            break;
 8018f8e:	e068      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018f90:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018f94:	61bb      	str	r3, [r7, #24]
            break;
 8018f96:	e064      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018f98:	f241 3388 	movw	r3, #5000	; 0x1388
 8018f9c:	61bb      	str	r3, [r7, #24]
            break;
 8018f9e:	e060      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018fa0:	f241 7370 	movw	r3, #6000	; 0x1770
 8018fa4:	61bb      	str	r3, [r7, #24]
            break;
 8018fa6:	e05c      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018fa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018fac:	61bb      	str	r3, [r7, #24]
            break;
 8018fae:	e058      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018fb0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018fb4:	4831      	ldr	r0, [pc, #196]	; (801907c <RegionEU868GetPhyParam+0x284>)
 8018fb6:	f002 fadf 	bl	801b578 <randr>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018fc0:	61bb      	str	r3, [r7, #24]
            break;
 8018fc2:	e04e      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	61bb      	str	r3, [r7, #24]
            break;
 8018fc8:	e04b      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018fca:	4b2d      	ldr	r3, [pc, #180]	; (8019080 <RegionEU868GetPhyParam+0x288>)
 8018fcc:	61bb      	str	r3, [r7, #24]
            break;
 8018fce:	e048      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	61bb      	str	r3, [r7, #24]
            break;
 8018fd4:	e045      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018fd6:	4b26      	ldr	r3, [pc, #152]	; (8019070 <RegionEU868GetPhyParam+0x278>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018fde:	61bb      	str	r3, [r7, #24]
            break;
 8018fe0:	e03f      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018fe2:	4b23      	ldr	r3, [pc, #140]	; (8019070 <RegionEU868GetPhyParam+0x278>)
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8018fea:	61bb      	str	r3, [r7, #24]
            break;
 8018fec:	e039      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018fee:	2310      	movs	r3, #16
 8018ff0:	61bb      	str	r3, [r7, #24]
            break;
 8018ff2:	e036      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018ff4:	4b1e      	ldr	r3, [pc, #120]	; (8019070 <RegionEU868GetPhyParam+0x278>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	61bb      	str	r3, [r7, #24]
            break;
 8018ffa:	e032      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	61bb      	str	r3, [r7, #24]
            break;
 8019000:	e02f      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8019002:	2300      	movs	r3, #0
 8019004:	61bb      	str	r3, [r7, #24]
            break;
 8019006:	e02c      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8019008:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 801900c:	61bb      	str	r3, [r7, #24]
            break;
 801900e:	e028      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8019010:	4b1c      	ldr	r3, [pc, #112]	; (8019084 <RegionEU868GetPhyParam+0x28c>)
 8019012:	61bb      	str	r3, [r7, #24]
            break;
 8019014:	e025      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8019016:	4b1a      	ldr	r3, [pc, #104]	; (8019080 <RegionEU868GetPhyParam+0x288>)
 8019018:	61bb      	str	r3, [r7, #24]
            break;
 801901a:	e022      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801901c:	2311      	movs	r3, #17
 801901e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8019020:	2302      	movs	r3, #2
 8019022:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8019024:	2300      	movs	r3, #0
 8019026:	76bb      	strb	r3, [r7, #26]
            break;
 8019028:	e01b      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801902a:	2303      	movs	r3, #3
 801902c:	61bb      	str	r3, [r7, #24]
            break;
 801902e:	e018      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8019030:	4b13      	ldr	r3, [pc, #76]	; (8019080 <RegionEU868GetPhyParam+0x288>)
 8019032:	61bb      	str	r3, [r7, #24]
            break;
 8019034:	e015      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8019036:	2303      	movs	r3, #3
 8019038:	61bb      	str	r3, [r7, #24]
            break;
 801903a:	e012      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019042:	461a      	mov	r2, r3
 8019044:	4b10      	ldr	r3, [pc, #64]	; (8019088 <RegionEU868GetPhyParam+0x290>)
 8019046:	5c9b      	ldrb	r3, [r3, r2]
 8019048:	61bb      	str	r3, [r7, #24]
            break;
 801904a:	e00a      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019052:	490e      	ldr	r1, [pc, #56]	; (801908c <RegionEU868GetPhyParam+0x294>)
 8019054:	4618      	mov	r0, r3
 8019056:	f7ff fd95 	bl	8018b84 <RegionCommonGetBandwidth>
 801905a:	4603      	mov	r3, r0
 801905c:	61bb      	str	r3, [r7, #24]
            break;
 801905e:	e000      	b.n	8019062 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8019060:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8019062:	69bb      	ldr	r3, [r7, #24]
 8019064:	61fb      	str	r3, [r7, #28]
 8019066:	69fb      	ldr	r3, [r7, #28]
}
 8019068:	4618      	mov	r0, r3
 801906a:	3720      	adds	r7, #32
 801906c:	46bd      	mov	sp, r7
 801906e:	bd80      	pop	{r7, pc}
 8019070:	20004048 	.word	0x20004048
 8019074:	080232a8 	.word	0x080232a8
 8019078:	080232b0 	.word	0x080232b0
 801907c:	fffffc18 	.word	0xfffffc18
 8019080:	33d3e608 	.word	0x33d3e608
 8019084:	4009999a 	.word	0x4009999a
 8019088:	08023280 	.word	0x08023280
 801908c:	08023288 	.word	0x08023288

08019090 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8019090:	b590      	push	{r4, r7, lr}
 8019092:	b085      	sub	sp, #20
 8019094:	af02      	add	r7, sp, #8
 8019096:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8019098:	4b11      	ldr	r3, [pc, #68]	; (80190e0 <RegionEU868SetBandTxDone+0x50>)
 801909a:	681a      	ldr	r2, [r3, #0]
 801909c:	4b11      	ldr	r3, [pc, #68]	; (80190e4 <RegionEU868SetBandTxDone+0x54>)
 801909e:	6819      	ldr	r1, [r3, #0]
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	781b      	ldrb	r3, [r3, #0]
 80190a4:	4618      	mov	r0, r3
 80190a6:	4603      	mov	r3, r0
 80190a8:	005b      	lsls	r3, r3, #1
 80190aa:	4403      	add	r3, r0
 80190ac:	009b      	lsls	r3, r3, #2
 80190ae:	440b      	add	r3, r1
 80190b0:	3309      	adds	r3, #9
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	4619      	mov	r1, r3
 80190b6:	460b      	mov	r3, r1
 80190b8:	005b      	lsls	r3, r3, #1
 80190ba:	440b      	add	r3, r1
 80190bc:	00db      	lsls	r3, r3, #3
 80190be:	18d0      	adds	r0, r2, r3
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6899      	ldr	r1, [r3, #8]
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	785c      	ldrb	r4, [r3, #1]
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	691a      	ldr	r2, [r3, #16]
 80190cc:	9200      	str	r2, [sp, #0]
 80190ce:	68db      	ldr	r3, [r3, #12]
 80190d0:	4622      	mov	r2, r4
 80190d2:	f7ff f8ed 	bl	80182b0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 80190d6:	bf00      	nop
 80190d8:	370c      	adds	r7, #12
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd90      	pop	{r4, r7, pc}
 80190de:	bf00      	nop
 80190e0:	20004044 	.word	0x20004044
 80190e4:	20004048 	.word	0x20004048

080190e8 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b0b0      	sub	sp, #192	; 0xc0
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 80190f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80190f4:	2290      	movs	r2, #144	; 0x90
 80190f6:	2100      	movs	r1, #0
 80190f8:	4618      	mov	r0, r3
 80190fa:	f007 fce1 	bl	8020ac0 <memset>
 80190fe:	2364      	movs	r3, #100	; 0x64
 8019100:	863b      	strh	r3, [r7, #48]	; 0x30
 8019102:	2364      	movs	r3, #100	; 0x64
 8019104:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8019108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801910c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8019110:	230a      	movs	r3, #10
 8019112:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8019116:	2364      	movs	r3, #100	; 0x64
 8019118:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 801911c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019120:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	7a1b      	ldrb	r3, [r3, #8]
 8019128:	2b02      	cmp	r3, #2
 801912a:	d05e      	beq.n	80191ea <RegionEU868InitDefaults+0x102>
 801912c:	2b02      	cmp	r3, #2
 801912e:	dc6b      	bgt.n	8019208 <RegionEU868InitDefaults+0x120>
 8019130:	2b00      	cmp	r3, #0
 8019132:	d002      	beq.n	801913a <RegionEU868InitDefaults+0x52>
 8019134:	2b01      	cmp	r3, #1
 8019136:	d03f      	beq.n	80191b8 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8019138:	e066      	b.n	8019208 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d063      	beq.n	801920a <RegionEU868InitDefaults+0x122>
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d05f      	beq.n	801920a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	4a30      	ldr	r2, [pc, #192]	; (8019210 <RegionEU868InitDefaults+0x128>)
 8019150:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	685b      	ldr	r3, [r3, #4]
 8019156:	4a2f      	ldr	r2, [pc, #188]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 8019158:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 801915a:	4b2d      	ldr	r3, [pc, #180]	; (8019210 <RegionEU868InitDefaults+0x128>)
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	4618      	mov	r0, r3
 8019160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8019164:	2290      	movs	r2, #144	; 0x90
 8019166:	4619      	mov	r1, r3
 8019168:	f002 fa1d 	bl	801b5a6 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 801916c:	4b29      	ldr	r3, [pc, #164]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	4a29      	ldr	r2, [pc, #164]	; (8019218 <RegionEU868InitDefaults+0x130>)
 8019172:	ca07      	ldmia	r2, {r0, r1, r2}
 8019174:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8019178:	4b26      	ldr	r3, [pc, #152]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	4a27      	ldr	r2, [pc, #156]	; (801921c <RegionEU868InitDefaults+0x134>)
 801917e:	330c      	adds	r3, #12
 8019180:	ca07      	ldmia	r2, {r0, r1, r2}
 8019182:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8019186:	4b23      	ldr	r3, [pc, #140]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4a25      	ldr	r2, [pc, #148]	; (8019220 <RegionEU868InitDefaults+0x138>)
 801918c:	3318      	adds	r3, #24
 801918e:	ca07      	ldmia	r2, {r0, r1, r2}
 8019190:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8019194:	4b1f      	ldr	r3, [pc, #124]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2207      	movs	r2, #7
 801919a:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801919e:	4b1d      	ldr	r3, [pc, #116]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191a6:	4b1b      	ldr	r3, [pc, #108]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80191ae:	2201      	movs	r2, #1
 80191b0:	4619      	mov	r1, r3
 80191b2:	f7ff f857 	bl	8018264 <RegionCommonChanMaskCopy>
 80191b6:	e028      	b.n	801920a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80191b8:	4b16      	ldr	r3, [pc, #88]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	2200      	movs	r2, #0
 80191be:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80191c0:	4b14      	ldr	r3, [pc, #80]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	2200      	movs	r2, #0
 80191c6:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 80191c8:	4b12      	ldr	r3, [pc, #72]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	2200      	movs	r2, #0
 80191ce:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80191d0:	4b10      	ldr	r3, [pc, #64]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80191d8:	4b0e      	ldr	r3, [pc, #56]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80191e0:	2201      	movs	r2, #1
 80191e2:	4619      	mov	r1, r3
 80191e4:	f7ff f83e 	bl	8018264 <RegionCommonChanMaskCopy>
            break;
 80191e8:	e00f      	b.n	801920a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80191ea:	4b0a      	ldr	r3, [pc, #40]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 80191f2:	4b08      	ldr	r3, [pc, #32]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191f4:	681b      	ldr	r3, [r3, #0]
 80191f6:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 80191fa:	4b06      	ldr	r3, [pc, #24]	; (8019214 <RegionEU868InitDefaults+0x12c>)
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	430a      	orrs	r2, r1
 8019200:	b292      	uxth	r2, r2
 8019202:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8019206:	e000      	b.n	801920a <RegionEU868InitDefaults+0x122>
            break;
 8019208:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801920a:	37c0      	adds	r7, #192	; 0xc0
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}
 8019210:	20004044 	.word	0x20004044
 8019214:	20004048 	.word	0x20004048
 8019218:	0802297c 	.word	0x0802297c
 801921c:	08022988 	.word	0x08022988
 8019220:	08022994 	.word	0x08022994

08019224 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b084      	sub	sp, #16
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	460b      	mov	r3, r1
 801922e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8019230:	78fb      	ldrb	r3, [r7, #3]
 8019232:	2b0f      	cmp	r3, #15
 8019234:	d86c      	bhi.n	8019310 <RegionEU868Verify+0xec>
 8019236:	a201      	add	r2, pc, #4	; (adr r2, 801923c <RegionEU868Verify+0x18>)
 8019238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801923c:	0801927d 	.word	0x0801927d
 8019240:	08019311 	.word	0x08019311
 8019244:	08019311 	.word	0x08019311
 8019248:	08019311 	.word	0x08019311
 801924c:	08019311 	.word	0x08019311
 8019250:	08019295 	.word	0x08019295
 8019254:	080192b3 	.word	0x080192b3
 8019258:	080192d1 	.word	0x080192d1
 801925c:	08019311 	.word	0x08019311
 8019260:	080192ef 	.word	0x080192ef
 8019264:	080192ef 	.word	0x080192ef
 8019268:	08019311 	.word	0x08019311
 801926c:	08019311 	.word	0x08019311
 8019270:	08019311 	.word	0x08019311
 8019274:	08019311 	.word	0x08019311
 8019278:	0801930d 	.word	0x0801930d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 801927c:	2300      	movs	r3, #0
 801927e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	f107 020f 	add.w	r2, r7, #15
 8019288:	4611      	mov	r1, r2
 801928a:	4618      	mov	r0, r3
 801928c:	f7ff fcee 	bl	8018c6c <VerifyRfFreq>
 8019290:	4603      	mov	r3, r0
 8019292:	e03e      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	f993 3000 	ldrsb.w	r3, [r3]
 801929a:	2207      	movs	r2, #7
 801929c:	2100      	movs	r1, #0
 801929e:	4618      	mov	r0, r3
 80192a0:	f7fe ff63 	bl	801816a <RegionCommonValueInRange>
 80192a4:	4603      	mov	r3, r0
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	bf14      	ite	ne
 80192aa:	2301      	movne	r3, #1
 80192ac:	2300      	moveq	r3, #0
 80192ae:	b2db      	uxtb	r3, r3
 80192b0:	e02f      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	f993 3000 	ldrsb.w	r3, [r3]
 80192b8:	2205      	movs	r2, #5
 80192ba:	2100      	movs	r1, #0
 80192bc:	4618      	mov	r0, r3
 80192be:	f7fe ff54 	bl	801816a <RegionCommonValueInRange>
 80192c2:	4603      	mov	r3, r0
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	bf14      	ite	ne
 80192c8:	2301      	movne	r3, #1
 80192ca:	2300      	moveq	r3, #0
 80192cc:	b2db      	uxtb	r3, r3
 80192ce:	e020      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	f993 3000 	ldrsb.w	r3, [r3]
 80192d6:	2207      	movs	r2, #7
 80192d8:	2100      	movs	r1, #0
 80192da:	4618      	mov	r0, r3
 80192dc:	f7fe ff45 	bl	801816a <RegionCommonValueInRange>
 80192e0:	4603      	mov	r3, r0
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	bf14      	ite	ne
 80192e6:	2301      	movne	r3, #1
 80192e8:	2300      	moveq	r3, #0
 80192ea:	b2db      	uxtb	r3, r3
 80192ec:	e011      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f993 3000 	ldrsb.w	r3, [r3]
 80192f4:	2207      	movs	r2, #7
 80192f6:	2100      	movs	r1, #0
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7fe ff36 	bl	801816a <RegionCommonValueInRange>
 80192fe:	4603      	mov	r3, r0
 8019300:	2b00      	cmp	r3, #0
 8019302:	bf14      	ite	ne
 8019304:	2301      	movne	r3, #1
 8019306:	2300      	moveq	r3, #0
 8019308:	b2db      	uxtb	r3, r3
 801930a:	e002      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801930c:	2301      	movs	r3, #1
 801930e:	e000      	b.n	8019312 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019310:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8019312:	4618      	mov	r0, r3
 8019314:	3710      	adds	r7, #16
 8019316:	46bd      	mov	sp, r7
 8019318:	bd80      	pop	{r7, pc}
 801931a:	bf00      	nop

0801931c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b08a      	sub	sp, #40	; 0x28
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019324:	2350      	movs	r3, #80	; 0x50
 8019326:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	791b      	ldrb	r3, [r3, #4]
 801932e:	2b10      	cmp	r3, #16
 8019330:	d162      	bne.n	80193f8 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	330f      	adds	r3, #15
 8019338:	781b      	ldrb	r3, [r3, #0]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d15e      	bne.n	80193fc <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801933e:	2300      	movs	r3, #0
 8019340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019344:	2303      	movs	r3, #3
 8019346:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801934a:	e050      	b.n	80193ee <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801934c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019350:	2b07      	cmp	r3, #7
 8019352:	d824      	bhi.n	801939e <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681a      	ldr	r2, [r3, #0]
 8019358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801935c:	4413      	add	r3, r2
 801935e:	781b      	ldrb	r3, [r3, #0]
 8019360:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019362:	69ba      	ldr	r2, [r7, #24]
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6819      	ldr	r1, [r3, #0]
 8019368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801936c:	3301      	adds	r3, #1
 801936e:	440b      	add	r3, r1
 8019370:	781b      	ldrb	r3, [r3, #0]
 8019372:	021b      	lsls	r3, r3, #8
 8019374:	4313      	orrs	r3, r2
 8019376:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019378:	69ba      	ldr	r2, [r7, #24]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6819      	ldr	r1, [r3, #0]
 801937e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019382:	3302      	adds	r3, #2
 8019384:	440b      	add	r3, r1
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	041b      	lsls	r3, r3, #16
 801938a:	4313      	orrs	r3, r2
 801938c:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801938e:	69bb      	ldr	r3, [r7, #24]
 8019390:	2264      	movs	r2, #100	; 0x64
 8019392:	fb02 f303 	mul.w	r3, r2, r3
 8019396:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8019398:	2300      	movs	r3, #0
 801939a:	61fb      	str	r3, [r7, #28]
 801939c:	e006      	b.n	80193ac <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801939e:	2300      	movs	r3, #0
 80193a0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80193a2:	2300      	movs	r3, #0
 80193a4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80193a8:	2300      	movs	r3, #0
 80193aa:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80193ac:	69bb      	ldr	r3, [r7, #24]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d00b      	beq.n	80193ca <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80193b2:	f107 0318 	add.w	r3, r7, #24
 80193b6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80193b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193bc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80193be:	f107 0310 	add.w	r3, r7, #16
 80193c2:	4618      	mov	r0, r3
 80193c4:	f000 fd0e 	bl	8019de4 <RegionEU868ChannelAdd>
 80193c8:	e007      	b.n	80193da <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80193ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193ce:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80193d0:	f107 030c 	add.w	r3, r7, #12
 80193d4:	4618      	mov	r0, r3
 80193d6:	f000 fda7 	bl	8019f28 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80193da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193de:	3303      	adds	r3, #3
 80193e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80193e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193e8:	3301      	adds	r3, #1
 80193ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80193ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80193f2:	2b0f      	cmp	r3, #15
 80193f4:	d9aa      	bls.n	801934c <RegionEU868ApplyCFList+0x30>
 80193f6:	e002      	b.n	80193fe <RegionEU868ApplyCFList+0xe2>
        return;
 80193f8:	bf00      	nop
 80193fa:	e000      	b.n	80193fe <RegionEU868ApplyCFList+0xe2>
        return;
 80193fc:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80193fe:	3728      	adds	r7, #40	; 0x28
 8019400:	46bd      	mov	sp, r7
 8019402:	bd80      	pop	{r7, pc}

08019404 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b082      	sub	sp, #8
 8019408:	af00      	add	r7, sp, #0
 801940a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	791b      	ldrb	r3, [r3, #4]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d002      	beq.n	801941a <RegionEU868ChanMaskSet+0x16>
 8019414:	2b01      	cmp	r3, #1
 8019416:	d00b      	beq.n	8019430 <RegionEU868ChanMaskSet+0x2c>
 8019418:	e015      	b.n	8019446 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801941a:	4b0e      	ldr	r3, [pc, #56]	; (8019454 <RegionEU868ChanMaskSet+0x50>)
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	2201      	movs	r2, #1
 8019428:	4619      	mov	r1, r3
 801942a:	f7fe ff1b 	bl	8018264 <RegionCommonChanMaskCopy>
            break;
 801942e:	e00c      	b.n	801944a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019430:	4b08      	ldr	r3, [pc, #32]	; (8019454 <RegionEU868ChanMaskSet+0x50>)
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	2201      	movs	r2, #1
 801943e:	4619      	mov	r1, r3
 8019440:	f7fe ff10 	bl	8018264 <RegionCommonChanMaskCopy>
            break;
 8019444:	e001      	b.n	801944a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019446:	2300      	movs	r3, #0
 8019448:	e000      	b.n	801944c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801944a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801944c:	4618      	mov	r0, r3
 801944e:	3708      	adds	r7, #8
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	20004048 	.word	0x20004048

08019458 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019458:	b580      	push	{r7, lr}
 801945a:	b088      	sub	sp, #32
 801945c:	af02      	add	r7, sp, #8
 801945e:	60ba      	str	r2, [r7, #8]
 8019460:	607b      	str	r3, [r7, #4]
 8019462:	4603      	mov	r3, r0
 8019464:	73fb      	strb	r3, [r7, #15]
 8019466:	460b      	mov	r3, r1
 8019468:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801946a:	2300      	movs	r3, #0
 801946c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801946e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019472:	2b07      	cmp	r3, #7
 8019474:	bfa8      	it	ge
 8019476:	2307      	movge	r3, #7
 8019478:	b25a      	sxtb	r2, r3
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019484:	491e      	ldr	r1, [pc, #120]	; (8019500 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fb7c 	bl	8018b84 <RegionCommonGetBandwidth>
 801948c:	4603      	mov	r3, r0
 801948e:	b2da      	uxtb	r2, r3
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801949a:	2b07      	cmp	r3, #7
 801949c:	d10a      	bne.n	80194b4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194a4:	461a      	mov	r2, r3
 80194a6:	4b17      	ldr	r3, [pc, #92]	; (8019504 <RegionEU868ComputeRxWindowParameters+0xac>)
 80194a8:	5c9b      	ldrb	r3, [r3, r2]
 80194aa:	4618      	mov	r0, r3
 80194ac:	f7ff f8fe 	bl	80186ac <RegionCommonComputeSymbolTimeFsk>
 80194b0:	6178      	str	r0, [r7, #20]
 80194b2:	e011      	b.n	80194d8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194ba:	461a      	mov	r2, r3
 80194bc:	4b11      	ldr	r3, [pc, #68]	; (8019504 <RegionEU868ComputeRxWindowParameters+0xac>)
 80194be:	5c9a      	ldrb	r2, [r3, r2]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80194c6:	4619      	mov	r1, r3
 80194c8:	4b0d      	ldr	r3, [pc, #52]	; (8019500 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80194ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80194ce:	4619      	mov	r1, r3
 80194d0:	4610      	mov	r0, r2
 80194d2:	f7ff f8d5 	bl	8018680 <RegionCommonComputeSymbolTimeLoRa>
 80194d6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80194d8:	4b0b      	ldr	r3, [pc, #44]	; (8019508 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80194da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194dc:	4798      	blx	r3
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	3308      	adds	r3, #8
 80194e2:	687a      	ldr	r2, [r7, #4]
 80194e4:	320c      	adds	r2, #12
 80194e6:	7bb9      	ldrb	r1, [r7, #14]
 80194e8:	9201      	str	r2, [sp, #4]
 80194ea:	9300      	str	r3, [sp, #0]
 80194ec:	4603      	mov	r3, r0
 80194ee:	68ba      	ldr	r2, [r7, #8]
 80194f0:	6978      	ldr	r0, [r7, #20]
 80194f2:	f7ff f8eb 	bl	80186cc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80194f6:	bf00      	nop
 80194f8:	3718      	adds	r7, #24
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	08023288 	.word	0x08023288
 8019504:	08023280 	.word	0x08023280
 8019508:	0802333c 	.word	0x0802333c

0801950c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801950c:	b5b0      	push	{r4, r5, r7, lr}
 801950e:	b090      	sub	sp, #64	; 0x40
 8019510:	af0a      	add	r7, sp, #40	; 0x28
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	785b      	ldrb	r3, [r3, #1]
 801951a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801951c:	2300      	movs	r3, #0
 801951e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019520:	2300      	movs	r3, #0
 8019522:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	685b      	ldr	r3, [r3, #4]
 8019528:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801952a:	4b5a      	ldr	r3, [pc, #360]	; (8019694 <RegionEU868RxConfig+0x188>)
 801952c:	685b      	ldr	r3, [r3, #4]
 801952e:	4798      	blx	r3
 8019530:	4603      	mov	r3, r0
 8019532:	2b00      	cmp	r3, #0
 8019534:	d001      	beq.n	801953a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019536:	2300      	movs	r3, #0
 8019538:	e0a8      	b.n	801968c <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	7cdb      	ldrb	r3, [r3, #19]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d126      	bne.n	8019590 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8019542:	4b55      	ldr	r3, [pc, #340]	; (8019698 <RegionEU868RxConfig+0x18c>)
 8019544:	681a      	ldr	r2, [r3, #0]
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	781b      	ldrb	r3, [r3, #0]
 801954a:	4619      	mov	r1, r3
 801954c:	460b      	mov	r3, r1
 801954e:	005b      	lsls	r3, r3, #1
 8019550:	440b      	add	r3, r1
 8019552:	009b      	lsls	r3, r3, #2
 8019554:	4413      	add	r3, r2
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801955a:	4b4f      	ldr	r3, [pc, #316]	; (8019698 <RegionEU868RxConfig+0x18c>)
 801955c:	681a      	ldr	r2, [r3, #0]
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	781b      	ldrb	r3, [r3, #0]
 8019562:	4619      	mov	r1, r3
 8019564:	460b      	mov	r3, r1
 8019566:	005b      	lsls	r3, r3, #1
 8019568:	440b      	add	r3, r1
 801956a:	009b      	lsls	r3, r3, #2
 801956c:	4413      	add	r3, r2
 801956e:	3304      	adds	r3, #4
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00c      	beq.n	8019590 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8019576:	4b48      	ldr	r3, [pc, #288]	; (8019698 <RegionEU868RxConfig+0x18c>)
 8019578:	681a      	ldr	r2, [r3, #0]
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	781b      	ldrb	r3, [r3, #0]
 801957e:	4619      	mov	r1, r3
 8019580:	460b      	mov	r3, r1
 8019582:	005b      	lsls	r3, r3, #1
 8019584:	440b      	add	r3, r1
 8019586:	009b      	lsls	r3, r3, #2
 8019588:	4413      	add	r3, r2
 801958a:	3304      	adds	r3, #4
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8019590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019594:	4a41      	ldr	r2, [pc, #260]	; (801969c <RegionEU868RxConfig+0x190>)
 8019596:	5cd3      	ldrb	r3, [r2, r3]
 8019598:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801959a:	4b3e      	ldr	r3, [pc, #248]	; (8019694 <RegionEU868RxConfig+0x188>)
 801959c:	68db      	ldr	r3, [r3, #12]
 801959e:	6938      	ldr	r0, [r7, #16]
 80195a0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80195a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80195a6:	2b07      	cmp	r3, #7
 80195a8:	d128      	bne.n	80195fc <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80195aa:	2300      	movs	r3, #0
 80195ac:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80195ae:	4b39      	ldr	r3, [pc, #228]	; (8019694 <RegionEU868RxConfig+0x188>)
 80195b0:	699c      	ldr	r4, [r3, #24]
 80195b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80195b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80195ba:	fb02 f303 	mul.w	r3, r2, r3
 80195be:	4619      	mov	r1, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	689b      	ldr	r3, [r3, #8]
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	687a      	ldr	r2, [r7, #4]
 80195c8:	7c92      	ldrb	r2, [r2, #18]
 80195ca:	7df8      	ldrb	r0, [r7, #23]
 80195cc:	9209      	str	r2, [sp, #36]	; 0x24
 80195ce:	2200      	movs	r2, #0
 80195d0:	9208      	str	r2, [sp, #32]
 80195d2:	2200      	movs	r2, #0
 80195d4:	9207      	str	r2, [sp, #28]
 80195d6:	2200      	movs	r2, #0
 80195d8:	9206      	str	r2, [sp, #24]
 80195da:	2201      	movs	r2, #1
 80195dc:	9205      	str	r2, [sp, #20]
 80195de:	2200      	movs	r2, #0
 80195e0:	9204      	str	r2, [sp, #16]
 80195e2:	2200      	movs	r2, #0
 80195e4:	9203      	str	r2, [sp, #12]
 80195e6:	9302      	str	r3, [sp, #8]
 80195e8:	2305      	movs	r3, #5
 80195ea:	9301      	str	r3, [sp, #4]
 80195ec:	4b2c      	ldr	r3, [pc, #176]	; (80196a0 <RegionEU868RxConfig+0x194>)
 80195ee:	9300      	str	r3, [sp, #0]
 80195f0:	2300      	movs	r3, #0
 80195f2:	460a      	mov	r2, r1
 80195f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80195f8:	47a0      	blx	r4
 80195fa:	e024      	b.n	8019646 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80195fc:	2301      	movs	r3, #1
 80195fe:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019600:	4b24      	ldr	r3, [pc, #144]	; (8019694 <RegionEU868RxConfig+0x188>)
 8019602:	699c      	ldr	r4, [r3, #24]
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	789b      	ldrb	r3, [r3, #2]
 8019608:	461d      	mov	r5, r3
 801960a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	689b      	ldr	r3, [r3, #8]
 8019612:	b29b      	uxth	r3, r3
 8019614:	687a      	ldr	r2, [r7, #4]
 8019616:	7c92      	ldrb	r2, [r2, #18]
 8019618:	7df8      	ldrb	r0, [r7, #23]
 801961a:	9209      	str	r2, [sp, #36]	; 0x24
 801961c:	2201      	movs	r2, #1
 801961e:	9208      	str	r2, [sp, #32]
 8019620:	2200      	movs	r2, #0
 8019622:	9207      	str	r2, [sp, #28]
 8019624:	2200      	movs	r2, #0
 8019626:	9206      	str	r2, [sp, #24]
 8019628:	2200      	movs	r2, #0
 801962a:	9205      	str	r2, [sp, #20]
 801962c:	2200      	movs	r2, #0
 801962e:	9204      	str	r2, [sp, #16]
 8019630:	2200      	movs	r2, #0
 8019632:	9203      	str	r2, [sp, #12]
 8019634:	9302      	str	r3, [sp, #8]
 8019636:	2308      	movs	r3, #8
 8019638:	9301      	str	r3, [sp, #4]
 801963a:	2300      	movs	r3, #0
 801963c:	9300      	str	r3, [sp, #0]
 801963e:	2301      	movs	r3, #1
 8019640:	460a      	mov	r2, r1
 8019642:	4629      	mov	r1, r5
 8019644:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	7c5b      	ldrb	r3, [r3, #17]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d005      	beq.n	801965a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801964e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019652:	4a14      	ldr	r2, [pc, #80]	; (80196a4 <RegionEU868RxConfig+0x198>)
 8019654:	5cd3      	ldrb	r3, [r2, r3]
 8019656:	75bb      	strb	r3, [r7, #22]
 8019658:	e004      	b.n	8019664 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801965a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801965e:	4a12      	ldr	r2, [pc, #72]	; (80196a8 <RegionEU868RxConfig+0x19c>)
 8019660:	5cd3      	ldrb	r3, [r2, r3]
 8019662:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019664:	4b0b      	ldr	r3, [pc, #44]	; (8019694 <RegionEU868RxConfig+0x188>)
 8019666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019668:	7dba      	ldrb	r2, [r7, #22]
 801966a:	320d      	adds	r2, #13
 801966c:	b2d1      	uxtb	r1, r2
 801966e:	7dfa      	ldrb	r2, [r7, #23]
 8019670:	4610      	mov	r0, r2
 8019672:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	7cdb      	ldrb	r3, [r3, #19]
 8019678:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801967c:	6939      	ldr	r1, [r7, #16]
 801967e:	4618      	mov	r0, r3
 8019680:	f7ff fa9e 	bl	8018bc0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8019684:	683b      	ldr	r3, [r7, #0]
 8019686:	7bfa      	ldrb	r2, [r7, #15]
 8019688:	701a      	strb	r2, [r3, #0]
    return true;
 801968a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801968c:	4618      	mov	r0, r3
 801968e:	3718      	adds	r7, #24
 8019690:	46bd      	mov	sp, r7
 8019692:	bdb0      	pop	{r4, r5, r7, pc}
 8019694:	0802333c 	.word	0x0802333c
 8019698:	20004048 	.word	0x20004048
 801969c:	08023280 	.word	0x08023280
 80196a0:	00014585 	.word	0x00014585
 80196a4:	080232b0 	.word	0x080232b0
 80196a8:	080232a8 	.word	0x080232a8

080196ac <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80196ac:	b590      	push	{r4, r7, lr}
 80196ae:	b093      	sub	sp, #76	; 0x4c
 80196b0:	af0a      	add	r7, sp, #40	; 0x28
 80196b2:	60f8      	str	r0, [r7, #12]
 80196b4:	60b9      	str	r1, [r7, #8]
 80196b6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80196be:	461a      	mov	r2, r3
 80196c0:	4b5d      	ldr	r3, [pc, #372]	; (8019838 <RegionEU868TxConfig+0x18c>)
 80196c2:	5c9b      	ldrb	r3, [r3, r2]
 80196c4:	77bb      	strb	r3, [r7, #30]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80196cc:	4b5b      	ldr	r3, [pc, #364]	; (801983c <RegionEU868TxConfig+0x190>)
 80196ce:	681a      	ldr	r2, [r3, #0]
 80196d0:	4b5b      	ldr	r3, [pc, #364]	; (8019840 <RegionEU868TxConfig+0x194>)
 80196d2:	6819      	ldr	r1, [r3, #0]
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	781b      	ldrb	r3, [r3, #0]
 80196d8:	461c      	mov	r4, r3
 80196da:	4623      	mov	r3, r4
 80196dc:	005b      	lsls	r3, r3, #1
 80196de:	4423      	add	r3, r4
 80196e0:	009b      	lsls	r3, r3, #2
 80196e2:	440b      	add	r3, r1
 80196e4:	3309      	adds	r3, #9
 80196e6:	781b      	ldrb	r3, [r3, #0]
 80196e8:	4619      	mov	r1, r3
 80196ea:	460b      	mov	r3, r1
 80196ec:	005b      	lsls	r3, r3, #1
 80196ee:	440b      	add	r3, r1
 80196f0:	00db      	lsls	r3, r3, #3
 80196f2:	4413      	add	r3, r2
 80196f4:	3302      	adds	r3, #2
 80196f6:	f993 3000 	ldrsb.w	r3, [r3]
 80196fa:	4619      	mov	r1, r3
 80196fc:	f7ff fa2d 	bl	8018b5a <RegionCommonLimitTxPower>
 8019700:	4603      	mov	r3, r0
 8019702:	777b      	strb	r3, [r7, #29]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801970a:	494e      	ldr	r1, [pc, #312]	; (8019844 <RegionEU868TxConfig+0x198>)
 801970c:	4618      	mov	r0, r3
 801970e:	f7ff fa39 	bl	8018b84 <RegionCommonGetBandwidth>
 8019712:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019714:	2300      	movs	r3, #0
 8019716:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	6859      	ldr	r1, [r3, #4]
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	689a      	ldr	r2, [r3, #8]
 8019720:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019724:	4618      	mov	r0, r3
 8019726:	f7ff f889 	bl	801883c <RegionCommonComputeTxPower>
 801972a:	4603      	mov	r3, r0
 801972c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801972e:	4b46      	ldr	r3, [pc, #280]	; (8019848 <RegionEU868TxConfig+0x19c>)
 8019730:	68da      	ldr	r2, [r3, #12]
 8019732:	4b43      	ldr	r3, [pc, #268]	; (8019840 <RegionEU868TxConfig+0x194>)
 8019734:	6819      	ldr	r1, [r3, #0]
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	781b      	ldrb	r3, [r3, #0]
 801973a:	4618      	mov	r0, r3
 801973c:	4603      	mov	r3, r0
 801973e:	005b      	lsls	r3, r3, #1
 8019740:	4403      	add	r3, r0
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	440b      	add	r3, r1
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	4618      	mov	r0, r3
 801974a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019752:	2b07      	cmp	r3, #7
 8019754:	d124      	bne.n	80197a0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019756:	2300      	movs	r3, #0
 8019758:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801975a:	4b3b      	ldr	r3, [pc, #236]	; (8019848 <RegionEU868TxConfig+0x19c>)
 801975c:	69dc      	ldr	r4, [r3, #28]
 801975e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019766:	fb02 f303 	mul.w	r3, r2, r3
 801976a:	461a      	mov	r2, r3
 801976c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019770:	7ff8      	ldrb	r0, [r7, #31]
 8019772:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8019776:	9308      	str	r3, [sp, #32]
 8019778:	2300      	movs	r3, #0
 801977a:	9307      	str	r3, [sp, #28]
 801977c:	2300      	movs	r3, #0
 801977e:	9306      	str	r3, [sp, #24]
 8019780:	2300      	movs	r3, #0
 8019782:	9305      	str	r3, [sp, #20]
 8019784:	2301      	movs	r3, #1
 8019786:	9304      	str	r3, [sp, #16]
 8019788:	2300      	movs	r3, #0
 801978a:	9303      	str	r3, [sp, #12]
 801978c:	2305      	movs	r3, #5
 801978e:	9302      	str	r3, [sp, #8]
 8019790:	2300      	movs	r3, #0
 8019792:	9301      	str	r3, [sp, #4]
 8019794:	9200      	str	r2, [sp, #0]
 8019796:	69bb      	ldr	r3, [r7, #24]
 8019798:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801979c:	47a0      	blx	r4
 801979e:	e01d      	b.n	80197dc <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80197a0:	2301      	movs	r3, #1
 80197a2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80197a4:	4b28      	ldr	r3, [pc, #160]	; (8019848 <RegionEU868TxConfig+0x19c>)
 80197a6:	69dc      	ldr	r4, [r3, #28]
 80197a8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80197ac:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80197b0:	7ff8      	ldrb	r0, [r7, #31]
 80197b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80197b6:	9208      	str	r2, [sp, #32]
 80197b8:	2200      	movs	r2, #0
 80197ba:	9207      	str	r2, [sp, #28]
 80197bc:	2200      	movs	r2, #0
 80197be:	9206      	str	r2, [sp, #24]
 80197c0:	2200      	movs	r2, #0
 80197c2:	9205      	str	r2, [sp, #20]
 80197c4:	2201      	movs	r2, #1
 80197c6:	9204      	str	r2, [sp, #16]
 80197c8:	2200      	movs	r2, #0
 80197ca:	9203      	str	r2, [sp, #12]
 80197cc:	2208      	movs	r2, #8
 80197ce:	9202      	str	r2, [sp, #8]
 80197d0:	2201      	movs	r2, #1
 80197d2:	9201      	str	r2, [sp, #4]
 80197d4:	9300      	str	r3, [sp, #0]
 80197d6:	69bb      	ldr	r3, [r7, #24]
 80197d8:	2200      	movs	r2, #0
 80197da:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80197dc:	4b18      	ldr	r3, [pc, #96]	; (8019840 <RegionEU868TxConfig+0x194>)
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	781b      	ldrb	r3, [r3, #0]
 80197e4:	4619      	mov	r1, r3
 80197e6:	460b      	mov	r3, r1
 80197e8:	005b      	lsls	r3, r3, #1
 80197ea:	440b      	add	r3, r1
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	4413      	add	r3, r2
 80197f0:	681a      	ldr	r2, [r3, #0]
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80197f8:	4619      	mov	r1, r3
 80197fa:	4610      	mov	r0, r2
 80197fc:	f7ff fa1e 	bl	8018c3c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	899b      	ldrh	r3, [r3, #12]
 801980a:	4619      	mov	r1, r3
 801980c:	4610      	mov	r0, r2
 801980e:	f7ff faa3 	bl	8018d58 <GetTimeOnAir>
 8019812:	4602      	mov	r2, r0
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019818:	4b0b      	ldr	r3, [pc, #44]	; (8019848 <RegionEU868TxConfig+0x19c>)
 801981a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801981c:	68fa      	ldr	r2, [r7, #12]
 801981e:	8992      	ldrh	r2, [r2, #12]
 8019820:	b2d1      	uxtb	r1, r2
 8019822:	7ffa      	ldrb	r2, [r7, #31]
 8019824:	4610      	mov	r0, r2
 8019826:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	7f7a      	ldrb	r2, [r7, #29]
 801982c:	701a      	strb	r2, [r3, #0]
    return true;
 801982e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019830:	4618      	mov	r0, r3
 8019832:	3724      	adds	r7, #36	; 0x24
 8019834:	46bd      	mov	sp, r7
 8019836:	bd90      	pop	{r4, r7, pc}
 8019838:	08023280 	.word	0x08023280
 801983c:	20004044 	.word	0x20004044
 8019840:	20004048 	.word	0x20004048
 8019844:	08023288 	.word	0x08023288
 8019848:	0802333c 	.word	0x0802333c

0801984c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801984c:	b590      	push	{r4, r7, lr}
 801984e:	b093      	sub	sp, #76	; 0x4c
 8019850:	af00      	add	r7, sp, #0
 8019852:	60f8      	str	r0, [r7, #12]
 8019854:	60b9      	str	r1, [r7, #8]
 8019856:	607a      	str	r2, [r7, #4]
 8019858:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801985a:	2307      	movs	r3, #7
 801985c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019860:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019864:	2200      	movs	r2, #0
 8019866:	601a      	str	r2, [r3, #0]
 8019868:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801986a:	2300      	movs	r3, #0
 801986c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019870:	2300      	movs	r3, #0
 8019872:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8019876:	2300      	movs	r3, #0
 8019878:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801987a:	e085      	b.n	8019988 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	685a      	ldr	r2, [r3, #4]
 8019880:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8019884:	4413      	add	r3, r2
 8019886:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801988a:	4611      	mov	r1, r2
 801988c:	4618      	mov	r0, r3
 801988e:	f7fe fe2d 	bl	80184ec <RegionCommonParseLinkAdrReq>
 8019892:	4603      	mov	r3, r0
 8019894:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8019898:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801989c:	2b00      	cmp	r3, #0
 801989e:	d07b      	beq.n	8019998 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80198a0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80198a4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80198a8:	4413      	add	r3, r2
 80198aa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80198ae:	2307      	movs	r3, #7
 80198b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80198b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80198b8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80198ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d109      	bne.n	80198d6 <RegionEU868LinkAdrReq+0x8a>
 80198c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d106      	bne.n	80198d6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80198c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198cc:	f023 0301 	bic.w	r3, r3, #1
 80198d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80198d4:	e058      	b.n	8019988 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d003      	beq.n	80198e6 <RegionEU868LinkAdrReq+0x9a>
 80198de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80198e2:	2b05      	cmp	r3, #5
 80198e4:	d903      	bls.n	80198ee <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80198e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80198ea:	2b06      	cmp	r3, #6
 80198ec:	d906      	bls.n	80198fc <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80198ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80198f2:	f023 0301 	bic.w	r3, r3, #1
 80198f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80198fa:	e045      	b.n	8019988 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80198fc:	2300      	movs	r3, #0
 80198fe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019902:	e03d      	b.n	8019980 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019904:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019908:	2b06      	cmp	r3, #6
 801990a:	d118      	bne.n	801993e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801990c:	4b5f      	ldr	r3, [pc, #380]	; (8019a8c <RegionEU868LinkAdrReq+0x240>)
 801990e:	6819      	ldr	r1, [r3, #0]
 8019910:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019914:	4613      	mov	r3, r2
 8019916:	005b      	lsls	r3, r3, #1
 8019918:	4413      	add	r3, r2
 801991a:	009b      	lsls	r3, r3, #2
 801991c:	440b      	add	r3, r1
 801991e:	681b      	ldr	r3, [r3, #0]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d028      	beq.n	8019976 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019924:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019928:	2201      	movs	r2, #1
 801992a:	fa02 f303 	lsl.w	r3, r2, r3
 801992e:	b21a      	sxth	r2, r3
 8019930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019932:	b21b      	sxth	r3, r3
 8019934:	4313      	orrs	r3, r2
 8019936:	b21b      	sxth	r3, r3
 8019938:	b29b      	uxth	r3, r3
 801993a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801993c:	e01b      	b.n	8019976 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801993e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019940:	461a      	mov	r2, r3
 8019942:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019946:	fa42 f303 	asr.w	r3, r2, r3
 801994a:	f003 0301 	and.w	r3, r3, #1
 801994e:	2b00      	cmp	r3, #0
 8019950:	d011      	beq.n	8019976 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019952:	4b4e      	ldr	r3, [pc, #312]	; (8019a8c <RegionEU868LinkAdrReq+0x240>)
 8019954:	6819      	ldr	r1, [r3, #0]
 8019956:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801995a:	4613      	mov	r3, r2
 801995c:	005b      	lsls	r3, r3, #1
 801995e:	4413      	add	r3, r2
 8019960:	009b      	lsls	r3, r3, #2
 8019962:	440b      	add	r3, r1
 8019964:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019966:	2b00      	cmp	r3, #0
 8019968:	d105      	bne.n	8019976 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801996a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801996e:	f023 0301 	bic.w	r3, r3, #1
 8019972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019976:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801997a:	3301      	adds	r3, #1
 801997c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019980:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019984:	2b0f      	cmp	r3, #15
 8019986:	d9bd      	bls.n	8019904 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	7a1b      	ldrb	r3, [r3, #8]
 801998c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019990:	429a      	cmp	r2, r3
 8019992:	f4ff af73 	bcc.w	801987c <RegionEU868LinkAdrReq+0x30>
 8019996:	e000      	b.n	801999a <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8019998:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801999a:	2302      	movs	r3, #2
 801999c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	7a5b      	ldrb	r3, [r3, #9]
 80199a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80199a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7ff fa23 	bl	8018df8 <RegionEU868GetPhyParam>
 80199b2:	4603      	mov	r3, r0
 80199b4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80199b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80199ba:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	7a9b      	ldrb	r3, [r3, #10]
 80199c0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80199c2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80199c6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80199c8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80199cc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80199ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80199d2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80199da:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80199e2:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	7b5b      	ldrb	r3, [r3, #13]
 80199e8:	b25b      	sxtb	r3, r3
 80199ea:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80199ec:	2310      	movs	r3, #16
 80199ee:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80199f0:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80199f4:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80199f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199f8:	b25b      	sxtb	r3, r3
 80199fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80199fe:	2307      	movs	r3, #7
 8019a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019a04:	4b21      	ldr	r3, [pc, #132]	; (8019a8c <RegionEU868LinkAdrReq+0x240>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019a0a:	2307      	movs	r3, #7
 8019a0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019a10:	2300      	movs	r3, #0
 8019a12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019a1c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019a20:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a24:	1c9a      	adds	r2, r3, #2
 8019a26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019a2a:	1c59      	adds	r1, r3, #1
 8019a2c:	f107 0010 	add.w	r0, r7, #16
 8019a30:	4623      	mov	r3, r4
 8019a32:	f7fe fdac 	bl	801858e <RegionCommonLinkAdrReqVerifyParams>
 8019a36:	4603      	mov	r3, r0
 8019a38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019a40:	2b07      	cmp	r3, #7
 8019a42:	d10d      	bne.n	8019a60 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019a44:	4b11      	ldr	r3, [pc, #68]	; (8019a8c <RegionEU868LinkAdrReq+0x240>)
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019a4c:	220c      	movs	r2, #12
 8019a4e:	2100      	movs	r1, #0
 8019a50:	4618      	mov	r0, r3
 8019a52:	f001 fde3 	bl	801b61c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019a56:	4b0d      	ldr	r3, [pc, #52]	; (8019a8c <RegionEU868LinkAdrReq+0x240>)
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019a5c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019a60:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019a64:	68bb      	ldr	r3, [r7, #8]
 8019a66:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019a68:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019a70:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019a74:	683b      	ldr	r3, [r7, #0]
 8019a76:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019a78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019a7a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019a7e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019a80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	374c      	adds	r7, #76	; 0x4c
 8019a88:	46bd      	mov	sp, r7
 8019a8a:	bd90      	pop	{r4, r7, pc}
 8019a8c:	20004048 	.word	0x20004048

08019a90 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8019a98:	2307      	movs	r3, #7
 8019a9a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	685b      	ldr	r3, [r3, #4]
 8019aa4:	f107 020e 	add.w	r2, r7, #14
 8019aa8:	4611      	mov	r1, r2
 8019aaa:	4618      	mov	r0, r3
 8019aac:	f7ff f8de 	bl	8018c6c <VerifyRfFreq>
 8019ab0:	4603      	mov	r3, r0
 8019ab2:	f083 0301 	eor.w	r3, r3, #1
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d003      	beq.n	8019ac4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8019abc:	7bfb      	ldrb	r3, [r7, #15]
 8019abe:	f023 0301 	bic.w	r3, r3, #1
 8019ac2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8019ac4:	687b      	ldr	r3, [r7, #4]
 8019ac6:	f993 3000 	ldrsb.w	r3, [r3]
 8019aca:	2207      	movs	r2, #7
 8019acc:	2100      	movs	r1, #0
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7fe fb4b 	bl	801816a <RegionCommonValueInRange>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d103      	bne.n	8019ae2 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8019ada:	7bfb      	ldrb	r3, [r7, #15]
 8019adc:	f023 0302 	bic.w	r3, r3, #2
 8019ae0:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019ae8:	2205      	movs	r2, #5
 8019aea:	2100      	movs	r1, #0
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7fe fb3c 	bl	801816a <RegionCommonValueInRange>
 8019af2:	4603      	mov	r3, r0
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d103      	bne.n	8019b00 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019af8:	7bfb      	ldrb	r3, [r7, #15]
 8019afa:	f023 0304 	bic.w	r3, r3, #4
 8019afe:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b02:	4618      	mov	r0, r3
 8019b04:	3710      	adds	r7, #16
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
	...

08019b0c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b086      	sub	sp, #24
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019b14:	2303      	movs	r3, #3
 8019b16:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d114      	bne.n	8019b4c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019b2c:	f107 0308 	add.w	r3, r7, #8
 8019b30:	4618      	mov	r0, r3
 8019b32:	f000 f9f9 	bl	8019f28 <RegionEU868ChannelsRemove>
 8019b36:	4603      	mov	r3, r0
 8019b38:	f083 0301 	eor.w	r3, r3, #1
 8019b3c:	b2db      	uxtb	r3, r3
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d03b      	beq.n	8019bba <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019b42:	7dfb      	ldrb	r3, [r7, #23]
 8019b44:	f023 0303 	bic.w	r3, r3, #3
 8019b48:	75fb      	strb	r3, [r7, #23]
 8019b4a:	e036      	b.n	8019bba <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019b5c:	f107 030c 	add.w	r3, r7, #12
 8019b60:	4618      	mov	r0, r3
 8019b62:	f000 f93f 	bl	8019de4 <RegionEU868ChannelAdd>
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b06      	cmp	r3, #6
 8019b6a:	d820      	bhi.n	8019bae <RegionEU868NewChannelReq+0xa2>
 8019b6c:	a201      	add	r2, pc, #4	; (adr r2, 8019b74 <RegionEU868NewChannelReq+0x68>)
 8019b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b72:	bf00      	nop
 8019b74:	08019bb9 	.word	0x08019bb9
 8019b78:	08019baf 	.word	0x08019baf
 8019b7c:	08019baf 	.word	0x08019baf
 8019b80:	08019baf 	.word	0x08019baf
 8019b84:	08019b91 	.word	0x08019b91
 8019b88:	08019b9b 	.word	0x08019b9b
 8019b8c:	08019ba5 	.word	0x08019ba5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8019b90:	7dfb      	ldrb	r3, [r7, #23]
 8019b92:	f023 0301 	bic.w	r3, r3, #1
 8019b96:	75fb      	strb	r3, [r7, #23]
                break;
 8019b98:	e00f      	b.n	8019bba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8019b9a:	7dfb      	ldrb	r3, [r7, #23]
 8019b9c:	f023 0302 	bic.w	r3, r3, #2
 8019ba0:	75fb      	strb	r3, [r7, #23]
                break;
 8019ba2:	e00a      	b.n	8019bba <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8019ba4:	7dfb      	ldrb	r3, [r7, #23]
 8019ba6:	f023 0303 	bic.w	r3, r3, #3
 8019baa:	75fb      	strb	r3, [r7, #23]
                break;
 8019bac:	e005      	b.n	8019bba <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8019bae:	7dfb      	ldrb	r3, [r7, #23]
 8019bb0:	f023 0303 	bic.w	r3, r3, #3
 8019bb4:	75fb      	strb	r3, [r7, #23]
                break;
 8019bb6:	e000      	b.n	8019bba <RegionEU868NewChannelReq+0xae>
                break;
 8019bb8:	bf00      	nop
            }
        }
    }

    return status;
 8019bba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	3718      	adds	r7, #24
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}
 8019bc6:	bf00      	nop

08019bc8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8019bc8:	b480      	push	{r7}
 8019bca:	b083      	sub	sp, #12
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019bd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	370c      	adds	r7, #12
 8019bd8:	46bd      	mov	sp, r7
 8019bda:	bc80      	pop	{r7}
 8019bdc:	4770      	bx	lr
	...

08019be0 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019be8:	2303      	movs	r3, #3
 8019bea:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019bec:	2300      	movs	r3, #0
 8019bee:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	f107 020e 	add.w	r2, r7, #14
 8019bf8:	4611      	mov	r1, r2
 8019bfa:	4618      	mov	r0, r3
 8019bfc:	f7ff f836 	bl	8018c6c <VerifyRfFreq>
 8019c00:	4603      	mov	r3, r0
 8019c02:	f083 0301 	eor.w	r3, r3, #1
 8019c06:	b2db      	uxtb	r3, r3
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d003      	beq.n	8019c14 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8019c0c:	7bfb      	ldrb	r3, [r7, #15]
 8019c0e:	f023 0301 	bic.w	r3, r3, #1
 8019c12:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019c14:	4b13      	ldr	r3, [pc, #76]	; (8019c64 <RegionEU868DlChannelReq+0x84>)
 8019c16:	681a      	ldr	r2, [r3, #0]
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	781b      	ldrb	r3, [r3, #0]
 8019c1c:	4619      	mov	r1, r3
 8019c1e:	460b      	mov	r3, r1
 8019c20:	005b      	lsls	r3, r3, #1
 8019c22:	440b      	add	r3, r1
 8019c24:	009b      	lsls	r3, r3, #2
 8019c26:	4413      	add	r3, r2
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	2b00      	cmp	r3, #0
 8019c2c:	d103      	bne.n	8019c36 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8019c2e:	7bfb      	ldrb	r3, [r7, #15]
 8019c30:	f023 0302 	bic.w	r3, r3, #2
 8019c34:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019c36:	7bfb      	ldrb	r3, [r7, #15]
 8019c38:	2b03      	cmp	r3, #3
 8019c3a:	d10d      	bne.n	8019c58 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019c3c:	4b09      	ldr	r3, [pc, #36]	; (8019c64 <RegionEU868DlChannelReq+0x84>)
 8019c3e:	6819      	ldr	r1, [r3, #0]
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	4618      	mov	r0, r3
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	685a      	ldr	r2, [r3, #4]
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	005b      	lsls	r3, r3, #1
 8019c4e:	4403      	add	r3, r0
 8019c50:	009b      	lsls	r3, r3, #2
 8019c52:	440b      	add	r3, r1
 8019c54:	3304      	adds	r3, #4
 8019c56:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3710      	adds	r7, #16
 8019c60:	46bd      	mov	sp, r7
 8019c62:	bd80      	pop	{r7, pc}
 8019c64:	20004048 	.word	0x20004048

08019c68 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8019c68:	b480      	push	{r7}
 8019c6a:	b083      	sub	sp, #12
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	4603      	mov	r3, r0
 8019c70:	460a      	mov	r2, r1
 8019c72:	71fb      	strb	r3, [r7, #7]
 8019c74:	4613      	mov	r3, r2
 8019c76:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8019c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	370c      	adds	r7, #12
 8019c80:	46bd      	mov	sp, r7
 8019c82:	bc80      	pop	{r7}
 8019c84:	4770      	bx	lr
	...

08019c88 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b09a      	sub	sp, #104	; 0x68
 8019c8c:	af02      	add	r7, sp, #8
 8019c8e:	60f8      	str	r0, [r7, #12]
 8019c90:	60b9      	str	r1, [r7, #8]
 8019c92:	607a      	str	r2, [r7, #4]
 8019c94:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8019c96:	2300      	movs	r3, #0
 8019c98:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8019c9c:	2300      	movs	r3, #0
 8019c9e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8019ca6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8019caa:	2200      	movs	r2, #0
 8019cac:	601a      	str	r2, [r3, #0]
 8019cae:	605a      	str	r2, [r3, #4]
 8019cb0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8019cb2:	230c      	movs	r3, #12
 8019cb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8019cb8:	2307      	movs	r3, #7
 8019cba:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8019cbc:	4b47      	ldr	r3, [pc, #284]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019cc4:	2201      	movs	r2, #1
 8019cc6:	2100      	movs	r1, #0
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f7fe fa9f 	bl	801820c <RegionCommonCountChannels>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d10a      	bne.n	8019cea <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019cd4:	4b41      	ldr	r3, [pc, #260]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019cdc:	4b3f      	ldr	r3, [pc, #252]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	f042 0207 	orr.w	r2, r2, #7
 8019ce4:	b292      	uxth	r2, r2
 8019ce6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	7a5b      	ldrb	r3, [r3, #9]
 8019cee:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019cf6:	b2db      	uxtb	r3, r3
 8019cf8:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019cfa:	4b38      	ldr	r3, [pc, #224]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019d02:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019d04:	4b35      	ldr	r3, [pc, #212]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019d0a:	4b35      	ldr	r3, [pc, #212]	; (8019de0 <RegionEU868NextChannel+0x158>)
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019d10:	2310      	movs	r3, #16
 8019d12:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019d14:	f107 0312 	add.w	r3, r7, #18
 8019d18:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019d20:	68fb      	ldr	r3, [r7, #12]
 8019d22:	685b      	ldr	r3, [r3, #4]
 8019d24:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019d26:	68fb      	ldr	r3, [r7, #12]
 8019d28:	7a9b      	ldrb	r3, [r3, #10]
 8019d2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019d2e:	2306      	movs	r3, #6
 8019d30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019d34:	68fa      	ldr	r2, [r7, #12]
 8019d36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019d3a:	320c      	adds	r2, #12
 8019d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d40:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	7d1b      	ldrb	r3, [r3, #20]
 8019d48:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	8adb      	ldrh	r3, [r3, #22]
 8019d56:	4619      	mov	r1, r3
 8019d58:	4610      	mov	r0, r2
 8019d5a:	f7fe fffd 	bl	8018d58 <GetTimeOnAir>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019d62:	f107 0314 	add.w	r3, r7, #20
 8019d66:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019d68:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019d6c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019d70:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	9301      	str	r3, [sp, #4]
 8019d78:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019d7c:	9300      	str	r3, [sp, #0]
 8019d7e:	460b      	mov	r3, r1
 8019d80:	6839      	ldr	r1, [r7, #0]
 8019d82:	f7fe fe4a 	bl	8018a1a <RegionCommonIdentifyChannels>
 8019d86:	4603      	mov	r3, r0
 8019d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d10e      	bne.n	8019db2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019d94:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019d98:	3b01      	subs	r3, #1
 8019d9a:	4619      	mov	r1, r3
 8019d9c:	2000      	movs	r0, #0
 8019d9e:	f001 fbeb 	bl	801b578 <randr>
 8019da2:	4603      	mov	r3, r0
 8019da4:	3360      	adds	r3, #96	; 0x60
 8019da6:	443b      	add	r3, r7
 8019da8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019dac:	68bb      	ldr	r3, [r7, #8]
 8019dae:	701a      	strb	r2, [r3, #0]
 8019db0:	e00e      	b.n	8019dd0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019db2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019db6:	2b0c      	cmp	r3, #12
 8019db8:	d10a      	bne.n	8019dd0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019dba:	4b08      	ldr	r3, [pc, #32]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8019dc2:	4b06      	ldr	r3, [pc, #24]	; (8019ddc <RegionEU868NextChannel+0x154>)
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	f042 0207 	orr.w	r2, r2, #7
 8019dca:	b292      	uxth	r2, r2
 8019dcc:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8019dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	3760      	adds	r7, #96	; 0x60
 8019dd8:	46bd      	mov	sp, r7
 8019dda:	bd80      	pop	{r7, pc}
 8019ddc:	20004048 	.word	0x20004048
 8019de0:	20004044 	.word	0x20004044

08019de4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	b084      	sub	sp, #16
 8019de8:	af00      	add	r7, sp, #0
 8019dea:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019dec:	2300      	movs	r3, #0
 8019dee:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019df0:	2300      	movs	r3, #0
 8019df2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019df4:	2300      	movs	r3, #0
 8019df6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	791b      	ldrb	r3, [r3, #4]
 8019dfc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019dfe:	7b7b      	ldrb	r3, [r7, #13]
 8019e00:	2b02      	cmp	r3, #2
 8019e02:	d801      	bhi.n	8019e08 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019e04:	2306      	movs	r3, #6
 8019e06:	e089      	b.n	8019f1c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019e08:	7b7b      	ldrb	r3, [r7, #13]
 8019e0a:	2b0f      	cmp	r3, #15
 8019e0c:	d901      	bls.n	8019e12 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019e0e:	2303      	movs	r3, #3
 8019e10:	e084      	b.n	8019f1c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	7a1b      	ldrb	r3, [r3, #8]
 8019e18:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e1c:	b25b      	sxtb	r3, r3
 8019e1e:	2207      	movs	r2, #7
 8019e20:	2100      	movs	r1, #0
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7fe f9a1 	bl	801816a <RegionCommonValueInRange>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d101      	bne.n	8019e32 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019e2e:	2301      	movs	r3, #1
 8019e30:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	7a1b      	ldrb	r3, [r3, #8]
 8019e38:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e3c:	b25b      	sxtb	r3, r3
 8019e3e:	2207      	movs	r2, #7
 8019e40:	2100      	movs	r1, #0
 8019e42:	4618      	mov	r0, r3
 8019e44:	f7fe f991 	bl	801816a <RegionCommonValueInRange>
 8019e48:	4603      	mov	r3, r0
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d101      	bne.n	8019e52 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019e4e:	2301      	movs	r3, #1
 8019e50:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	7a1b      	ldrb	r3, [r3, #8]
 8019e58:	f343 0303 	sbfx	r3, r3, #0, #4
 8019e5c:	b25a      	sxtb	r2, r3
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	7a1b      	ldrb	r3, [r3, #8]
 8019e64:	f343 1303 	sbfx	r3, r3, #4, #4
 8019e68:	b25b      	sxtb	r3, r3
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	dd01      	ble.n	8019e72 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019e6e:	2301      	movs	r3, #1
 8019e70:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019e72:	7bbb      	ldrb	r3, [r7, #14]
 8019e74:	f083 0301 	eor.w	r3, r3, #1
 8019e78:	b2db      	uxtb	r3, r3
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d010      	beq.n	8019ea0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	f107 020c 	add.w	r2, r7, #12
 8019e88:	4611      	mov	r1, r2
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	f7fe feee 	bl	8018c6c <VerifyRfFreq>
 8019e90:	4603      	mov	r3, r0
 8019e92:	f083 0301 	eor.w	r3, r3, #1
 8019e96:	b2db      	uxtb	r3, r3
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d001      	beq.n	8019ea0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019ea0:	7bfb      	ldrb	r3, [r7, #15]
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d004      	beq.n	8019eb0 <RegionEU868ChannelAdd+0xcc>
 8019ea6:	7bbb      	ldrb	r3, [r7, #14]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d001      	beq.n	8019eb0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019eac:	2306      	movs	r3, #6
 8019eae:	e035      	b.n	8019f1c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019eb0:	7bfb      	ldrb	r3, [r7, #15]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d001      	beq.n	8019eba <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019eb6:	2305      	movs	r3, #5
 8019eb8:	e030      	b.n	8019f1c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019eba:	7bbb      	ldrb	r3, [r7, #14]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d001      	beq.n	8019ec4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019ec0:	2304      	movs	r3, #4
 8019ec2:	e02b      	b.n	8019f1c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019ec4:	4b17      	ldr	r3, [pc, #92]	; (8019f24 <RegionEU868ChannelAdd+0x140>)
 8019ec6:	6819      	ldr	r1, [r3, #0]
 8019ec8:	7b7a      	ldrb	r2, [r7, #13]
 8019eca:	4613      	mov	r3, r2
 8019ecc:	005b      	lsls	r3, r3, #1
 8019ece:	4413      	add	r3, r2
 8019ed0:	009b      	lsls	r3, r3, #2
 8019ed2:	18c8      	adds	r0, r1, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	220c      	movs	r2, #12
 8019eda:	4619      	mov	r1, r3
 8019edc:	f001 fb63 	bl	801b5a6 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019ee0:	4b10      	ldr	r3, [pc, #64]	; (8019f24 <RegionEU868ChannelAdd+0x140>)
 8019ee2:	6819      	ldr	r1, [r3, #0]
 8019ee4:	7b7a      	ldrb	r2, [r7, #13]
 8019ee6:	7b38      	ldrb	r0, [r7, #12]
 8019ee8:	4613      	mov	r3, r2
 8019eea:	005b      	lsls	r3, r3, #1
 8019eec:	4413      	add	r3, r2
 8019eee:	009b      	lsls	r3, r3, #2
 8019ef0:	440b      	add	r3, r1
 8019ef2:	3309      	adds	r3, #9
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019ef8:	4b0a      	ldr	r3, [pc, #40]	; (8019f24 <RegionEU868ChannelAdd+0x140>)
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8019f00:	b21a      	sxth	r2, r3
 8019f02:	7b7b      	ldrb	r3, [r7, #13]
 8019f04:	2101      	movs	r1, #1
 8019f06:	fa01 f303 	lsl.w	r3, r1, r3
 8019f0a:	b21b      	sxth	r3, r3
 8019f0c:	4313      	orrs	r3, r2
 8019f0e:	b21a      	sxth	r2, r3
 8019f10:	4b04      	ldr	r3, [pc, #16]	; (8019f24 <RegionEU868ChannelAdd+0x140>)
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	b292      	uxth	r2, r2
 8019f16:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8019f1a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3710      	adds	r7, #16
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}
 8019f24:	20004048 	.word	0x20004048

08019f28 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019f28:	b580      	push	{r7, lr}
 8019f2a:	b086      	sub	sp, #24
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	781b      	ldrb	r3, [r3, #0]
 8019f34:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019f36:	7dfb      	ldrb	r3, [r7, #23]
 8019f38:	2b02      	cmp	r3, #2
 8019f3a:	d801      	bhi.n	8019f40 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019f3c:	2300      	movs	r3, #0
 8019f3e:	e016      	b.n	8019f6e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019f40:	4b0d      	ldr	r3, [pc, #52]	; (8019f78 <RegionEU868ChannelsRemove+0x50>)
 8019f42:	6819      	ldr	r1, [r3, #0]
 8019f44:	7dfa      	ldrb	r2, [r7, #23]
 8019f46:	4613      	mov	r3, r2
 8019f48:	005b      	lsls	r3, r3, #1
 8019f4a:	4413      	add	r3, r2
 8019f4c:	009b      	lsls	r3, r3, #2
 8019f4e:	440b      	add	r3, r1
 8019f50:	461a      	mov	r2, r3
 8019f52:	2300      	movs	r3, #0
 8019f54:	6013      	str	r3, [r2, #0]
 8019f56:	6053      	str	r3, [r2, #4]
 8019f58:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019f5a:	4b07      	ldr	r3, [pc, #28]	; (8019f78 <RegionEU868ChannelsRemove+0x50>)
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8019f62:	7df9      	ldrb	r1, [r7, #23]
 8019f64:	2210      	movs	r2, #16
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7fe f91c 	bl	80181a4 <RegionCommonChanDisable>
 8019f6c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019f6e:	4618      	mov	r0, r3
 8019f70:	3718      	adds	r7, #24
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}
 8019f76:	bf00      	nop
 8019f78:	20004048 	.word	0x20004048

08019f7c <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019f7c:	b590      	push	{r4, r7, lr}
 8019f7e:	b085      	sub	sp, #20
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019f8a:	4b20      	ldr	r3, [pc, #128]	; (801a00c <RegionEU868SetContinuousWave+0x90>)
 8019f8c:	681a      	ldr	r2, [r3, #0]
 8019f8e:	4b20      	ldr	r3, [pc, #128]	; (801a010 <RegionEU868SetContinuousWave+0x94>)
 8019f90:	6819      	ldr	r1, [r3, #0]
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	781b      	ldrb	r3, [r3, #0]
 8019f96:	461c      	mov	r4, r3
 8019f98:	4623      	mov	r3, r4
 8019f9a:	005b      	lsls	r3, r3, #1
 8019f9c:	4423      	add	r3, r4
 8019f9e:	009b      	lsls	r3, r3, #2
 8019fa0:	440b      	add	r3, r1
 8019fa2:	3309      	adds	r3, #9
 8019fa4:	781b      	ldrb	r3, [r3, #0]
 8019fa6:	4619      	mov	r1, r3
 8019fa8:	460b      	mov	r3, r1
 8019faa:	005b      	lsls	r3, r3, #1
 8019fac:	440b      	add	r3, r1
 8019fae:	00db      	lsls	r3, r3, #3
 8019fb0:	4413      	add	r3, r2
 8019fb2:	3302      	adds	r3, #2
 8019fb4:	f993 3000 	ldrsb.w	r3, [r3]
 8019fb8:	4619      	mov	r1, r3
 8019fba:	f7fe fdce 	bl	8018b5a <RegionCommonLimitTxPower>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019fc6:	4b12      	ldr	r3, [pc, #72]	; (801a010 <RegionEU868SetContinuousWave+0x94>)
 8019fc8:	681a      	ldr	r2, [r3, #0]
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	781b      	ldrb	r3, [r3, #0]
 8019fce:	4619      	mov	r1, r3
 8019fd0:	460b      	mov	r3, r1
 8019fd2:	005b      	lsls	r3, r3, #1
 8019fd4:	440b      	add	r3, r1
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	4413      	add	r3, r2
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6859      	ldr	r1, [r3, #4]
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	689a      	ldr	r2, [r3, #8]
 8019fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fea:	4618      	mov	r0, r3
 8019fec:	f7fe fc26 	bl	801883c <RegionCommonComputeTxPower>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019ff4:	4b07      	ldr	r3, [pc, #28]	; (801a014 <RegionEU868SetContinuousWave+0x98>)
 8019ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019ff8:	687a      	ldr	r2, [r7, #4]
 8019ffa:	8992      	ldrh	r2, [r2, #12]
 8019ffc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801a000:	68b8      	ldr	r0, [r7, #8]
 801a002:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 801a004:	bf00      	nop
 801a006:	3714      	adds	r7, #20
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd90      	pop	{r4, r7, pc}
 801a00c:	20004044 	.word	0x20004044
 801a010:	20004048 	.word	0x20004048
 801a014:	0802333c 	.word	0x0802333c

0801a018 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801a018:	b480      	push	{r7}
 801a01a:	b085      	sub	sp, #20
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	4603      	mov	r3, r0
 801a020:	71fb      	strb	r3, [r7, #7]
 801a022:	460b      	mov	r3, r1
 801a024:	71bb      	strb	r3, [r7, #6]
 801a026:	4613      	mov	r3, r2
 801a028:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 801a02a:	79ba      	ldrb	r2, [r7, #6]
 801a02c:	797b      	ldrb	r3, [r7, #5]
 801a02e:	1ad3      	subs	r3, r2, r3
 801a030:	b2db      	uxtb	r3, r3
 801a032:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801a034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	da01      	bge.n	801a040 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 801a03c:	2300      	movs	r3, #0
 801a03e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801a040:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801a042:	4618      	mov	r0, r3
 801a044:	3714      	adds	r7, #20
 801a046:	46bd      	mov	sp, r7
 801a048:	bc80      	pop	{r7}
 801a04a:	4770      	bx	lr

0801a04c <LimitTxPower>:
 */
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	603b      	str	r3, [r7, #0]
 801a054:	4603      	mov	r3, r0
 801a056:	71fb      	strb	r3, [r7, #7]
 801a058:	460b      	mov	r3, r1
 801a05a:	71bb      	strb	r3, [r7, #6]
 801a05c:	4613      	mov	r3, r2
 801a05e:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801a060:	79fb      	ldrb	r3, [r7, #7]
 801a062:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 801a064:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801a068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a06c:	4611      	mov	r1, r2
 801a06e:	4618      	mov	r0, r3
 801a070:	f7fe fd73 	bl	8018b5a <RegionCommonLimitTxPower>
 801a074:	4603      	mov	r3, r0
 801a076:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 801a078:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801a07c:	2b04      	cmp	r3, #4
 801a07e:	d106      	bne.n	801a08e <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801a080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a084:	2b02      	cmp	r3, #2
 801a086:	bfb8      	it	lt
 801a088:	2302      	movlt	r3, #2
 801a08a:	73fb      	strb	r3, [r7, #15]
 801a08c:	e00d      	b.n	801a0aa <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801a08e:	2204      	movs	r2, #4
 801a090:	2100      	movs	r1, #0
 801a092:	6838      	ldr	r0, [r7, #0]
 801a094:	f7fe f8ba 	bl	801820c <RegionCommonCountChannels>
 801a098:	4603      	mov	r3, r0
 801a09a:	2b31      	cmp	r3, #49	; 0x31
 801a09c:	d805      	bhi.n	801a0aa <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801a09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a0a2:	2b05      	cmp	r3, #5
 801a0a4:	bfb8      	it	lt
 801a0a6:	2305      	movlt	r3, #5
 801a0a8:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 801a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	3710      	adds	r7, #16
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}
	...

0801a0b8 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 801a0b8:	b580      	push	{r7, lr}
 801a0ba:	b082      	sub	sp, #8
 801a0bc:	af00      	add	r7, sp, #0
 801a0be:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801a0c0:	4b18      	ldr	r3, [pc, #96]	; (801a124 <VerifyRfFreq+0x6c>)
 801a0c2:	6a1b      	ldr	r3, [r3, #32]
 801a0c4:	6878      	ldr	r0, [r7, #4]
 801a0c6:	4798      	blx	r3
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	f083 0301 	eor.w	r3, r3, #1
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d001      	beq.n	801a0d8 <VerifyRfFreq+0x20>
    {
        return false;
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	e021      	b.n	801a11c <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	4a13      	ldr	r2, [pc, #76]	; (801a128 <VerifyRfFreq+0x70>)
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	d910      	bls.n	801a102 <VerifyRfFreq+0x4a>
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	4a12      	ldr	r2, [pc, #72]	; (801a12c <VerifyRfFreq+0x74>)
 801a0e4:	4293      	cmp	r3, r2
 801a0e6:	d80c      	bhi.n	801a102 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 801a0e8:	687a      	ldr	r2, [r7, #4]
 801a0ea:	4b11      	ldr	r3, [pc, #68]	; (801a130 <VerifyRfFreq+0x78>)
 801a0ec:	4413      	add	r3, r2
 801a0ee:	4a11      	ldr	r2, [pc, #68]	; (801a134 <VerifyRfFreq+0x7c>)
 801a0f0:	fba2 1203 	umull	r1, r2, r2, r3
 801a0f4:	0c92      	lsrs	r2, r2, #18
 801a0f6:	4910      	ldr	r1, [pc, #64]	; (801a138 <VerifyRfFreq+0x80>)
 801a0f8:	fb01 f202 	mul.w	r2, r1, r2
 801a0fc:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801a0fe:	2a00      	cmp	r2, #0
 801a100:	d001      	beq.n	801a106 <VerifyRfFreq+0x4e>
    {
        return false;
 801a102:	2300      	movs	r3, #0
 801a104:	e00a      	b.n	801a11c <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	4a0c      	ldr	r2, [pc, #48]	; (801a13c <VerifyRfFreq+0x84>)
 801a10a:	4293      	cmp	r3, r2
 801a10c:	d903      	bls.n	801a116 <VerifyRfFreq+0x5e>
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	4a06      	ldr	r2, [pc, #24]	; (801a12c <VerifyRfFreq+0x74>)
 801a112:	4293      	cmp	r3, r2
 801a114:	d901      	bls.n	801a11a <VerifyRfFreq+0x62>
    {
        return false;
 801a116:	2300      	movs	r3, #0
 801a118:	e000      	b.n	801a11c <VerifyRfFreq+0x64>
    }
    return true;
 801a11a:	2301      	movs	r3, #1
}
 801a11c:	4618      	mov	r0, r3
 801a11e:	3708      	adds	r7, #8
 801a120:	46bd      	mov	sp, r7
 801a122:	bd80      	pop	{r7, pc}
 801a124:	0802333c 	.word	0x0802333c
 801a128:	3708709f 	.word	0x3708709f
 801a12c:	374886e0 	.word	0x374886e0
 801a130:	c8f78f60 	.word	0xc8f78f60
 801a134:	6fd91d85 	.word	0x6fd91d85
 801a138:	000927c0 	.word	0x000927c0
 801a13c:	35c8015f 	.word	0x35c8015f

0801a140 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801a140:	b590      	push	{r4, r7, lr}
 801a142:	b089      	sub	sp, #36	; 0x24
 801a144:	af04      	add	r7, sp, #16
 801a146:	4603      	mov	r3, r0
 801a148:	460a      	mov	r2, r1
 801a14a:	71fb      	strb	r3, [r7, #7]
 801a14c:	4613      	mov	r3, r2
 801a14e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801a150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a154:	4a0f      	ldr	r2, [pc, #60]	; (801a194 <GetTimeOnAir+0x54>)
 801a156:	5cd3      	ldrb	r3, [r2, r3]
 801a158:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 801a15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a15e:	490e      	ldr	r1, [pc, #56]	; (801a198 <GetTimeOnAir+0x58>)
 801a160:	4618      	mov	r0, r3
 801a162:	f7fe fd0f 	bl	8018b84 <RegionCommonGetBandwidth>
 801a166:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801a168:	4b0c      	ldr	r3, [pc, #48]	; (801a19c <GetTimeOnAir+0x5c>)
 801a16a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a16c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801a170:	88bb      	ldrh	r3, [r7, #4]
 801a172:	b2db      	uxtb	r3, r3
 801a174:	2101      	movs	r1, #1
 801a176:	9103      	str	r1, [sp, #12]
 801a178:	9302      	str	r3, [sp, #8]
 801a17a:	2300      	movs	r3, #0
 801a17c:	9301      	str	r3, [sp, #4]
 801a17e:	2308      	movs	r3, #8
 801a180:	9300      	str	r3, [sp, #0]
 801a182:	2301      	movs	r3, #1
 801a184:	68b9      	ldr	r1, [r7, #8]
 801a186:	2001      	movs	r0, #1
 801a188:	47a0      	blx	r4
 801a18a:	4603      	mov	r3, r0
}
 801a18c:	4618      	mov	r0, r3
 801a18e:	3714      	adds	r7, #20
 801a190:	46bd      	mov	sp, r7
 801a192:	bd90      	pop	{r4, r7, pc}
 801a194:	080232b8 	.word	0x080232b8
 801a198:	080232c8 	.word	0x080232c8
 801a19c:	0802333c 	.word	0x0802333c

0801a1a0 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b088      	sub	sp, #32
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	781b      	ldrb	r3, [r3, #0]
 801a1b0:	3b01      	subs	r3, #1
 801a1b2:	2b38      	cmp	r3, #56	; 0x38
 801a1b4:	f200 813c 	bhi.w	801a430 <RegionUS915GetPhyParam+0x290>
 801a1b8:	a201      	add	r2, pc, #4	; (adr r2, 801a1c0 <RegionUS915GetPhyParam+0x20>)
 801a1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1be:	bf00      	nop
 801a1c0:	0801a2a5 	.word	0x0801a2a5
 801a1c4:	0801a2ab 	.word	0x0801a2ab
 801a1c8:	0801a431 	.word	0x0801a431
 801a1cc:	0801a431 	.word	0x0801a431
 801a1d0:	0801a431 	.word	0x0801a431
 801a1d4:	0801a2b1 	.word	0x0801a2b1
 801a1d8:	0801a431 	.word	0x0801a431
 801a1dc:	0801a2eb 	.word	0x0801a2eb
 801a1e0:	0801a431 	.word	0x0801a431
 801a1e4:	0801a2f1 	.word	0x0801a2f1
 801a1e8:	0801a2f7 	.word	0x0801a2f7
 801a1ec:	0801a2fd 	.word	0x0801a2fd
 801a1f0:	0801a303 	.word	0x0801a303
 801a1f4:	0801a313 	.word	0x0801a313
 801a1f8:	0801a323 	.word	0x0801a323
 801a1fc:	0801a329 	.word	0x0801a329
 801a200:	0801a331 	.word	0x0801a331
 801a204:	0801a339 	.word	0x0801a339
 801a208:	0801a341 	.word	0x0801a341
 801a20c:	0801a349 	.word	0x0801a349
 801a210:	0801a351 	.word	0x0801a351
 801a214:	0801a359 	.word	0x0801a359
 801a218:	0801a36d 	.word	0x0801a36d
 801a21c:	0801a373 	.word	0x0801a373
 801a220:	0801a379 	.word	0x0801a379
 801a224:	0801a37f 	.word	0x0801a37f
 801a228:	0801a38b 	.word	0x0801a38b
 801a22c:	0801a397 	.word	0x0801a397
 801a230:	0801a39d 	.word	0x0801a39d
 801a234:	0801a3a5 	.word	0x0801a3a5
 801a238:	0801a3ab 	.word	0x0801a3ab
 801a23c:	0801a3b1 	.word	0x0801a3b1
 801a240:	0801a3b7 	.word	0x0801a3b7
 801a244:	0801a2b7 	.word	0x0801a2b7
 801a248:	0801a431 	.word	0x0801a431
 801a24c:	0801a431 	.word	0x0801a431
 801a250:	0801a431 	.word	0x0801a431
 801a254:	0801a431 	.word	0x0801a431
 801a258:	0801a431 	.word	0x0801a431
 801a25c:	0801a431 	.word	0x0801a431
 801a260:	0801a431 	.word	0x0801a431
 801a264:	0801a431 	.word	0x0801a431
 801a268:	0801a431 	.word	0x0801a431
 801a26c:	0801a431 	.word	0x0801a431
 801a270:	0801a431 	.word	0x0801a431
 801a274:	0801a431 	.word	0x0801a431
 801a278:	0801a431 	.word	0x0801a431
 801a27c:	0801a3bf 	.word	0x0801a3bf
 801a280:	0801a3d3 	.word	0x0801a3d3
 801a284:	0801a3e1 	.word	0x0801a3e1
 801a288:	0801a3e7 	.word	0x0801a3e7
 801a28c:	0801a431 	.word	0x0801a431
 801a290:	0801a3ed 	.word	0x0801a3ed
 801a294:	0801a401 	.word	0x0801a401
 801a298:	0801a407 	.word	0x0801a407
 801a29c:	0801a40d 	.word	0x0801a40d
 801a2a0:	0801a41d 	.word	0x0801a41d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801a2a4:	2308      	movs	r3, #8
 801a2a6:	61bb      	str	r3, [r7, #24]
            break;
 801a2a8:	e0c3      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 801a2aa:	2300      	movs	r3, #0
 801a2ac:	61bb      	str	r3, [r7, #24]
            break;
 801a2ae:	e0c0      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801a2b0:	2300      	movs	r3, #0
 801a2b2:	61bb      	str	r3, [r7, #24]
            break;
 801a2b4:	e0bd      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a2bc:	733b      	strb	r3, [r7, #12]
 801a2be:	2304      	movs	r3, #4
 801a2c0:	737b      	strb	r3, [r7, #13]
 801a2c2:	2300      	movs	r3, #0
 801a2c4:	73bb      	strb	r3, [r7, #14]
 801a2c6:	2348      	movs	r3, #72	; 0x48
 801a2c8:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801a2ca:	4b5d      	ldr	r3, [pc, #372]	; (801a440 <RegionUS915GetPhyParam+0x2a0>)
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a2d2:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801a2d4:	4b5a      	ldr	r3, [pc, #360]	; (801a440 <RegionUS915GetPhyParam+0x2a0>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801a2d8:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801a2da:	f107 030c 	add.w	r3, r7, #12
 801a2de:	4618      	mov	r0, r3
 801a2e0:	f7fe fbfd 	bl	8018ade <RegionCommonGetNextLowerTxDr>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	61bb      	str	r3, [r7, #24]
            break;
 801a2e8:	e0a3      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	61bb      	str	r3, [r7, #24]
            break;
 801a2ee:	e0a0      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801a2f0:	2300      	movs	r3, #0
 801a2f2:	61bb      	str	r3, [r7, #24]
            break;
 801a2f4:	e09d      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801a2f6:	2340      	movs	r3, #64	; 0x40
 801a2f8:	61bb      	str	r3, [r7, #24]
            break;
 801a2fa:	e09a      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801a2fc:	2320      	movs	r3, #32
 801a2fe:	61bb      	str	r3, [r7, #24]
            break;
 801a300:	e097      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a308:	461a      	mov	r2, r3
 801a30a:	4b4e      	ldr	r3, [pc, #312]	; (801a444 <RegionUS915GetPhyParam+0x2a4>)
 801a30c:	5c9b      	ldrb	r3, [r3, r2]
 801a30e:	61bb      	str	r3, [r7, #24]
            break;
 801a310:	e08f      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a318:	461a      	mov	r2, r3
 801a31a:	4b4b      	ldr	r3, [pc, #300]	; (801a448 <RegionUS915GetPhyParam+0x2a8>)
 801a31c:	5c9b      	ldrb	r3, [r3, r2]
 801a31e:	61bb      	str	r3, [r7, #24]
            break;
 801a320:	e087      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801a322:	2300      	movs	r3, #0
 801a324:	61bb      	str	r3, [r7, #24]
            break;
 801a326:	e084      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801a328:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801a32c:	61bb      	str	r3, [r7, #24]
            break;
 801a32e:	e080      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801a330:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a334:	61bb      	str	r3, [r7, #24]
            break;
 801a336:	e07c      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801a338:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801a33c:	61bb      	str	r3, [r7, #24]
            break;
 801a33e:	e078      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801a340:	f241 3388 	movw	r3, #5000	; 0x1388
 801a344:	61bb      	str	r3, [r7, #24]
            break;
 801a346:	e074      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801a348:	f241 7370 	movw	r3, #6000	; 0x1770
 801a34c:	61bb      	str	r3, [r7, #24]
            break;
 801a34e:	e070      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 801a350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a354:	61bb      	str	r3, [r7, #24]
            break;
 801a356:	e06c      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 801a358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801a35c:	483b      	ldr	r0, [pc, #236]	; (801a44c <RegionUS915GetPhyParam+0x2ac>)
 801a35e:	f001 f90b 	bl	801b578 <randr>
 801a362:	4603      	mov	r3, r0
 801a364:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801a368:	61bb      	str	r3, [r7, #24]
            break;
 801a36a:	e062      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801a36c:	2300      	movs	r3, #0
 801a36e:	61bb      	str	r3, [r7, #24]
            break;
 801a370:	e05f      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 801a372:	4b37      	ldr	r3, [pc, #220]	; (801a450 <RegionUS915GetPhyParam+0x2b0>)
 801a374:	61bb      	str	r3, [r7, #24]
            break;
 801a376:	e05c      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 801a378:	2308      	movs	r3, #8
 801a37a:	61bb      	str	r3, [r7, #24]
            break;
 801a37c:	e059      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801a37e:	4b30      	ldr	r3, [pc, #192]	; (801a440 <RegionUS915GetPhyParam+0x2a0>)
 801a380:	681b      	ldr	r3, [r3, #0]
 801a382:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a386:	61bb      	str	r3, [r7, #24]
            break;
 801a388:	e053      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801a38a:	4b2d      	ldr	r3, [pc, #180]	; (801a440 <RegionUS915GetPhyParam+0x2a0>)
 801a38c:	681b      	ldr	r3, [r3, #0]
 801a38e:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a392:	61bb      	str	r3, [r7, #24]
            break;
 801a394:	e04d      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 801a396:	2348      	movs	r3, #72	; 0x48
 801a398:	61bb      	str	r3, [r7, #24]
            break;
 801a39a:	e04a      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801a39c:	4b28      	ldr	r3, [pc, #160]	; (801a440 <RegionUS915GetPhyParam+0x2a0>)
 801a39e:	681b      	ldr	r3, [r3, #0]
 801a3a0:	61bb      	str	r3, [r7, #24]
            break;
 801a3a2:	e046      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	61bb      	str	r3, [r7, #24]
            break;
 801a3a8:	e043      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	61bb      	str	r3, [r7, #24]
            break;
 801a3ae:	e040      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801a3b0:	4b28      	ldr	r3, [pc, #160]	; (801a454 <RegionUS915GetPhyParam+0x2b4>)
 801a3b2:	61bb      	str	r3, [r7, #24]
            break;
 801a3b4:	e03d      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 801a3b6:	f04f 0300 	mov.w	r3, #0
 801a3ba:	61bb      	str	r3, [r7, #24]
            break;
 801a3bc:	e039      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	791b      	ldrb	r3, [r3, #4]
 801a3c2:	4a25      	ldr	r2, [pc, #148]	; (801a458 <RegionUS915GetPhyParam+0x2b8>)
 801a3c4:	4922      	ldr	r1, [pc, #136]	; (801a450 <RegionUS915GetPhyParam+0x2b0>)
 801a3c6:	4618      	mov	r0, r3
 801a3c8:	f7fd fcfb 	bl	8017dc2 <RegionBaseUSCalcDownlinkFrequency>
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a3d0:	e02f      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801a3d2:	2317      	movs	r3, #23
 801a3d4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801a3d6:	2305      	movs	r3, #5
 801a3d8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 801a3da:	2303      	movs	r3, #3
 801a3dc:	76bb      	strb	r3, [r7, #26]
            break;
 801a3de:	e028      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801a3e0:	2308      	movs	r3, #8
 801a3e2:	61bb      	str	r3, [r7, #24]
            break;
 801a3e4:	e025      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a3e6:	2308      	movs	r3, #8
 801a3e8:	61bb      	str	r3, [r7, #24]
            break;
 801a3ea:	e022      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	791b      	ldrb	r3, [r3, #4]
 801a3f0:	4a19      	ldr	r2, [pc, #100]	; (801a458 <RegionUS915GetPhyParam+0x2b8>)
 801a3f2:	4917      	ldr	r1, [pc, #92]	; (801a450 <RegionUS915GetPhyParam+0x2b0>)
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	f7fd fce4 	bl	8017dc2 <RegionBaseUSCalcDownlinkFrequency>
 801a3fa:	4603      	mov	r3, r0
 801a3fc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801a3fe:	e018      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801a400:	2308      	movs	r3, #8
 801a402:	61bb      	str	r3, [r7, #24]
            break;
 801a404:	e015      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801a406:	2308      	movs	r3, #8
 801a408:	61bb      	str	r3, [r7, #24]
            break;
 801a40a:	e012      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a412:	461a      	mov	r2, r3
 801a414:	4b11      	ldr	r3, [pc, #68]	; (801a45c <RegionUS915GetPhyParam+0x2bc>)
 801a416:	5c9b      	ldrb	r3, [r3, r2]
 801a418:	61bb      	str	r3, [r7, #24]
            break;
 801a41a:	e00a      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a422:	490f      	ldr	r1, [pc, #60]	; (801a460 <RegionUS915GetPhyParam+0x2c0>)
 801a424:	4618      	mov	r0, r3
 801a426:	f7fe fbad 	bl	8018b84 <RegionCommonGetBandwidth>
 801a42a:	4603      	mov	r3, r0
 801a42c:	61bb      	str	r3, [r7, #24]
            break;
 801a42e:	e000      	b.n	801a432 <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 801a430:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801a432:	69bb      	ldr	r3, [r7, #24]
 801a434:	61fb      	str	r3, [r7, #28]
 801a436:	69fb      	ldr	r3, [r7, #28]
}
 801a438:	4618      	mov	r0, r3
 801a43a:	3720      	adds	r7, #32
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}
 801a440:	20004050 	.word	0x20004050
 801a444:	0802331c 	.word	0x0802331c
 801a448:	0802332c 	.word	0x0802332c
 801a44c:	fffffc18 	.word	0xfffffc18
 801a450:	370870a0 	.word	0x370870a0
 801a454:	4200999a 	.word	0x4200999a
 801a458:	000927c0 	.word	0x000927c0
 801a45c:	080232b8 	.word	0x080232b8
 801a460:	080232c8 	.word	0x080232c8

0801a464 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801a464:	b590      	push	{r4, r7, lr}
 801a466:	b085      	sub	sp, #20
 801a468:	af02      	add	r7, sp, #8
 801a46a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801a46c:	4b11      	ldr	r3, [pc, #68]	; (801a4b4 <RegionUS915SetBandTxDone+0x50>)
 801a46e:	681a      	ldr	r2, [r3, #0]
 801a470:	4b11      	ldr	r3, [pc, #68]	; (801a4b8 <RegionUS915SetBandTxDone+0x54>)
 801a472:	6819      	ldr	r1, [r3, #0]
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	781b      	ldrb	r3, [r3, #0]
 801a478:	4618      	mov	r0, r3
 801a47a:	4603      	mov	r3, r0
 801a47c:	005b      	lsls	r3, r3, #1
 801a47e:	4403      	add	r3, r0
 801a480:	009b      	lsls	r3, r3, #2
 801a482:	440b      	add	r3, r1
 801a484:	3309      	adds	r3, #9
 801a486:	781b      	ldrb	r3, [r3, #0]
 801a488:	4619      	mov	r1, r3
 801a48a:	460b      	mov	r3, r1
 801a48c:	005b      	lsls	r3, r3, #1
 801a48e:	440b      	add	r3, r1
 801a490:	00db      	lsls	r3, r3, #3
 801a492:	18d0      	adds	r0, r2, r3
 801a494:	687b      	ldr	r3, [r7, #4]
 801a496:	6899      	ldr	r1, [r3, #8]
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	785c      	ldrb	r4, [r3, #1]
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	691a      	ldr	r2, [r3, #16]
 801a4a0:	9200      	str	r2, [sp, #0]
 801a4a2:	68db      	ldr	r3, [r3, #12]
 801a4a4:	4622      	mov	r2, r4
 801a4a6:	f7fd ff03 	bl	80182b0 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_US915 */
}
 801a4aa:	bf00      	nop
 801a4ac:	370c      	adds	r7, #12
 801a4ae:	46bd      	mov	sp, r7
 801a4b0:	bd90      	pop	{r4, r7, pc}
 801a4b2:	bf00      	nop
 801a4b4:	2000404c 	.word	0x2000404c
 801a4b8:	20004050 	.word	0x20004050

0801a4bc <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801a4bc:	b580      	push	{r7, lr}
 801a4be:	b08a      	sub	sp, #40	; 0x28
 801a4c0:	af00      	add	r7, sp, #0
 801a4c2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 801a4c4:	2301      	movs	r3, #1
 801a4c6:	81bb      	strh	r3, [r7, #12]
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	73bb      	strb	r3, [r7, #14]
 801a4cc:	2300      	movs	r3, #0
 801a4ce:	613b      	str	r3, [r7, #16]
 801a4d0:	2300      	movs	r3, #0
 801a4d2:	617b      	str	r3, [r7, #20]
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	61bb      	str	r3, [r7, #24]
 801a4d8:	2300      	movs	r3, #0
 801a4da:	61fb      	str	r3, [r7, #28]
 801a4dc:	2300      	movs	r3, #0
 801a4de:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	7a1b      	ldrb	r3, [r3, #8]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d007      	beq.n	801a4fa <RegionUS915InitDefaults+0x3e>
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	f2c0 8106 	blt.w	801a6fc <RegionUS915InitDefaults+0x240>
 801a4f0:	3b01      	subs	r3, #1
 801a4f2:	2b01      	cmp	r3, #1
 801a4f4:	f200 8102 	bhi.w	801a6fc <RegionUS915InitDefaults+0x240>
 801a4f8:	e0ce      	b.n	801a698 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	f000 80fe 	beq.w	801a700 <RegionUS915InitDefaults+0x244>
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	685b      	ldr	r3, [r3, #4]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	f000 80f9 	beq.w	801a700 <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	681b      	ldr	r3, [r3, #0]
 801a512:	4a7d      	ldr	r2, [pc, #500]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a514:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	4a7c      	ldr	r2, [pc, #496]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a51c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801a51e:	4b7a      	ldr	r3, [pc, #488]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a520:	681b      	ldr	r3, [r3, #0]
 801a522:	2200      	movs	r2, #0
 801a524:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801a528:	4b77      	ldr	r3, [pc, #476]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	2200      	movs	r2, #0
 801a52e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801a532:	4b75      	ldr	r3, [pc, #468]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	4618      	mov	r0, r3
 801a538:	f107 030c 	add.w	r3, r7, #12
 801a53c:	2218      	movs	r2, #24
 801a53e:	4619      	mov	r1, r3
 801a540:	f001 f831 	bl	801b5a6 <memcpy1>

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a544:	2300      	movs	r3, #0
 801a546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a54a:	e02e      	b.n	801a5aa <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801a54c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a550:	4a6f      	ldr	r2, [pc, #444]	; (801a710 <RegionUS915InitDefaults+0x254>)
 801a552:	fb03 f202 	mul.w	r2, r3, r2
 801a556:	4b6f      	ldr	r3, [pc, #444]	; (801a714 <RegionUS915InitDefaults+0x258>)
 801a558:	4413      	add	r3, r2
 801a55a:	4a6c      	ldr	r2, [pc, #432]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a55c:	6811      	ldr	r1, [r2, #0]
 801a55e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a562:	4618      	mov	r0, r3
 801a564:	4613      	mov	r3, r2
 801a566:	005b      	lsls	r3, r3, #1
 801a568:	4413      	add	r3, r2
 801a56a:	009b      	lsls	r3, r3, #2
 801a56c:	440b      	add	r3, r1
 801a56e:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 801a570:	4b66      	ldr	r3, [pc, #408]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a572:	6819      	ldr	r1, [r3, #0]
 801a574:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a578:	4613      	mov	r3, r2
 801a57a:	005b      	lsls	r3, r3, #1
 801a57c:	4413      	add	r3, r2
 801a57e:	009b      	lsls	r3, r3, #2
 801a580:	440b      	add	r3, r1
 801a582:	3308      	adds	r3, #8
 801a584:	2230      	movs	r2, #48	; 0x30
 801a586:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a588:	4b60      	ldr	r3, [pc, #384]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a58a:	6819      	ldr	r1, [r3, #0]
 801a58c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801a590:	4613      	mov	r3, r2
 801a592:	005b      	lsls	r3, r3, #1
 801a594:	4413      	add	r3, r2
 801a596:	009b      	lsls	r3, r3, #2
 801a598:	440b      	add	r3, r1
 801a59a:	3309      	adds	r3, #9
 801a59c:	2200      	movs	r2, #0
 801a59e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801a5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5a4:	3301      	adds	r3, #1
 801a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5ae:	2b3f      	cmp	r3, #63	; 0x3f
 801a5b0:	d9cc      	bls.n	801a54c <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a5b2:	2340      	movs	r3, #64	; 0x40
 801a5b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a5b8:	e02f      	b.n	801a61a <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801a5ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5be:	3b40      	subs	r3, #64	; 0x40
 801a5c0:	4a55      	ldr	r2, [pc, #340]	; (801a718 <RegionUS915InitDefaults+0x25c>)
 801a5c2:	fb03 f202 	mul.w	r2, r3, r2
 801a5c6:	4b55      	ldr	r3, [pc, #340]	; (801a71c <RegionUS915InitDefaults+0x260>)
 801a5c8:	4413      	add	r3, r2
 801a5ca:	4a50      	ldr	r2, [pc, #320]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a5cc:	6811      	ldr	r1, [r2, #0]
 801a5ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	4613      	mov	r3, r2
 801a5d6:	005b      	lsls	r3, r3, #1
 801a5d8:	4413      	add	r3, r2
 801a5da:	009b      	lsls	r3, r3, #2
 801a5dc:	440b      	add	r3, r1
 801a5de:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801a5e0:	4b4a      	ldr	r3, [pc, #296]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a5e2:	6819      	ldr	r1, [r3, #0]
 801a5e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a5e8:	4613      	mov	r3, r2
 801a5ea:	005b      	lsls	r3, r3, #1
 801a5ec:	4413      	add	r3, r2
 801a5ee:	009b      	lsls	r3, r3, #2
 801a5f0:	440b      	add	r3, r1
 801a5f2:	3308      	adds	r3, #8
 801a5f4:	2244      	movs	r2, #68	; 0x44
 801a5f6:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801a5f8:	4b44      	ldr	r3, [pc, #272]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a5fa:	6819      	ldr	r1, [r3, #0]
 801a5fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a600:	4613      	mov	r3, r2
 801a602:	005b      	lsls	r3, r3, #1
 801a604:	4413      	add	r3, r2
 801a606:	009b      	lsls	r3, r3, #2
 801a608:	440b      	add	r3, r1
 801a60a:	3309      	adds	r3, #9
 801a60c:	2200      	movs	r2, #0
 801a60e:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801a610:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a614:	3301      	adds	r3, #1
 801a616:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a61a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a61e:	2b47      	cmp	r3, #71	; 0x47
 801a620:	d9cb      	bls.n	801a5ba <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0x0000;
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x0001;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801a622:	4b3a      	ldr	r3, [pc, #232]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a624:	681b      	ldr	r3, [r3, #0]
 801a626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a62a:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801a62e:	4b37      	ldr	r3, [pc, #220]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a636:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801a63a:	4b34      	ldr	r3, [pc, #208]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a642:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 801a646:	4b31      	ldr	r3, [pc, #196]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a64e:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801a652:	4b2e      	ldr	r3, [pc, #184]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	22ff      	movs	r2, #255	; 0xff
 801a658:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a65c:	4b2b      	ldr	r3, [pc, #172]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	2200      	movs	r2, #0
 801a662:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a666:	4b29      	ldr	r3, [pc, #164]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a66e:	4b27      	ldr	r3, [pc, #156]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a676:	2206      	movs	r2, #6
 801a678:	4619      	mov	r1, r3
 801a67a:	f7fd fdf3 	bl	8018264 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801a67e:	4b22      	ldr	r3, [pc, #136]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801a686:	4b21      	ldr	r3, [pc, #132]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801a68e:	2206      	movs	r2, #6
 801a690:	4619      	mov	r1, r3
 801a692:	f7fd fde7 	bl	8018264 <RegionCommonChanMaskCopy>
            break;
 801a696:	e034      	b.n	801a702 <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801a698:	4b1c      	ldr	r3, [pc, #112]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a6a0:	4b1a      	ldr	r3, [pc, #104]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801a6a8:	2206      	movs	r2, #6
 801a6aa:	4619      	mov	r1, r3
 801a6ac:	f7fd fdda 	bl	8018264 <RegionCommonChanMaskCopy>

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a6b0:	2300      	movs	r3, #0
 801a6b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a6b6:	e01c      	b.n	801a6f2 <RegionUS915InitDefaults+0x236>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a6b8:	4b13      	ldr	r3, [pc, #76]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a6c0:	3248      	adds	r2, #72	; 0x48
 801a6c2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a6c6:	4b11      	ldr	r3, [pc, #68]	; (801a70c <RegionUS915InitDefaults+0x250>)
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a6ce:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a6d2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a6d6:	4b0c      	ldr	r3, [pc, #48]	; (801a708 <RegionUS915InitDefaults+0x24c>)
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 801a6de:	4001      	ands	r1, r0
 801a6e0:	b289      	uxth	r1, r1
 801a6e2:	3248      	adds	r2, #72	; 0x48
 801a6e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a6e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6ec:	3301      	adds	r3, #1
 801a6ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a6f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6f6:	2b05      	cmp	r3, #5
 801a6f8:	d9de      	bls.n	801a6b8 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801a6fa:	e002      	b.n	801a702 <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 801a6fc:	bf00      	nop
 801a6fe:	e000      	b.n	801a702 <RegionUS915InitDefaults+0x246>
                return;
 801a700:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801a702:	3728      	adds	r7, #40	; 0x28
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}
 801a708:	2000404c 	.word	0x2000404c
 801a70c:	20004050 	.word	0x20004050
 801a710:	00030d40 	.word	0x00030d40
 801a714:	35c80160 	.word	0x35c80160
 801a718:	00186a00 	.word	0x00186a00
 801a71c:	35d2afc0 	.word	0x35d2afc0

0801a720 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801a720:	b580      	push	{r7, lr}
 801a722:	b082      	sub	sp, #8
 801a724:	af00      	add	r7, sp, #0
 801a726:	6078      	str	r0, [r7, #4]
 801a728:	460b      	mov	r3, r1
 801a72a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801a72c:	78fb      	ldrb	r3, [r7, #3]
 801a72e:	2b0f      	cmp	r3, #15
 801a730:	d858      	bhi.n	801a7e4 <RegionUS915Verify+0xc4>
 801a732:	a201      	add	r2, pc, #4	; (adr r2, 801a738 <RegionUS915Verify+0x18>)
 801a734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a738:	0801a779 	.word	0x0801a779
 801a73c:	0801a7e5 	.word	0x0801a7e5
 801a740:	0801a7e5 	.word	0x0801a7e5
 801a744:	0801a7e5 	.word	0x0801a7e5
 801a748:	0801a7e5 	.word	0x0801a7e5
 801a74c:	0801a787 	.word	0x0801a787
 801a750:	0801a787 	.word	0x0801a787
 801a754:	0801a7a5 	.word	0x0801a7a5
 801a758:	0801a7e5 	.word	0x0801a7e5
 801a75c:	0801a7c3 	.word	0x0801a7c3
 801a760:	0801a7c3 	.word	0x0801a7c3
 801a764:	0801a7e5 	.word	0x0801a7e5
 801a768:	0801a7e5 	.word	0x0801a7e5
 801a76c:	0801a7e5 	.word	0x0801a7e5
 801a770:	0801a7e5 	.word	0x0801a7e5
 801a774:	0801a7e1 	.word	0x0801a7e1
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7ff fc9b 	bl	801a0b8 <VerifyRfFreq>
 801a782:	4603      	mov	r3, r0
 801a784:	e02f      	b.n	801a7e6 <RegionUS915Verify+0xc6>
        }
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	f993 3000 	ldrsb.w	r3, [r3]
 801a78c:	2204      	movs	r2, #4
 801a78e:	2100      	movs	r1, #0
 801a790:	4618      	mov	r0, r3
 801a792:	f7fd fcea 	bl	801816a <RegionCommonValueInRange>
 801a796:	4603      	mov	r3, r0
 801a798:	2b00      	cmp	r3, #0
 801a79a:	bf14      	ite	ne
 801a79c:	2301      	movne	r3, #1
 801a79e:	2300      	moveq	r3, #0
 801a7a0:	b2db      	uxtb	r3, r3
 801a7a2:	e020      	b.n	801a7e6 <RegionUS915Verify+0xc6>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	f993 3000 	ldrsb.w	r3, [r3]
 801a7aa:	220d      	movs	r2, #13
 801a7ac:	2108      	movs	r1, #8
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	f7fd fcdb 	bl	801816a <RegionCommonValueInRange>
 801a7b4:	4603      	mov	r3, r0
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	bf14      	ite	ne
 801a7ba:	2301      	movne	r3, #1
 801a7bc:	2300      	moveq	r3, #0
 801a7be:	b2db      	uxtb	r3, r3
 801a7c0:	e011      	b.n	801a7e6 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	f993 3000 	ldrsb.w	r3, [r3]
 801a7c8:	220e      	movs	r2, #14
 801a7ca:	2100      	movs	r1, #0
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	f7fd fccc 	bl	801816a <RegionCommonValueInRange>
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	bf14      	ite	ne
 801a7d8:	2301      	movne	r3, #1
 801a7da:	2300      	moveq	r3, #0
 801a7dc:	b2db      	uxtb	r3, r3
 801a7de:	e002      	b.n	801a7e6 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	e000      	b.n	801a7e6 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 801a7e4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801a7e6:	4618      	mov	r0, r3
 801a7e8:	3708      	adds	r7, #8
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	bd80      	pop	{r7, pc}
 801a7ee:	bf00      	nop

0801a7f0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801a7f0:	b480      	push	{r7}
 801a7f2:	b085      	sub	sp, #20
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	791b      	ldrb	r3, [r3, #4]
 801a7fc:	2b10      	cmp	r3, #16
 801a7fe:	d162      	bne.n	801a8c6 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	330f      	adds	r3, #15
 801a806:	781b      	ldrb	r3, [r3, #0]
 801a808:	2b01      	cmp	r3, #1
 801a80a:	d15e      	bne.n	801a8ca <RegionUS915ApplyCFList+0xda>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a80c:	2300      	movs	r3, #0
 801a80e:	73fb      	strb	r3, [r7, #15]
 801a810:	2300      	movs	r3, #0
 801a812:	73bb      	strb	r3, [r7, #14]
 801a814:	e053      	b.n	801a8be <RegionUS915ApplyCFList+0xce>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	681a      	ldr	r2, [r3, #0]
 801a81a:	7bbb      	ldrb	r3, [r7, #14]
 801a81c:	4413      	add	r3, r2
 801a81e:	7819      	ldrb	r1, [r3, #0]
 801a820:	4b2c      	ldr	r3, [pc, #176]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	7bfa      	ldrb	r2, [r7, #15]
 801a826:	b289      	uxth	r1, r1
 801a828:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a82c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801a830:	4b28      	ldr	r3, [pc, #160]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	7bfa      	ldrb	r2, [r7, #15]
 801a836:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a83a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681a      	ldr	r2, [r3, #0]
 801a842:	7bbb      	ldrb	r3, [r7, #14]
 801a844:	3301      	adds	r3, #1
 801a846:	4413      	add	r3, r2
 801a848:	781b      	ldrb	r3, [r3, #0]
 801a84a:	b29b      	uxth	r3, r3
 801a84c:	021b      	lsls	r3, r3, #8
 801a84e:	b299      	uxth	r1, r3
 801a850:	4b20      	ldr	r3, [pc, #128]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a852:	681b      	ldr	r3, [r3, #0]
 801a854:	7bfa      	ldrb	r2, [r7, #15]
 801a856:	4301      	orrs	r1, r0
 801a858:	b289      	uxth	r1, r1
 801a85a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a85e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801a862:	7bfb      	ldrb	r3, [r7, #15]
 801a864:	2b04      	cmp	r3, #4
 801a866:	d10f      	bne.n	801a888 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 801a868:	4b1a      	ldr	r3, [pc, #104]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	7bfa      	ldrb	r2, [r7, #15]
 801a86e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a872:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a876:	4b17      	ldr	r3, [pc, #92]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	7bfa      	ldrb	r2, [r7, #15]
 801a87c:	b2c9      	uxtb	r1, r1
 801a87e:	b289      	uxth	r1, r1
 801a880:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a884:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 801a888:	4b13      	ldr	r3, [pc, #76]	; (801a8d8 <RegionUS915ApplyCFList+0xe8>)
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	7bfa      	ldrb	r2, [r7, #15]
 801a88e:	3248      	adds	r2, #72	; 0x48
 801a890:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a894:	4b0f      	ldr	r3, [pc, #60]	; (801a8d4 <RegionUS915ApplyCFList+0xe4>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	7bfa      	ldrb	r2, [r7, #15]
 801a89a:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a89e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a8a2:	4b0d      	ldr	r3, [pc, #52]	; (801a8d8 <RegionUS915ApplyCFList+0xe8>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	7bfa      	ldrb	r2, [r7, #15]
 801a8a8:	4001      	ands	r1, r0
 801a8aa:	b289      	uxth	r1, r1
 801a8ac:	3248      	adds	r2, #72	; 0x48
 801a8ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 801a8b2:	7bfb      	ldrb	r3, [r7, #15]
 801a8b4:	3301      	adds	r3, #1
 801a8b6:	73fb      	strb	r3, [r7, #15]
 801a8b8:	7bbb      	ldrb	r3, [r7, #14]
 801a8ba:	3302      	adds	r3, #2
 801a8bc:	73bb      	strb	r3, [r7, #14]
 801a8be:	7bfb      	ldrb	r3, [r7, #15]
 801a8c0:	2b04      	cmp	r3, #4
 801a8c2:	d9a8      	bls.n	801a816 <RegionUS915ApplyCFList+0x26>
 801a8c4:	e002      	b.n	801a8cc <RegionUS915ApplyCFList+0xdc>
        return;
 801a8c6:	bf00      	nop
 801a8c8:	e000      	b.n	801a8cc <RegionUS915ApplyCFList+0xdc>
        return;
 801a8ca:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 801a8cc:	3714      	adds	r7, #20
 801a8ce:	46bd      	mov	sp, r7
 801a8d0:	bc80      	pop	{r7}
 801a8d2:	4770      	bx	lr
 801a8d4:	20004050 	.word	0x20004050
 801a8d8:	2000404c 	.word	0x2000404c

0801a8dc <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801a8dc:	b580      	push	{r7, lr}
 801a8de:	b084      	sub	sp, #16
 801a8e0:	af00      	add	r7, sp, #0
 801a8e2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	2204      	movs	r2, #4
 801a8ea:	2100      	movs	r1, #0
 801a8ec:	4618      	mov	r0, r3
 801a8ee:	f7fd fc8d 	bl	801820c <RegionCommonCountChannels>
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801a8f6:	7bbb      	ldrb	r3, [r7, #14]
 801a8f8:	2b01      	cmp	r3, #1
 801a8fa:	d804      	bhi.n	801a906 <RegionUS915ChanMaskSet+0x2a>
 801a8fc:	7bbb      	ldrb	r3, [r7, #14]
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d001      	beq.n	801a906 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801a902:	2300      	movs	r3, #0
 801a904:	e04c      	b.n	801a9a0 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	791b      	ldrb	r3, [r3, #4]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d002      	beq.n	801a914 <RegionUS915ChanMaskSet+0x38>
 801a90e:	2b01      	cmp	r3, #1
 801a910:	d038      	beq.n	801a984 <RegionUS915ChanMaskSet+0xa8>
 801a912:	e042      	b.n	801a99a <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a914:	4b24      	ldr	r3, [pc, #144]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	f503 7058 	add.w	r0, r3, #864	; 0x360
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	2206      	movs	r2, #6
 801a922:	4619      	mov	r1, r3
 801a924:	f7fd fc9e 	bl	8018264 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801a928:	4b1f      	ldr	r3, [pc, #124]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 801a930:	4b1d      	ldr	r3, [pc, #116]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	b2d2      	uxtb	r2, r2
 801a936:	b292      	uxth	r2, r2
 801a938:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801a93c:	4b1a      	ldr	r3, [pc, #104]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	2200      	movs	r2, #0
 801a942:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a946:	2300      	movs	r3, #0
 801a948:	73fb      	strb	r3, [r7, #15]
 801a94a:	e017      	b.n	801a97c <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 801a94c:	4b17      	ldr	r3, [pc, #92]	; (801a9ac <RegionUS915ChanMaskSet+0xd0>)
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	7bfa      	ldrb	r2, [r7, #15]
 801a952:	3248      	adds	r2, #72	; 0x48
 801a954:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801a958:	4b13      	ldr	r3, [pc, #76]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	7bfa      	ldrb	r2, [r7, #15]
 801a95e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801a962:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801a966:	4b11      	ldr	r3, [pc, #68]	; (801a9ac <RegionUS915ChanMaskSet+0xd0>)
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	7bfa      	ldrb	r2, [r7, #15]
 801a96c:	4001      	ands	r1, r0
 801a96e:	b289      	uxth	r1, r1
 801a970:	3248      	adds	r2, #72	; 0x48
 801a972:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801a976:	7bfb      	ldrb	r3, [r7, #15]
 801a978:	3301      	adds	r3, #1
 801a97a:	73fb      	strb	r3, [r7, #15]
 801a97c:	7bfb      	ldrb	r3, [r7, #15]
 801a97e:	2b05      	cmp	r3, #5
 801a980:	d9e4      	bls.n	801a94c <RegionUS915ChanMaskSet+0x70>
            }
            break;
 801a982:	e00c      	b.n	801a99e <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801a984:	4b08      	ldr	r3, [pc, #32]	; (801a9a8 <RegionUS915ChanMaskSet+0xcc>)
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	2206      	movs	r2, #6
 801a992:	4619      	mov	r1, r3
 801a994:	f7fd fc66 	bl	8018264 <RegionCommonChanMaskCopy>
            break;
 801a998:	e001      	b.n	801a99e <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 801a99a:	2300      	movs	r3, #0
 801a99c:	e000      	b.n	801a9a0 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 801a99e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	3710      	adds	r7, #16
 801a9a4:	46bd      	mov	sp, r7
 801a9a6:	bd80      	pop	{r7, pc}
 801a9a8:	20004050 	.word	0x20004050
 801a9ac:	2000404c 	.word	0x2000404c

0801a9b0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801a9b0:	b580      	push	{r7, lr}
 801a9b2:	b088      	sub	sp, #32
 801a9b4:	af02      	add	r7, sp, #8
 801a9b6:	60ba      	str	r2, [r7, #8]
 801a9b8:	607b      	str	r3, [r7, #4]
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	73fb      	strb	r3, [r7, #15]
 801a9be:	460b      	mov	r3, r1
 801a9c0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801a9c2:	2300      	movs	r3, #0
 801a9c4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801a9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a9ca:	2b0d      	cmp	r3, #13
 801a9cc:	bfa8      	it	ge
 801a9ce:	230d      	movge	r3, #13
 801a9d0:	b25a      	sxtb	r2, r3
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a9dc:	4916      	ldr	r1, [pc, #88]	; (801aa38 <RegionUS915ComputeRxWindowParameters+0x88>)
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7fe f8d0 	bl	8018b84 <RegionCommonGetBandwidth>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	b2da      	uxtb	r2, r3
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a9f2:	461a      	mov	r2, r3
 801a9f4:	4b11      	ldr	r3, [pc, #68]	; (801aa3c <RegionUS915ComputeRxWindowParameters+0x8c>)
 801a9f6:	5c9a      	ldrb	r2, [r3, r2]
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801a9fe:	4619      	mov	r1, r3
 801aa00:	4b0d      	ldr	r3, [pc, #52]	; (801aa38 <RegionUS915ComputeRxWindowParameters+0x88>)
 801aa02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aa06:	4619      	mov	r1, r3
 801aa08:	4610      	mov	r0, r2
 801aa0a:	f7fd fe39 	bl	8018680 <RegionCommonComputeSymbolTimeLoRa>
 801aa0e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801aa10:	4b0b      	ldr	r3, [pc, #44]	; (801aa40 <RegionUS915ComputeRxWindowParameters+0x90>)
 801aa12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa14:	4798      	blx	r3
 801aa16:	687b      	ldr	r3, [r7, #4]
 801aa18:	3308      	adds	r3, #8
 801aa1a:	687a      	ldr	r2, [r7, #4]
 801aa1c:	320c      	adds	r2, #12
 801aa1e:	7bb9      	ldrb	r1, [r7, #14]
 801aa20:	9201      	str	r2, [sp, #4]
 801aa22:	9300      	str	r3, [sp, #0]
 801aa24:	4603      	mov	r3, r0
 801aa26:	68ba      	ldr	r2, [r7, #8]
 801aa28:	6978      	ldr	r0, [r7, #20]
 801aa2a:	f7fd fe4f 	bl	80186cc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801aa2e:	bf00      	nop
 801aa30:	3718      	adds	r7, #24
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bd80      	pop	{r7, pc}
 801aa36:	bf00      	nop
 801aa38:	080232c8 	.word	0x080232c8
 801aa3c:	080232b8 	.word	0x080232b8
 801aa40:	0802333c 	.word	0x0802333c

0801aa44 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801aa44:	b590      	push	{r4, r7, lr}
 801aa46:	b091      	sub	sp, #68	; 0x44
 801aa48:	af0a      	add	r7, sp, #40	; 0x28
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	785b      	ldrb	r3, [r3, #1]
 801aa52:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801aa54:	2300      	movs	r3, #0
 801aa56:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 801aa58:	2300      	movs	r3, #0
 801aa5a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801aa62:	4b34      	ldr	r3, [pc, #208]	; (801ab34 <RegionUS915RxConfig+0xf0>)
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	4798      	blx	r3
 801aa68:	4603      	mov	r3, r0
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d001      	beq.n	801aa72 <RegionUS915RxConfig+0x2e>
    {
        return false;
 801aa6e:	2300      	movs	r3, #0
 801aa70:	e05c      	b.n	801ab2c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	7cdb      	ldrb	r3, [r3, #19]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d109      	bne.n	801aa8e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	781b      	ldrb	r3, [r3, #0]
 801aa7e:	f003 0307 	and.w	r3, r3, #7
 801aa82:	4a2d      	ldr	r2, [pc, #180]	; (801ab38 <RegionUS915RxConfig+0xf4>)
 801aa84:	fb03 f202 	mul.w	r2, r3, r2
 801aa88:	4b2c      	ldr	r3, [pc, #176]	; (801ab3c <RegionUS915RxConfig+0xf8>)
 801aa8a:	4413      	add	r3, r2
 801aa8c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801aa8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aa92:	4a2b      	ldr	r2, [pc, #172]	; (801ab40 <RegionUS915RxConfig+0xfc>)
 801aa94:	5cd3      	ldrb	r3, [r2, r3]
 801aa96:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801aa98:	4b26      	ldr	r3, [pc, #152]	; (801ab34 <RegionUS915RxConfig+0xf0>)
 801aa9a:	68db      	ldr	r3, [r3, #12]
 801aa9c:	6938      	ldr	r0, [r7, #16]
 801aa9e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801aaa0:	4b24      	ldr	r3, [pc, #144]	; (801ab34 <RegionUS915RxConfig+0xf0>)
 801aaa2:	699c      	ldr	r4, [r3, #24]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	789b      	ldrb	r3, [r3, #2]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	689b      	ldr	r3, [r3, #8]
 801aab2:	b29b      	uxth	r3, r3
 801aab4:	687a      	ldr	r2, [r7, #4]
 801aab6:	7c92      	ldrb	r2, [r2, #18]
 801aab8:	9209      	str	r2, [sp, #36]	; 0x24
 801aaba:	2201      	movs	r2, #1
 801aabc:	9208      	str	r2, [sp, #32]
 801aabe:	2200      	movs	r2, #0
 801aac0:	9207      	str	r2, [sp, #28]
 801aac2:	2200      	movs	r2, #0
 801aac4:	9206      	str	r2, [sp, #24]
 801aac6:	2200      	movs	r2, #0
 801aac8:	9205      	str	r2, [sp, #20]
 801aaca:	2200      	movs	r2, #0
 801aacc:	9204      	str	r2, [sp, #16]
 801aace:	2200      	movs	r2, #0
 801aad0:	9203      	str	r2, [sp, #12]
 801aad2:	9302      	str	r3, [sp, #8]
 801aad4:	2308      	movs	r3, #8
 801aad6:	9301      	str	r3, [sp, #4]
 801aad8:	2300      	movs	r3, #0
 801aada:	9300      	str	r3, [sp, #0]
 801aadc:	2301      	movs	r3, #1
 801aade:	460a      	mov	r2, r1
 801aae0:	4601      	mov	r1, r0
 801aae2:	2001      	movs	r0, #1
 801aae4:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	7c5b      	ldrb	r3, [r3, #17]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d005      	beq.n	801aafa <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801aaee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aaf2:	4a14      	ldr	r2, [pc, #80]	; (801ab44 <RegionUS915RxConfig+0x100>)
 801aaf4:	5cd3      	ldrb	r3, [r2, r3]
 801aaf6:	75fb      	strb	r3, [r7, #23]
 801aaf8:	e004      	b.n	801ab04 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801aafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aafe:	4a12      	ldr	r2, [pc, #72]	; (801ab48 <RegionUS915RxConfig+0x104>)
 801ab00:	5cd3      	ldrb	r3, [r2, r3]
 801ab02:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801ab04:	4b0b      	ldr	r3, [pc, #44]	; (801ab34 <RegionUS915RxConfig+0xf0>)
 801ab06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ab08:	7dfa      	ldrb	r2, [r7, #23]
 801ab0a:	320d      	adds	r2, #13
 801ab0c:	b2d2      	uxtb	r2, r2
 801ab0e:	4611      	mov	r1, r2
 801ab10:	2001      	movs	r0, #1
 801ab12:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	7cdb      	ldrb	r3, [r3, #19]
 801ab18:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801ab1c:	6939      	ldr	r1, [r7, #16]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f7fe f84e 	bl	8018bc0 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	7bfa      	ldrb	r2, [r7, #15]
 801ab28:	701a      	strb	r2, [r3, #0]
    return true;
 801ab2a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	371c      	adds	r7, #28
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd90      	pop	{r4, r7, pc}
 801ab34:	0802333c 	.word	0x0802333c
 801ab38:	000927c0 	.word	0x000927c0
 801ab3c:	370870a0 	.word	0x370870a0
 801ab40:	080232b8 	.word	0x080232b8
 801ab44:	0802332c 	.word	0x0802332c
 801ab48:	0802331c 	.word	0x0802331c

0801ab4c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801ab4c:	b590      	push	{r4, r7, lr}
 801ab4e:	b093      	sub	sp, #76	; 0x4c
 801ab50:	af0a      	add	r7, sp, #40	; 0x28
 801ab52:	60f8      	str	r0, [r7, #12]
 801ab54:	60b9      	str	r1, [r7, #8]
 801ab56:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ab5e:	461a      	mov	r2, r3
 801ab60:	4b4a      	ldr	r3, [pc, #296]	; (801ac8c <RegionUS915TxConfig+0x140>)
 801ab62:	5c9b      	ldrb	r3, [r3, r2]
 801ab64:	77fb      	strb	r3, [r7, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801ab6c:	4b48      	ldr	r3, [pc, #288]	; (801ac90 <RegionUS915TxConfig+0x144>)
 801ab6e:	681a      	ldr	r2, [r3, #0]
 801ab70:	4b48      	ldr	r3, [pc, #288]	; (801ac94 <RegionUS915TxConfig+0x148>)
 801ab72:	6819      	ldr	r1, [r3, #0]
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	461c      	mov	r4, r3
 801ab7a:	4623      	mov	r3, r4
 801ab7c:	005b      	lsls	r3, r3, #1
 801ab7e:	4423      	add	r3, r4
 801ab80:	009b      	lsls	r3, r3, #2
 801ab82:	440b      	add	r3, r1
 801ab84:	3309      	adds	r3, #9
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	4619      	mov	r1, r3
 801ab8a:	460b      	mov	r3, r1
 801ab8c:	005b      	lsls	r3, r3, #1
 801ab8e:	440b      	add	r3, r1
 801ab90:	00db      	lsls	r3, r3, #3
 801ab92:	4413      	add	r3, r2
 801ab94:	3302      	adds	r3, #2
 801ab96:	f993 1000 	ldrsb.w	r1, [r3]
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801aba0:	4b3c      	ldr	r3, [pc, #240]	; (801ac94 <RegionUS915TxConfig+0x148>)
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801aba8:	f7ff fa50 	bl	801a04c <LimitTxPower>
 801abac:	4603      	mov	r3, r0
 801abae:	77bb      	strb	r3, [r7, #30]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801abb6:	4938      	ldr	r1, [pc, #224]	; (801ac98 <RegionUS915TxConfig+0x14c>)
 801abb8:	4618      	mov	r0, r3
 801abba:	f7fd ffe3 	bl	8018b84 <RegionCommonGetBandwidth>
 801abbe:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801abc0:	2300      	movs	r3, #0
 801abc2:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801abc4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801abc8:	f04f 0200 	mov.w	r2, #0
 801abcc:	4933      	ldr	r1, [pc, #204]	; (801ac9c <RegionUS915TxConfig+0x150>)
 801abce:	4618      	mov	r0, r3
 801abd0:	f7fd fe34 	bl	801883c <RegionCommonComputeTxPower>
 801abd4:	4603      	mov	r3, r0
 801abd6:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801abd8:	4b31      	ldr	r3, [pc, #196]	; (801aca0 <RegionUS915TxConfig+0x154>)
 801abda:	68da      	ldr	r2, [r3, #12]
 801abdc:	4b2d      	ldr	r3, [pc, #180]	; (801ac94 <RegionUS915TxConfig+0x148>)
 801abde:	6819      	ldr	r1, [r3, #0]
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	781b      	ldrb	r3, [r3, #0]
 801abe4:	4618      	mov	r0, r3
 801abe6:	4603      	mov	r3, r0
 801abe8:	005b      	lsls	r3, r3, #1
 801abea:	4403      	add	r3, r0
 801abec:	009b      	lsls	r3, r3, #2
 801abee:	440b      	add	r3, r1
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	4618      	mov	r0, r3
 801abf4:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801abf6:	4b2a      	ldr	r3, [pc, #168]	; (801aca0 <RegionUS915TxConfig+0x154>)
 801abf8:	69dc      	ldr	r4, [r3, #28]
 801abfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801abfe:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801ac02:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 801ac06:	9208      	str	r2, [sp, #32]
 801ac08:	2200      	movs	r2, #0
 801ac0a:	9207      	str	r2, [sp, #28]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	9206      	str	r2, [sp, #24]
 801ac10:	2200      	movs	r2, #0
 801ac12:	9205      	str	r2, [sp, #20]
 801ac14:	2201      	movs	r2, #1
 801ac16:	9204      	str	r2, [sp, #16]
 801ac18:	2200      	movs	r2, #0
 801ac1a:	9203      	str	r2, [sp, #12]
 801ac1c:	2208      	movs	r2, #8
 801ac1e:	9202      	str	r2, [sp, #8]
 801ac20:	2201      	movs	r2, #1
 801ac22:	9201      	str	r2, [sp, #4]
 801ac24:	9300      	str	r3, [sp, #0]
 801ac26:	69bb      	ldr	r3, [r7, #24]
 801ac28:	2200      	movs	r2, #0
 801ac2a:	2001      	movs	r0, #1
 801ac2c:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801ac2e:	4b19      	ldr	r3, [pc, #100]	; (801ac94 <RegionUS915TxConfig+0x148>)
 801ac30:	681a      	ldr	r2, [r3, #0]
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	781b      	ldrb	r3, [r3, #0]
 801ac36:	4619      	mov	r1, r3
 801ac38:	460b      	mov	r3, r1
 801ac3a:	005b      	lsls	r3, r3, #1
 801ac3c:	440b      	add	r3, r1
 801ac3e:	009b      	lsls	r3, r3, #2
 801ac40:	4413      	add	r3, r2
 801ac42:	681a      	ldr	r2, [r3, #0]
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	4610      	mov	r0, r2
 801ac4e:	f7fd fff5 	bl	8018c3c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 801ac52:	4b13      	ldr	r3, [pc, #76]	; (801aca0 <RegionUS915TxConfig+0x154>)
 801ac54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ac56:	68fa      	ldr	r2, [r7, #12]
 801ac58:	8992      	ldrh	r2, [r2, #12]
 801ac5a:	b2d2      	uxtb	r2, r2
 801ac5c:	4611      	mov	r1, r2
 801ac5e:	2001      	movs	r0, #1
 801ac60:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	899b      	ldrh	r3, [r3, #12]
 801ac6c:	4619      	mov	r1, r3
 801ac6e:	4610      	mov	r0, r2
 801ac70:	f7ff fa66 	bl	801a140 <GetTimeOnAir>
 801ac74:	4602      	mov	r2, r0
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 801ac7a:	68bb      	ldr	r3, [r7, #8]
 801ac7c:	7fba      	ldrb	r2, [r7, #30]
 801ac7e:	701a      	strb	r2, [r3, #0]
    return true;
 801ac80:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801ac82:	4618      	mov	r0, r3
 801ac84:	3724      	adds	r7, #36	; 0x24
 801ac86:	46bd      	mov	sp, r7
 801ac88:	bd90      	pop	{r4, r7, pc}
 801ac8a:	bf00      	nop
 801ac8c:	080232b8 	.word	0x080232b8
 801ac90:	2000404c 	.word	0x2000404c
 801ac94:	20004050 	.word	0x20004050
 801ac98:	080232c8 	.word	0x080232c8
 801ac9c:	41f00000 	.word	0x41f00000
 801aca0:	0802333c 	.word	0x0802333c

0801aca4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801aca4:	b590      	push	{r4, r7, lr}
 801aca6:	b097      	sub	sp, #92	; 0x5c
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	60f8      	str	r0, [r7, #12]
 801acac:	60b9      	str	r1, [r7, #8]
 801acae:	607a      	str	r2, [r7, #4]
 801acb0:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801acb2:	2307      	movs	r3, #7
 801acb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 801acb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801acbc:	2200      	movs	r2, #0
 801acbe:	601a      	str	r2, [r3, #0]
 801acc0:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801acc2:	2300      	movs	r3, #0
 801acc4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 801acc8:	2300      	movs	r3, #0
 801acca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 801acce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801acd2:	2200      	movs	r2, #0
 801acd4:	601a      	str	r2, [r3, #0]
 801acd6:	605a      	str	r2, [r3, #4]
 801acd8:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801acda:	4b97      	ldr	r3, [pc, #604]	; (801af38 <RegionUS915LinkAdrReq+0x294>)
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801ace2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ace6:	2206      	movs	r2, #6
 801ace8:	4618      	mov	r0, r3
 801acea:	f7fd fabb 	bl	8018264 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801acee:	e11b      	b.n	801af28 <RegionUS915LinkAdrReq+0x284>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	685a      	ldr	r2, [r3, #4]
 801acf4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 801acf8:	4413      	add	r3, r2
 801acfa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801acfe:	4611      	mov	r1, r2
 801ad00:	4618      	mov	r0, r3
 801ad02:	f7fd fbf3 	bl	80184ec <RegionCommonParseLinkAdrReq>
 801ad06:	4603      	mov	r3, r0
 801ad08:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 801ad0c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	f000 8113 	beq.w	801af3c <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801ad16:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801ad1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801ad1e:	4413      	add	r3, r2
 801ad20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801ad24:	2307      	movs	r3, #7
 801ad26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801ad2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad2e:	2b06      	cmp	r3, #6
 801ad30:	d116      	bne.n	801ad60 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 801ad32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 801ad3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad3e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 801ad42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad46:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 801ad4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ad52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad56:	b2db      	uxtb	r3, r3
 801ad58:	b29b      	uxth	r3, r3
 801ad5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad5e:	e0e3      	b.n	801af28 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 801ad60:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad64:	2b07      	cmp	r3, #7
 801ad66:	d112      	bne.n	801ad8e <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 801ad68:	2300      	movs	r3, #0
 801ad6a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 801ad6e:	2300      	movs	r3, #0
 801ad70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 801ad74:	2300      	movs	r3, #0
 801ad76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 801ad7a:	2300      	movs	r3, #0
 801ad7c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801ad80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad84:	b2db      	uxtb	r3, r3
 801ad86:	b29b      	uxth	r3, r3
 801ad88:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ad8c:	e0cc      	b.n	801af28 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801ad8e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801ad92:	2b05      	cmp	r3, #5
 801ad94:	f040 80bf 	bne.w	801af16 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 801ad98:	2301      	movs	r3, #1
 801ad9a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801ad9e:	2300      	movs	r3, #0
 801ada0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801ada4:	2300      	movs	r3, #0
 801ada6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801adaa:	e0ae      	b.n	801af0a <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 801adac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801adb0:	b2da      	uxtb	r2, r3
 801adb2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801adb6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801adba:	fa01 f303 	lsl.w	r3, r1, r3
 801adbe:	4013      	ands	r3, r2
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d04d      	beq.n	801ae60 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801adc4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801adc8:	f003 0301 	and.w	r3, r3, #1
 801adcc:	b2db      	uxtb	r3, r3
 801adce:	2b00      	cmp	r3, #0
 801add0:	d120      	bne.n	801ae14 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801add2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801add6:	005b      	lsls	r3, r3, #1
 801add8:	3358      	adds	r3, #88	; 0x58
 801adda:	443b      	add	r3, r7
 801addc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ade0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ade4:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 801ade8:	b292      	uxth	r2, r2
 801adea:	005b      	lsls	r3, r3, #1
 801adec:	3358      	adds	r3, #88	; 0x58
 801adee:	443b      	add	r3, r7
 801adf0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801adf4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801adf8:	b21a      	sxth	r2, r3
 801adfa:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801adfe:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae02:	fa01 f303 	lsl.w	r3, r1, r3
 801ae06:	b21b      	sxth	r3, r3
 801ae08:	4313      	orrs	r3, r2
 801ae0a:	b21b      	sxth	r3, r3
 801ae0c:	b29b      	uxth	r3, r3
 801ae0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801ae12:	e075      	b.n	801af00 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801ae14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae18:	005b      	lsls	r3, r3, #1
 801ae1a:	3358      	adds	r3, #88	; 0x58
 801ae1c:	443b      	add	r3, r7
 801ae1e:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae22:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae26:	f062 02ff 	orn	r2, r2, #255	; 0xff
 801ae2a:	b292      	uxth	r2, r2
 801ae2c:	005b      	lsls	r3, r3, #1
 801ae2e:	3358      	adds	r3, #88	; 0x58
 801ae30:	443b      	add	r3, r7
 801ae32:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801ae36:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae3a:	b21a      	sxth	r2, r3
 801ae3c:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae40:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae44:	fa01 f303 	lsl.w	r3, r1, r3
 801ae48:	b21b      	sxth	r3, r3
 801ae4a:	4313      	orrs	r3, r2
 801ae4c:	b21b      	sxth	r3, r3
 801ae4e:	b29b      	uxth	r3, r3
 801ae50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801ae54:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae58:	3301      	adds	r3, #1
 801ae5a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 801ae5e:	e04f      	b.n	801af00 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 801ae60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae64:	f003 0301 	and.w	r3, r3, #1
 801ae68:	b2db      	uxtb	r3, r3
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d122      	bne.n	801aeb4 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 801ae6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae72:	005b      	lsls	r3, r3, #1
 801ae74:	3358      	adds	r3, #88	; 0x58
 801ae76:	443b      	add	r3, r7
 801ae78:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801ae7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801ae80:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ae84:	b292      	uxth	r2, r2
 801ae86:	005b      	lsls	r3, r3, #1
 801ae88:	3358      	adds	r3, #88	; 0x58
 801ae8a:	443b      	add	r3, r7
 801ae8c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801ae90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ae94:	b21a      	sxth	r2, r3
 801ae96:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801ae9a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801ae9e:	fa01 f303 	lsl.w	r3, r1, r3
 801aea2:	b21b      	sxth	r3, r3
 801aea4:	43db      	mvns	r3, r3
 801aea6:	b21b      	sxth	r3, r3
 801aea8:	4013      	ands	r3, r2
 801aeaa:	b21b      	sxth	r3, r3
 801aeac:	b29b      	uxth	r3, r3
 801aeae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801aeb2:	e025      	b.n	801af00 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801aeb4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801aeb8:	005b      	lsls	r3, r3, #1
 801aeba:	3358      	adds	r3, #88	; 0x58
 801aebc:	443b      	add	r3, r7
 801aebe:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801aec2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801aec6:	b2d2      	uxtb	r2, r2
 801aec8:	b292      	uxth	r2, r2
 801aeca:	005b      	lsls	r3, r3, #1
 801aecc:	3358      	adds	r3, #88	; 0x58
 801aece:	443b      	add	r3, r7
 801aed0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801aed4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801aed8:	b21a      	sxth	r2, r3
 801aeda:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801aede:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801aee2:	fa01 f303 	lsl.w	r3, r1, r3
 801aee6:	b21b      	sxth	r3, r3
 801aee8:	43db      	mvns	r3, r3
 801aeea:	b21b      	sxth	r3, r3
 801aeec:	4013      	ands	r3, r2
 801aeee:	b21b      	sxth	r3, r3
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801aef6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801aefa:	3301      	adds	r3, #1
 801aefc:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801af00:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801af04:	3301      	adds	r3, #1
 801af06:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 801af0a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801af0e:	2b07      	cmp	r3, #7
 801af10:	f67f af4c 	bls.w	801adac <RegionUS915LinkAdrReq+0x108>
 801af14:	e008      	b.n	801af28 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801af16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801af1a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 801af1e:	005b      	lsls	r3, r3, #1
 801af20:	3358      	adds	r3, #88	; 0x58
 801af22:	443b      	add	r3, r7
 801af24:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	7a1b      	ldrb	r3, [r3, #8]
 801af2c:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801af30:	429a      	cmp	r2, r3
 801af32:	f4ff aedd 	bcc.w	801acf0 <RegionUS915LinkAdrReq+0x4c>
 801af36:	e002      	b.n	801af3e <RegionUS915LinkAdrReq+0x29a>
 801af38:	20004050 	.word	0x20004050
            break; // break loop, since no more request has been found
 801af3c:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 801af3e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801af42:	2b03      	cmp	r3, #3
 801af44:	dc0f      	bgt.n	801af66 <RegionUS915LinkAdrReq+0x2c2>
 801af46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801af4a:	2204      	movs	r2, #4
 801af4c:	2100      	movs	r1, #0
 801af4e:	4618      	mov	r0, r3
 801af50:	f7fd f95c 	bl	801820c <RegionCommonCountChannels>
 801af54:	4603      	mov	r3, r0
 801af56:	2b01      	cmp	r3, #1
 801af58:	d805      	bhi.n	801af66 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 801af5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af5e:	f023 0301 	bic.w	r3, r3, #1
 801af62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801af66:	2302      	movs	r3, #2
 801af68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801af6c:	68fb      	ldr	r3, [r7, #12]
 801af6e:	7a5b      	ldrb	r3, [r3, #9]
 801af70:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 801af74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801af78:	4618      	mov	r0, r3
 801af7a:	f7ff f911 	bl	801a1a0 <RegionUS915GetPhyParam>
 801af7e:	4603      	mov	r3, r0
 801af80:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801af82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801af86:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801af88:	68fb      	ldr	r3, [r7, #12]
 801af8a:	7a9b      	ldrb	r3, [r3, #10]
 801af8c:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801af8e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801af92:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801af94:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 801af98:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801af9a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801af9e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801afa6:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801afae:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801afb0:	68fb      	ldr	r3, [r7, #12]
 801afb2:	7b5b      	ldrb	r3, [r3, #13]
 801afb4:	b25b      	sxtb	r3, r3
 801afb6:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 801afb8:	2348      	movs	r3, #72	; 0x48
 801afba:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801afbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801afc2:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801afc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afc6:	b25b      	sxtb	r3, r3
 801afc8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 801afcc:	2304      	movs	r3, #4
 801afce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801afd2:	4b44      	ldr	r3, [pc, #272]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 801afd8:	230e      	movs	r3, #14
 801afda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801afde:	2300      	movs	r3, #0
 801afe0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801afea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801afee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aff2:	1c9a      	adds	r2, r3, #2
 801aff4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801aff8:	1c59      	adds	r1, r3, #1
 801affa:	f107 0014 	add.w	r0, r7, #20
 801affe:	4623      	mov	r3, r4
 801b000:	f7fd fac5 	bl	801858e <RegionCommonLinkAdrReqVerifyParams>
 801b004:	4603      	mov	r3, r0
 801b006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801b00a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801b00e:	2b07      	cmp	r3, #7
 801b010:	d151      	bne.n	801b0b6 <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801b012:	4b34      	ldr	r3, [pc, #208]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b01a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801b01e:	2206      	movs	r2, #6
 801b020:	4618      	mov	r0, r3
 801b022:	f7fd f91f 	bl	8018264 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801b026:	4b30      	ldr	r3, [pc, #192]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	f8b3 1090 	ldrh.w	r1, [r3, #144]	; 0x90
 801b02e:	4b2d      	ldr	r3, [pc, #180]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801b036:	4b2c      	ldr	r3, [pc, #176]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	400a      	ands	r2, r1
 801b03c:	b292      	uxth	r2, r2
 801b03e:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801b042:	4b29      	ldr	r3, [pc, #164]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	f8b3 1092 	ldrh.w	r1, [r3, #146]	; 0x92
 801b04a:	4b26      	ldr	r3, [pc, #152]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 801b052:	4b25      	ldr	r3, [pc, #148]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	400a      	ands	r2, r1
 801b058:	b292      	uxth	r2, r2
 801b05a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801b05e:	4b22      	ldr	r3, [pc, #136]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b060:	681b      	ldr	r3, [r3, #0]
 801b062:	f8b3 1094 	ldrh.w	r1, [r3, #148]	; 0x94
 801b066:	4b1f      	ldr	r3, [pc, #124]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 801b06e:	4b1e      	ldr	r3, [pc, #120]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	400a      	ands	r2, r1
 801b074:	b292      	uxth	r2, r2
 801b076:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801b07a:	4b1b      	ldr	r3, [pc, #108]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	f8b3 1096 	ldrh.w	r1, [r3, #150]	; 0x96
 801b082:	4b18      	ldr	r3, [pc, #96]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 801b08a:	4b17      	ldr	r3, [pc, #92]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	400a      	ands	r2, r1
 801b090:	b292      	uxth	r2, r2
 801b092:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b096:	4b13      	ldr	r3, [pc, #76]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b098:	681a      	ldr	r2, [r3, #0]
 801b09a:	4b13      	ldr	r3, [pc, #76]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b0a2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801b0a6:	4b0f      	ldr	r3, [pc, #60]	; (801b0e4 <RegionUS915LinkAdrReq+0x440>)
 801b0a8:	681a      	ldr	r2, [r3, #0]
 801b0aa:	4b0f      	ldr	r3, [pc, #60]	; (801b0e8 <RegionUS915LinkAdrReq+0x444>)
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801b0b2:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801b0b6:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801b0be:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801b0c6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 801b0ca:	683b      	ldr	r3, [r7, #0]
 801b0cc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801b0ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b0d0:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801b0d4:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801b0d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801b0da:	4618      	mov	r0, r3
 801b0dc:	375c      	adds	r7, #92	; 0x5c
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd90      	pop	{r4, r7, pc}
 801b0e2:	bf00      	nop
 801b0e4:	20004050 	.word	0x20004050
 801b0e8:	2000404c 	.word	0x2000404c

0801b0ec <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b084      	sub	sp, #16
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801b0f4:	2307      	movs	r3, #7
 801b0f6:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	685b      	ldr	r3, [r3, #4]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7fe ffdb 	bl	801a0b8 <VerifyRfFreq>
 801b102:	4603      	mov	r3, r0
 801b104:	f083 0301 	eor.w	r3, r3, #1
 801b108:	b2db      	uxtb	r3, r3
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d003      	beq.n	801b116 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 801b10e:	7bfb      	ldrb	r3, [r7, #15]
 801b110:	f023 0301 	bic.w	r3, r3, #1
 801b114:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f993 3000 	ldrsb.w	r3, [r3]
 801b11c:	220d      	movs	r2, #13
 801b11e:	2108      	movs	r1, #8
 801b120:	4618      	mov	r0, r3
 801b122:	f7fd f822 	bl	801816a <RegionCommonValueInRange>
 801b126:	4603      	mov	r3, r0
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d103      	bne.n	801b134 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 801b12c:	7bfb      	ldrb	r3, [r7, #15]
 801b12e:	f023 0302 	bic.w	r3, r3, #2
 801b132:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f993 3000 	ldrsb.w	r3, [r3]
 801b13a:	2207      	movs	r2, #7
 801b13c:	2105      	movs	r1, #5
 801b13e:	4618      	mov	r0, r3
 801b140:	f7fd f813 	bl	801816a <RegionCommonValueInRange>
 801b144:	4603      	mov	r3, r0
 801b146:	2b01      	cmp	r3, #1
 801b148:	d004      	beq.n	801b154 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801b150:	2b0d      	cmp	r3, #13
 801b152:	dd03      	ble.n	801b15c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801b154:	7bfb      	ldrb	r3, [r7, #15]
 801b156:	f023 0302 	bic.w	r3, r3, #2
 801b15a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801b162:	2203      	movs	r2, #3
 801b164:	2100      	movs	r1, #0
 801b166:	4618      	mov	r0, r3
 801b168:	f7fc ffff 	bl	801816a <RegionCommonValueInRange>
 801b16c:	4603      	mov	r3, r0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d103      	bne.n	801b17a <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801b172:	7bfb      	ldrb	r3, [r7, #15]
 801b174:	f023 0304 	bic.w	r3, r3, #4
 801b178:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 801b17a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b17c:	4618      	mov	r0, r3
 801b17e:	3710      	adds	r7, #16
 801b180:	46bd      	mov	sp, r7
 801b182:	bd80      	pop	{r7, pc}

0801b184 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801b184:	b480      	push	{r7}
 801b186:	b083      	sub	sp, #12
 801b188:	af00      	add	r7, sp, #0
 801b18a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b18c:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b190:	4618      	mov	r0, r3
 801b192:	370c      	adds	r7, #12
 801b194:	46bd      	mov	sp, r7
 801b196:	bc80      	pop	{r7}
 801b198:	4770      	bx	lr

0801b19a <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801b19a:	b480      	push	{r7}
 801b19c:	b083      	sub	sp, #12
 801b19e:	af00      	add	r7, sp, #0
 801b1a0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b1a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	370c      	adds	r7, #12
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bc80      	pop	{r7}
 801b1ae:	4770      	bx	lr

0801b1b0 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801b1b0:	b480      	push	{r7}
 801b1b2:	b083      	sub	sp, #12
 801b1b4:	af00      	add	r7, sp, #0
 801b1b6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801b1b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801b1bc:	4618      	mov	r0, r3
 801b1be:	370c      	adds	r7, #12
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bc80      	pop	{r7}
 801b1c4:	4770      	bx	lr
	...

0801b1c8 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801b1c8:	b480      	push	{r7}
 801b1ca:	b083      	sub	sp, #12
 801b1cc:	af00      	add	r7, sp, #0
 801b1ce:	4603      	mov	r3, r0
 801b1d0:	460a      	mov	r2, r1
 801b1d2:	71fb      	strb	r3, [r7, #7]
 801b1d4:	4613      	mov	r3, r2
 801b1d6:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 801b1d8:	79bb      	ldrb	r3, [r7, #6]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d108      	bne.n	801b1f0 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 801b1de:	4b16      	ldr	r3, [pc, #88]	; (801b238 <RegionUS915AlternateDr+0x70>)
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b1e6:	3201      	adds	r2, #1
 801b1e8:	b2d2      	uxtb	r2, r2
 801b1ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 801b1ee:	e007      	b.n	801b200 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 801b1f0:	4b11      	ldr	r3, [pc, #68]	; (801b238 <RegionUS915AlternateDr+0x70>)
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b1f8:	3a01      	subs	r2, #1
 801b1fa:	b2d2      	uxtb	r2, r2
 801b1fc:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 801b200:	4b0d      	ldr	r3, [pc, #52]	; (801b238 <RegionUS915AlternateDr+0x70>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	f893 209d 	ldrb.w	r2, [r3, #157]	; 0x9d
 801b208:	4b0c      	ldr	r3, [pc, #48]	; (801b23c <RegionUS915AlternateDr+0x74>)
 801b20a:	fba3 1302 	umull	r1, r3, r3, r2
 801b20e:	0859      	lsrs	r1, r3, #1
 801b210:	460b      	mov	r3, r1
 801b212:	00db      	lsls	r3, r3, #3
 801b214:	440b      	add	r3, r1
 801b216:	1ad3      	subs	r3, r2, r3
 801b218:	b2db      	uxtb	r3, r3
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d102      	bne.n	801b224 <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 801b21e:	2304      	movs	r3, #4
 801b220:	71fb      	strb	r3, [r7, #7]
 801b222:	e001      	b.n	801b228 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 801b224:	2300      	movs	r3, #0
 801b226:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 801b228:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 801b22c:	4618      	mov	r0, r3
 801b22e:	370c      	adds	r7, #12
 801b230:	46bd      	mov	sp, r7
 801b232:	bc80      	pop	{r7}
 801b234:	4770      	bx	lr
 801b236:	bf00      	nop
 801b238:	2000404c 	.word	0x2000404c
 801b23c:	38e38e39 	.word	0x38e38e39

0801b240 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b0a8      	sub	sp, #160	; 0xa0
 801b244:	af02      	add	r7, sp, #8
 801b246:	60f8      	str	r0, [r7, #12]
 801b248:	60b9      	str	r1, [r7, #8]
 801b24a:	607a      	str	r2, [r7, #4]
 801b24c:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801b24e:	2300      	movs	r3, #0
 801b250:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 801b254:	2300      	movs	r3, #0
 801b256:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801b25a:	2300      	movs	r3, #0
 801b25c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801b25e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801b262:	2244      	movs	r2, #68	; 0x44
 801b264:	2100      	movs	r1, #0
 801b266:	4618      	mov	r0, r3
 801b268:	f005 fc2a 	bl	8020ac0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801b26c:	230c      	movs	r3, #12
 801b26e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801b272:	4b6b      	ldr	r3, [pc, #428]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	3390      	adds	r3, #144	; 0x90
 801b278:	2204      	movs	r2, #4
 801b27a:	2100      	movs	r1, #0
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7fc ffc5 	bl	801820c <RegionCommonCountChannels>
 801b282:	4603      	mov	r3, r0
 801b284:	2b00      	cmp	r3, #0
 801b286:	d110      	bne.n	801b2aa <RegionUS915NextChannel+0x6a>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801b288:	4b65      	ldr	r3, [pc, #404]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801b290:	4b64      	ldr	r3, [pc, #400]	; (801b424 <RegionUS915NextChannel+0x1e4>)
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b298:	2204      	movs	r2, #4
 801b29a:	4619      	mov	r1, r3
 801b29c:	f7fc ffe2 	bl	8018264 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801b2a0:	4b5f      	ldr	r3, [pc, #380]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801b2aa:	68fb      	ldr	r3, [r7, #12]
 801b2ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b2b0:	2b03      	cmp	r3, #3
 801b2b2:	dd0e      	ble.n	801b2d2 <RegionUS915NextChannel+0x92>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 801b2b4:	4b5a      	ldr	r3, [pc, #360]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801b2bc:	b2db      	uxtb	r3, r3
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d107      	bne.n	801b2d2 <RegionUS915NextChannel+0x92>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 801b2c2:	4b58      	ldr	r3, [pc, #352]	; (801b424 <RegionUS915NextChannel+0x1e4>)
 801b2c4:	681a      	ldr	r2, [r3, #0]
 801b2c6:	4b56      	ldr	r3, [pc, #344]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801b2ce:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	7a5b      	ldrb	r3, [r3, #9]
 801b2d6:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801b2d8:	68fb      	ldr	r3, [r7, #12]
 801b2da:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b2de:	b2db      	uxtb	r3, r3
 801b2e0:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801b2e2:	4b4f      	ldr	r3, [pc, #316]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	3390      	adds	r3, #144	; 0x90
 801b2e8:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801b2ea:	4b4e      	ldr	r3, [pc, #312]	; (801b424 <RegionUS915NextChannel+0x1e4>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	61fb      	str	r3, [r7, #28]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 801b2f0:	4b4b      	ldr	r3, [pc, #300]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	623b      	str	r3, [r7, #32]
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801b2f6:	2348      	movs	r3, #72	; 0x48
 801b2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	685b      	ldr	r3, [r3, #4]
 801b308:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	7a9b      	ldrb	r3, [r3, #10]
 801b30e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 801b312:	2301      	movs	r3, #1
 801b314:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801b318:	68fa      	ldr	r2, [r7, #12]
 801b31a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801b31e:	320c      	adds	r2, #12
 801b320:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b324:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	7d1b      	ldrb	r3, [r3, #20]
 801b32c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	8adb      	ldrh	r3, [r3, #22]
 801b33a:	4619      	mov	r1, r3
 801b33c:	4610      	mov	r0, r2
 801b33e:	f7fe feff 	bl	801a140 <GetTimeOnAir>
 801b342:	4603      	mov	r3, r0
 801b344:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 801b346:	f107 0314 	add.w	r3, r7, #20
 801b34a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801b34c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 801b350:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801b354:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	9301      	str	r3, [sp, #4]
 801b35c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801b360:	9300      	str	r3, [sp, #0]
 801b362:	460b      	mov	r3, r1
 801b364:	6839      	ldr	r1, [r7, #0]
 801b366:	f7fd fb58 	bl	8018a1a <RegionCommonIdentifyChannels>
 801b36a:	4603      	mov	r3, r0
 801b36c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801b370:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 801b374:	2b00      	cmp	r3, #0
 801b376:	d14d      	bne.n	801b414 <RegionUS915NextChannel+0x1d4>
    {
        if( nextChanParams->Joined == true )
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	7a5b      	ldrb	r3, [r3, #9]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d00e      	beq.n	801b39e <RegionUS915NextChannel+0x15e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801b380:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 801b384:	3b01      	subs	r3, #1
 801b386:	4619      	mov	r1, r3
 801b388:	2000      	movs	r0, #0
 801b38a:	f000 f8f5 	bl	801b578 <randr>
 801b38e:	4603      	mov	r3, r0
 801b390:	3398      	adds	r3, #152	; 0x98
 801b392:	443b      	add	r3, r7
 801b394:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	701a      	strb	r2, [r3, #0]
 801b39c:	e030      	b.n	801b400 <RegionUS915NextChannel+0x1c0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d10f      	bne.n	801b3c8 <RegionUS915NextChannel+0x188>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b3a8:	4b1d      	ldr	r3, [pc, #116]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	f103 0090 	add.w	r0, r3, #144	; 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801b3b0:	4b1b      	ldr	r3, [pc, #108]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b3b2:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801b3b4:	339c      	adds	r3, #156	; 0x9c
 801b3b6:	68ba      	ldr	r2, [r7, #8]
 801b3b8:	4619      	mov	r1, r3
 801b3ba:	f7fc fc91 	bl	8017ce0 <RegionBaseUSComputeNext125kHzJoinChannel>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	2b03      	cmp	r3, #3
 801b3c2:	d11d      	bne.n	801b400 <RegionUS915NextChannel+0x1c0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801b3c4:	2303      	movs	r3, #3
 801b3c6:	e027      	b.n	801b418 <RegionUS915NextChannel+0x1d8>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801b3c8:	2300      	movs	r3, #0
 801b3ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b3ce:	e004      	b.n	801b3da <RegionUS915NextChannel+0x19a>
                {
                    i++;
 801b3d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b3d4:	3301      	adds	r3, #1
 801b3d6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801b3da:	4b11      	ldr	r3, [pc, #68]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 801b3e2:	b2da      	uxtb	r2, r3
 801b3e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b3e8:	fa42 f303 	asr.w	r3, r2, r3
 801b3ec:	f003 0301 	and.w	r3, r3, #1
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d0ed      	beq.n	801b3d0 <RegionUS915NextChannel+0x190>
                }
                *channel = 64 + i;
 801b3f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801b3f8:	3340      	adds	r3, #64	; 0x40
 801b3fa:	b2da      	uxtb	r2, r3
 801b3fc:	68bb      	ldr	r3, [r7, #8]
 801b3fe:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801b400:	4b07      	ldr	r3, [pc, #28]	; (801b420 <RegionUS915NextChannel+0x1e0>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f103 0090 	add.w	r0, r3, #144	; 0x90
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	781b      	ldrb	r3, [r3, #0]
 801b40c:	2248      	movs	r2, #72	; 0x48
 801b40e:	4619      	mov	r1, r3
 801b410:	f7fc fec8 	bl	80181a4 <RegionCommonChanDisable>
    }
    return status;
 801b414:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801b418:	4618      	mov	r0, r3
 801b41a:	3798      	adds	r7, #152	; 0x98
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	2000404c 	.word	0x2000404c
 801b424:	20004050 	.word	0x20004050

0801b428 <RegionUS915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801b428:	b590      	push	{r4, r7, lr}
 801b42a:	b085      	sub	sp, #20
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801b436:	4b23      	ldr	r3, [pc, #140]	; (801b4c4 <RegionUS915SetContinuousWave+0x9c>)
 801b438:	681a      	ldr	r2, [r3, #0]
 801b43a:	4b23      	ldr	r3, [pc, #140]	; (801b4c8 <RegionUS915SetContinuousWave+0xa0>)
 801b43c:	6819      	ldr	r1, [r3, #0]
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	781b      	ldrb	r3, [r3, #0]
 801b442:	461c      	mov	r4, r3
 801b444:	4623      	mov	r3, r4
 801b446:	005b      	lsls	r3, r3, #1
 801b448:	4423      	add	r3, r4
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	440b      	add	r3, r1
 801b44e:	3309      	adds	r3, #9
 801b450:	781b      	ldrb	r3, [r3, #0]
 801b452:	4619      	mov	r1, r3
 801b454:	460b      	mov	r3, r1
 801b456:	005b      	lsls	r3, r3, #1
 801b458:	440b      	add	r3, r1
 801b45a:	00db      	lsls	r3, r3, #3
 801b45c:	4413      	add	r3, r2
 801b45e:	3302      	adds	r3, #2
 801b460:	f993 1000 	ldrsb.w	r1, [r3]
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801b46a:	4b17      	ldr	r3, [pc, #92]	; (801b4c8 <RegionUS915SetContinuousWave+0xa0>)
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801b472:	f7fe fdeb 	bl	801a04c <LimitTxPower>
 801b476:	4603      	mov	r3, r0
 801b478:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801b47a:	2300      	movs	r3, #0
 801b47c:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 801b47e:	4b12      	ldr	r3, [pc, #72]	; (801b4c8 <RegionUS915SetContinuousWave+0xa0>)
 801b480:	681a      	ldr	r2, [r3, #0]
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	781b      	ldrb	r3, [r3, #0]
 801b486:	4619      	mov	r1, r3
 801b488:	460b      	mov	r3, r1
 801b48a:	005b      	lsls	r3, r3, #1
 801b48c:	440b      	add	r3, r1
 801b48e:	009b      	lsls	r3, r3, #2
 801b490:	4413      	add	r3, r2
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801b496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b49a:	f04f 0200 	mov.w	r2, #0
 801b49e:	490b      	ldr	r1, [pc, #44]	; (801b4cc <RegionUS915SetContinuousWave+0xa4>)
 801b4a0:	4618      	mov	r0, r3
 801b4a2:	f7fd f9cb 	bl	801883c <RegionCommonComputeTxPower>
 801b4a6:	4603      	mov	r3, r0
 801b4a8:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801b4aa:	4b09      	ldr	r3, [pc, #36]	; (801b4d0 <RegionUS915SetContinuousWave+0xa8>)
 801b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4ae:	687a      	ldr	r2, [r7, #4]
 801b4b0:	8992      	ldrh	r2, [r2, #12]
 801b4b2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801b4b6:	68b8      	ldr	r0, [r7, #8]
 801b4b8:	4798      	blx	r3
#endif /* REGION_US915 */
}
 801b4ba:	bf00      	nop
 801b4bc:	3714      	adds	r7, #20
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd90      	pop	{r4, r7, pc}
 801b4c2:	bf00      	nop
 801b4c4:	2000404c 	.word	0x2000404c
 801b4c8:	20004050 	.word	0x20004050
 801b4cc:	41f00000 	.word	0x41f00000
 801b4d0:	0802333c 	.word	0x0802333c

0801b4d4 <RegionUS915ApplyDrOffset>:

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801b4d4:	b480      	push	{r7}
 801b4d6:	b085      	sub	sp, #20
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	4603      	mov	r3, r0
 801b4dc:	71fb      	strb	r3, [r7, #7]
 801b4de:	460b      	mov	r3, r1
 801b4e0:	71bb      	strb	r3, [r7, #6]
 801b4e2:	4613      	mov	r3, r2
 801b4e4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801b4e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801b4ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801b4ee:	4909      	ldr	r1, [pc, #36]	; (801b514 <RegionUS915ApplyDrOffset+0x40>)
 801b4f0:	0092      	lsls	r2, r2, #2
 801b4f2:	440a      	add	r2, r1
 801b4f4:	4413      	add	r3, r2
 801b4f6:	781b      	ldrb	r3, [r3, #0]
 801b4f8:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801b4fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	da01      	bge.n	801b506 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801b502:	2300      	movs	r3, #0
 801b504:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801b506:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801b508:	4618      	mov	r0, r3
 801b50a:	3714      	adds	r7, #20
 801b50c:	46bd      	mov	sp, r7
 801b50e:	bc80      	pop	{r7}
 801b510:	4770      	bx	lr
 801b512:	bf00      	nop
 801b514:	08023308 	.word	0x08023308

0801b518 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801b518:	b480      	push	{r7}
 801b51a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 801b51c:	4b0d      	ldr	r3, [pc, #52]	; (801b554 <rand1+0x3c>)
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	4a0d      	ldr	r2, [pc, #52]	; (801b558 <rand1+0x40>)
 801b522:	fb02 f303 	mul.w	r3, r2, r3
 801b526:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801b52a:	3339      	adds	r3, #57	; 0x39
 801b52c:	4a09      	ldr	r2, [pc, #36]	; (801b554 <rand1+0x3c>)
 801b52e:	6013      	str	r3, [r2, #0]
 801b530:	4b08      	ldr	r3, [pc, #32]	; (801b554 <rand1+0x3c>)
 801b532:	681a      	ldr	r2, [r3, #0]
 801b534:	2303      	movs	r3, #3
 801b536:	fba3 1302 	umull	r1, r3, r3, r2
 801b53a:	1ad1      	subs	r1, r2, r3
 801b53c:	0849      	lsrs	r1, r1, #1
 801b53e:	440b      	add	r3, r1
 801b540:	0f99      	lsrs	r1, r3, #30
 801b542:	460b      	mov	r3, r1
 801b544:	07db      	lsls	r3, r3, #31
 801b546:	1a5b      	subs	r3, r3, r1
 801b548:	1ad1      	subs	r1, r2, r3
 801b54a:	460b      	mov	r3, r1
}
 801b54c:	4618      	mov	r0, r3
 801b54e:	46bd      	mov	sp, r7
 801b550:	bc80      	pop	{r7}
 801b552:	4770      	bx	lr
 801b554:	2000010c 	.word	0x2000010c
 801b558:	41c64e6d 	.word	0x41c64e6d

0801b55c <srand1>:

void srand1( uint32_t seed )
{
 801b55c:	b480      	push	{r7}
 801b55e:	b083      	sub	sp, #12
 801b560:	af00      	add	r7, sp, #0
 801b562:	6078      	str	r0, [r7, #4]
    next = seed;
 801b564:	4a03      	ldr	r2, [pc, #12]	; (801b574 <srand1+0x18>)
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	6013      	str	r3, [r2, #0]
}
 801b56a:	bf00      	nop
 801b56c:	370c      	adds	r7, #12
 801b56e:	46bd      	mov	sp, r7
 801b570:	bc80      	pop	{r7}
 801b572:	4770      	bx	lr
 801b574:	2000010c 	.word	0x2000010c

0801b578 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 801b578:	b580      	push	{r7, lr}
 801b57a:	b082      	sub	sp, #8
 801b57c:	af00      	add	r7, sp, #0
 801b57e:	6078      	str	r0, [r7, #4]
 801b580:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801b582:	f7ff ffc9 	bl	801b518 <rand1>
 801b586:	4602      	mov	r2, r0
 801b588:	6839      	ldr	r1, [r7, #0]
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	1acb      	subs	r3, r1, r3
 801b58e:	3301      	adds	r3, #1
 801b590:	fb92 f1f3 	sdiv	r1, r2, r3
 801b594:	fb01 f303 	mul.w	r3, r1, r3
 801b598:	1ad2      	subs	r2, r2, r3
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	4413      	add	r3, r2
}
 801b59e:	4618      	mov	r0, r3
 801b5a0:	3708      	adds	r7, #8
 801b5a2:	46bd      	mov	sp, r7
 801b5a4:	bd80      	pop	{r7, pc}

0801b5a6 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b5a6:	b480      	push	{r7}
 801b5a8:	b085      	sub	sp, #20
 801b5aa:	af00      	add	r7, sp, #0
 801b5ac:	60f8      	str	r0, [r7, #12]
 801b5ae:	60b9      	str	r1, [r7, #8]
 801b5b0:	4613      	mov	r3, r2
 801b5b2:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 801b5b4:	e007      	b.n	801b5c6 <memcpy1+0x20>
    {
        *dst++ = *src++;
 801b5b6:	68ba      	ldr	r2, [r7, #8]
 801b5b8:	1c53      	adds	r3, r2, #1
 801b5ba:	60bb      	str	r3, [r7, #8]
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	1c59      	adds	r1, r3, #1
 801b5c0:	60f9      	str	r1, [r7, #12]
 801b5c2:	7812      	ldrb	r2, [r2, #0]
 801b5c4:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b5c6:	88fb      	ldrh	r3, [r7, #6]
 801b5c8:	1e5a      	subs	r2, r3, #1
 801b5ca:	80fa      	strh	r2, [r7, #6]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	d1f2      	bne.n	801b5b6 <memcpy1+0x10>
    }
}
 801b5d0:	bf00      	nop
 801b5d2:	bf00      	nop
 801b5d4:	3714      	adds	r7, #20
 801b5d6:	46bd      	mov	sp, r7
 801b5d8:	bc80      	pop	{r7}
 801b5da:	4770      	bx	lr

0801b5dc <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801b5dc:	b480      	push	{r7}
 801b5de:	b085      	sub	sp, #20
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	60f8      	str	r0, [r7, #12]
 801b5e4:	60b9      	str	r1, [r7, #8]
 801b5e6:	4613      	mov	r3, r2
 801b5e8:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801b5ea:	88fb      	ldrh	r3, [r7, #6]
 801b5ec:	3b01      	subs	r3, #1
 801b5ee:	68fa      	ldr	r2, [r7, #12]
 801b5f0:	4413      	add	r3, r2
 801b5f2:	60fb      	str	r3, [r7, #12]
    while( size-- )
 801b5f4:	e007      	b.n	801b606 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801b5f6:	68ba      	ldr	r2, [r7, #8]
 801b5f8:	1c53      	adds	r3, r2, #1
 801b5fa:	60bb      	str	r3, [r7, #8]
 801b5fc:	68fb      	ldr	r3, [r7, #12]
 801b5fe:	1e59      	subs	r1, r3, #1
 801b600:	60f9      	str	r1, [r7, #12]
 801b602:	7812      	ldrb	r2, [r2, #0]
 801b604:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b606:	88fb      	ldrh	r3, [r7, #6]
 801b608:	1e5a      	subs	r2, r3, #1
 801b60a:	80fa      	strh	r2, [r7, #6]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d1f2      	bne.n	801b5f6 <memcpyr+0x1a>
    }
}
 801b610:	bf00      	nop
 801b612:	bf00      	nop
 801b614:	3714      	adds	r7, #20
 801b616:	46bd      	mov	sp, r7
 801b618:	bc80      	pop	{r7}
 801b61a:	4770      	bx	lr

0801b61c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 801b61c:	b480      	push	{r7}
 801b61e:	b083      	sub	sp, #12
 801b620:	af00      	add	r7, sp, #0
 801b622:	6078      	str	r0, [r7, #4]
 801b624:	460b      	mov	r3, r1
 801b626:	70fb      	strb	r3, [r7, #3]
 801b628:	4613      	mov	r3, r2
 801b62a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 801b62c:	e004      	b.n	801b638 <memset1+0x1c>
    {
        *dst++ = value;
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	1c5a      	adds	r2, r3, #1
 801b632:	607a      	str	r2, [r7, #4]
 801b634:	78fa      	ldrb	r2, [r7, #3]
 801b636:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801b638:	883b      	ldrh	r3, [r7, #0]
 801b63a:	1e5a      	subs	r2, r3, #1
 801b63c:	803a      	strh	r2, [r7, #0]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d1f5      	bne.n	801b62e <memset1+0x12>
    }
}
 801b642:	bf00      	nop
 801b644:	bf00      	nop
 801b646:	370c      	adds	r7, #12
 801b648:	46bd      	mov	sp, r7
 801b64a:	bc80      	pop	{r7}
 801b64c:	4770      	bx	lr
	...

0801b650 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 801b650:	b480      	push	{r7}
 801b652:	b087      	sub	sp, #28
 801b654:	af00      	add	r7, sp, #0
 801b656:	6078      	str	r0, [r7, #4]
 801b658:	460b      	mov	r3, r1
 801b65a:	807b      	strh	r3, [r7, #2]
    // The CRC calculation follows CCITT - 0x04C11DB7
    const uint32_t reversedPolynom = 0xEDB88320;
 801b65c:	4b1a      	ldr	r3, [pc, #104]	; (801b6c8 <Crc32+0x78>)
 801b65e:	60fb      	str	r3, [r7, #12]

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 801b660:	f04f 33ff 	mov.w	r3, #4294967295
 801b664:	617b      	str	r3, [r7, #20]

    if( buffer == NULL )
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d101      	bne.n	801b670 <Crc32+0x20>
    {
        return 0;
 801b66c:	2300      	movs	r3, #0
 801b66e:	e026      	b.n	801b6be <Crc32+0x6e>
    }

    for( uint16_t i = 0; i < length; ++i )
 801b670:	2300      	movs	r3, #0
 801b672:	827b      	strh	r3, [r7, #18]
 801b674:	e01d      	b.n	801b6b2 <Crc32+0x62>
    {
        crc ^= ( uint32_t )buffer[i];
 801b676:	8a7b      	ldrh	r3, [r7, #18]
 801b678:	687a      	ldr	r2, [r7, #4]
 801b67a:	4413      	add	r3, r2
 801b67c:	781b      	ldrb	r3, [r3, #0]
 801b67e:	461a      	mov	r2, r3
 801b680:	697b      	ldr	r3, [r7, #20]
 801b682:	4053      	eors	r3, r2
 801b684:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801b686:	2300      	movs	r3, #0
 801b688:	823b      	strh	r3, [r7, #16]
 801b68a:	e00c      	b.n	801b6a6 <Crc32+0x56>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	085a      	lsrs	r2, r3, #1
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	f003 0301 	and.w	r3, r3, #1
 801b696:	4259      	negs	r1, r3
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	400b      	ands	r3, r1
 801b69c:	4053      	eors	r3, r2
 801b69e:	617b      	str	r3, [r7, #20]
        for( uint16_t i = 0; i < 8; i++ )
 801b6a0:	8a3b      	ldrh	r3, [r7, #16]
 801b6a2:	3301      	adds	r3, #1
 801b6a4:	823b      	strh	r3, [r7, #16]
 801b6a6:	8a3b      	ldrh	r3, [r7, #16]
 801b6a8:	2b07      	cmp	r3, #7
 801b6aa:	d9ef      	bls.n	801b68c <Crc32+0x3c>
    for( uint16_t i = 0; i < length; ++i )
 801b6ac:	8a7b      	ldrh	r3, [r7, #18]
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	827b      	strh	r3, [r7, #18]
 801b6b2:	8a7a      	ldrh	r2, [r7, #18]
 801b6b4:	887b      	ldrh	r3, [r7, #2]
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d3dd      	bcc.n	801b676 <Crc32+0x26>
        }
    }

    return ~crc;
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	43db      	mvns	r3, r3
}
 801b6be:	4618      	mov	r0, r3
 801b6c0:	371c      	adds	r7, #28
 801b6c2:	46bd      	mov	sp, r7
 801b6c4:	bc80      	pop	{r7}
 801b6c6:	4770      	bx	lr
 801b6c8:	edb88320 	.word	0xedb88320

0801b6cc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801b6cc:	b580      	push	{r7, lr}
 801b6ce:	b084      	sub	sp, #16
 801b6d0:	af02      	add	r7, sp, #8
 801b6d2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 801b6d4:	4a21      	ldr	r2, [pc, #132]	; (801b75c <RadioInit+0x90>)
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801b6da:	4b21      	ldr	r3, [pc, #132]	; (801b760 <RadioInit+0x94>)
 801b6dc:	2200      	movs	r2, #0
 801b6de:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 801b6e0:	4b1f      	ldr	r3, [pc, #124]	; (801b760 <RadioInit+0x94>)
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 801b6e6:	4b1e      	ldr	r3, [pc, #120]	; (801b760 <RadioInit+0x94>)
 801b6e8:	2200      	movs	r2, #0
 801b6ea:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 801b6ec:	481d      	ldr	r0, [pc, #116]	; (801b764 <RadioInit+0x98>)
 801b6ee:	f001 feb7 	bl	801d460 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 801b6f2:	2000      	movs	r0, #0
 801b6f4:	f001 f81e 	bl	801c734 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 801b6f8:	f002 f948 	bl	801d98c <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801b6fc:	2100      	movs	r1, #0
 801b6fe:	2000      	movs	r0, #0
 801b700:	f002 fca8 	bl	801e054 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 801b704:	2204      	movs	r2, #4
 801b706:	2100      	movs	r1, #0
 801b708:	2001      	movs	r0, #1
 801b70a:	f002 facd 	bl	801dca8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b70e:	2300      	movs	r3, #0
 801b710:	2200      	movs	r2, #0
 801b712:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b716:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b71a:	f002 f9fd 	bl	801db18 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801b71e:	f000 fe9b 	bl	801c458 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801b722:	2300      	movs	r3, #0
 801b724:	9300      	str	r3, [sp, #0]
 801b726:	4b10      	ldr	r3, [pc, #64]	; (801b768 <RadioInit+0x9c>)
 801b728:	2200      	movs	r2, #0
 801b72a:	f04f 31ff 	mov.w	r1, #4294967295
 801b72e:	480f      	ldr	r0, [pc, #60]	; (801b76c <RadioInit+0xa0>)
 801b730:	f004 f8d0 	bl	801f8d4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 801b734:	2300      	movs	r3, #0
 801b736:	9300      	str	r3, [sp, #0]
 801b738:	4b0d      	ldr	r3, [pc, #52]	; (801b770 <RadioInit+0xa4>)
 801b73a:	2200      	movs	r2, #0
 801b73c:	f04f 31ff 	mov.w	r1, #4294967295
 801b740:	480c      	ldr	r0, [pc, #48]	; (801b774 <RadioInit+0xa8>)
 801b742:	f004 f8c7 	bl	801f8d4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 801b746:	4809      	ldr	r0, [pc, #36]	; (801b76c <RadioInit+0xa0>)
 801b748:	f004 f968 	bl	801fa1c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 801b74c:	4809      	ldr	r0, [pc, #36]	; (801b774 <RadioInit+0xa8>)
 801b74e:	f004 f965 	bl	801fa1c <UTIL_TIMER_Stop>
}
 801b752:	bf00      	nop
 801b754:	3708      	adds	r7, #8
 801b756:	46bd      	mov	sp, r7
 801b758:	bd80      	pop	{r7, pc}
 801b75a:	bf00      	nop
 801b75c:	20004154 	.word	0x20004154
 801b760:	20004158 	.word	0x20004158
 801b764:	0801c819 	.word	0x0801c819
 801b768:	0801c7a1 	.word	0x0801c7a1
 801b76c:	200041b0 	.word	0x200041b0
 801b770:	0801c7b5 	.word	0x0801c7b5
 801b774:	200041c8 	.word	0x200041c8

0801b778 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 801b778:	b580      	push	{r7, lr}
 801b77a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801b77c:	f001 feb2 	bl	801d4e4 <SUBGRF_GetOperatingMode>
 801b780:	4603      	mov	r3, r0
 801b782:	2b07      	cmp	r3, #7
 801b784:	d00a      	beq.n	801b79c <RadioGetStatus+0x24>
 801b786:	2b07      	cmp	r3, #7
 801b788:	dc0a      	bgt.n	801b7a0 <RadioGetStatus+0x28>
 801b78a:	2b04      	cmp	r3, #4
 801b78c:	d002      	beq.n	801b794 <RadioGetStatus+0x1c>
 801b78e:	2b05      	cmp	r3, #5
 801b790:	d002      	beq.n	801b798 <RadioGetStatus+0x20>
 801b792:	e005      	b.n	801b7a0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801b794:	2302      	movs	r3, #2
 801b796:	e004      	b.n	801b7a2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801b798:	2301      	movs	r3, #1
 801b79a:	e002      	b.n	801b7a2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801b79c:	2303      	movs	r3, #3
 801b79e:	e000      	b.n	801b7a2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801b7a0:	2300      	movs	r3, #0
    }
}
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	bd80      	pop	{r7, pc}
	...

0801b7a8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b082      	sub	sp, #8
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801b7b2:	4a25      	ldr	r2, [pc, #148]	; (801b848 <RadioSetModem+0xa0>)
 801b7b4:	79fb      	ldrb	r3, [r7, #7]
 801b7b6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 801b7b8:	79fb      	ldrb	r3, [r7, #7]
 801b7ba:	4618      	mov	r0, r3
 801b7bc:	f003 f80d 	bl	801e7da <RFW_SetRadioModem>
    switch( modem )
 801b7c0:	79fb      	ldrb	r3, [r7, #7]
 801b7c2:	3b01      	subs	r3, #1
 801b7c4:	2b03      	cmp	r3, #3
 801b7c6:	d80b      	bhi.n	801b7e0 <RadioSetModem+0x38>
 801b7c8:	a201      	add	r2, pc, #4	; (adr r2, 801b7d0 <RadioSetModem+0x28>)
 801b7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7ce:	bf00      	nop
 801b7d0:	0801b7ef 	.word	0x0801b7ef
 801b7d4:	0801b815 	.word	0x0801b815
 801b7d8:	0801b823 	.word	0x0801b823
 801b7dc:	0801b831 	.word	0x0801b831
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	f002 fa3b 	bl	801dc5c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b7e6:	4b18      	ldr	r3, [pc, #96]	; (801b848 <RadioSetModem+0xa0>)
 801b7e8:	2200      	movs	r2, #0
 801b7ea:	735a      	strb	r2, [r3, #13]
        break;
 801b7ec:	e028      	b.n	801b840 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801b7ee:	2001      	movs	r0, #1
 801b7f0:	f002 fa34 	bl	801dc5c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801b7f4:	4b14      	ldr	r3, [pc, #80]	; (801b848 <RadioSetModem+0xa0>)
 801b7f6:	7b5a      	ldrb	r2, [r3, #13]
 801b7f8:	4b13      	ldr	r3, [pc, #76]	; (801b848 <RadioSetModem+0xa0>)
 801b7fa:	7b1b      	ldrb	r3, [r3, #12]
 801b7fc:	429a      	cmp	r2, r3
 801b7fe:	d01e      	beq.n	801b83e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801b800:	4b11      	ldr	r3, [pc, #68]	; (801b848 <RadioSetModem+0xa0>)
 801b802:	7b1a      	ldrb	r2, [r3, #12]
 801b804:	4b10      	ldr	r3, [pc, #64]	; (801b848 <RadioSetModem+0xa0>)
 801b806:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801b808:	4b0f      	ldr	r3, [pc, #60]	; (801b848 <RadioSetModem+0xa0>)
 801b80a:	7b5b      	ldrb	r3, [r3, #13]
 801b80c:	4618      	mov	r0, r3
 801b80e:	f000 ff91 	bl	801c734 <RadioSetPublicNetwork>
        }
        break;
 801b812:	e014      	b.n	801b83e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b814:	2002      	movs	r0, #2
 801b816:	f002 fa21 	bl	801dc5c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b81a:	4b0b      	ldr	r3, [pc, #44]	; (801b848 <RadioSetModem+0xa0>)
 801b81c:	2200      	movs	r2, #0
 801b81e:	735a      	strb	r2, [r3, #13]
        break;
 801b820:	e00e      	b.n	801b840 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801b822:	2002      	movs	r0, #2
 801b824:	f002 fa1a 	bl	801dc5c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b828:	4b07      	ldr	r3, [pc, #28]	; (801b848 <RadioSetModem+0xa0>)
 801b82a:	2200      	movs	r2, #0
 801b82c:	735a      	strb	r2, [r3, #13]
        break;
 801b82e:	e007      	b.n	801b840 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801b830:	2000      	movs	r0, #0
 801b832:	f002 fa13 	bl	801dc5c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801b836:	4b04      	ldr	r3, [pc, #16]	; (801b848 <RadioSetModem+0xa0>)
 801b838:	2200      	movs	r2, #0
 801b83a:	735a      	strb	r2, [r3, #13]
        break;
 801b83c:	e000      	b.n	801b840 <RadioSetModem+0x98>
        break;
 801b83e:	bf00      	nop
    }
}
 801b840:	bf00      	nop
 801b842:	3708      	adds	r7, #8
 801b844:	46bd      	mov	sp, r7
 801b846:	bd80      	pop	{r7, pc}
 801b848:	20004158 	.word	0x20004158

0801b84c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801b84c:	b580      	push	{r7, lr}
 801b84e:	b082      	sub	sp, #8
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801b854:	6878      	ldr	r0, [r7, #4]
 801b856:	f002 f9bb 	bl	801dbd0 <SUBGRF_SetRfFrequency>
}
 801b85a:	bf00      	nop
 801b85c:	3708      	adds	r7, #8
 801b85e:	46bd      	mov	sp, r7
 801b860:	bd80      	pop	{r7, pc}

0801b862 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801b862:	b580      	push	{r7, lr}
 801b864:	b090      	sub	sp, #64	; 0x40
 801b866:	af0a      	add	r7, sp, #40	; 0x28
 801b868:	60f8      	str	r0, [r7, #12]
 801b86a:	60b9      	str	r1, [r7, #8]
 801b86c:	603b      	str	r3, [r7, #0]
 801b86e:	4613      	mov	r3, r2
 801b870:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801b872:	2301      	movs	r3, #1
 801b874:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801b876:	2300      	movs	r3, #0
 801b878:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801b87a:	2300      	movs	r3, #0
 801b87c:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801b87e:	f000 fdfe 	bl	801c47e <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 801b882:	2000      	movs	r0, #0
 801b884:	f7ff ff90 	bl	801b7a8 <RadioSetModem>

    RadioSetChannel( freq );
 801b888:	68f8      	ldr	r0, [r7, #12]
 801b88a:	f7ff ffdf 	bl	801b84c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801b88e:	2301      	movs	r3, #1
 801b890:	9309      	str	r3, [sp, #36]	; 0x24
 801b892:	2300      	movs	r3, #0
 801b894:	9308      	str	r3, [sp, #32]
 801b896:	2300      	movs	r3, #0
 801b898:	9307      	str	r3, [sp, #28]
 801b89a:	2300      	movs	r3, #0
 801b89c:	9306      	str	r3, [sp, #24]
 801b89e:	2300      	movs	r3, #0
 801b8a0:	9305      	str	r3, [sp, #20]
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	9304      	str	r3, [sp, #16]
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	9303      	str	r3, [sp, #12]
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	9302      	str	r3, [sp, #8]
 801b8ae:	2303      	movs	r3, #3
 801b8b0:	9301      	str	r3, [sp, #4]
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	9300      	str	r3, [sp, #0]
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 801b8bc:	68b9      	ldr	r1, [r7, #8]
 801b8be:	2000      	movs	r0, #0
 801b8c0:	f000 f840 	bl	801b944 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801b8c4:	2000      	movs	r0, #0
 801b8c6:	f000 fde1 	bl	801c48c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801b8ca:	f000 ff61 	bl	801c790 <RadioGetWakeupTime>
 801b8ce:	4603      	mov	r3, r0
 801b8d0:	4618      	mov	r0, r3
 801b8d2:	f7e6 f80e 	bl	80018f2 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801b8d6:	f004 f9bb 	bl	801fc50 <UTIL_TIMER_GetCurrentTime>
 801b8da:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b8dc:	e00d      	b.n	801b8fa <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801b8de:	2000      	movs	r0, #0
 801b8e0:	f000 fea6 	bl	801c630 <RadioRssi>
 801b8e4:	4603      	mov	r3, r0
 801b8e6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801b8e8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b8ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	dd02      	ble.n	801b8fa <RadioIsChannelFree+0x98>
        {
            status = false;
 801b8f4:	2300      	movs	r3, #0
 801b8f6:	75fb      	strb	r3, [r7, #23]
            break;
 801b8f8:	e006      	b.n	801b908 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801b8fa:	6938      	ldr	r0, [r7, #16]
 801b8fc:	f004 f9ba 	bl	801fc74 <UTIL_TIMER_GetElapsedTime>
 801b900:	4602      	mov	r2, r0
 801b902:	683b      	ldr	r3, [r7, #0]
 801b904:	4293      	cmp	r3, r2
 801b906:	d8ea      	bhi.n	801b8de <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 801b908:	f000 fdb9 	bl	801c47e <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 801b90c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b90e:	4618      	mov	r0, r3
 801b910:	3718      	adds	r7, #24
 801b912:	46bd      	mov	sp, r7
 801b914:	bd80      	pop	{r7, pc}

0801b916 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801b916:	b580      	push	{r7, lr}
 801b918:	b082      	sub	sp, #8
 801b91a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801b91c:	2300      	movs	r3, #0
 801b91e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 801b920:	2001      	movs	r0, #1
 801b922:	f7ff ff41 	bl	801b7a8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801b926:	2300      	movs	r3, #0
 801b928:	2200      	movs	r2, #0
 801b92a:	2100      	movs	r1, #0
 801b92c:	2000      	movs	r0, #0
 801b92e:	f002 f8f3 	bl	801db18 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801b932:	f001 fea8 	bl	801d686 <SUBGRF_GetRandom>
 801b936:	6078      	str	r0, [r7, #4]

    return rnd;
 801b938:	687b      	ldr	r3, [r7, #4]
}
 801b93a:	4618      	mov	r0, r3
 801b93c:	3708      	adds	r7, #8
 801b93e:	46bd      	mov	sp, r7
 801b940:	bd80      	pop	{r7, pc}
	...

0801b944 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b08a      	sub	sp, #40	; 0x28
 801b948:	af00      	add	r7, sp, #0
 801b94a:	60b9      	str	r1, [r7, #8]
 801b94c:	607a      	str	r2, [r7, #4]
 801b94e:	461a      	mov	r2, r3
 801b950:	4603      	mov	r3, r0
 801b952:	73fb      	strb	r3, [r7, #15]
 801b954:	4613      	mov	r3, r2
 801b956:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 801b958:	4abd      	ldr	r2, [pc, #756]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b95a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b95e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801b960:	f002 fef9 	bl	801e756 <RFW_DeInit>
    if( rxContinuous == true )
 801b964:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d001      	beq.n	801b970 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801b96c:	2300      	movs	r3, #0
 801b96e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801b970:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801b974:	2b00      	cmp	r3, #0
 801b976:	d004      	beq.n	801b982 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801b978:	4ab6      	ldr	r2, [pc, #728]	; (801bc54 <RadioSetRxConfig+0x310>)
 801b97a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801b97e:	7013      	strb	r3, [r2, #0]
 801b980:	e002      	b.n	801b988 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801b982:	4bb4      	ldr	r3, [pc, #720]	; (801bc54 <RadioSetRxConfig+0x310>)
 801b984:	22ff      	movs	r2, #255	; 0xff
 801b986:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801b988:	7bfb      	ldrb	r3, [r7, #15]
 801b98a:	2b04      	cmp	r3, #4
 801b98c:	d009      	beq.n	801b9a2 <RadioSetRxConfig+0x5e>
 801b98e:	2b04      	cmp	r3, #4
 801b990:	f300 81da 	bgt.w	801bd48 <RadioSetRxConfig+0x404>
 801b994:	2b00      	cmp	r3, #0
 801b996:	f000 80bf 	beq.w	801bb18 <RadioSetRxConfig+0x1d4>
 801b99a:	2b01      	cmp	r3, #1
 801b99c:	f000 812c 	beq.w	801bbf8 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801b9a0:	e1d2      	b.n	801bd48 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801b9a2:	2001      	movs	r0, #1
 801b9a4:	f001 ffb4 	bl	801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b9a8:	4ba9      	ldr	r3, [pc, #676]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9aa:	2200      	movs	r2, #0
 801b9ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801b9b0:	4aa7      	ldr	r2, [pc, #668]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801b9b6:	4ba6      	ldr	r3, [pc, #664]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9b8:	2209      	movs	r2, #9
 801b9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801b9be:	4ba4      	ldr	r3, [pc, #656]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9c0:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b9c4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801b9c6:	68b8      	ldr	r0, [r7, #8]
 801b9c8:	f002 fdf8 	bl	801e5bc <SUBGRF_GetFskBandwidthRegValue>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	461a      	mov	r2, r3
 801b9d0:	4b9f      	ldr	r3, [pc, #636]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b9d6:	4b9e      	ldr	r3, [pc, #632]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9d8:	2200      	movs	r2, #0
 801b9da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801b9dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b9de:	00db      	lsls	r3, r3, #3
 801b9e0:	b29a      	uxth	r2, r3
 801b9e2:	4b9b      	ldr	r3, [pc, #620]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801b9e6:	4b9a      	ldr	r3, [pc, #616]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9e8:	2200      	movs	r2, #0
 801b9ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801b9ec:	4b98      	ldr	r3, [pc, #608]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9ee:	2210      	movs	r2, #16
 801b9f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801b9f2:	4b97      	ldr	r3, [pc, #604]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801b9f8:	4b95      	ldr	r3, [pc, #596]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801b9fe:	4b95      	ldr	r3, [pc, #596]	; (801bc54 <RadioSetRxConfig+0x310>)
 801ba00:	781a      	ldrb	r2, [r3, #0]
 801ba02:	4b93      	ldr	r3, [pc, #588]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801ba04:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801ba06:	4b92      	ldr	r3, [pc, #584]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801ba08:	2201      	movs	r2, #1
 801ba0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801ba0c:	4b90      	ldr	r3, [pc, #576]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801ba0e:	2200      	movs	r2, #0
 801ba10:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801ba12:	2004      	movs	r0, #4
 801ba14:	f7ff fec8 	bl	801b7a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ba18:	488f      	ldr	r0, [pc, #572]	; (801bc58 <RadioSetRxConfig+0x314>)
 801ba1a:	f002 f9ab 	bl	801dd74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ba1e:	488f      	ldr	r0, [pc, #572]	; (801bc5c <RadioSetRxConfig+0x318>)
 801ba20:	f002 fa7a 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801ba24:	4a8e      	ldr	r2, [pc, #568]	; (801bc60 <RadioSetRxConfig+0x31c>)
 801ba26:	f107 031c 	add.w	r3, r7, #28
 801ba2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ba2e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ba32:	f107 031c 	add.w	r3, r7, #28
 801ba36:	4618      	mov	r0, r3
 801ba38:	f001 fda3 	bl	801d582 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801ba3c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801ba40:	f001 fdee 	bl	801d620 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 801ba44:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ba48:	f000 fe11 	bl	801c66e <RadioRead>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801ba52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba56:	f023 0310 	bic.w	r3, r3, #16
 801ba5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 801ba5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba62:	4619      	mov	r1, r3
 801ba64:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801ba68:	f000 fdef 	bl	801c64a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 801ba6c:	2104      	movs	r1, #4
 801ba6e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801ba72:	f000 fdea 	bl	801c64a <RadioWrite>
            modReg= RadioRead(0x89b);
 801ba76:	f640 009b 	movw	r0, #2203	; 0x89b
 801ba7a:	f000 fdf8 	bl	801c66e <RadioRead>
 801ba7e:	4603      	mov	r3, r0
 801ba80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801ba84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba88:	f023 031c 	bic.w	r3, r3, #28
 801ba8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 801ba90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ba94:	f043 0308 	orr.w	r3, r3, #8
 801ba98:	b2db      	uxtb	r3, r3
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	f640 009b 	movw	r0, #2203	; 0x89b
 801baa0:	f000 fdd3 	bl	801c64a <RadioWrite>
            modReg= RadioRead(0x6d1);
 801baa4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801baa8:	f000 fde1 	bl	801c66e <RadioRead>
 801baac:	4603      	mov	r3, r0
 801baae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801bab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bab6:	f023 0318 	bic.w	r3, r3, #24
 801baba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 801babe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bac2:	f043 0318 	orr.w	r3, r3, #24
 801bac6:	b2db      	uxtb	r3, r3
 801bac8:	4619      	mov	r1, r3
 801baca:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801bace:	f000 fdbc 	bl	801c64a <RadioWrite>
            modReg= RadioRead(0x6ac);
 801bad2:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bad6:	f000 fdca 	bl	801c66e <RadioRead>
 801bada:	4603      	mov	r3, r0
 801badc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801bae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 801baec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801baf0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801baf4:	b2db      	uxtb	r3, r3
 801baf6:	4619      	mov	r1, r3
 801baf8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801bafc:	f000 fda5 	bl	801c64a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bb00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bb02:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bb06:	fb02 f303 	mul.w	r3, r2, r3
 801bb0a:	461a      	mov	r2, r3
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb12:	4a4f      	ldr	r2, [pc, #316]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb14:	6093      	str	r3, [r2, #8]
            break;
 801bb16:	e118      	b.n	801bd4a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bb18:	2000      	movs	r0, #0
 801bb1a:	f001 fef9 	bl	801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bb1e:	4b4c      	ldr	r3, [pc, #304]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb20:	2200      	movs	r2, #0
 801bb22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bb26:	4a4a      	ldr	r2, [pc, #296]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bb2c:	4b48      	ldr	r3, [pc, #288]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb2e:	220b      	movs	r2, #11
 801bb30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bb34:	68b8      	ldr	r0, [r7, #8]
 801bb36:	f002 fd41 	bl	801e5bc <SUBGRF_GetFskBandwidthRegValue>
 801bb3a:	4603      	mov	r3, r0
 801bb3c:	461a      	mov	r2, r3
 801bb3e:	4b44      	ldr	r3, [pc, #272]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bb44:	4b42      	ldr	r3, [pc, #264]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb46:	2200      	movs	r2, #0
 801bb48:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bb4a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bb4c:	00db      	lsls	r3, r3, #3
 801bb4e:	b29a      	uxth	r2, r3
 801bb50:	4b3f      	ldr	r3, [pc, #252]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb52:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bb54:	4b3e      	ldr	r3, [pc, #248]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb56:	2204      	movs	r2, #4
 801bb58:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801bb5a:	4b3d      	ldr	r3, [pc, #244]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb5c:	2218      	movs	r2, #24
 801bb5e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bb60:	4b3b      	ldr	r3, [pc, #236]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb62:	2200      	movs	r2, #0
 801bb64:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bb66:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801bb6a:	f083 0301 	eor.w	r3, r3, #1
 801bb6e:	b2db      	uxtb	r3, r3
 801bb70:	461a      	mov	r2, r3
 801bb72:	4b37      	ldr	r3, [pc, #220]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb74:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801bb76:	4b37      	ldr	r3, [pc, #220]	; (801bc54 <RadioSetRxConfig+0x310>)
 801bb78:	781a      	ldrb	r2, [r3, #0]
 801bb7a:	4b35      	ldr	r3, [pc, #212]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb7c:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801bb7e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d003      	beq.n	801bb8e <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bb86:	4b32      	ldr	r3, [pc, #200]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb88:	22f2      	movs	r2, #242	; 0xf2
 801bb8a:	75da      	strb	r2, [r3, #23]
 801bb8c:	e002      	b.n	801bb94 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801bb8e:	4b30      	ldr	r3, [pc, #192]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb90:	2201      	movs	r2, #1
 801bb92:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801bb94:	4b2e      	ldr	r3, [pc, #184]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bb96:	2201      	movs	r2, #1
 801bb98:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801bb9a:	f000 fc70 	bl	801c47e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bb9e:	4b2c      	ldr	r3, [pc, #176]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bba0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bba4:	2b00      	cmp	r3, #0
 801bba6:	bf14      	ite	ne
 801bba8:	2301      	movne	r3, #1
 801bbaa:	2300      	moveq	r3, #0
 801bbac:	b2db      	uxtb	r3, r3
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f7ff fdfa 	bl	801b7a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbb4:	4828      	ldr	r0, [pc, #160]	; (801bc58 <RadioSetRxConfig+0x314>)
 801bbb6:	f002 f8dd 	bl	801dd74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bbba:	4828      	ldr	r0, [pc, #160]	; (801bc5c <RadioSetRxConfig+0x318>)
 801bbbc:	f002 f9ac 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801bbc0:	4a28      	ldr	r2, [pc, #160]	; (801bc64 <RadioSetRxConfig+0x320>)
 801bbc2:	f107 0314 	add.w	r3, r7, #20
 801bbc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801bbca:	e883 0003 	stmia.w	r3, {r0, r1}
 801bbce:	f107 0314 	add.w	r3, r7, #20
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f001 fcd5 	bl	801d582 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801bbd8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801bbdc:	f001 fd20 	bl	801d620 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801bbe0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bbe2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801bbe6:	fb02 f303 	mul.w	r3, r2, r3
 801bbea:	461a      	mov	r2, r3
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	fbb2 f3f3 	udiv	r3, r2, r3
 801bbf2:	4a17      	ldr	r2, [pc, #92]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bbf4:	6093      	str	r3, [r2, #8]
            break;
 801bbf6:	e0a8      	b.n	801bd4a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801bbf8:	2000      	movs	r0, #0
 801bbfa:	f001 fe89 	bl	801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bbfe:	4b14      	ldr	r3, [pc, #80]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bc00:	2201      	movs	r2, #1
 801bc02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	b2da      	uxtb	r2, r3
 801bc0a:	4b11      	ldr	r3, [pc, #68]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bc0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801bc10:	4a15      	ldr	r2, [pc, #84]	; (801bc68 <RadioSetRxConfig+0x324>)
 801bc12:	68bb      	ldr	r3, [r7, #8]
 801bc14:	4413      	add	r3, r2
 801bc16:	781a      	ldrb	r2, [r3, #0]
 801bc18:	4b0d      	ldr	r3, [pc, #52]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bc1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801bc1e:	4a0c      	ldr	r2, [pc, #48]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bc20:	7bbb      	ldrb	r3, [r7, #14]
 801bc22:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801bc26:	68bb      	ldr	r3, [r7, #8]
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d105      	bne.n	801bc38 <RadioSetRxConfig+0x2f4>
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	2b0b      	cmp	r3, #11
 801bc30:	d008      	beq.n	801bc44 <RadioSetRxConfig+0x300>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	2b0c      	cmp	r3, #12
 801bc36:	d005      	beq.n	801bc44 <RadioSetRxConfig+0x300>
 801bc38:	68bb      	ldr	r3, [r7, #8]
 801bc3a:	2b01      	cmp	r3, #1
 801bc3c:	d116      	bne.n	801bc6c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	2b0c      	cmp	r3, #12
 801bc42:	d113      	bne.n	801bc6c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801bc44:	4b02      	ldr	r3, [pc, #8]	; (801bc50 <RadioSetRxConfig+0x30c>)
 801bc46:	2201      	movs	r2, #1
 801bc48:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bc4c:	e012      	b.n	801bc74 <RadioSetRxConfig+0x330>
 801bc4e:	bf00      	nop
 801bc50:	20004158 	.word	0x20004158
 801bc54:	20000110 	.word	0x20000110
 801bc58:	20004190 	.word	0x20004190
 801bc5c:	20004166 	.word	0x20004166
 801bc60:	080229a0 	.word	0x080229a0
 801bc64:	080229a8 	.word	0x080229a8
 801bc68:	080233c0 	.word	0x080233c0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bc6c:	4b39      	ldr	r3, [pc, #228]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc6e:	2200      	movs	r2, #0
 801bc70:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bc74:	4b37      	ldr	r3, [pc, #220]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc76:	2201      	movs	r2, #1
 801bc78:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bc7a:	4b36      	ldr	r3, [pc, #216]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801bc80:	2b05      	cmp	r3, #5
 801bc82:	d004      	beq.n	801bc8e <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bc84:	4b33      	ldr	r3, [pc, #204]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bc8a:	2b06      	cmp	r3, #6
 801bc8c:	d10a      	bne.n	801bca4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 801bc8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bc90:	2b0b      	cmp	r3, #11
 801bc92:	d803      	bhi.n	801bc9c <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bc94:	4b2f      	ldr	r3, [pc, #188]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc96:	220c      	movs	r2, #12
 801bc98:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bc9a:	e006      	b.n	801bcaa <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bc9c:	4a2d      	ldr	r2, [pc, #180]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bc9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bca0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bca2:	e002      	b.n	801bcaa <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bca4:	4a2b      	ldr	r2, [pc, #172]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bca6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801bca8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bcaa:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bcae:	4b29      	ldr	r3, [pc, #164]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bcb0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801bcb2:	4b29      	ldr	r3, [pc, #164]	; (801bd58 <RadioSetRxConfig+0x414>)
 801bcb4:	781a      	ldrb	r2, [r3, #0]
 801bcb6:	4b27      	ldr	r3, [pc, #156]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bcb8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bcba:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801bcbe:	4b25      	ldr	r3, [pc, #148]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bcc0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801bcc4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801bcc8:	4b22      	ldr	r3, [pc, #136]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bcca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bcce:	f000 fbd6 	bl	801c47e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bcd2:	4b20      	ldr	r3, [pc, #128]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bcd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	bf14      	ite	ne
 801bcdc:	2301      	movne	r3, #1
 801bcde:	2300      	moveq	r3, #0
 801bce0:	b2db      	uxtb	r3, r3
 801bce2:	4618      	mov	r0, r3
 801bce4:	f7ff fd60 	bl	801b7a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bce8:	481c      	ldr	r0, [pc, #112]	; (801bd5c <RadioSetRxConfig+0x418>)
 801bcea:	f002 f843 	bl	801dd74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bcee:	481c      	ldr	r0, [pc, #112]	; (801bd60 <RadioSetRxConfig+0x41c>)
 801bcf0:	f002 f912 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801bcf4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801bcf6:	b2db      	uxtb	r3, r3
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f001 fe18 	bl	801d92e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801bcfe:	4b15      	ldr	r3, [pc, #84]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bd00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801bd04:	2b01      	cmp	r3, #1
 801bd06:	d10d      	bne.n	801bd24 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801bd08:	f240 7036 	movw	r0, #1846	; 0x736
 801bd0c:	f002 fa60 	bl	801e1d0 <SUBGRF_ReadRegister>
 801bd10:	4603      	mov	r3, r0
 801bd12:	f023 0304 	bic.w	r3, r3, #4
 801bd16:	b2db      	uxtb	r3, r3
 801bd18:	4619      	mov	r1, r3
 801bd1a:	f240 7036 	movw	r0, #1846	; 0x736
 801bd1e:	f002 fa43 	bl	801e1a8 <SUBGRF_WriteRegister>
 801bd22:	e00c      	b.n	801bd3e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801bd24:	f240 7036 	movw	r0, #1846	; 0x736
 801bd28:	f002 fa52 	bl	801e1d0 <SUBGRF_ReadRegister>
 801bd2c:	4603      	mov	r3, r0
 801bd2e:	f043 0304 	orr.w	r3, r3, #4
 801bd32:	b2db      	uxtb	r3, r3
 801bd34:	4619      	mov	r1, r3
 801bd36:	f240 7036 	movw	r0, #1846	; 0x736
 801bd3a:	f002 fa35 	bl	801e1a8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801bd3e:	4b05      	ldr	r3, [pc, #20]	; (801bd54 <RadioSetRxConfig+0x410>)
 801bd40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bd44:	609a      	str	r2, [r3, #8]
            break;
 801bd46:	e000      	b.n	801bd4a <RadioSetRxConfig+0x406>
            break;
 801bd48:	bf00      	nop
    }
}
 801bd4a:	bf00      	nop
 801bd4c:	3728      	adds	r7, #40	; 0x28
 801bd4e:	46bd      	mov	sp, r7
 801bd50:	bd80      	pop	{r7, pc}
 801bd52:	bf00      	nop
 801bd54:	20004158 	.word	0x20004158
 801bd58:	20000110 	.word	0x20000110
 801bd5c:	20004190 	.word	0x20004190
 801bd60:	20004166 	.word	0x20004166

0801bd64 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801bd64:	b580      	push	{r7, lr}
 801bd66:	b086      	sub	sp, #24
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	60ba      	str	r2, [r7, #8]
 801bd6c:	607b      	str	r3, [r7, #4]
 801bd6e:	4603      	mov	r3, r0
 801bd70:	73fb      	strb	r3, [r7, #15]
 801bd72:	460b      	mov	r3, r1
 801bd74:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801bd76:	f002 fcee 	bl	801e756 <RFW_DeInit>
    switch( modem )
 801bd7a:	7bfb      	ldrb	r3, [r7, #15]
 801bd7c:	2b03      	cmp	r3, #3
 801bd7e:	f000 80d7 	beq.w	801bf30 <RadioSetTxConfig+0x1cc>
 801bd82:	2b03      	cmp	r3, #3
 801bd84:	f300 80e6 	bgt.w	801bf54 <RadioSetTxConfig+0x1f0>
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d002      	beq.n	801bd92 <RadioSetTxConfig+0x2e>
 801bd8c:	2b01      	cmp	r3, #1
 801bd8e:	d061      	beq.n	801be54 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 801bd90:	e0e0      	b.n	801bf54 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bd92:	4b7c      	ldr	r3, [pc, #496]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bd94:	2200      	movs	r2, #0
 801bd96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801bd9a:	4a7a      	ldr	r2, [pc, #488]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bd9c:	6a3b      	ldr	r3, [r7, #32]
 801bd9e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801bda0:	4b78      	ldr	r3, [pc, #480]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bda2:	220b      	movs	r2, #11
 801bda4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801bda8:	6878      	ldr	r0, [r7, #4]
 801bdaa:	f002 fc07 	bl	801e5bc <SUBGRF_GetFskBandwidthRegValue>
 801bdae:	4603      	mov	r3, r0
 801bdb0:	461a      	mov	r2, r3
 801bdb2:	4b74      	ldr	r3, [pc, #464]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801bdb8:	4a72      	ldr	r2, [pc, #456]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdba:	68bb      	ldr	r3, [r7, #8]
 801bdbc:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bdbe:	4b71      	ldr	r3, [pc, #452]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdc0:	2200      	movs	r2, #0
 801bdc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801bdc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bdc6:	00db      	lsls	r3, r3, #3
 801bdc8:	b29a      	uxth	r2, r3
 801bdca:	4b6e      	ldr	r3, [pc, #440]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdcc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801bdce:	4b6d      	ldr	r3, [pc, #436]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdd0:	2204      	movs	r2, #4
 801bdd2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801bdd4:	4b6b      	ldr	r3, [pc, #428]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdd6:	2218      	movs	r2, #24
 801bdd8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801bdda:	4b6a      	ldr	r3, [pc, #424]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bddc:	2200      	movs	r2, #0
 801bdde:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801bde0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801bde4:	f083 0301 	eor.w	r3, r3, #1
 801bde8:	b2db      	uxtb	r3, r3
 801bdea:	461a      	mov	r2, r3
 801bdec:	4b65      	ldr	r3, [pc, #404]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdee:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801bdf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801bdf4:	2b00      	cmp	r3, #0
 801bdf6:	d003      	beq.n	801be00 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801bdf8:	4b62      	ldr	r3, [pc, #392]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bdfa:	22f2      	movs	r2, #242	; 0xf2
 801bdfc:	75da      	strb	r2, [r3, #23]
 801bdfe:	e002      	b.n	801be06 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801be00:	4b60      	ldr	r3, [pc, #384]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be02:	2201      	movs	r2, #1
 801be04:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801be06:	4b5f      	ldr	r3, [pc, #380]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be08:	2201      	movs	r2, #1
 801be0a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801be0c:	f000 fb37 	bl	801c47e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801be10:	4b5c      	ldr	r3, [pc, #368]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801be16:	2b00      	cmp	r3, #0
 801be18:	bf14      	ite	ne
 801be1a:	2301      	movne	r3, #1
 801be1c:	2300      	moveq	r3, #0
 801be1e:	b2db      	uxtb	r3, r3
 801be20:	4618      	mov	r0, r3
 801be22:	f7ff fcc1 	bl	801b7a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be26:	4858      	ldr	r0, [pc, #352]	; (801bf88 <RadioSetTxConfig+0x224>)
 801be28:	f001 ffa4 	bl	801dd74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801be2c:	4857      	ldr	r0, [pc, #348]	; (801bf8c <RadioSetTxConfig+0x228>)
 801be2e:	f002 f873 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801be32:	4a57      	ldr	r2, [pc, #348]	; (801bf90 <RadioSetTxConfig+0x22c>)
 801be34:	f107 0310 	add.w	r3, r7, #16
 801be38:	e892 0003 	ldmia.w	r2, {r0, r1}
 801be3c:	e883 0003 	stmia.w	r3, {r0, r1}
 801be40:	f107 0310 	add.w	r3, r7, #16
 801be44:	4618      	mov	r0, r3
 801be46:	f001 fb9c 	bl	801d582 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801be4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 801be4e:	f001 fbe7 	bl	801d620 <SUBGRF_SetWhiteningSeed>
            break;
 801be52:	e080      	b.n	801bf56 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801be54:	4b4b      	ldr	r3, [pc, #300]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be56:	2201      	movs	r2, #1
 801be58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801be5c:	6a3b      	ldr	r3, [r7, #32]
 801be5e:	b2da      	uxtb	r2, r3
 801be60:	4b48      	ldr	r3, [pc, #288]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801be66:	4a4b      	ldr	r2, [pc, #300]	; (801bf94 <RadioSetTxConfig+0x230>)
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	4413      	add	r3, r2
 801be6c:	781a      	ldrb	r2, [r3, #0]
 801be6e:	4b45      	ldr	r3, [pc, #276]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801be74:	4a43      	ldr	r2, [pc, #268]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801be7a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	2b00      	cmp	r3, #0
 801be82:	d105      	bne.n	801be90 <RadioSetTxConfig+0x12c>
 801be84:	6a3b      	ldr	r3, [r7, #32]
 801be86:	2b0b      	cmp	r3, #11
 801be88:	d008      	beq.n	801be9c <RadioSetTxConfig+0x138>
 801be8a:	6a3b      	ldr	r3, [r7, #32]
 801be8c:	2b0c      	cmp	r3, #12
 801be8e:	d005      	beq.n	801be9c <RadioSetTxConfig+0x138>
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	2b01      	cmp	r3, #1
 801be94:	d107      	bne.n	801bea6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801be96:	6a3b      	ldr	r3, [r7, #32]
 801be98:	2b0c      	cmp	r3, #12
 801be9a:	d104      	bne.n	801bea6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801be9c:	4b39      	ldr	r3, [pc, #228]	; (801bf84 <RadioSetTxConfig+0x220>)
 801be9e:	2201      	movs	r2, #1
 801bea0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801bea4:	e003      	b.n	801beae <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801bea6:	4b37      	ldr	r3, [pc, #220]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bea8:	2200      	movs	r2, #0
 801beaa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801beae:	4b35      	ldr	r3, [pc, #212]	; (801bf84 <RadioSetTxConfig+0x220>)
 801beb0:	2201      	movs	r2, #1
 801beb2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801beb4:	4b33      	ldr	r3, [pc, #204]	; (801bf84 <RadioSetTxConfig+0x220>)
 801beb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801beba:	2b05      	cmp	r3, #5
 801bebc:	d004      	beq.n	801bec8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801bebe:	4b31      	ldr	r3, [pc, #196]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bec0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801bec4:	2b06      	cmp	r3, #6
 801bec6:	d10a      	bne.n	801bede <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 801bec8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801beca:	2b0b      	cmp	r3, #11
 801becc:	d803      	bhi.n	801bed6 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801bece:	4b2d      	ldr	r3, [pc, #180]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bed0:	220c      	movs	r2, #12
 801bed2:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801bed4:	e006      	b.n	801bee4 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bed6:	4a2b      	ldr	r2, [pc, #172]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bed8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801beda:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801bedc:	e002      	b.n	801bee4 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801bede:	4a29      	ldr	r2, [pc, #164]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bee0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801bee2:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801bee4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801bee8:	4b26      	ldr	r3, [pc, #152]	; (801bf84 <RadioSetTxConfig+0x220>)
 801beea:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801beec:	4b2a      	ldr	r3, [pc, #168]	; (801bf98 <RadioSetTxConfig+0x234>)
 801beee:	781a      	ldrb	r2, [r3, #0]
 801bef0:	4b24      	ldr	r3, [pc, #144]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bef2:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801bef4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801bef8:	4b22      	ldr	r3, [pc, #136]	; (801bf84 <RadioSetTxConfig+0x220>)
 801befa:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801befe:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801bf02:	4b20      	ldr	r3, [pc, #128]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801bf08:	f000 fab9 	bl	801c47e <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 801bf0c:	4b1d      	ldr	r3, [pc, #116]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	bf14      	ite	ne
 801bf16:	2301      	movne	r3, #1
 801bf18:	2300      	moveq	r3, #0
 801bf1a:	b2db      	uxtb	r3, r3
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7ff fc43 	bl	801b7a8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf22:	4819      	ldr	r0, [pc, #100]	; (801bf88 <RadioSetTxConfig+0x224>)
 801bf24:	f001 ff26 	bl	801dd74 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bf28:	4818      	ldr	r0, [pc, #96]	; (801bf8c <RadioSetTxConfig+0x228>)
 801bf2a:	f001 fff5 	bl	801df18 <SUBGRF_SetPacketParams>
            break;
 801bf2e:	e012      	b.n	801bf56 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801bf30:	2003      	movs	r0, #3
 801bf32:	f7ff fc39 	bl	801b7a8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801bf36:	4b13      	ldr	r3, [pc, #76]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf38:	2202      	movs	r2, #2
 801bf3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801bf3e:	4a11      	ldr	r2, [pc, #68]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf40:	6a3b      	ldr	r3, [r7, #32]
 801bf42:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801bf44:	4b0f      	ldr	r3, [pc, #60]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf46:	2216      	movs	r2, #22
 801bf48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bf4c:	480e      	ldr	r0, [pc, #56]	; (801bf88 <RadioSetTxConfig+0x224>)
 801bf4e:	f001 ff11 	bl	801dd74 <SUBGRF_SetModulationParams>
            break;
 801bf52:	e000      	b.n	801bf56 <RadioSetTxConfig+0x1f2>
            break;
 801bf54:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801bf56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f002 fa40 	bl	801e3e0 <SUBGRF_SetRfTxPower>
 801bf60:	4603      	mov	r3, r0
 801bf62:	461a      	mov	r2, r3
 801bf64:	4b07      	ldr	r3, [pc, #28]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf66:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 801bf6a:	4b06      	ldr	r3, [pc, #24]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801bf70:	4618      	mov	r0, r3
 801bf72:	f002 fc04 	bl	801e77e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801bf76:	4a03      	ldr	r2, [pc, #12]	; (801bf84 <RadioSetTxConfig+0x220>)
 801bf78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf7a:	6053      	str	r3, [r2, #4]
}
 801bf7c:	bf00      	nop
 801bf7e:	3718      	adds	r7, #24
 801bf80:	46bd      	mov	sp, r7
 801bf82:	bd80      	pop	{r7, pc}
 801bf84:	20004158 	.word	0x20004158
 801bf88:	20004190 	.word	0x20004190
 801bf8c:	20004166 	.word	0x20004166
 801bf90:	080229a8 	.word	0x080229a8
 801bf94:	080233c0 	.word	0x080233c0
 801bf98:	20000110 	.word	0x20000110

0801bf9c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	b083      	sub	sp, #12
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	6078      	str	r0, [r7, #4]
    return true;
 801bfa4:	2301      	movs	r3, #1
}
 801bfa6:	4618      	mov	r0, r3
 801bfa8:	370c      	adds	r7, #12
 801bfaa:	46bd      	mov	sp, r7
 801bfac:	bc80      	pop	{r7}
 801bfae:	4770      	bx	lr

0801bfb0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801bfb0:	b480      	push	{r7}
 801bfb2:	b085      	sub	sp, #20
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	4603      	mov	r3, r0
 801bfb8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801bfbe:	79fb      	ldrb	r3, [r7, #7]
 801bfc0:	2b0a      	cmp	r3, #10
 801bfc2:	d83e      	bhi.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
 801bfc4:	a201      	add	r2, pc, #4	; (adr r2, 801bfcc <RadioGetLoRaBandwidthInHz+0x1c>)
 801bfc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bfca:	bf00      	nop
 801bfcc:	0801bff9 	.word	0x0801bff9
 801bfd0:	0801c009 	.word	0x0801c009
 801bfd4:	0801c019 	.word	0x0801c019
 801bfd8:	0801c029 	.word	0x0801c029
 801bfdc:	0801c031 	.word	0x0801c031
 801bfe0:	0801c037 	.word	0x0801c037
 801bfe4:	0801c03d 	.word	0x0801c03d
 801bfe8:	0801c043 	.word	0x0801c043
 801bfec:	0801c001 	.word	0x0801c001
 801bff0:	0801c011 	.word	0x0801c011
 801bff4:	0801c021 	.word	0x0801c021
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801bff8:	f641 6384 	movw	r3, #7812	; 0x1e84
 801bffc:	60fb      	str	r3, [r7, #12]
        break;
 801bffe:	e020      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801c000:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801c004:	60fb      	str	r3, [r7, #12]
        break;
 801c006:	e01c      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801c008:	f643 5309 	movw	r3, #15625	; 0x3d09
 801c00c:	60fb      	str	r3, [r7, #12]
        break;
 801c00e:	e018      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801c010:	f245 1361 	movw	r3, #20833	; 0x5161
 801c014:	60fb      	str	r3, [r7, #12]
        break;
 801c016:	e014      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801c018:	f647 2312 	movw	r3, #31250	; 0x7a12
 801c01c:	60fb      	str	r3, [r7, #12]
        break;
 801c01e:	e010      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801c020:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801c024:	60fb      	str	r3, [r7, #12]
        break;
 801c026:	e00c      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801c028:	f24f 4324 	movw	r3, #62500	; 0xf424
 801c02c:	60fb      	str	r3, [r7, #12]
        break;
 801c02e:	e008      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801c030:	4b07      	ldr	r3, [pc, #28]	; (801c050 <RadioGetLoRaBandwidthInHz+0xa0>)
 801c032:	60fb      	str	r3, [r7, #12]
        break;
 801c034:	e005      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801c036:	4b07      	ldr	r3, [pc, #28]	; (801c054 <RadioGetLoRaBandwidthInHz+0xa4>)
 801c038:	60fb      	str	r3, [r7, #12]
        break;
 801c03a:	e002      	b.n	801c042 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801c03c:	4b06      	ldr	r3, [pc, #24]	; (801c058 <RadioGetLoRaBandwidthInHz+0xa8>)
 801c03e:	60fb      	str	r3, [r7, #12]
        break;
 801c040:	bf00      	nop
    }

    return bandwidthInHz;
 801c042:	68fb      	ldr	r3, [r7, #12]
}
 801c044:	4618      	mov	r0, r3
 801c046:	3714      	adds	r7, #20
 801c048:	46bd      	mov	sp, r7
 801c04a:	bc80      	pop	{r7}
 801c04c:	4770      	bx	lr
 801c04e:	bf00      	nop
 801c050:	0001e848 	.word	0x0001e848
 801c054:	0003d090 	.word	0x0003d090
 801c058:	0007a120 	.word	0x0007a120

0801c05c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c05c:	b480      	push	{r7}
 801c05e:	b083      	sub	sp, #12
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
 801c064:	4608      	mov	r0, r1
 801c066:	4611      	mov	r1, r2
 801c068:	461a      	mov	r2, r3
 801c06a:	4603      	mov	r3, r0
 801c06c:	70fb      	strb	r3, [r7, #3]
 801c06e:	460b      	mov	r3, r1
 801c070:	803b      	strh	r3, [r7, #0]
 801c072:	4613      	mov	r3, r2
 801c074:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801c076:	883b      	ldrh	r3, [r7, #0]
 801c078:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c07a:	78ba      	ldrb	r2, [r7, #2]
 801c07c:	f082 0201 	eor.w	r2, r2, #1
 801c080:	b2d2      	uxtb	r2, r2
 801c082:	2a00      	cmp	r2, #0
 801c084:	d001      	beq.n	801c08a <RadioGetGfskTimeOnAirNumerator+0x2e>
 801c086:	2208      	movs	r2, #8
 801c088:	e000      	b.n	801c08c <RadioGetGfskTimeOnAirNumerator+0x30>
 801c08a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801c08c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c08e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801c092:	7c3b      	ldrb	r3, [r7, #16]
 801c094:	7d39      	ldrb	r1, [r7, #20]
 801c096:	2900      	cmp	r1, #0
 801c098:	d001      	beq.n	801c09e <RadioGetGfskTimeOnAirNumerator+0x42>
 801c09a:	2102      	movs	r1, #2
 801c09c:	e000      	b.n	801c0a0 <RadioGetGfskTimeOnAirNumerator+0x44>
 801c09e:	2100      	movs	r1, #0
 801c0a0:	440b      	add	r3, r1
 801c0a2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801c0a4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801c0a6:	4618      	mov	r0, r3
 801c0a8:	370c      	adds	r7, #12
 801c0aa:	46bd      	mov	sp, r7
 801c0ac:	bc80      	pop	{r7}
 801c0ae:	4770      	bx	lr

0801c0b0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801c0b0:	b480      	push	{r7}
 801c0b2:	b08b      	sub	sp, #44	; 0x2c
 801c0b4:	af00      	add	r7, sp, #0
 801c0b6:	60f8      	str	r0, [r7, #12]
 801c0b8:	60b9      	str	r1, [r7, #8]
 801c0ba:	4611      	mov	r1, r2
 801c0bc:	461a      	mov	r2, r3
 801c0be:	460b      	mov	r3, r1
 801c0c0:	71fb      	strb	r3, [r7, #7]
 801c0c2:	4613      	mov	r3, r2
 801c0c4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801c0c6:	79fb      	ldrb	r3, [r7, #7]
 801c0c8:	3304      	adds	r3, #4
 801c0ca:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801c0d2:	68bb      	ldr	r3, [r7, #8]
 801c0d4:	2b05      	cmp	r3, #5
 801c0d6:	d002      	beq.n	801c0de <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801c0d8:	68bb      	ldr	r3, [r7, #8]
 801c0da:	2b06      	cmp	r3, #6
 801c0dc:	d104      	bne.n	801c0e8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801c0de:	88bb      	ldrh	r3, [r7, #4]
 801c0e0:	2b0b      	cmp	r3, #11
 801c0e2:	d801      	bhi.n	801c0e8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801c0e4:	230c      	movs	r3, #12
 801c0e6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801c0e8:	68fb      	ldr	r3, [r7, #12]
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d105      	bne.n	801c0fa <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801c0ee:	68bb      	ldr	r3, [r7, #8]
 801c0f0:	2b0b      	cmp	r3, #11
 801c0f2:	d008      	beq.n	801c106 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c0f4:	68bb      	ldr	r3, [r7, #8]
 801c0f6:	2b0c      	cmp	r3, #12
 801c0f8:	d005      	beq.n	801c106 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801c0fa:	68fb      	ldr	r3, [r7, #12]
 801c0fc:	2b01      	cmp	r3, #1
 801c0fe:	d105      	bne.n	801c10c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801c100:	68bb      	ldr	r3, [r7, #8]
 801c102:	2b0c      	cmp	r3, #12
 801c104:	d102      	bne.n	801c10c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801c106:	2301      	movs	r3, #1
 801c108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c10c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801c110:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801c112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801c116:	2a00      	cmp	r2, #0
 801c118:	d001      	beq.n	801c11e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801c11a:	2210      	movs	r2, #16
 801c11c:	e000      	b.n	801c120 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801c11e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c120:	4413      	add	r3, r2
 801c122:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801c124:	68bb      	ldr	r3, [r7, #8]
 801c126:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801c128:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801c12a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801c12e:	2a00      	cmp	r2, #0
 801c130:	d001      	beq.n	801c136 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801c132:	2200      	movs	r2, #0
 801c134:	e000      	b.n	801c138 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801c136:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801c138:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801c13a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801c13c:	68bb      	ldr	r3, [r7, #8]
 801c13e:	2b06      	cmp	r3, #6
 801c140:	d803      	bhi.n	801c14a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801c142:	68bb      	ldr	r3, [r7, #8]
 801c144:	009b      	lsls	r3, r3, #2
 801c146:	623b      	str	r3, [r7, #32]
 801c148:	e00e      	b.n	801c168 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801c14a:	69fb      	ldr	r3, [r7, #28]
 801c14c:	3308      	adds	r3, #8
 801c14e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801c150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c154:	2b00      	cmp	r3, #0
 801c156:	d004      	beq.n	801c162 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801c158:	68bb      	ldr	r3, [r7, #8]
 801c15a:	3b02      	subs	r3, #2
 801c15c:	009b      	lsls	r3, r3, #2
 801c15e:	623b      	str	r3, [r7, #32]
 801c160:	e002      	b.n	801c168 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801c162:	68bb      	ldr	r3, [r7, #8]
 801c164:	009b      	lsls	r3, r3, #2
 801c166:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801c168:	69fb      	ldr	r3, [r7, #28]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	da01      	bge.n	801c172 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801c16e:	2300      	movs	r3, #0
 801c170:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801c172:	69fa      	ldr	r2, [r7, #28]
 801c174:	6a3b      	ldr	r3, [r7, #32]
 801c176:	4413      	add	r3, r2
 801c178:	1e5a      	subs	r2, r3, #1
 801c17a:	6a3b      	ldr	r3, [r7, #32]
 801c17c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c180:	697a      	ldr	r2, [r7, #20]
 801c182:	fb03 f202 	mul.w	r2, r3, r2
 801c186:	88bb      	ldrh	r3, [r7, #4]
 801c188:	4413      	add	r3, r2
    int32_t intermediate =
 801c18a:	330c      	adds	r3, #12
 801c18c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801c18e:	68bb      	ldr	r3, [r7, #8]
 801c190:	2b06      	cmp	r3, #6
 801c192:	d802      	bhi.n	801c19a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801c194:	69bb      	ldr	r3, [r7, #24]
 801c196:	3302      	adds	r3, #2
 801c198:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801c19a:	69bb      	ldr	r3, [r7, #24]
 801c19c:	009b      	lsls	r3, r3, #2
 801c19e:	1c5a      	adds	r2, r3, #1
 801c1a0:	68bb      	ldr	r3, [r7, #8]
 801c1a2:	3b02      	subs	r3, #2
 801c1a4:	fa02 f303 	lsl.w	r3, r2, r3
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	372c      	adds	r7, #44	; 0x2c
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bc80      	pop	{r7}
 801c1b0:	4770      	bx	lr
	...

0801c1b4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801c1b4:	b580      	push	{r7, lr}
 801c1b6:	b08a      	sub	sp, #40	; 0x28
 801c1b8:	af04      	add	r7, sp, #16
 801c1ba:	60b9      	str	r1, [r7, #8]
 801c1bc:	607a      	str	r2, [r7, #4]
 801c1be:	461a      	mov	r2, r3
 801c1c0:	4603      	mov	r3, r0
 801c1c2:	73fb      	strb	r3, [r7, #15]
 801c1c4:	4613      	mov	r3, r2
 801c1c6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801c1cc:	2301      	movs	r3, #1
 801c1ce:	613b      	str	r3, [r7, #16]

    switch( modem )
 801c1d0:	7bfb      	ldrb	r3, [r7, #15]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d002      	beq.n	801c1dc <RadioTimeOnAir+0x28>
 801c1d6:	2b01      	cmp	r3, #1
 801c1d8:	d017      	beq.n	801c20a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801c1da:	e035      	b.n	801c248 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801c1dc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801c1e0:	8c3a      	ldrh	r2, [r7, #32]
 801c1e2:	7bb9      	ldrb	r1, [r7, #14]
 801c1e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c1e8:	9301      	str	r3, [sp, #4]
 801c1ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c1ee:	9300      	str	r3, [sp, #0]
 801c1f0:	4603      	mov	r3, r0
 801c1f2:	6878      	ldr	r0, [r7, #4]
 801c1f4:	f7ff ff32 	bl	801c05c <RadioGetGfskTimeOnAirNumerator>
 801c1f8:	4603      	mov	r3, r0
 801c1fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c1fe:	fb02 f303 	mul.w	r3, r2, r3
 801c202:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	613b      	str	r3, [r7, #16]
        break;
 801c208:	e01e      	b.n	801c248 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801c20a:	8c39      	ldrh	r1, [r7, #32]
 801c20c:	7bba      	ldrb	r2, [r7, #14]
 801c20e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c212:	9302      	str	r3, [sp, #8]
 801c214:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c218:	9301      	str	r3, [sp, #4]
 801c21a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c21e:	9300      	str	r3, [sp, #0]
 801c220:	460b      	mov	r3, r1
 801c222:	6879      	ldr	r1, [r7, #4]
 801c224:	68b8      	ldr	r0, [r7, #8]
 801c226:	f7ff ff43 	bl	801c0b0 <RadioGetLoRaTimeOnAirNumerator>
 801c22a:	4603      	mov	r3, r0
 801c22c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c230:	fb02 f303 	mul.w	r3, r2, r3
 801c234:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801c236:	4a0a      	ldr	r2, [pc, #40]	; (801c260 <RadioTimeOnAir+0xac>)
 801c238:	68bb      	ldr	r3, [r7, #8]
 801c23a:	4413      	add	r3, r2
 801c23c:	781b      	ldrb	r3, [r3, #0]
 801c23e:	4618      	mov	r0, r3
 801c240:	f7ff feb6 	bl	801bfb0 <RadioGetLoRaBandwidthInHz>
 801c244:	6138      	str	r0, [r7, #16]
        break;
 801c246:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 801c248:	697a      	ldr	r2, [r7, #20]
 801c24a:	693b      	ldr	r3, [r7, #16]
 801c24c:	4413      	add	r3, r2
 801c24e:	1e5a      	subs	r2, r3, #1
 801c250:	693b      	ldr	r3, [r7, #16]
 801c252:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801c256:	4618      	mov	r0, r3
 801c258:	3718      	adds	r7, #24
 801c25a:	46bd      	mov	sp, r7
 801c25c:	bd80      	pop	{r7, pc}
 801c25e:	bf00      	nop
 801c260:	080233c0 	.word	0x080233c0

0801c264 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801c264:	b580      	push	{r7, lr}
 801c266:	b084      	sub	sp, #16
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
 801c26c:	460b      	mov	r3, r1
 801c26e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801c270:	2300      	movs	r3, #0
 801c272:	2200      	movs	r2, #0
 801c274:	f240 2101 	movw	r1, #513	; 0x201
 801c278:	f240 2001 	movw	r0, #513	; 0x201
 801c27c:	f001 fc4c 	bl	801db18 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 801c280:	4b70      	ldr	r3, [pc, #448]	; (801c444 <RadioSend+0x1e0>)
 801c282:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c286:	2101      	movs	r1, #1
 801c288:	4618      	mov	r0, r3
 801c28a:	f002 f881 	bl	801e390 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 801c28e:	4b6d      	ldr	r3, [pc, #436]	; (801c444 <RadioSend+0x1e0>)
 801c290:	781b      	ldrb	r3, [r3, #0]
 801c292:	2b01      	cmp	r3, #1
 801c294:	d112      	bne.n	801c2bc <RadioSend+0x58>
 801c296:	4b6b      	ldr	r3, [pc, #428]	; (801c444 <RadioSend+0x1e0>)
 801c298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801c29c:	2b06      	cmp	r3, #6
 801c29e:	d10d      	bne.n	801c2bc <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801c2a0:	f640 0089 	movw	r0, #2185	; 0x889
 801c2a4:	f001 ff94 	bl	801e1d0 <SUBGRF_ReadRegister>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	f023 0304 	bic.w	r3, r3, #4
 801c2ae:	b2db      	uxtb	r3, r3
 801c2b0:	4619      	mov	r1, r3
 801c2b2:	f640 0089 	movw	r0, #2185	; 0x889
 801c2b6:	f001 ff77 	bl	801e1a8 <SUBGRF_WriteRegister>
 801c2ba:	e00c      	b.n	801c2d6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801c2bc:	f640 0089 	movw	r0, #2185	; 0x889
 801c2c0:	f001 ff86 	bl	801e1d0 <SUBGRF_ReadRegister>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	f043 0304 	orr.w	r3, r3, #4
 801c2ca:	b2db      	uxtb	r3, r3
 801c2cc:	4619      	mov	r1, r3
 801c2ce:	f640 0089 	movw	r0, #2185	; 0x889
 801c2d2:	f001 ff69 	bl	801e1a8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 801c2d6:	4b5b      	ldr	r3, [pc, #364]	; (801c444 <RadioSend+0x1e0>)
 801c2d8:	781b      	ldrb	r3, [r3, #0]
 801c2da:	2b03      	cmp	r3, #3
 801c2dc:	f200 80a5 	bhi.w	801c42a <RadioSend+0x1c6>
 801c2e0:	a201      	add	r2, pc, #4	; (adr r2, 801c2e8 <RadioSend+0x84>)
 801c2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2e6:	bf00      	nop
 801c2e8:	0801c313 	.word	0x0801c313
 801c2ec:	0801c2f9 	.word	0x0801c2f9
 801c2f0:	0801c373 	.word	0x0801c373
 801c2f4:	0801c393 	.word	0x0801c393
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801c2f8:	4a52      	ldr	r2, [pc, #328]	; (801c444 <RadioSend+0x1e0>)
 801c2fa:	78fb      	ldrb	r3, [r7, #3]
 801c2fc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c2fe:	4852      	ldr	r0, [pc, #328]	; (801c448 <RadioSend+0x1e4>)
 801c300:	f001 fe0a 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c304:	78fb      	ldrb	r3, [r7, #3]
 801c306:	2200      	movs	r2, #0
 801c308:	4619      	mov	r1, r3
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f001 f926 	bl	801d55c <SUBGRF_SendPayload>
            break;
 801c310:	e08c      	b.n	801c42c <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801c312:	f002 fa26 	bl	801e762 <RFW_Is_Init>
 801c316:	4603      	mov	r3, r0
 801c318:	2b01      	cmp	r3, #1
 801c31a:	d11d      	bne.n	801c358 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801c31c:	f107 020d 	add.w	r2, r7, #13
 801c320:	78fb      	ldrb	r3, [r7, #3]
 801c322:	4619      	mov	r1, r3
 801c324:	6878      	ldr	r0, [r7, #4]
 801c326:	f002 fa34 	bl	801e792 <RFW_TransmitInit>
 801c32a:	4603      	mov	r3, r0
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d10c      	bne.n	801c34a <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801c330:	7b7a      	ldrb	r2, [r7, #13]
 801c332:	4b44      	ldr	r3, [pc, #272]	; (801c444 <RadioSend+0x1e0>)
 801c334:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c336:	4844      	ldr	r0, [pc, #272]	; (801c448 <RadioSend+0x1e4>)
 801c338:	f001 fdee 	bl	801df18 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 801c33c:	7b7b      	ldrb	r3, [r7, #13]
 801c33e:	2200      	movs	r2, #0
 801c340:	4619      	mov	r1, r3
 801c342:	6878      	ldr	r0, [r7, #4]
 801c344:	f001 f90a 	bl	801d55c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801c348:	e070      	b.n	801c42c <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 801c34a:	4b40      	ldr	r3, [pc, #256]	; (801c44c <RadioSend+0x1e8>)
 801c34c:	2201      	movs	r2, #1
 801c34e:	2100      	movs	r1, #0
 801c350:	2002      	movs	r0, #2
 801c352:	f002 fa8b 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
 801c356:	e072      	b.n	801c43e <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801c358:	4a3a      	ldr	r2, [pc, #232]	; (801c444 <RadioSend+0x1e0>)
 801c35a:	78fb      	ldrb	r3, [r7, #3]
 801c35c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c35e:	483a      	ldr	r0, [pc, #232]	; (801c448 <RadioSend+0x1e4>)
 801c360:	f001 fdda 	bl	801df18 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 801c364:	78fb      	ldrb	r3, [r7, #3]
 801c366:	2200      	movs	r2, #0
 801c368:	4619      	mov	r1, r3
 801c36a:	6878      	ldr	r0, [r7, #4]
 801c36c:	f001 f8f6 	bl	801d55c <SUBGRF_SendPayload>
            break;
 801c370:	e05c      	b.n	801c42c <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c372:	4b34      	ldr	r3, [pc, #208]	; (801c444 <RadioSend+0x1e0>)
 801c374:	2202      	movs	r2, #2
 801c376:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801c378:	4a32      	ldr	r2, [pc, #200]	; (801c444 <RadioSend+0x1e0>)
 801c37a:	78fb      	ldrb	r3, [r7, #3]
 801c37c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c37e:	4832      	ldr	r0, [pc, #200]	; (801c448 <RadioSend+0x1e4>)
 801c380:	f001 fdca 	bl	801df18 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801c384:	78fb      	ldrb	r3, [r7, #3]
 801c386:	2200      	movs	r2, #0
 801c388:	4619      	mov	r1, r3
 801c38a:	6878      	ldr	r0, [r7, #4]
 801c38c:	f001 f8e6 	bl	801d55c <SUBGRF_SendPayload>
            break;
 801c390:	e04c      	b.n	801c42c <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801c392:	78fb      	ldrb	r3, [r7, #3]
 801c394:	461a      	mov	r2, r3
 801c396:	6879      	ldr	r1, [r7, #4]
 801c398:	482d      	ldr	r0, [pc, #180]	; (801c450 <RadioSend+0x1ec>)
 801c39a:	f000 fc66 	bl	801cc6a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801c39e:	4b29      	ldr	r3, [pc, #164]	; (801c444 <RadioSend+0x1e0>)
 801c3a0:	2202      	movs	r2, #2
 801c3a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801c3a4:	78fb      	ldrb	r3, [r7, #3]
 801c3a6:	3301      	adds	r3, #1
 801c3a8:	b2da      	uxtb	r2, r3
 801c3aa:	4b26      	ldr	r3, [pc, #152]	; (801c444 <RadioSend+0x1e0>)
 801c3ac:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c3ae:	4826      	ldr	r0, [pc, #152]	; (801c448 <RadioSend+0x1e4>)
 801c3b0:	f001 fdb2 	bl	801df18 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 801c3b4:	2100      	movs	r1, #0
 801c3b6:	20f1      	movs	r0, #241	; 0xf1
 801c3b8:	f000 f947 	bl	801c64a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 801c3bc:	2100      	movs	r1, #0
 801c3be:	20f0      	movs	r0, #240	; 0xf0
 801c3c0:	f000 f943 	bl	801c64a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801c3c4:	4b1f      	ldr	r3, [pc, #124]	; (801c444 <RadioSend+0x1e0>)
 801c3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3c8:	2b64      	cmp	r3, #100	; 0x64
 801c3ca:	d108      	bne.n	801c3de <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 801c3cc:	2170      	movs	r1, #112	; 0x70
 801c3ce:	20f3      	movs	r0, #243	; 0xf3
 801c3d0:	f000 f93b 	bl	801c64a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 801c3d4:	211d      	movs	r1, #29
 801c3d6:	20f2      	movs	r0, #242	; 0xf2
 801c3d8:	f000 f937 	bl	801c64a <RadioWrite>
 801c3dc:	e007      	b.n	801c3ee <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 801c3de:	21e1      	movs	r1, #225	; 0xe1
 801c3e0:	20f3      	movs	r0, #243	; 0xf3
 801c3e2:	f000 f932 	bl	801c64a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 801c3e6:	2104      	movs	r1, #4
 801c3e8:	20f2      	movs	r0, #242	; 0xf2
 801c3ea:	f000 f92e 	bl	801c64a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801c3ee:	78fb      	ldrb	r3, [r7, #3]
 801c3f0:	b29b      	uxth	r3, r3
 801c3f2:	00db      	lsls	r3, r3, #3
 801c3f4:	b29b      	uxth	r3, r3
 801c3f6:	3302      	adds	r3, #2
 801c3f8:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801c3fa:	89fb      	ldrh	r3, [r7, #14]
 801c3fc:	0a1b      	lsrs	r3, r3, #8
 801c3fe:	b29b      	uxth	r3, r3
 801c400:	b2db      	uxtb	r3, r3
 801c402:	4619      	mov	r1, r3
 801c404:	20f4      	movs	r0, #244	; 0xf4
 801c406:	f000 f920 	bl	801c64a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 801c40a:	89fb      	ldrh	r3, [r7, #14]
 801c40c:	b2db      	uxtb	r3, r3
 801c40e:	4619      	mov	r1, r3
 801c410:	20f5      	movs	r0, #245	; 0xf5
 801c412:	f000 f91a 	bl	801c64a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 801c416:	78fb      	ldrb	r3, [r7, #3]
 801c418:	3301      	adds	r3, #1
 801c41a:	b2db      	uxtb	r3, r3
 801c41c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801c420:	4619      	mov	r1, r3
 801c422:	480b      	ldr	r0, [pc, #44]	; (801c450 <RadioSend+0x1ec>)
 801c424:	f001 f89a 	bl	801d55c <SUBGRF_SendPayload>
            break;
 801c428:	e000      	b.n	801c42c <RadioSend+0x1c8>
        }
        default:
            break;
 801c42a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801c42c:	4b05      	ldr	r3, [pc, #20]	; (801c444 <RadioSend+0x1e0>)
 801c42e:	685b      	ldr	r3, [r3, #4]
 801c430:	4619      	mov	r1, r3
 801c432:	4808      	ldr	r0, [pc, #32]	; (801c454 <RadioSend+0x1f0>)
 801c434:	f003 fb62 	bl	801fafc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c438:	4806      	ldr	r0, [pc, #24]	; (801c454 <RadioSend+0x1f0>)
 801c43a:	f003 fa81 	bl	801f940 <UTIL_TIMER_Start>
}
 801c43e:	3710      	adds	r7, #16
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}
 801c444:	20004158 	.word	0x20004158
 801c448:	20004166 	.word	0x20004166
 801c44c:	080229b0 	.word	0x080229b0
 801c450:	20004054 	.word	0x20004054
 801c454:	200041b0 	.word	0x200041b0

0801c458 <RadioSleep>:

static void RadioSleep( void )
{
 801c458:	b580      	push	{r7, lr}
 801c45a:	b082      	sub	sp, #8
 801c45c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801c45e:	2300      	movs	r3, #0
 801c460:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801c462:	793b      	ldrb	r3, [r7, #4]
 801c464:	f043 0304 	orr.w	r3, r3, #4
 801c468:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801c46a:	7938      	ldrb	r0, [r7, #4]
 801c46c:	f001 f952 	bl	801d714 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801c470:	2002      	movs	r0, #2
 801c472:	f7e5 fa3e 	bl	80018f2 <HAL_Delay>
}
 801c476:	bf00      	nop
 801c478:	3708      	adds	r7, #8
 801c47a:	46bd      	mov	sp, r7
 801c47c:	bd80      	pop	{r7, pc}

0801c47e <RadioStandby>:

static void RadioStandby( void )
{
 801c47e:	b580      	push	{r7, lr}
 801c480:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801c482:	2000      	movs	r0, #0
 801c484:	f001 f978 	bl	801d778 <SUBGRF_SetStandby>
}
 801c488:	bf00      	nop
 801c48a:	bd80      	pop	{r7, pc}

0801c48c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 801c494:	f002 f965 	bl	801e762 <RFW_Is_Init>
 801c498:	4603      	mov	r3, r0
 801c49a:	2b01      	cmp	r3, #1
 801c49c:	d102      	bne.n	801c4a4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 801c49e:	f002 f988 	bl	801e7b2 <RFW_ReceiveInit>
 801c4a2:	e007      	b.n	801c4b4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	2200      	movs	r2, #0
 801c4a8:	f240 2162 	movw	r1, #610	; 0x262
 801c4ac:	f240 2062 	movw	r0, #610	; 0x262
 801c4b0:	f001 fb32 	bl	801db18 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d006      	beq.n	801c4c8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c4ba:	6879      	ldr	r1, [r7, #4]
 801c4bc:	480f      	ldr	r0, [pc, #60]	; (801c4fc <RadioRx+0x70>)
 801c4be:	f003 fb1d 	bl	801fafc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c4c2:	480e      	ldr	r0, [pc, #56]	; (801c4fc <RadioRx+0x70>)
 801c4c4:	f003 fa3c 	bl	801f940 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c4c8:	4b0d      	ldr	r3, [pc, #52]	; (801c500 <RadioRx+0x74>)
 801c4ca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c4ce:	2100      	movs	r1, #0
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	f001 ff5d 	bl	801e390 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801c4d6:	4b0a      	ldr	r3, [pc, #40]	; (801c500 <RadioRx+0x74>)
 801c4d8:	785b      	ldrb	r3, [r3, #1]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d004      	beq.n	801c4e8 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c4de:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c4e2:	f001 f985 	bl	801d7f0 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801c4e6:	e005      	b.n	801c4f4 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801c4e8:	4b05      	ldr	r3, [pc, #20]	; (801c500 <RadioRx+0x74>)
 801c4ea:	689b      	ldr	r3, [r3, #8]
 801c4ec:	019b      	lsls	r3, r3, #6
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f001 f97e 	bl	801d7f0 <SUBGRF_SetRx>
}
 801c4f4:	bf00      	nop
 801c4f6:	3708      	adds	r7, #8
 801c4f8:	46bd      	mov	sp, r7
 801c4fa:	bd80      	pop	{r7, pc}
 801c4fc:	200041c8 	.word	0x200041c8
 801c500:	20004158 	.word	0x20004158

0801c504 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801c504:	b580      	push	{r7, lr}
 801c506:	b082      	sub	sp, #8
 801c508:	af00      	add	r7, sp, #0
 801c50a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 801c50c:	f002 f929 	bl	801e762 <RFW_Is_Init>
 801c510:	4603      	mov	r3, r0
 801c512:	2b01      	cmp	r3, #1
 801c514:	d102      	bne.n	801c51c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 801c516:	f002 f94c 	bl	801e7b2 <RFW_ReceiveInit>
 801c51a:	e007      	b.n	801c52c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801c51c:	2300      	movs	r3, #0
 801c51e:	2200      	movs	r2, #0
 801c520:	f240 2162 	movw	r1, #610	; 0x262
 801c524:	f240 2062 	movw	r0, #610	; 0x262
 801c528:	f001 faf6 	bl	801db18 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d006      	beq.n	801c540 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801c532:	6879      	ldr	r1, [r7, #4]
 801c534:	480f      	ldr	r0, [pc, #60]	; (801c574 <RadioRxBoosted+0x70>)
 801c536:	f003 fae1 	bl	801fafc <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801c53a:	480e      	ldr	r0, [pc, #56]	; (801c574 <RadioRxBoosted+0x70>)
 801c53c:	f003 fa00 	bl	801f940 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c540:	4b0d      	ldr	r3, [pc, #52]	; (801c578 <RadioRxBoosted+0x74>)
 801c542:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c546:	2100      	movs	r1, #0
 801c548:	4618      	mov	r0, r3
 801c54a:	f001 ff21 	bl	801e390 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801c54e:	4b0a      	ldr	r3, [pc, #40]	; (801c578 <RadioRxBoosted+0x74>)
 801c550:	785b      	ldrb	r3, [r3, #1]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d004      	beq.n	801c560 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801c556:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c55a:	f001 f969 	bl	801d830 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801c55e:	e005      	b.n	801c56c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801c560:	4b05      	ldr	r3, [pc, #20]	; (801c578 <RadioRxBoosted+0x74>)
 801c562:	689b      	ldr	r3, [r3, #8]
 801c564:	019b      	lsls	r3, r3, #6
 801c566:	4618      	mov	r0, r3
 801c568:	f001 f962 	bl	801d830 <SUBGRF_SetRxBoosted>
}
 801c56c:	bf00      	nop
 801c56e:	3708      	adds	r7, #8
 801c570:	46bd      	mov	sp, r7
 801c572:	bd80      	pop	{r7, pc}
 801c574:	200041c8 	.word	0x200041c8
 801c578:	20004158 	.word	0x20004158

0801c57c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c57c:	b580      	push	{r7, lr}
 801c57e:	b082      	sub	sp, #8
 801c580:	af00      	add	r7, sp, #0
 801c582:	6078      	str	r0, [r7, #4]
 801c584:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c586:	4b07      	ldr	r3, [pc, #28]	; (801c5a4 <RadioSetRxDutyCycle+0x28>)
 801c588:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c58c:	2100      	movs	r1, #0
 801c58e:	4618      	mov	r0, r3
 801c590:	f001 fefe 	bl	801e390 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801c594:	6839      	ldr	r1, [r7, #0]
 801c596:	6878      	ldr	r0, [r7, #4]
 801c598:	f001 f96e 	bl	801d878 <SUBGRF_SetRxDutyCycle>
}
 801c59c:	bf00      	nop
 801c59e:	3708      	adds	r7, #8
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}
 801c5a4:	20004158 	.word	0x20004158

0801c5a8 <RadioStartCad>:

static void RadioStartCad( void )
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 801c5ac:	4b09      	ldr	r3, [pc, #36]	; (801c5d4 <RadioStartCad+0x2c>)
 801c5ae:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801c5b2:	2100      	movs	r1, #0
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	f001 feeb 	bl	801e390 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	2200      	movs	r2, #0
 801c5be:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801c5c2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801c5c6:	f001 faa7 	bl	801db18 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801c5ca:	f001 f981 	bl	801d8d0 <SUBGRF_SetCad>
}
 801c5ce:	bf00      	nop
 801c5d0:	bd80      	pop	{r7, pc}
 801c5d2:	bf00      	nop
 801c5d4:	20004158 	.word	0x20004158

0801c5d8 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801c5d8:	b580      	push	{r7, lr}
 801c5da:	b084      	sub	sp, #16
 801c5dc:	af00      	add	r7, sp, #0
 801c5de:	6078      	str	r0, [r7, #4]
 801c5e0:	460b      	mov	r3, r1
 801c5e2:	70fb      	strb	r3, [r7, #3]
 801c5e4:	4613      	mov	r3, r2
 801c5e6:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 801c5e8:	883b      	ldrh	r3, [r7, #0]
 801c5ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c5ee:	fb02 f303 	mul.w	r3, r2, r3
 801c5f2:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801c5f4:	6878      	ldr	r0, [r7, #4]
 801c5f6:	f001 faeb 	bl	801dbd0 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801c5fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5fe:	4618      	mov	r0, r3
 801c600:	f001 feee 	bl	801e3e0 <SUBGRF_SetRfTxPower>
 801c604:	4603      	mov	r3, r0
 801c606:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 801c608:	7afb      	ldrb	r3, [r7, #11]
 801c60a:	2101      	movs	r1, #1
 801c60c:	4618      	mov	r0, r3
 801c60e:	f001 febf 	bl	801e390 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801c612:	f001 f96b 	bl	801d8ec <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801c616:	68f9      	ldr	r1, [r7, #12]
 801c618:	4804      	ldr	r0, [pc, #16]	; (801c62c <RadioSetTxContinuousWave+0x54>)
 801c61a:	f003 fa6f 	bl	801fafc <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801c61e:	4803      	ldr	r0, [pc, #12]	; (801c62c <RadioSetTxContinuousWave+0x54>)
 801c620:	f003 f98e 	bl	801f940 <UTIL_TIMER_Start>
}
 801c624:	bf00      	nop
 801c626:	3710      	adds	r7, #16
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}
 801c62c:	200041b0 	.word	0x200041b0

0801c630 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801c630:	b580      	push	{r7, lr}
 801c632:	b082      	sub	sp, #8
 801c634:	af00      	add	r7, sp, #0
 801c636:	4603      	mov	r3, r0
 801c638:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801c63a:	f001 fd22 	bl	801e082 <SUBGRF_GetRssiInst>
 801c63e:	4603      	mov	r3, r0
 801c640:	b21b      	sxth	r3, r3
}
 801c642:	4618      	mov	r0, r3
 801c644:	3708      	adds	r7, #8
 801c646:	46bd      	mov	sp, r7
 801c648:	bd80      	pop	{r7, pc}

0801c64a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801c64a:	b580      	push	{r7, lr}
 801c64c:	b082      	sub	sp, #8
 801c64e:	af00      	add	r7, sp, #0
 801c650:	4603      	mov	r3, r0
 801c652:	460a      	mov	r2, r1
 801c654:	80fb      	strh	r3, [r7, #6]
 801c656:	4613      	mov	r3, r2
 801c658:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 801c65a:	797a      	ldrb	r2, [r7, #5]
 801c65c:	88fb      	ldrh	r3, [r7, #6]
 801c65e:	4611      	mov	r1, r2
 801c660:	4618      	mov	r0, r3
 801c662:	f001 fda1 	bl	801e1a8 <SUBGRF_WriteRegister>
}
 801c666:	bf00      	nop
 801c668:	3708      	adds	r7, #8
 801c66a:	46bd      	mov	sp, r7
 801c66c:	bd80      	pop	{r7, pc}

0801c66e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801c66e:	b580      	push	{r7, lr}
 801c670:	b082      	sub	sp, #8
 801c672:	af00      	add	r7, sp, #0
 801c674:	4603      	mov	r3, r0
 801c676:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 801c678:	88fb      	ldrh	r3, [r7, #6]
 801c67a:	4618      	mov	r0, r3
 801c67c:	f001 fda8 	bl	801e1d0 <SUBGRF_ReadRegister>
 801c680:	4603      	mov	r3, r0
}
 801c682:	4618      	mov	r0, r3
 801c684:	3708      	adds	r7, #8
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}

0801c68a <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c68a:	b580      	push	{r7, lr}
 801c68c:	b082      	sub	sp, #8
 801c68e:	af00      	add	r7, sp, #0
 801c690:	4603      	mov	r3, r0
 801c692:	6039      	str	r1, [r7, #0]
 801c694:	80fb      	strh	r3, [r7, #6]
 801c696:	4613      	mov	r3, r2
 801c698:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801c69a:	797b      	ldrb	r3, [r7, #5]
 801c69c:	b29a      	uxth	r2, r3
 801c69e:	88fb      	ldrh	r3, [r7, #6]
 801c6a0:	6839      	ldr	r1, [r7, #0]
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	f001 fda8 	bl	801e1f8 <SUBGRF_WriteRegisters>
}
 801c6a8:	bf00      	nop
 801c6aa:	3708      	adds	r7, #8
 801c6ac:	46bd      	mov	sp, r7
 801c6ae:	bd80      	pop	{r7, pc}

0801c6b0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801c6b0:	b580      	push	{r7, lr}
 801c6b2:	b082      	sub	sp, #8
 801c6b4:	af00      	add	r7, sp, #0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	6039      	str	r1, [r7, #0]
 801c6ba:	80fb      	strh	r3, [r7, #6]
 801c6bc:	4613      	mov	r3, r2
 801c6be:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801c6c0:	797b      	ldrb	r3, [r7, #5]
 801c6c2:	b29a      	uxth	r2, r3
 801c6c4:	88fb      	ldrh	r3, [r7, #6]
 801c6c6:	6839      	ldr	r1, [r7, #0]
 801c6c8:	4618      	mov	r0, r3
 801c6ca:	f001 fdb7 	bl	801e23c <SUBGRF_ReadRegisters>
}
 801c6ce:	bf00      	nop
 801c6d0:	3708      	adds	r7, #8
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	bd80      	pop	{r7, pc}
	...

0801c6d8 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801c6d8:	b580      	push	{r7, lr}
 801c6da:	b082      	sub	sp, #8
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	4603      	mov	r3, r0
 801c6e0:	460a      	mov	r2, r1
 801c6e2:	71fb      	strb	r3, [r7, #7]
 801c6e4:	4613      	mov	r3, r2
 801c6e6:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801c6e8:	79fb      	ldrb	r3, [r7, #7]
 801c6ea:	2b01      	cmp	r3, #1
 801c6ec:	d10a      	bne.n	801c704 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801c6ee:	4a0e      	ldr	r2, [pc, #56]	; (801c728 <RadioSetMaxPayloadLength+0x50>)
 801c6f0:	79bb      	ldrb	r3, [r7, #6]
 801c6f2:	7013      	strb	r3, [r2, #0]
 801c6f4:	4b0c      	ldr	r3, [pc, #48]	; (801c728 <RadioSetMaxPayloadLength+0x50>)
 801c6f6:	781a      	ldrb	r2, [r3, #0]
 801c6f8:	4b0c      	ldr	r3, [pc, #48]	; (801c72c <RadioSetMaxPayloadLength+0x54>)
 801c6fa:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c6fc:	480c      	ldr	r0, [pc, #48]	; (801c730 <RadioSetMaxPayloadLength+0x58>)
 801c6fe:	f001 fc0b 	bl	801df18 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801c702:	e00d      	b.n	801c720 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801c704:	4b09      	ldr	r3, [pc, #36]	; (801c72c <RadioSetMaxPayloadLength+0x54>)
 801c706:	7d5b      	ldrb	r3, [r3, #21]
 801c708:	2b01      	cmp	r3, #1
 801c70a:	d109      	bne.n	801c720 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801c70c:	4a06      	ldr	r2, [pc, #24]	; (801c728 <RadioSetMaxPayloadLength+0x50>)
 801c70e:	79bb      	ldrb	r3, [r7, #6]
 801c710:	7013      	strb	r3, [r2, #0]
 801c712:	4b05      	ldr	r3, [pc, #20]	; (801c728 <RadioSetMaxPayloadLength+0x50>)
 801c714:	781a      	ldrb	r2, [r3, #0]
 801c716:	4b05      	ldr	r3, [pc, #20]	; (801c72c <RadioSetMaxPayloadLength+0x54>)
 801c718:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801c71a:	4805      	ldr	r0, [pc, #20]	; (801c730 <RadioSetMaxPayloadLength+0x58>)
 801c71c:	f001 fbfc 	bl	801df18 <SUBGRF_SetPacketParams>
}
 801c720:	bf00      	nop
 801c722:	3708      	adds	r7, #8
 801c724:	46bd      	mov	sp, r7
 801c726:	bd80      	pop	{r7, pc}
 801c728:	20000110 	.word	0x20000110
 801c72c:	20004158 	.word	0x20004158
 801c730:	20004166 	.word	0x20004166

0801c734 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	4603      	mov	r3, r0
 801c73c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801c73e:	4a13      	ldr	r2, [pc, #76]	; (801c78c <RadioSetPublicNetwork+0x58>)
 801c740:	79fb      	ldrb	r3, [r7, #7]
 801c742:	7313      	strb	r3, [r2, #12]
 801c744:	4b11      	ldr	r3, [pc, #68]	; (801c78c <RadioSetPublicNetwork+0x58>)
 801c746:	7b1a      	ldrb	r2, [r3, #12]
 801c748:	4b10      	ldr	r3, [pc, #64]	; (801c78c <RadioSetPublicNetwork+0x58>)
 801c74a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801c74c:	2001      	movs	r0, #1
 801c74e:	f7ff f82b 	bl	801b7a8 <RadioSetModem>
    if( enable == true )
 801c752:	79fb      	ldrb	r3, [r7, #7]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d00a      	beq.n	801c76e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801c758:	2134      	movs	r1, #52	; 0x34
 801c75a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c75e:	f001 fd23 	bl	801e1a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801c762:	2144      	movs	r1, #68	; 0x44
 801c764:	f240 7041 	movw	r0, #1857	; 0x741
 801c768:	f001 fd1e 	bl	801e1a8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801c76c:	e009      	b.n	801c782 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801c76e:	2114      	movs	r1, #20
 801c770:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801c774:	f001 fd18 	bl	801e1a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801c778:	2124      	movs	r1, #36	; 0x24
 801c77a:	f240 7041 	movw	r0, #1857	; 0x741
 801c77e:	f001 fd13 	bl	801e1a8 <SUBGRF_WriteRegister>
}
 801c782:	bf00      	nop
 801c784:	3708      	adds	r7, #8
 801c786:	46bd      	mov	sp, r7
 801c788:	bd80      	pop	{r7, pc}
 801c78a:	bf00      	nop
 801c78c:	20004158 	.word	0x20004158

0801c790 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801c790:	b580      	push	{r7, lr}
 801c792:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801c794:	f001 fe58 	bl	801e448 <SUBGRF_GetRadioWakeUpTime>
 801c798:	4603      	mov	r3, r0
 801c79a:	3303      	adds	r3, #3
}
 801c79c:	4618      	mov	r0, r3
 801c79e:	bd80      	pop	{r7, pc}

0801c7a0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 801c7a0:	b580      	push	{r7, lr}
 801c7a2:	b082      	sub	sp, #8
 801c7a4:	af00      	add	r7, sp, #0
 801c7a6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801c7a8:	f000 f80e 	bl	801c7c8 <RadioOnTxTimeoutProcess>
}
 801c7ac:	bf00      	nop
 801c7ae:	3708      	adds	r7, #8
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}

0801c7b4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 801c7b4:	b580      	push	{r7, lr}
 801c7b6:	b082      	sub	sp, #8
 801c7b8:	af00      	add	r7, sp, #0
 801c7ba:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801c7bc:	f000 f818 	bl	801c7f0 <RadioOnRxTimeoutProcess>
}
 801c7c0:	bf00      	nop
 801c7c2:	3708      	adds	r7, #8
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	bd80      	pop	{r7, pc}

0801c7c8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801c7c8:	b580      	push	{r7, lr}
 801c7ca:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801c7cc:	4b07      	ldr	r3, [pc, #28]	; (801c7ec <RadioOnTxTimeoutProcess+0x24>)
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	2b00      	cmp	r3, #0
 801c7d2:	d008      	beq.n	801c7e6 <RadioOnTxTimeoutProcess+0x1e>
 801c7d4:	4b05      	ldr	r3, [pc, #20]	; (801c7ec <RadioOnTxTimeoutProcess+0x24>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	685b      	ldr	r3, [r3, #4]
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	d003      	beq.n	801c7e6 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801c7de:	4b03      	ldr	r3, [pc, #12]	; (801c7ec <RadioOnTxTimeoutProcess+0x24>)
 801c7e0:	681b      	ldr	r3, [r3, #0]
 801c7e2:	685b      	ldr	r3, [r3, #4]
 801c7e4:	4798      	blx	r3
    }
}
 801c7e6:	bf00      	nop
 801c7e8:	bd80      	pop	{r7, pc}
 801c7ea:	bf00      	nop
 801c7ec:	20004154 	.word	0x20004154

0801c7f0 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801c7f0:	b580      	push	{r7, lr}
 801c7f2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801c7f4:	4b07      	ldr	r3, [pc, #28]	; (801c814 <RadioOnRxTimeoutProcess+0x24>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d008      	beq.n	801c80e <RadioOnRxTimeoutProcess+0x1e>
 801c7fc:	4b05      	ldr	r3, [pc, #20]	; (801c814 <RadioOnRxTimeoutProcess+0x24>)
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	68db      	ldr	r3, [r3, #12]
 801c802:	2b00      	cmp	r3, #0
 801c804:	d003      	beq.n	801c80e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801c806:	4b03      	ldr	r3, [pc, #12]	; (801c814 <RadioOnRxTimeoutProcess+0x24>)
 801c808:	681b      	ldr	r3, [r3, #0]
 801c80a:	68db      	ldr	r3, [r3, #12]
 801c80c:	4798      	blx	r3
    }
}
 801c80e:	bf00      	nop
 801c810:	bd80      	pop	{r7, pc}
 801c812:	bf00      	nop
 801c814:	20004154 	.word	0x20004154

0801c818 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b082      	sub	sp, #8
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	4603      	mov	r3, r0
 801c820:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801c822:	4a05      	ldr	r2, [pc, #20]	; (801c838 <RadioOnDioIrq+0x20>)
 801c824:	88fb      	ldrh	r3, [r7, #6]
 801c826:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801c82a:	f000 f807 	bl	801c83c <RadioIrqProcess>
}
 801c82e:	bf00      	nop
 801c830:	3708      	adds	r7, #8
 801c832:	46bd      	mov	sp, r7
 801c834:	bd80      	pop	{r7, pc}
 801c836:	bf00      	nop
 801c838:	20004158 	.word	0x20004158

0801c83c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801c83c:	b590      	push	{r4, r7, lr}
 801c83e:	b083      	sub	sp, #12
 801c840:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801c842:	2300      	movs	r3, #0
 801c844:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801c846:	2300      	movs	r3, #0
 801c848:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 801c84a:	4bb5      	ldr	r3, [pc, #724]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c84c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801c850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c854:	f000 810c 	beq.w	801ca70 <RadioIrqProcess+0x234>
 801c858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c85c:	f300 81b5 	bgt.w	801cbca <RadioIrqProcess+0x38e>
 801c860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c864:	f000 80f0 	beq.w	801ca48 <RadioIrqProcess+0x20c>
 801c868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c86c:	f300 81ad 	bgt.w	801cbca <RadioIrqProcess+0x38e>
 801c870:	2b80      	cmp	r3, #128	; 0x80
 801c872:	f000 80d5 	beq.w	801ca20 <RadioIrqProcess+0x1e4>
 801c876:	2b80      	cmp	r3, #128	; 0x80
 801c878:	f300 81a7 	bgt.w	801cbca <RadioIrqProcess+0x38e>
 801c87c:	2b20      	cmp	r3, #32
 801c87e:	dc49      	bgt.n	801c914 <RadioIrqProcess+0xd8>
 801c880:	2b00      	cmp	r3, #0
 801c882:	f340 81a2 	ble.w	801cbca <RadioIrqProcess+0x38e>
 801c886:	3b01      	subs	r3, #1
 801c888:	2b1f      	cmp	r3, #31
 801c88a:	f200 819e 	bhi.w	801cbca <RadioIrqProcess+0x38e>
 801c88e:	a201      	add	r2, pc, #4	; (adr r2, 801c894 <RadioIrqProcess+0x58>)
 801c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c894:	0801c91d 	.word	0x0801c91d
 801c898:	0801c957 	.word	0x0801c957
 801c89c:	0801cbcb 	.word	0x0801cbcb
 801c8a0:	0801cae9 	.word	0x0801cae9
 801c8a4:	0801cbcb 	.word	0x0801cbcb
 801c8a8:	0801cbcb 	.word	0x0801cbcb
 801c8ac:	0801cbcb 	.word	0x0801cbcb
 801c8b0:	0801caf7 	.word	0x0801caf7
 801c8b4:	0801cbcb 	.word	0x0801cbcb
 801c8b8:	0801cbcb 	.word	0x0801cbcb
 801c8bc:	0801cbcb 	.word	0x0801cbcb
 801c8c0:	0801cbcb 	.word	0x0801cbcb
 801c8c4:	0801cbcb 	.word	0x0801cbcb
 801c8c8:	0801cbcb 	.word	0x0801cbcb
 801c8cc:	0801cbcb 	.word	0x0801cbcb
 801c8d0:	0801cb13 	.word	0x0801cb13
 801c8d4:	0801cbcb 	.word	0x0801cbcb
 801c8d8:	0801cbcb 	.word	0x0801cbcb
 801c8dc:	0801cbcb 	.word	0x0801cbcb
 801c8e0:	0801cbcb 	.word	0x0801cbcb
 801c8e4:	0801cbcb 	.word	0x0801cbcb
 801c8e8:	0801cbcb 	.word	0x0801cbcb
 801c8ec:	0801cbcb 	.word	0x0801cbcb
 801c8f0:	0801cbcb 	.word	0x0801cbcb
 801c8f4:	0801cbcb 	.word	0x0801cbcb
 801c8f8:	0801cbcb 	.word	0x0801cbcb
 801c8fc:	0801cbcb 	.word	0x0801cbcb
 801c900:	0801cbcb 	.word	0x0801cbcb
 801c904:	0801cbcb 	.word	0x0801cbcb
 801c908:	0801cbcb 	.word	0x0801cbcb
 801c90c:	0801cbcb 	.word	0x0801cbcb
 801c910:	0801cb4d 	.word	0x0801cb4d
 801c914:	2b40      	cmp	r3, #64	; 0x40
 801c916:	f000 813a 	beq.w	801cb8e <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801c91a:	e156      	b.n	801cbca <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 801c91c:	4881      	ldr	r0, [pc, #516]	; (801cb24 <RadioIrqProcess+0x2e8>)
 801c91e:	f003 f87d 	bl	801fa1c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801c922:	2000      	movs	r0, #0
 801c924:	f000 ff28 	bl	801d778 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 801c928:	f001 ff22 	bl	801e770 <RFW_Is_LongPacketModeEnabled>
 801c92c:	4603      	mov	r3, r0
 801c92e:	2b01      	cmp	r3, #1
 801c930:	d101      	bne.n	801c936 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801c932:	f001 ff46 	bl	801e7c2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801c936:	4b7c      	ldr	r3, [pc, #496]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	f000 8147 	beq.w	801cbce <RadioIrqProcess+0x392>
 801c940:	4b79      	ldr	r3, [pc, #484]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	681b      	ldr	r3, [r3, #0]
 801c946:	2b00      	cmp	r3, #0
 801c948:	f000 8141 	beq.w	801cbce <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 801c94c:	4b76      	ldr	r3, [pc, #472]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c94e:	681b      	ldr	r3, [r3, #0]
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	4798      	blx	r3
        break;
 801c954:	e13b      	b.n	801cbce <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 801c956:	4875      	ldr	r0, [pc, #468]	; (801cb2c <RadioIrqProcess+0x2f0>)
 801c958:	f003 f860 	bl	801fa1c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801c95c:	4b70      	ldr	r3, [pc, #448]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c95e:	785b      	ldrb	r3, [r3, #1]
 801c960:	f083 0301 	eor.w	r3, r3, #1
 801c964:	b2db      	uxtb	r3, r3
 801c966:	2b00      	cmp	r3, #0
 801c968:	d014      	beq.n	801c994 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801c96a:	2000      	movs	r0, #0
 801c96c:	f000 ff04 	bl	801d778 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 801c970:	2100      	movs	r1, #0
 801c972:	f640 1002 	movw	r0, #2306	; 0x902
 801c976:	f001 fc17 	bl	801e1a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 801c97a:	f640 1044 	movw	r0, #2372	; 0x944
 801c97e:	f001 fc27 	bl	801e1d0 <SUBGRF_ReadRegister>
 801c982:	4603      	mov	r3, r0
 801c984:	f043 0302 	orr.w	r3, r3, #2
 801c988:	b2db      	uxtb	r3, r3
 801c98a:	4619      	mov	r1, r3
 801c98c:	f640 1044 	movw	r0, #2372	; 0x944
 801c990:	f001 fc0a 	bl	801e1a8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 801c994:	1dfb      	adds	r3, r7, #7
 801c996:	22ff      	movs	r2, #255	; 0xff
 801c998:	4619      	mov	r1, r3
 801c99a:	4865      	ldr	r0, [pc, #404]	; (801cb30 <RadioIrqProcess+0x2f4>)
 801c99c:	f000 fdbc 	bl	801d518 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 801c9a0:	4864      	ldr	r0, [pc, #400]	; (801cb34 <RadioIrqProcess+0x2f8>)
 801c9a2:	f001 fbaf 	bl	801e104 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801c9a6:	4b60      	ldr	r3, [pc, #384]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d036      	beq.n	801ca1c <RadioIrqProcess+0x1e0>
 801c9ae:	4b5e      	ldr	r3, [pc, #376]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c9b0:	681b      	ldr	r3, [r3, #0]
 801c9b2:	689b      	ldr	r3, [r3, #8]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d031      	beq.n	801ca1c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 801c9b8:	4b59      	ldr	r3, [pc, #356]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c9ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801c9be:	2b01      	cmp	r3, #1
 801c9c0:	d10e      	bne.n	801c9e0 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801c9c2:	4b59      	ldr	r3, [pc, #356]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	689c      	ldr	r4, [r3, #8]
 801c9c8:	79fb      	ldrb	r3, [r7, #7]
 801c9ca:	b299      	uxth	r1, r3
 801c9cc:	4b54      	ldr	r3, [pc, #336]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c9ce:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801c9d2:	b21a      	sxth	r2, r3
 801c9d4:	4b52      	ldr	r3, [pc, #328]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c9d6:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801c9da:	4855      	ldr	r0, [pc, #340]	; (801cb30 <RadioIrqProcess+0x2f4>)
 801c9dc:	47a0      	blx	r4
                break;
 801c9de:	e01e      	b.n	801ca1e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801c9e0:	4b4f      	ldr	r3, [pc, #316]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c9e4:	463a      	mov	r2, r7
 801c9e6:	4611      	mov	r1, r2
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	f001 fe0f 	bl	801e60c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801c9ee:	4b4e      	ldr	r3, [pc, #312]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	689c      	ldr	r4, [r3, #8]
 801c9f4:	79fb      	ldrb	r3, [r7, #7]
 801c9f6:	b299      	uxth	r1, r3
 801c9f8:	4b49      	ldr	r3, [pc, #292]	; (801cb20 <RadioIrqProcess+0x2e4>)
 801c9fa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801c9fe:	b218      	sxth	r0, r3
 801ca00:	683b      	ldr	r3, [r7, #0]
 801ca02:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801ca06:	4a4c      	ldr	r2, [pc, #304]	; (801cb38 <RadioIrqProcess+0x2fc>)
 801ca08:	fb82 c203 	smull	ip, r2, r2, r3
 801ca0c:	1192      	asrs	r2, r2, #6
 801ca0e:	17db      	asrs	r3, r3, #31
 801ca10:	1ad3      	subs	r3, r2, r3
 801ca12:	b25b      	sxtb	r3, r3
 801ca14:	4602      	mov	r2, r0
 801ca16:	4846      	ldr	r0, [pc, #280]	; (801cb30 <RadioIrqProcess+0x2f4>)
 801ca18:	47a0      	blx	r4
                break;
 801ca1a:	e000      	b.n	801ca1e <RadioIrqProcess+0x1e2>
        }
 801ca1c:	bf00      	nop
        break;
 801ca1e:	e0e3      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 801ca20:	2000      	movs	r0, #0
 801ca22:	f000 fea9 	bl	801d778 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ca26:	4b40      	ldr	r3, [pc, #256]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	f000 80d1 	beq.w	801cbd2 <RadioIrqProcess+0x396>
 801ca30:	4b3d      	ldr	r3, [pc, #244]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	699b      	ldr	r3, [r3, #24]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	f000 80cb 	beq.w	801cbd2 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 801ca3c:	4b3a      	ldr	r3, [pc, #232]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca3e:	681b      	ldr	r3, [r3, #0]
 801ca40:	699b      	ldr	r3, [r3, #24]
 801ca42:	2000      	movs	r0, #0
 801ca44:	4798      	blx	r3
        break;
 801ca46:	e0c4      	b.n	801cbd2 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 801ca48:	2000      	movs	r0, #0
 801ca4a:	f000 fe95 	bl	801d778 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801ca4e:	4b36      	ldr	r3, [pc, #216]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	f000 80bf 	beq.w	801cbd6 <RadioIrqProcess+0x39a>
 801ca58:	4b33      	ldr	r3, [pc, #204]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca5a:	681b      	ldr	r3, [r3, #0]
 801ca5c:	699b      	ldr	r3, [r3, #24]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	f000 80b9 	beq.w	801cbd6 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 801ca64:	4b30      	ldr	r3, [pc, #192]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	699b      	ldr	r3, [r3, #24]
 801ca6a:	2001      	movs	r0, #1
 801ca6c:	4798      	blx	r3
        break;
 801ca6e:	e0b2      	b.n	801cbd6 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801ca70:	4b32      	ldr	r3, [pc, #200]	; (801cb3c <RadioIrqProcess+0x300>)
 801ca72:	2201      	movs	r2, #1
 801ca74:	2100      	movs	r1, #0
 801ca76:	2002      	movs	r0, #2
 801ca78:	f001 fef8 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801ca7c:	f000 fd32 	bl	801d4e4 <SUBGRF_GetOperatingMode>
 801ca80:	4603      	mov	r3, r0
 801ca82:	2b04      	cmp	r3, #4
 801ca84:	d115      	bne.n	801cab2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801ca86:	4827      	ldr	r0, [pc, #156]	; (801cb24 <RadioIrqProcess+0x2e8>)
 801ca88:	f002 ffc8 	bl	801fa1c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801ca8c:	2000      	movs	r0, #0
 801ca8e:	f000 fe73 	bl	801d778 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801ca92:	4b25      	ldr	r3, [pc, #148]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	f000 809f 	beq.w	801cbda <RadioIrqProcess+0x39e>
 801ca9c:	4b22      	ldr	r3, [pc, #136]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	685b      	ldr	r3, [r3, #4]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	f000 8099 	beq.w	801cbda <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 801caa8:	4b1f      	ldr	r3, [pc, #124]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	685b      	ldr	r3, [r3, #4]
 801caae:	4798      	blx	r3
        break;
 801cab0:	e093      	b.n	801cbda <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801cab2:	f000 fd17 	bl	801d4e4 <SUBGRF_GetOperatingMode>
 801cab6:	4603      	mov	r3, r0
 801cab8:	2b05      	cmp	r3, #5
 801caba:	f040 808e 	bne.w	801cbda <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 801cabe:	481b      	ldr	r0, [pc, #108]	; (801cb2c <RadioIrqProcess+0x2f0>)
 801cac0:	f002 ffac 	bl	801fa1c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801cac4:	2000      	movs	r0, #0
 801cac6:	f000 fe57 	bl	801d778 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801caca:	4b17      	ldr	r3, [pc, #92]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	2b00      	cmp	r3, #0
 801cad0:	f000 8083 	beq.w	801cbda <RadioIrqProcess+0x39e>
 801cad4:	4b14      	ldr	r3, [pc, #80]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801cad6:	681b      	ldr	r3, [r3, #0]
 801cad8:	68db      	ldr	r3, [r3, #12]
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d07d      	beq.n	801cbda <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 801cade:	4b12      	ldr	r3, [pc, #72]	; (801cb28 <RadioIrqProcess+0x2ec>)
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	68db      	ldr	r3, [r3, #12]
 801cae4:	4798      	blx	r3
        break;
 801cae6:	e078      	b.n	801cbda <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801cae8:	4b15      	ldr	r3, [pc, #84]	; (801cb40 <RadioIrqProcess+0x304>)
 801caea:	2201      	movs	r2, #1
 801caec:	2100      	movs	r1, #0
 801caee:	2002      	movs	r0, #2
 801caf0:	f001 febc 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801caf4:	e078      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801caf6:	4b13      	ldr	r3, [pc, #76]	; (801cb44 <RadioIrqProcess+0x308>)
 801caf8:	2201      	movs	r2, #1
 801cafa:	2100      	movs	r1, #0
 801cafc:	2002      	movs	r0, #2
 801cafe:	f001 feb5 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 801cb02:	f001 fe2e 	bl	801e762 <RFW_Is_Init>
 801cb06:	4603      	mov	r3, r0
 801cb08:	2b01      	cmp	r3, #1
 801cb0a:	d168      	bne.n	801cbde <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 801cb0c:	f001 fe5f 	bl	801e7ce <RFW_ReceivePayload>
        break;
 801cb10:	e065      	b.n	801cbde <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801cb12:	4b0d      	ldr	r3, [pc, #52]	; (801cb48 <RadioIrqProcess+0x30c>)
 801cb14:	2201      	movs	r2, #1
 801cb16:	2100      	movs	r1, #0
 801cb18:	2002      	movs	r0, #2
 801cb1a:	f001 fea7 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cb1e:	e063      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
 801cb20:	20004158 	.word	0x20004158
 801cb24:	200041b0 	.word	0x200041b0
 801cb28:	20004154 	.word	0x20004154
 801cb2c:	200041c8 	.word	0x200041c8
 801cb30:	20004054 	.word	0x20004054
 801cb34:	2000417c 	.word	0x2000417c
 801cb38:	10624dd3 	.word	0x10624dd3
 801cb3c:	080229c8 	.word	0x080229c8
 801cb40:	080229dc 	.word	0x080229dc
 801cb44:	080229e8 	.word	0x080229e8
 801cb48:	080229f4 	.word	0x080229f4
        TimerStop( &RxTimeoutTimer );
 801cb4c:	4828      	ldr	r0, [pc, #160]	; (801cbf0 <RadioIrqProcess+0x3b4>)
 801cb4e:	f002 ff65 	bl	801fa1c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801cb52:	4b28      	ldr	r3, [pc, #160]	; (801cbf4 <RadioIrqProcess+0x3b8>)
 801cb54:	785b      	ldrb	r3, [r3, #1]
 801cb56:	f083 0301 	eor.w	r3, r3, #1
 801cb5a:	b2db      	uxtb	r3, r3
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d002      	beq.n	801cb66 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 801cb60:	2000      	movs	r0, #0
 801cb62:	f000 fe09 	bl	801d778 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801cb66:	4b24      	ldr	r3, [pc, #144]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	2b00      	cmp	r3, #0
 801cb6c:	d039      	beq.n	801cbe2 <RadioIrqProcess+0x3a6>
 801cb6e:	4b22      	ldr	r3, [pc, #136]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	68db      	ldr	r3, [r3, #12]
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d034      	beq.n	801cbe2 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 801cb78:	4b1f      	ldr	r3, [pc, #124]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	68db      	ldr	r3, [r3, #12]
 801cb7e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801cb80:	4b1e      	ldr	r3, [pc, #120]	; (801cbfc <RadioIrqProcess+0x3c0>)
 801cb82:	2201      	movs	r2, #1
 801cb84:	2100      	movs	r1, #0
 801cb86:	2002      	movs	r0, #2
 801cb88:	f001 fe70 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        break;
 801cb8c:	e029      	b.n	801cbe2 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801cb8e:	4b1c      	ldr	r3, [pc, #112]	; (801cc00 <RadioIrqProcess+0x3c4>)
 801cb90:	2201      	movs	r2, #1
 801cb92:	2100      	movs	r1, #0
 801cb94:	2002      	movs	r0, #2
 801cb96:	f001 fe69 	bl	801e86c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801cb9a:	4b16      	ldr	r3, [pc, #88]	; (801cbf4 <RadioIrqProcess+0x3b8>)
 801cb9c:	785b      	ldrb	r3, [r3, #1]
 801cb9e:	f083 0301 	eor.w	r3, r3, #1
 801cba2:	b2db      	uxtb	r3, r3
 801cba4:	2b00      	cmp	r3, #0
 801cba6:	d002      	beq.n	801cbae <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 801cba8:	2000      	movs	r0, #0
 801cbaa:	f000 fde5 	bl	801d778 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801cbae:	4b12      	ldr	r3, [pc, #72]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d017      	beq.n	801cbe6 <RadioIrqProcess+0x3aa>
 801cbb6:	4b10      	ldr	r3, [pc, #64]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	691b      	ldr	r3, [r3, #16]
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d012      	beq.n	801cbe6 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 801cbc0:	4b0d      	ldr	r3, [pc, #52]	; (801cbf8 <RadioIrqProcess+0x3bc>)
 801cbc2:	681b      	ldr	r3, [r3, #0]
 801cbc4:	691b      	ldr	r3, [r3, #16]
 801cbc6:	4798      	blx	r3
        break;
 801cbc8:	e00d      	b.n	801cbe6 <RadioIrqProcess+0x3aa>
        break;
 801cbca:	bf00      	nop
 801cbcc:	e00c      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbce:	bf00      	nop
 801cbd0:	e00a      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbd2:	bf00      	nop
 801cbd4:	e008      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbd6:	bf00      	nop
 801cbd8:	e006      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbda:	bf00      	nop
 801cbdc:	e004      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbde:	bf00      	nop
 801cbe0:	e002      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbe2:	bf00      	nop
 801cbe4:	e000      	b.n	801cbe8 <RadioIrqProcess+0x3ac>
        break;
 801cbe6:	bf00      	nop
  }
}
 801cbe8:	bf00      	nop
 801cbea:	370c      	adds	r7, #12
 801cbec:	46bd      	mov	sp, r7
 801cbee:	bd90      	pop	{r4, r7, pc}
 801cbf0:	200041c8 	.word	0x200041c8
 801cbf4:	20004158 	.word	0x20004158
 801cbf8:	20004154 	.word	0x20004154
 801cbfc:	08022a00 	.word	0x08022a00
 801cc00:	08022a0c 	.word	0x08022a0c

0801cc04 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801cc04:	b580      	push	{r7, lr}
 801cc06:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801cc08:	4b09      	ldr	r3, [pc, #36]	; (801cc30 <RadioTxPrbs+0x2c>)
 801cc0a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801cc0e:	2101      	movs	r1, #1
 801cc10:	4618      	mov	r0, r3
 801cc12:	f001 fbbd 	bl	801e390 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 801cc16:	4b07      	ldr	r3, [pc, #28]	; (801cc34 <RadioTxPrbs+0x30>)
 801cc18:	212d      	movs	r1, #45	; 0x2d
 801cc1a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801cc1e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801cc20:	f000 fe6d 	bl	801d8fe <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801cc24:	4804      	ldr	r0, [pc, #16]	; (801cc38 <RadioTxPrbs+0x34>)
 801cc26:	f000 fdc3 	bl	801d7b0 <SUBGRF_SetTx>
}
 801cc2a:	bf00      	nop
 801cc2c:	bd80      	pop	{r7, pc}
 801cc2e:	bf00      	nop
 801cc30:	20004158 	.word	0x20004158
 801cc34:	0801c64b 	.word	0x0801c64b
 801cc38:	000fffff 	.word	0x000fffff

0801cc3c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b084      	sub	sp, #16
 801cc40:	af00      	add	r7, sp, #0
 801cc42:	4603      	mov	r3, r0
 801cc44:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801cc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cc4a:	4618      	mov	r0, r3
 801cc4c:	f001 fbc8 	bl	801e3e0 <SUBGRF_SetRfTxPower>
 801cc50:	4603      	mov	r3, r0
 801cc52:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801cc54:	7bfb      	ldrb	r3, [r7, #15]
 801cc56:	2101      	movs	r1, #1
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f001 fb99 	bl	801e390 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801cc5e:	f000 fe45 	bl	801d8ec <SUBGRF_SetTxContinuousWave>
}
 801cc62:	bf00      	nop
 801cc64:	3710      	adds	r7, #16
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}

0801cc6a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801cc6a:	b480      	push	{r7}
 801cc6c:	b089      	sub	sp, #36	; 0x24
 801cc6e:	af00      	add	r7, sp, #0
 801cc70:	60f8      	str	r0, [r7, #12]
 801cc72:	60b9      	str	r1, [r7, #8]
 801cc74:	4613      	mov	r3, r2
 801cc76:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801cc78:	2300      	movs	r3, #0
 801cc7a:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 801cc7c:	2300      	movs	r3, #0
 801cc7e:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 801cc80:	2300      	movs	r3, #0
 801cc82:	61bb      	str	r3, [r7, #24]
 801cc84:	e011      	b.n	801ccaa <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801cc86:	69bb      	ldr	r3, [r7, #24]
 801cc88:	68ba      	ldr	r2, [r7, #8]
 801cc8a:	4413      	add	r3, r2
 801cc8c:	781a      	ldrb	r2, [r3, #0]
 801cc8e:	69bb      	ldr	r3, [r7, #24]
 801cc90:	68b9      	ldr	r1, [r7, #8]
 801cc92:	440b      	add	r3, r1
 801cc94:	43d2      	mvns	r2, r2
 801cc96:	b2d2      	uxtb	r2, r2
 801cc98:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801cc9a:	69bb      	ldr	r3, [r7, #24]
 801cc9c:	68fa      	ldr	r2, [r7, #12]
 801cc9e:	4413      	add	r3, r2
 801cca0:	2200      	movs	r2, #0
 801cca2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 801cca4:	69bb      	ldr	r3, [r7, #24]
 801cca6:	3301      	adds	r3, #1
 801cca8:	61bb      	str	r3, [r7, #24]
 801ccaa:	79fb      	ldrb	r3, [r7, #7]
 801ccac:	69ba      	ldr	r2, [r7, #24]
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	dbe9      	blt.n	801cc86 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	61bb      	str	r3, [r7, #24]
 801ccb6:	e049      	b.n	801cd4c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801ccb8:	69bb      	ldr	r3, [r7, #24]
 801ccba:	425a      	negs	r2, r3
 801ccbc:	f003 0307 	and.w	r3, r3, #7
 801ccc0:	f002 0207 	and.w	r2, r2, #7
 801ccc4:	bf58      	it	pl
 801ccc6:	4253      	negpl	r3, r2
 801ccc8:	b2db      	uxtb	r3, r3
 801ccca:	f1c3 0307 	rsb	r3, r3, #7
 801ccce:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801ccd0:	69bb      	ldr	r3, [r7, #24]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	da00      	bge.n	801ccd8 <payload_integration+0x6e>
 801ccd6:	3307      	adds	r3, #7
 801ccd8:	10db      	asrs	r3, r3, #3
 801ccda:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801ccdc:	69bb      	ldr	r3, [r7, #24]
 801ccde:	3301      	adds	r3, #1
 801cce0:	425a      	negs	r2, r3
 801cce2:	f003 0307 	and.w	r3, r3, #7
 801cce6:	f002 0207 	and.w	r2, r2, #7
 801ccea:	bf58      	it	pl
 801ccec:	4253      	negpl	r3, r2
 801ccee:	b2db      	uxtb	r3, r3
 801ccf0:	f1c3 0307 	rsb	r3, r3, #7
 801ccf4:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801ccf6:	69bb      	ldr	r3, [r7, #24]
 801ccf8:	3301      	adds	r3, #1
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	da00      	bge.n	801cd00 <payload_integration+0x96>
 801ccfe:	3307      	adds	r3, #7
 801cd00:	10db      	asrs	r3, r3, #3
 801cd02:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801cd04:	7dbb      	ldrb	r3, [r7, #22]
 801cd06:	68ba      	ldr	r2, [r7, #8]
 801cd08:	4413      	add	r3, r2
 801cd0a:	781b      	ldrb	r3, [r3, #0]
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	7dfb      	ldrb	r3, [r7, #23]
 801cd10:	fa42 f303 	asr.w	r3, r2, r3
 801cd14:	b2db      	uxtb	r3, r3
 801cd16:	f003 0301 	and.w	r3, r3, #1
 801cd1a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801cd1c:	7ffa      	ldrb	r2, [r7, #31]
 801cd1e:	7cfb      	ldrb	r3, [r7, #19]
 801cd20:	4053      	eors	r3, r2
 801cd22:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801cd24:	7d3b      	ldrb	r3, [r7, #20]
 801cd26:	68fa      	ldr	r2, [r7, #12]
 801cd28:	4413      	add	r3, r2
 801cd2a:	781b      	ldrb	r3, [r3, #0]
 801cd2c:	b25a      	sxtb	r2, r3
 801cd2e:	7ff9      	ldrb	r1, [r7, #31]
 801cd30:	7d7b      	ldrb	r3, [r7, #21]
 801cd32:	fa01 f303 	lsl.w	r3, r1, r3
 801cd36:	b25b      	sxtb	r3, r3
 801cd38:	4313      	orrs	r3, r2
 801cd3a:	b259      	sxtb	r1, r3
 801cd3c:	7d3b      	ldrb	r3, [r7, #20]
 801cd3e:	68fa      	ldr	r2, [r7, #12]
 801cd40:	4413      	add	r3, r2
 801cd42:	b2ca      	uxtb	r2, r1
 801cd44:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 801cd46:	69bb      	ldr	r3, [r7, #24]
 801cd48:	3301      	adds	r3, #1
 801cd4a:	61bb      	str	r3, [r7, #24]
 801cd4c:	79fb      	ldrb	r3, [r7, #7]
 801cd4e:	00db      	lsls	r3, r3, #3
 801cd50:	69ba      	ldr	r2, [r7, #24]
 801cd52:	429a      	cmp	r2, r3
 801cd54:	dbb0      	blt.n	801ccb8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801cd56:	7ffb      	ldrb	r3, [r7, #31]
 801cd58:	01db      	lsls	r3, r3, #7
 801cd5a:	b25a      	sxtb	r2, r3
 801cd5c:	7ffb      	ldrb	r3, [r7, #31]
 801cd5e:	019b      	lsls	r3, r3, #6
 801cd60:	b25b      	sxtb	r3, r3
 801cd62:	4313      	orrs	r3, r2
 801cd64:	b25b      	sxtb	r3, r3
 801cd66:	7ffa      	ldrb	r2, [r7, #31]
 801cd68:	2a00      	cmp	r2, #0
 801cd6a:	d101      	bne.n	801cd70 <payload_integration+0x106>
 801cd6c:	2220      	movs	r2, #32
 801cd6e:	e000      	b.n	801cd72 <payload_integration+0x108>
 801cd70:	2200      	movs	r2, #0
 801cd72:	4313      	orrs	r3, r2
 801cd74:	b259      	sxtb	r1, r3
 801cd76:	79fb      	ldrb	r3, [r7, #7]
 801cd78:	68fa      	ldr	r2, [r7, #12]
 801cd7a:	4413      	add	r3, r2
 801cd7c:	b2ca      	uxtb	r2, r1
 801cd7e:	701a      	strb	r2, [r3, #0]
}
 801cd80:	bf00      	nop
 801cd82:	3724      	adds	r7, #36	; 0x24
 801cd84:	46bd      	mov	sp, r7
 801cd86:	bc80      	pop	{r7}
 801cd88:	4770      	bx	lr
	...

0801cd8c <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b08c      	sub	sp, #48	; 0x30
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	60b9      	str	r1, [r7, #8]
 801cd94:	607a      	str	r2, [r7, #4]
 801cd96:	603b      	str	r3, [r7, #0]
 801cd98:	4603      	mov	r3, r0
 801cd9a:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 801cda0:	2300      	movs	r3, #0
 801cda2:	61fb      	str	r3, [r7, #28]
 801cda4:	2300      	movs	r3, #0
 801cda6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801cda8:	f001 fcd5 	bl	801e756 <RFW_DeInit>

    if( rxContinuous != 0 )
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d001      	beq.n	801cdb6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	bf14      	ite	ne
 801cdbc:	2301      	movne	r3, #1
 801cdbe:	2300      	moveq	r3, #0
 801cdc0:	b2da      	uxtb	r2, r3
 801cdc2:	4b9f      	ldr	r3, [pc, #636]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cdc4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801cdc6:	7bfb      	ldrb	r3, [r7, #15]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d003      	beq.n	801cdd4 <RadioSetRxGenericConfig+0x48>
 801cdcc:	2b01      	cmp	r3, #1
 801cdce:	f000 80e8 	beq.w	801cfa2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801cdd2:	e1a0      	b.n	801d116 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801cdd4:	68bb      	ldr	r3, [r7, #8]
 801cdd6:	68db      	ldr	r3, [r3, #12]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d003      	beq.n	801cde4 <RadioSetRxGenericConfig+0x58>
 801cddc:	68bb      	ldr	r3, [r7, #8]
 801cdde:	691b      	ldr	r3, [r3, #16]
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d102      	bne.n	801cdea <RadioSetRxGenericConfig+0x5e>
            return -1;
 801cde4:	f04f 33ff 	mov.w	r3, #4294967295
 801cde8:	e196      	b.n	801d118 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 801cdea:	68bb      	ldr	r3, [r7, #8]
 801cdec:	7d5b      	ldrb	r3, [r3, #21]
 801cdee:	2b08      	cmp	r3, #8
 801cdf0:	d902      	bls.n	801cdf8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801cdf2:	f04f 33ff 	mov.w	r3, #4294967295
 801cdf6:	e18f      	b.n	801d118 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801cdf8:	2300      	movs	r3, #0
 801cdfa:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdfc:	e00d      	b.n	801ce1a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 801cdfe:	68bb      	ldr	r3, [r7, #8]
 801ce00:	699a      	ldr	r2, [r3, #24]
 801ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce04:	4413      	add	r3, r2
 801ce06:	7819      	ldrb	r1, [r3, #0]
 801ce08:	f107 021c 	add.w	r2, r7, #28
 801ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce0e:	4413      	add	r3, r2
 801ce10:	460a      	mov	r2, r1
 801ce12:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce16:	3301      	adds	r3, #1
 801ce18:	62bb      	str	r3, [r7, #40]	; 0x28
 801ce1a:	68bb      	ldr	r3, [r7, #8]
 801ce1c:	7d5b      	ldrb	r3, [r3, #21]
 801ce1e:	461a      	mov	r2, r3
 801ce20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ce22:	4293      	cmp	r3, r2
 801ce24:	dbeb      	blt.n	801cdfe <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801ce26:	68bb      	ldr	r3, [r7, #8]
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	bf14      	ite	ne
 801ce2e:	2301      	movne	r3, #1
 801ce30:	2300      	moveq	r3, #0
 801ce32:	b2db      	uxtb	r3, r3
 801ce34:	4618      	mov	r0, r3
 801ce36:	f000 fd6b 	bl	801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ce3a:	4b81      	ldr	r3, [pc, #516]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ce42:	68bb      	ldr	r3, [r7, #8]
 801ce44:	68db      	ldr	r3, [r3, #12]
 801ce46:	4a7e      	ldr	r2, [pc, #504]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce48:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801ce4a:	68bb      	ldr	r3, [r7, #8]
 801ce4c:	791a      	ldrb	r2, [r3, #4]
 801ce4e:	4b7c      	ldr	r3, [pc, #496]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801ce54:	68bb      	ldr	r3, [r7, #8]
 801ce56:	689b      	ldr	r3, [r3, #8]
 801ce58:	4618      	mov	r0, r3
 801ce5a:	f001 fbaf 	bl	801e5bc <SUBGRF_GetFskBandwidthRegValue>
 801ce5e:	4603      	mov	r3, r0
 801ce60:	461a      	mov	r2, r3
 801ce62:	4b77      	ldr	r3, [pc, #476]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ce68:	4b75      	ldr	r3, [pc, #468]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801ce6e:	68bb      	ldr	r3, [r7, #8]
 801ce70:	691b      	ldr	r3, [r3, #16]
 801ce72:	b29b      	uxth	r3, r3
 801ce74:	00db      	lsls	r3, r3, #3
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	4b71      	ldr	r3, [pc, #452]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce7a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801ce7c:	68bb      	ldr	r3, [r7, #8]
 801ce7e:	7d1a      	ldrb	r2, [r3, #20]
 801ce80:	4b6f      	ldr	r3, [pc, #444]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce82:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ce84:	68bb      	ldr	r3, [r7, #8]
 801ce86:	7d5b      	ldrb	r3, [r3, #21]
 801ce88:	00db      	lsls	r3, r3, #3
 801ce8a:	b2da      	uxtb	r2, r3
 801ce8c:	4b6c      	ldr	r3, [pc, #432]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce8e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801ce90:	68bb      	ldr	r3, [r7, #8]
 801ce92:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801ce96:	4b6a      	ldr	r3, [pc, #424]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ce98:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801ce9a:	68bb      	ldr	r3, [r7, #8]
 801ce9c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d105      	bne.n	801ceb0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801cea4:	68bb      	ldr	r3, [r7, #8]
 801cea6:	69db      	ldr	r3, [r3, #28]
 801cea8:	b2da      	uxtb	r2, r3
 801ceaa:	4b65      	ldr	r3, [pc, #404]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801ceac:	759a      	strb	r2, [r3, #22]
 801ceae:	e00b      	b.n	801cec8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801ceb0:	68bb      	ldr	r3, [r7, #8]
 801ceb2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ceb6:	2b02      	cmp	r3, #2
 801ceb8:	d103      	bne.n	801cec2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801ceba:	4b61      	ldr	r3, [pc, #388]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cebc:	22ff      	movs	r2, #255	; 0xff
 801cebe:	759a      	strb	r2, [r3, #22]
 801cec0:	e002      	b.n	801cec8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801cec2:	4b5f      	ldr	r3, [pc, #380]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cec4:	22ff      	movs	r2, #255	; 0xff
 801cec6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801cec8:	68bb      	ldr	r3, [r7, #8]
 801ceca:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801cece:	2b02      	cmp	r3, #2
 801ced0:	d004      	beq.n	801cedc <RadioSetRxGenericConfig+0x150>
 801ced2:	68bb      	ldr	r3, [r7, #8]
 801ced4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801ced8:	2b02      	cmp	r3, #2
 801ceda:	d12d      	bne.n	801cf38 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801cedc:	68bb      	ldr	r3, [r7, #8]
 801cede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cee2:	2bf1      	cmp	r3, #241	; 0xf1
 801cee4:	d00c      	beq.n	801cf00 <RadioSetRxGenericConfig+0x174>
 801cee6:	68bb      	ldr	r3, [r7, #8]
 801cee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801ceec:	2bf2      	cmp	r3, #242	; 0xf2
 801ceee:	d007      	beq.n	801cf00 <RadioSetRxGenericConfig+0x174>
 801cef0:	68bb      	ldr	r3, [r7, #8]
 801cef2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801cef6:	2b01      	cmp	r3, #1
 801cef8:	d002      	beq.n	801cf00 <RadioSetRxGenericConfig+0x174>
            return -1;
 801cefa:	f04f 33ff 	mov.w	r3, #4294967295
 801cefe:	e10b      	b.n	801d118 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 801cf00:	2300      	movs	r3, #0
 801cf02:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801cf08:	4b4e      	ldr	r3, [pc, #312]	; (801d044 <RadioSetRxGenericConfig+0x2b8>)
 801cf0a:	6819      	ldr	r1, [r3, #0]
 801cf0c:	f107 0310 	add.w	r3, r7, #16
 801cf10:	4a4d      	ldr	r2, [pc, #308]	; (801d048 <RadioSetRxGenericConfig+0x2bc>)
 801cf12:	4618      	mov	r0, r3
 801cf14:	f001 fc12 	bl	801e73c <RFW_Init>
 801cf18:	4603      	mov	r3, r0
 801cf1a:	2b00      	cmp	r3, #0
 801cf1c:	d002      	beq.n	801cf24 <RadioSetRxGenericConfig+0x198>
            return -1;
 801cf1e:	f04f 33ff 	mov.w	r3, #4294967295
 801cf22:	e0f9      	b.n	801d118 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801cf24:	4b46      	ldr	r3, [pc, #280]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf26:	2200      	movs	r2, #0
 801cf28:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801cf2a:	4b45      	ldr	r3, [pc, #276]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf2c:	2201      	movs	r2, #1
 801cf2e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801cf30:	4b43      	ldr	r3, [pc, #268]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf32:	2200      	movs	r2, #0
 801cf34:	755a      	strb	r2, [r3, #21]
        {
 801cf36:	e00e      	b.n	801cf56 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801cf38:	68bb      	ldr	r3, [r7, #8]
 801cf3a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801cf3e:	4b40      	ldr	r3, [pc, #256]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf40:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801cf42:	68bb      	ldr	r3, [r7, #8]
 801cf44:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801cf48:	4b3d      	ldr	r3, [pc, #244]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf4a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801cf4c:	68bb      	ldr	r3, [r7, #8]
 801cf4e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801cf52:	4b3b      	ldr	r3, [pc, #236]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf54:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801cf56:	f7ff fa92 	bl	801c47e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801cf5a:	2000      	movs	r0, #0
 801cf5c:	f7fe fc24 	bl	801b7a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801cf60:	483a      	ldr	r0, [pc, #232]	; (801d04c <RadioSetRxGenericConfig+0x2c0>)
 801cf62:	f000 ff07 	bl	801dd74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801cf66:	483a      	ldr	r0, [pc, #232]	; (801d050 <RadioSetRxGenericConfig+0x2c4>)
 801cf68:	f000 ffd6 	bl	801df18 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801cf6c:	f107 031c 	add.w	r3, r7, #28
 801cf70:	4618      	mov	r0, r3
 801cf72:	f000 fb06 	bl	801d582 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801cf76:	68bb      	ldr	r3, [r7, #8]
 801cf78:	8c1b      	ldrh	r3, [r3, #32]
 801cf7a:	4618      	mov	r0, r3
 801cf7c:	f000 fb50 	bl	801d620 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801cf80:	68bb      	ldr	r3, [r7, #8]
 801cf82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801cf84:	4618      	mov	r0, r3
 801cf86:	f000 fb2b 	bl	801d5e0 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801cf8a:	683b      	ldr	r3, [r7, #0]
 801cf8c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801cf90:	fb03 f202 	mul.w	r2, r3, r2
 801cf94:	68bb      	ldr	r3, [r7, #8]
 801cf96:	68db      	ldr	r3, [r3, #12]
 801cf98:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf9c:	4a28      	ldr	r2, [pc, #160]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cf9e:	6093      	str	r3, [r2, #8]
        break;
 801cfa0:	e0b9      	b.n	801d116 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 801cfa2:	68bb      	ldr	r3, [r7, #8]
 801cfa4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 801cfa6:	2b00      	cmp	r3, #0
 801cfa8:	d102      	bne.n	801cfb0 <RadioSetRxGenericConfig+0x224>
            return -1;
 801cfaa:	f04f 33ff 	mov.w	r3, #4294967295
 801cfae:	e0b3      	b.n	801d118 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801cfb0:	68bb      	ldr	r3, [r7, #8]
 801cfb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801cfb6:	2b01      	cmp	r3, #1
 801cfb8:	d104      	bne.n	801cfc4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801cfba:	68bb      	ldr	r3, [r7, #8]
 801cfbc:	69db      	ldr	r3, [r3, #28]
 801cfbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801cfc2:	e002      	b.n	801cfca <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 801cfc4:	23ff      	movs	r3, #255	; 0xff
 801cfc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801cfca:	68bb      	ldr	r3, [r7, #8]
 801cfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	bf14      	ite	ne
 801cfd2:	2301      	movne	r3, #1
 801cfd4:	2300      	moveq	r3, #0
 801cfd6:	b2db      	uxtb	r3, r3
 801cfd8:	4618      	mov	r0, r3
 801cfda:	f000 fc99 	bl	801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	b2db      	uxtb	r3, r3
 801cfe2:	4618      	mov	r0, r3
 801cfe4:	f000 fca3 	bl	801d92e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801cfe8:	4b15      	ldr	r3, [pc, #84]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cfea:	2201      	movs	r2, #1
 801cfec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801cff0:	68bb      	ldr	r3, [r7, #8]
 801cff2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801cff6:	4b12      	ldr	r3, [pc, #72]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801cff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801cffc:	68bb      	ldr	r3, [r7, #8]
 801cffe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801d002:	4b0f      	ldr	r3, [pc, #60]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801d004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d008:	68bb      	ldr	r3, [r7, #8]
 801d00a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801d00e:	4b0c      	ldr	r3, [pc, #48]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801d010:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801d01a:	2b02      	cmp	r3, #2
 801d01c:	d01a      	beq.n	801d054 <RadioSetRxGenericConfig+0x2c8>
 801d01e:	2b02      	cmp	r3, #2
 801d020:	dc2c      	bgt.n	801d07c <RadioSetRxGenericConfig+0x2f0>
 801d022:	2b00      	cmp	r3, #0
 801d024:	d002      	beq.n	801d02c <RadioSetRxGenericConfig+0x2a0>
 801d026:	2b01      	cmp	r3, #1
 801d028:	d005      	beq.n	801d036 <RadioSetRxGenericConfig+0x2aa>
            break;
 801d02a:	e027      	b.n	801d07c <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d02c:	4b04      	ldr	r3, [pc, #16]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801d02e:	2200      	movs	r2, #0
 801d030:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d034:	e023      	b.n	801d07e <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d036:	4b02      	ldr	r3, [pc, #8]	; (801d040 <RadioSetRxGenericConfig+0x2b4>)
 801d038:	2201      	movs	r2, #1
 801d03a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d03e:	e01e      	b.n	801d07e <RadioSetRxGenericConfig+0x2f2>
 801d040:	20004158 	.word	0x20004158
 801d044:	20004154 	.word	0x20004154
 801d048:	200041c8 	.word	0x200041c8
 801d04c:	20004190 	.word	0x20004190
 801d050:	20004166 	.word	0x20004166
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d054:	68bb      	ldr	r3, [r7, #8]
 801d056:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d05a:	2b0b      	cmp	r3, #11
 801d05c:	d004      	beq.n	801d068 <RadioSetRxGenericConfig+0x2dc>
 801d05e:	68bb      	ldr	r3, [r7, #8]
 801d060:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d064:	2b0c      	cmp	r3, #12
 801d066:	d104      	bne.n	801d072 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d068:	4b2d      	ldr	r3, [pc, #180]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d06a:	2201      	movs	r2, #1
 801d06c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d070:	e005      	b.n	801d07e <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d072:	4b2b      	ldr	r3, [pc, #172]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d074:	2200      	movs	r2, #0
 801d076:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d07a:	e000      	b.n	801d07e <RadioSetRxGenericConfig+0x2f2>
            break;
 801d07c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d07e:	4b28      	ldr	r3, [pc, #160]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d080:	2201      	movs	r2, #1
 801d082:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d084:	68bb      	ldr	r3, [r7, #8]
 801d086:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 801d088:	4b25      	ldr	r3, [pc, #148]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d08a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d08c:	68bb      	ldr	r3, [r7, #8]
 801d08e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 801d092:	4b23      	ldr	r3, [pc, #140]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d094:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801d096:	4a22      	ldr	r2, [pc, #136]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801d09c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d09e:	68bb      	ldr	r3, [r7, #8]
 801d0a0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801d0a4:	4b1e      	ldr	r3, [pc, #120]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d0a6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d0aa:	68bb      	ldr	r3, [r7, #8]
 801d0ac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801d0b0:	4b1b      	ldr	r3, [pc, #108]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d0b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d0b6:	f7ff f9e2 	bl	801c47e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d0ba:	2001      	movs	r0, #1
 801d0bc:	f7fe fb74 	bl	801b7a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d0c0:	4818      	ldr	r0, [pc, #96]	; (801d124 <RadioSetRxGenericConfig+0x398>)
 801d0c2:	f000 fe57 	bl	801dd74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d0c6:	4818      	ldr	r0, [pc, #96]	; (801d128 <RadioSetRxGenericConfig+0x39c>)
 801d0c8:	f000 ff26 	bl	801df18 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801d0cc:	4b14      	ldr	r3, [pc, #80]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d0ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801d0d2:	2b01      	cmp	r3, #1
 801d0d4:	d10d      	bne.n	801d0f2 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 801d0d6:	f240 7036 	movw	r0, #1846	; 0x736
 801d0da:	f001 f879 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d0de:	4603      	mov	r3, r0
 801d0e0:	f023 0304 	bic.w	r3, r3, #4
 801d0e4:	b2db      	uxtb	r3, r3
 801d0e6:	4619      	mov	r1, r3
 801d0e8:	f240 7036 	movw	r0, #1846	; 0x736
 801d0ec:	f001 f85c 	bl	801e1a8 <SUBGRF_WriteRegister>
 801d0f0:	e00c      	b.n	801d10c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 801d0f2:	f240 7036 	movw	r0, #1846	; 0x736
 801d0f6:	f001 f86b 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	f043 0304 	orr.w	r3, r3, #4
 801d100:	b2db      	uxtb	r3, r3
 801d102:	4619      	mov	r1, r3
 801d104:	f240 7036 	movw	r0, #1846	; 0x736
 801d108:	f001 f84e 	bl	801e1a8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801d10c:	4b04      	ldr	r3, [pc, #16]	; (801d120 <RadioSetRxGenericConfig+0x394>)
 801d10e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d112:	609a      	str	r2, [r3, #8]
        break;
 801d114:	bf00      	nop
    }
    return status;
 801d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d118:	4618      	mov	r0, r3
 801d11a:	3730      	adds	r7, #48	; 0x30
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}
 801d120:	20004158 	.word	0x20004158
 801d124:	20004190 	.word	0x20004190
 801d128:	20004166 	.word	0x20004166

0801d12c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801d12c:	b580      	push	{r7, lr}
 801d12e:	b08a      	sub	sp, #40	; 0x28
 801d130:	af00      	add	r7, sp, #0
 801d132:	60b9      	str	r1, [r7, #8]
 801d134:	607b      	str	r3, [r7, #4]
 801d136:	4603      	mov	r3, r0
 801d138:	73fb      	strb	r3, [r7, #15]
 801d13a:	4613      	mov	r3, r2
 801d13c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 801d13e:	2300      	movs	r3, #0
 801d140:	61fb      	str	r3, [r7, #28]
 801d142:	2300      	movs	r3, #0
 801d144:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801d146:	f001 fb06 	bl	801e756 <RFW_DeInit>
    switch( modem )
 801d14a:	7bfb      	ldrb	r3, [r7, #15]
 801d14c:	2b02      	cmp	r3, #2
 801d14e:	f000 8144 	beq.w	801d3da <RadioSetTxGenericConfig+0x2ae>
 801d152:	2b02      	cmp	r3, #2
 801d154:	f300 8160 	bgt.w	801d418 <RadioSetTxGenericConfig+0x2ec>
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d003      	beq.n	801d164 <RadioSetTxGenericConfig+0x38>
 801d15c:	2b01      	cmp	r3, #1
 801d15e:	f000 80b7 	beq.w	801d2d0 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 801d162:	e159      	b.n	801d418 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801d164:	68bb      	ldr	r3, [r7, #8]
 801d166:	689b      	ldr	r3, [r3, #8]
 801d168:	2b00      	cmp	r3, #0
 801d16a:	d003      	beq.n	801d174 <RadioSetTxGenericConfig+0x48>
 801d16c:	68bb      	ldr	r3, [r7, #8]
 801d16e:	691b      	ldr	r3, [r3, #16]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d102      	bne.n	801d17a <RadioSetTxGenericConfig+0x4e>
            return -1;
 801d174:	f04f 33ff 	mov.w	r3, #4294967295
 801d178:	e163      	b.n	801d442 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 801d17a:	68bb      	ldr	r3, [r7, #8]
 801d17c:	7d1b      	ldrb	r3, [r3, #20]
 801d17e:	2b08      	cmp	r3, #8
 801d180:	d902      	bls.n	801d188 <RadioSetTxGenericConfig+0x5c>
            return -1;
 801d182:	f04f 33ff 	mov.w	r3, #4294967295
 801d186:	e15c      	b.n	801d442 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801d188:	2300      	movs	r3, #0
 801d18a:	627b      	str	r3, [r7, #36]	; 0x24
 801d18c:	e00d      	b.n	801d1aa <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 801d18e:	68bb      	ldr	r3, [r7, #8]
 801d190:	699a      	ldr	r2, [r3, #24]
 801d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d194:	4413      	add	r3, r2
 801d196:	7819      	ldrb	r1, [r3, #0]
 801d198:	f107 021c 	add.w	r2, r7, #28
 801d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d19e:	4413      	add	r3, r2
 801d1a0:	460a      	mov	r2, r1
 801d1a2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 801d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1a6:	3301      	adds	r3, #1
 801d1a8:	627b      	str	r3, [r7, #36]	; 0x24
 801d1aa:	68bb      	ldr	r3, [r7, #8]
 801d1ac:	7d1b      	ldrb	r3, [r3, #20]
 801d1ae:	461a      	mov	r2, r3
 801d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1b2:	4293      	cmp	r3, r2
 801d1b4:	dbeb      	blt.n	801d18e <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801d1b6:	4ba5      	ldr	r3, [pc, #660]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801d1be:	68bb      	ldr	r3, [r7, #8]
 801d1c0:	689b      	ldr	r3, [r3, #8]
 801d1c2:	4aa2      	ldr	r2, [pc, #648]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1c4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801d1c6:	68bb      	ldr	r3, [r7, #8]
 801d1c8:	781a      	ldrb	r2, [r3, #0]
 801d1ca:	4ba0      	ldr	r3, [pc, #640]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801d1d0:	68bb      	ldr	r3, [r7, #8]
 801d1d2:	685b      	ldr	r3, [r3, #4]
 801d1d4:	4618      	mov	r0, r3
 801d1d6:	f001 f9f1 	bl	801e5bc <SUBGRF_GetFskBandwidthRegValue>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	461a      	mov	r2, r3
 801d1de:	4b9b      	ldr	r3, [pc, #620]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801d1e4:	68bb      	ldr	r3, [r7, #8]
 801d1e6:	68db      	ldr	r3, [r3, #12]
 801d1e8:	4a98      	ldr	r2, [pc, #608]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1ea:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801d1ec:	4b97      	ldr	r3, [pc, #604]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1ee:	2200      	movs	r2, #0
 801d1f0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801d1f2:	68bb      	ldr	r3, [r7, #8]
 801d1f4:	691b      	ldr	r3, [r3, #16]
 801d1f6:	b29b      	uxth	r3, r3
 801d1f8:	00db      	lsls	r3, r3, #3
 801d1fa:	b29a      	uxth	r2, r3
 801d1fc:	4b93      	ldr	r3, [pc, #588]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d1fe:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801d200:	4b92      	ldr	r3, [pc, #584]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d202:	2204      	movs	r2, #4
 801d204:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801d206:	68bb      	ldr	r3, [r7, #8]
 801d208:	7d1b      	ldrb	r3, [r3, #20]
 801d20a:	00db      	lsls	r3, r3, #3
 801d20c:	b2da      	uxtb	r2, r3
 801d20e:	4b8f      	ldr	r3, [pc, #572]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d210:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801d212:	4b8e      	ldr	r3, [pc, #568]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d214:	2200      	movs	r2, #0
 801d216:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801d218:	68bb      	ldr	r3, [r7, #8]
 801d21a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801d21e:	2b02      	cmp	r3, #2
 801d220:	d003      	beq.n	801d22a <RadioSetTxGenericConfig+0xfe>
 801d222:	68bb      	ldr	r3, [r7, #8]
 801d224:	7f9b      	ldrb	r3, [r3, #30]
 801d226:	2b02      	cmp	r3, #2
 801d228:	d12a      	bne.n	801d280 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801d22a:	68bb      	ldr	r3, [r7, #8]
 801d22c:	7fdb      	ldrb	r3, [r3, #31]
 801d22e:	2bf1      	cmp	r3, #241	; 0xf1
 801d230:	d00a      	beq.n	801d248 <RadioSetTxGenericConfig+0x11c>
 801d232:	68bb      	ldr	r3, [r7, #8]
 801d234:	7fdb      	ldrb	r3, [r3, #31]
 801d236:	2bf2      	cmp	r3, #242	; 0xf2
 801d238:	d006      	beq.n	801d248 <RadioSetTxGenericConfig+0x11c>
 801d23a:	68bb      	ldr	r3, [r7, #8]
 801d23c:	7fdb      	ldrb	r3, [r3, #31]
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d002      	beq.n	801d248 <RadioSetTxGenericConfig+0x11c>
                return -1;
 801d242:	f04f 33ff 	mov.w	r3, #4294967295
 801d246:	e0fc      	b.n	801d442 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 801d248:	2301      	movs	r3, #1
 801d24a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 801d24c:	68bb      	ldr	r3, [r7, #8]
 801d24e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801d250:	4b7f      	ldr	r3, [pc, #508]	; (801d450 <RadioSetTxGenericConfig+0x324>)
 801d252:	6819      	ldr	r1, [r3, #0]
 801d254:	f107 0310 	add.w	r3, r7, #16
 801d258:	4a7e      	ldr	r2, [pc, #504]	; (801d454 <RadioSetTxGenericConfig+0x328>)
 801d25a:	4618      	mov	r0, r3
 801d25c:	f001 fa6e 	bl	801e73c <RFW_Init>
 801d260:	4603      	mov	r3, r0
 801d262:	2b00      	cmp	r3, #0
 801d264:	d002      	beq.n	801d26c <RadioSetTxGenericConfig+0x140>
              return -1;
 801d266:	f04f 33ff 	mov.w	r3, #4294967295
 801d26a:	e0ea      	b.n	801d442 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801d26c:	4b77      	ldr	r3, [pc, #476]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d26e:	2200      	movs	r2, #0
 801d270:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801d272:	4b76      	ldr	r3, [pc, #472]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d274:	2201      	movs	r2, #1
 801d276:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801d278:	4b74      	ldr	r3, [pc, #464]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d27a:	2200      	movs	r2, #0
 801d27c:	755a      	strb	r2, [r3, #21]
        {
 801d27e:	e00c      	b.n	801d29a <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801d280:	68bb      	ldr	r3, [r7, #8]
 801d282:	7fda      	ldrb	r2, [r3, #31]
 801d284:	4b71      	ldr	r3, [pc, #452]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d286:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801d288:	68bb      	ldr	r3, [r7, #8]
 801d28a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801d28e:	4b6f      	ldr	r3, [pc, #444]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d290:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801d292:	68bb      	ldr	r3, [r7, #8]
 801d294:	7f9a      	ldrb	r2, [r3, #30]
 801d296:	4b6d      	ldr	r3, [pc, #436]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d298:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801d29a:	f7ff f8f0 	bl	801c47e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801d29e:	2000      	movs	r0, #0
 801d2a0:	f7fe fa82 	bl	801b7a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d2a4:	486c      	ldr	r0, [pc, #432]	; (801d458 <RadioSetTxGenericConfig+0x32c>)
 801d2a6:	f000 fd65 	bl	801dd74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d2aa:	486c      	ldr	r0, [pc, #432]	; (801d45c <RadioSetTxGenericConfig+0x330>)
 801d2ac:	f000 fe34 	bl	801df18 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801d2b0:	f107 031c 	add.w	r3, r7, #28
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f000 f964 	bl	801d582 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801d2ba:	68bb      	ldr	r3, [r7, #8]
 801d2bc:	8b9b      	ldrh	r3, [r3, #28]
 801d2be:	4618      	mov	r0, r3
 801d2c0:	f000 f9ae 	bl	801d620 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801d2c4:	68bb      	ldr	r3, [r7, #8]
 801d2c6:	8c1b      	ldrh	r3, [r3, #32]
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	f000 f989 	bl	801d5e0 <SUBGRF_SetCrcPolynomial>
        break;
 801d2ce:	e0a4      	b.n	801d41a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801d2d0:	4b5e      	ldr	r3, [pc, #376]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d2d2:	2201      	movs	r2, #1
 801d2d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801d2d8:	68bb      	ldr	r3, [r7, #8]
 801d2da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 801d2de:	4b5b      	ldr	r3, [pc, #364]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d2e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801d2e4:	68bb      	ldr	r3, [r7, #8]
 801d2e6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 801d2ea:	4b58      	ldr	r3, [pc, #352]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d2ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801d2f0:	68bb      	ldr	r3, [r7, #8]
 801d2f2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801d2f6:	4b55      	ldr	r3, [pc, #340]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d2f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801d2fc:	68bb      	ldr	r3, [r7, #8]
 801d2fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801d302:	2b02      	cmp	r3, #2
 801d304:	d010      	beq.n	801d328 <RadioSetTxGenericConfig+0x1fc>
 801d306:	2b02      	cmp	r3, #2
 801d308:	dc22      	bgt.n	801d350 <RadioSetTxGenericConfig+0x224>
 801d30a:	2b00      	cmp	r3, #0
 801d30c:	d002      	beq.n	801d314 <RadioSetTxGenericConfig+0x1e8>
 801d30e:	2b01      	cmp	r3, #1
 801d310:	d005      	beq.n	801d31e <RadioSetTxGenericConfig+0x1f2>
            break;
 801d312:	e01d      	b.n	801d350 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d314:	4b4d      	ldr	r3, [pc, #308]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d316:	2200      	movs	r2, #0
 801d318:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d31c:	e019      	b.n	801d352 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d31e:	4b4b      	ldr	r3, [pc, #300]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d320:	2201      	movs	r2, #1
 801d322:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d326:	e014      	b.n	801d352 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801d328:	68bb      	ldr	r3, [r7, #8]
 801d32a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d32e:	2b0b      	cmp	r3, #11
 801d330:	d004      	beq.n	801d33c <RadioSetTxGenericConfig+0x210>
 801d332:	68bb      	ldr	r3, [r7, #8]
 801d334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801d338:	2b0c      	cmp	r3, #12
 801d33a:	d104      	bne.n	801d346 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801d33c:	4b43      	ldr	r3, [pc, #268]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d33e:	2201      	movs	r2, #1
 801d340:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d344:	e005      	b.n	801d352 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801d346:	4b41      	ldr	r3, [pc, #260]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d348:	2200      	movs	r2, #0
 801d34a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801d34e:	e000      	b.n	801d352 <RadioSetTxGenericConfig+0x226>
            break;
 801d350:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801d352:	4b3e      	ldr	r3, [pc, #248]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d354:	2201      	movs	r2, #1
 801d356:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801d358:	68bb      	ldr	r3, [r7, #8]
 801d35a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801d35c:	4b3b      	ldr	r3, [pc, #236]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d35e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801d366:	4b39      	ldr	r3, [pc, #228]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d368:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801d36a:	68bb      	ldr	r3, [r7, #8]
 801d36c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801d370:	4b36      	ldr	r3, [pc, #216]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d372:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801d376:	68bb      	ldr	r3, [r7, #8]
 801d378:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801d37c:	4b33      	ldr	r3, [pc, #204]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d37e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801d382:	f7ff f87c 	bl	801c47e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801d386:	2001      	movs	r0, #1
 801d388:	f7fe fa0e 	bl	801b7a8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d38c:	4832      	ldr	r0, [pc, #200]	; (801d458 <RadioSetTxGenericConfig+0x32c>)
 801d38e:	f000 fcf1 	bl	801dd74 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801d392:	4832      	ldr	r0, [pc, #200]	; (801d45c <RadioSetTxGenericConfig+0x330>)
 801d394:	f000 fdc0 	bl	801df18 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801d398:	4b2c      	ldr	r3, [pc, #176]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d39a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801d39e:	2b06      	cmp	r3, #6
 801d3a0:	d10d      	bne.n	801d3be <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 801d3a2:	f640 0089 	movw	r0, #2185	; 0x889
 801d3a6:	f000 ff13 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	f023 0304 	bic.w	r3, r3, #4
 801d3b0:	b2db      	uxtb	r3, r3
 801d3b2:	4619      	mov	r1, r3
 801d3b4:	f640 0089 	movw	r0, #2185	; 0x889
 801d3b8:	f000 fef6 	bl	801e1a8 <SUBGRF_WriteRegister>
        break;
 801d3bc:	e02d      	b.n	801d41a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 801d3be:	f640 0089 	movw	r0, #2185	; 0x889
 801d3c2:	f000 ff05 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d3c6:	4603      	mov	r3, r0
 801d3c8:	f043 0304 	orr.w	r3, r3, #4
 801d3cc:	b2db      	uxtb	r3, r3
 801d3ce:	4619      	mov	r1, r3
 801d3d0:	f640 0089 	movw	r0, #2185	; 0x889
 801d3d4:	f000 fee8 	bl	801e1a8 <SUBGRF_WriteRegister>
        break;
 801d3d8:	e01f      	b.n	801d41a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801d3da:	68bb      	ldr	r3, [r7, #8]
 801d3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d004      	beq.n	801d3ec <RadioSetTxGenericConfig+0x2c0>
 801d3e2:	68bb      	ldr	r3, [r7, #8]
 801d3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d3e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d3ea:	d902      	bls.n	801d3f2 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 801d3ec:	f04f 33ff 	mov.w	r3, #4294967295
 801d3f0:	e027      	b.n	801d442 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 801d3f2:	2002      	movs	r0, #2
 801d3f4:	f7fe f9d8 	bl	801b7a8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801d3f8:	4b14      	ldr	r3, [pc, #80]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d3fa:	2202      	movs	r2, #2
 801d3fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801d400:	68bb      	ldr	r3, [r7, #8]
 801d402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d404:	4a11      	ldr	r2, [pc, #68]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d406:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801d408:	4b10      	ldr	r3, [pc, #64]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d40a:	2216      	movs	r2, #22
 801d40c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801d410:	4811      	ldr	r0, [pc, #68]	; (801d458 <RadioSetTxGenericConfig+0x32c>)
 801d412:	f000 fcaf 	bl	801dd74 <SUBGRF_SetModulationParams>
        break;
 801d416:	e000      	b.n	801d41a <RadioSetTxGenericConfig+0x2ee>
        break;
 801d418:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801d41a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d41e:	4618      	mov	r0, r3
 801d420:	f000 ffde 	bl	801e3e0 <SUBGRF_SetRfTxPower>
 801d424:	4603      	mov	r3, r0
 801d426:	461a      	mov	r2, r3
 801d428:	4b08      	ldr	r3, [pc, #32]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d42a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801d42e:	4b07      	ldr	r3, [pc, #28]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d430:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801d434:	4618      	mov	r0, r3
 801d436:	f001 f9a2 	bl	801e77e <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801d43a:	4a04      	ldr	r2, [pc, #16]	; (801d44c <RadioSetTxGenericConfig+0x320>)
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	6053      	str	r3, [r2, #4]
    return 0;
 801d440:	2300      	movs	r3, #0
}
 801d442:	4618      	mov	r0, r3
 801d444:	3728      	adds	r7, #40	; 0x28
 801d446:	46bd      	mov	sp, r7
 801d448:	bd80      	pop	{r7, pc}
 801d44a:	bf00      	nop
 801d44c:	20004158 	.word	0x20004158
 801d450:	20004154 	.word	0x20004154
 801d454:	200041b0 	.word	0x200041b0
 801d458:	20004190 	.word	0x20004190
 801d45c:	20004166 	.word	0x20004166

0801d460 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b084      	sub	sp, #16
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d002      	beq.n	801d474 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801d46e:	4a1a      	ldr	r2, [pc, #104]	; (801d4d8 <SUBGRF_Init+0x78>)
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801d474:	f7e4 f882 	bl	800157c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d478:	2002      	movs	r0, #2
 801d47a:	f001 f87d 	bl	801e578 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801d47e:	4b17      	ldr	r3, [pc, #92]	; (801d4dc <SUBGRF_Init+0x7c>)
 801d480:	2200      	movs	r2, #0
 801d482:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801d484:	2000      	movs	r0, #0
 801d486:	f000 f977 	bl	801d778 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801d48a:	f7ee ff76 	bl	800c37a <RBI_IsTCXO>
 801d48e:	4603      	mov	r3, r0
 801d490:	2b01      	cmp	r3, #1
 801d492:	d10e      	bne.n	801d4b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801d494:	2140      	movs	r1, #64	; 0x40
 801d496:	2001      	movs	r0, #1
 801d498:	f000 fb78 	bl	801db8c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801d49c:	2100      	movs	r1, #0
 801d49e:	f640 1011 	movw	r0, #2321	; 0x911
 801d4a2:	f000 fe81 	bl	801e1a8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801d4a6:	237f      	movs	r3, #127	; 0x7f
 801d4a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801d4aa:	7b38      	ldrb	r0, [r7, #12]
 801d4ac:	f000 fa85 	bl	801d9ba <SUBGRF_Calibrate>
 801d4b0:	e009      	b.n	801d4c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d4b2:	2120      	movs	r1, #32
 801d4b4:	f640 1011 	movw	r0, #2321	; 0x911
 801d4b8:	f000 fe76 	bl	801e1a8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801d4bc:	2120      	movs	r1, #32
 801d4be:	f640 1012 	movw	r0, #2322	; 0x912
 801d4c2:	f000 fe71 	bl	801e1a8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801d4c6:	f7ee ff3c 	bl	800c342 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801d4ca:	4b05      	ldr	r3, [pc, #20]	; (801d4e0 <SUBGRF_Init+0x80>)
 801d4cc:	2201      	movs	r2, #1
 801d4ce:	701a      	strb	r2, [r3, #0]
}
 801d4d0:	bf00      	nop
 801d4d2:	3710      	adds	r7, #16
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}
 801d4d8:	200041ec 	.word	0x200041ec
 801d4dc:	200041e8 	.word	0x200041e8
 801d4e0:	200041e0 	.word	0x200041e0

0801d4e4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801d4e4:	b480      	push	{r7}
 801d4e6:	af00      	add	r7, sp, #0
    return OperatingMode;
 801d4e8:	4b02      	ldr	r3, [pc, #8]	; (801d4f4 <SUBGRF_GetOperatingMode+0x10>)
 801d4ea:	781b      	ldrb	r3, [r3, #0]
}
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	bc80      	pop	{r7}
 801d4f2:	4770      	bx	lr
 801d4f4:	200041e0 	.word	0x200041e0

0801d4f8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801d4f8:	b580      	push	{r7, lr}
 801d4fa:	b082      	sub	sp, #8
 801d4fc:	af00      	add	r7, sp, #0
 801d4fe:	6078      	str	r0, [r7, #4]
 801d500:	460b      	mov	r3, r1
 801d502:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801d504:	78fb      	ldrb	r3, [r7, #3]
 801d506:	461a      	mov	r2, r3
 801d508:	6879      	ldr	r1, [r7, #4]
 801d50a:	2000      	movs	r0, #0
 801d50c:	f000 feb8 	bl	801e280 <SUBGRF_WriteBuffer>
}
 801d510:	bf00      	nop
 801d512:	3708      	adds	r7, #8
 801d514:	46bd      	mov	sp, r7
 801d516:	bd80      	pop	{r7, pc}

0801d518 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801d518:	b580      	push	{r7, lr}
 801d51a:	b086      	sub	sp, #24
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	60f8      	str	r0, [r7, #12]
 801d520:	60b9      	str	r1, [r7, #8]
 801d522:	4613      	mov	r3, r2
 801d524:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801d526:	2300      	movs	r3, #0
 801d528:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801d52a:	f107 0317 	add.w	r3, r7, #23
 801d52e:	4619      	mov	r1, r3
 801d530:	68b8      	ldr	r0, [r7, #8]
 801d532:	f000 fdbb 	bl	801e0ac <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801d536:	68bb      	ldr	r3, [r7, #8]
 801d538:	781b      	ldrb	r3, [r3, #0]
 801d53a:	79fa      	ldrb	r2, [r7, #7]
 801d53c:	429a      	cmp	r2, r3
 801d53e:	d201      	bcs.n	801d544 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801d540:	2301      	movs	r3, #1
 801d542:	e007      	b.n	801d554 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801d544:	7df8      	ldrb	r0, [r7, #23]
 801d546:	68bb      	ldr	r3, [r7, #8]
 801d548:	781b      	ldrb	r3, [r3, #0]
 801d54a:	461a      	mov	r2, r3
 801d54c:	68f9      	ldr	r1, [r7, #12]
 801d54e:	f000 feb9 	bl	801e2c4 <SUBGRF_ReadBuffer>

    return 0;
 801d552:	2300      	movs	r3, #0
}
 801d554:	4618      	mov	r0, r3
 801d556:	3718      	adds	r7, #24
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}

0801d55c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	b084      	sub	sp, #16
 801d560:	af00      	add	r7, sp, #0
 801d562:	60f8      	str	r0, [r7, #12]
 801d564:	460b      	mov	r3, r1
 801d566:	607a      	str	r2, [r7, #4]
 801d568:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801d56a:	7afb      	ldrb	r3, [r7, #11]
 801d56c:	4619      	mov	r1, r3
 801d56e:	68f8      	ldr	r0, [r7, #12]
 801d570:	f7ff ffc2 	bl	801d4f8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801d574:	6878      	ldr	r0, [r7, #4]
 801d576:	f000 f91b 	bl	801d7b0 <SUBGRF_SetTx>
}
 801d57a:	bf00      	nop
 801d57c:	3710      	adds	r7, #16
 801d57e:	46bd      	mov	sp, r7
 801d580:	bd80      	pop	{r7, pc}

0801d582 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801d582:	b580      	push	{r7, lr}
 801d584:	b082      	sub	sp, #8
 801d586:	af00      	add	r7, sp, #0
 801d588:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801d58a:	2208      	movs	r2, #8
 801d58c:	6879      	ldr	r1, [r7, #4]
 801d58e:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801d592:	f000 fe31 	bl	801e1f8 <SUBGRF_WriteRegisters>
    return 0;
 801d596:	2300      	movs	r3, #0
}
 801d598:	4618      	mov	r0, r3
 801d59a:	3708      	adds	r7, #8
 801d59c:	46bd      	mov	sp, r7
 801d59e:	bd80      	pop	{r7, pc}

0801d5a0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801d5a0:	b580      	push	{r7, lr}
 801d5a2:	b084      	sub	sp, #16
 801d5a4:	af00      	add	r7, sp, #0
 801d5a6:	4603      	mov	r3, r0
 801d5a8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801d5aa:	88fb      	ldrh	r3, [r7, #6]
 801d5ac:	0a1b      	lsrs	r3, r3, #8
 801d5ae:	b29b      	uxth	r3, r3
 801d5b0:	b2db      	uxtb	r3, r3
 801d5b2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801d5b4:	88fb      	ldrh	r3, [r7, #6]
 801d5b6:	b2db      	uxtb	r3, r3
 801d5b8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d5ba:	f000 fb6b 	bl	801dc94 <SUBGRF_GetPacketType>
 801d5be:	4603      	mov	r3, r0
 801d5c0:	2b00      	cmp	r3, #0
 801d5c2:	d108      	bne.n	801d5d6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801d5c4:	f107 030c 	add.w	r3, r7, #12
 801d5c8:	2202      	movs	r2, #2
 801d5ca:	4619      	mov	r1, r3
 801d5cc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801d5d0:	f000 fe12 	bl	801e1f8 <SUBGRF_WriteRegisters>
            break;
 801d5d4:	e000      	b.n	801d5d8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801d5d6:	bf00      	nop
    }
}
 801d5d8:	bf00      	nop
 801d5da:	3710      	adds	r7, #16
 801d5dc:	46bd      	mov	sp, r7
 801d5de:	bd80      	pop	{r7, pc}

0801d5e0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b084      	sub	sp, #16
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	4603      	mov	r3, r0
 801d5e8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801d5ea:	88fb      	ldrh	r3, [r7, #6]
 801d5ec:	0a1b      	lsrs	r3, r3, #8
 801d5ee:	b29b      	uxth	r3, r3
 801d5f0:	b2db      	uxtb	r3, r3
 801d5f2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801d5f4:	88fb      	ldrh	r3, [r7, #6]
 801d5f6:	b2db      	uxtb	r3, r3
 801d5f8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801d5fa:	f000 fb4b 	bl	801dc94 <SUBGRF_GetPacketType>
 801d5fe:	4603      	mov	r3, r0
 801d600:	2b00      	cmp	r3, #0
 801d602:	d108      	bne.n	801d616 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801d604:	f107 030c 	add.w	r3, r7, #12
 801d608:	2202      	movs	r2, #2
 801d60a:	4619      	mov	r1, r3
 801d60c:	f240 60be 	movw	r0, #1726	; 0x6be
 801d610:	f000 fdf2 	bl	801e1f8 <SUBGRF_WriteRegisters>
            break;
 801d614:	e000      	b.n	801d618 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801d616:	bf00      	nop
    }
}
 801d618:	bf00      	nop
 801d61a:	3710      	adds	r7, #16
 801d61c:	46bd      	mov	sp, r7
 801d61e:	bd80      	pop	{r7, pc}

0801d620 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b084      	sub	sp, #16
 801d624:	af00      	add	r7, sp, #0
 801d626:	4603      	mov	r3, r0
 801d628:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801d62a:	2300      	movs	r3, #0
 801d62c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801d62e:	f000 fb31 	bl	801dc94 <SUBGRF_GetPacketType>
 801d632:	4603      	mov	r3, r0
 801d634:	2b00      	cmp	r3, #0
 801d636:	d121      	bne.n	801d67c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801d638:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d63c:	f000 fdc8 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d640:	4603      	mov	r3, r0
 801d642:	f023 0301 	bic.w	r3, r3, #1
 801d646:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801d648:	88fb      	ldrh	r3, [r7, #6]
 801d64a:	0a1b      	lsrs	r3, r3, #8
 801d64c:	b29b      	uxth	r3, r3
 801d64e:	b25b      	sxtb	r3, r3
 801d650:	f003 0301 	and.w	r3, r3, #1
 801d654:	b25a      	sxtb	r2, r3
 801d656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d65a:	4313      	orrs	r3, r2
 801d65c:	b25b      	sxtb	r3, r3
 801d65e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801d660:	7bfb      	ldrb	r3, [r7, #15]
 801d662:	4619      	mov	r1, r3
 801d664:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801d668:	f000 fd9e 	bl	801e1a8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801d66c:	88fb      	ldrh	r3, [r7, #6]
 801d66e:	b2db      	uxtb	r3, r3
 801d670:	4619      	mov	r1, r3
 801d672:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801d676:	f000 fd97 	bl	801e1a8 <SUBGRF_WriteRegister>
            break;
 801d67a:	e000      	b.n	801d67e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801d67c:	bf00      	nop
    }
}
 801d67e:	bf00      	nop
 801d680:	3710      	adds	r7, #16
 801d682:	46bd      	mov	sp, r7
 801d684:	bd80      	pop	{r7, pc}

0801d686 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801d686:	b580      	push	{r7, lr}
 801d688:	b082      	sub	sp, #8
 801d68a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801d68c:	2300      	movs	r3, #0
 801d68e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801d690:	2300      	movs	r3, #0
 801d692:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801d694:	2300      	movs	r3, #0
 801d696:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801d698:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d69c:	f000 fd98 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801d6a4:	79fb      	ldrb	r3, [r7, #7]
 801d6a6:	f023 0301 	bic.w	r3, r3, #1
 801d6aa:	b2db      	uxtb	r3, r3
 801d6ac:	4619      	mov	r1, r3
 801d6ae:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d6b2:	f000 fd79 	bl	801e1a8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801d6b6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d6ba:	f000 fd89 	bl	801e1d0 <SUBGRF_ReadRegister>
 801d6be:	4603      	mov	r3, r0
 801d6c0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801d6c2:	79bb      	ldrb	r3, [r7, #6]
 801d6c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d6c8:	b2db      	uxtb	r3, r3
 801d6ca:	4619      	mov	r1, r3
 801d6cc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d6d0:	f000 fd6a 	bl	801e1a8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801d6d4:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801d6d8:	f000 f88a 	bl	801d7f0 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801d6dc:	463b      	mov	r3, r7
 801d6de:	2204      	movs	r2, #4
 801d6e0:	4619      	mov	r1, r3
 801d6e2:	f640 0019 	movw	r0, #2073	; 0x819
 801d6e6:	f000 fda9 	bl	801e23c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801d6ea:	2000      	movs	r0, #0
 801d6ec:	f000 f844 	bl	801d778 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801d6f0:	79fb      	ldrb	r3, [r7, #7]
 801d6f2:	4619      	mov	r1, r3
 801d6f4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801d6f8:	f000 fd56 	bl	801e1a8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801d6fc:	79bb      	ldrb	r3, [r7, #6]
 801d6fe:	4619      	mov	r1, r3
 801d700:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d704:	f000 fd50 	bl	801e1a8 <SUBGRF_WriteRegister>

    return number;
 801d708:	683b      	ldr	r3, [r7, #0]
}
 801d70a:	4618      	mov	r0, r3
 801d70c:	3708      	adds	r7, #8
 801d70e:	46bd      	mov	sp, r7
 801d710:	bd80      	pop	{r7, pc}
	...

0801d714 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b084      	sub	sp, #16
 801d718:	af00      	add	r7, sp, #0
 801d71a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801d71c:	2000      	movs	r0, #0
 801d71e:	f7ee fe17 	bl	800c350 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801d722:	2002      	movs	r0, #2
 801d724:	f000 ff28 	bl	801e578 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d728:	793b      	ldrb	r3, [r7, #4]
 801d72a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801d72e:	b2db      	uxtb	r3, r3
 801d730:	009b      	lsls	r3, r3, #2
 801d732:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d734:	793b      	ldrb	r3, [r7, #4]
 801d736:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801d73a:	b2db      	uxtb	r3, r3
 801d73c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d73e:	b25b      	sxtb	r3, r3
 801d740:	4313      	orrs	r3, r2
 801d742:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801d744:	793b      	ldrb	r3, [r7, #4]
 801d746:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d74a:	b2db      	uxtb	r3, r3
 801d74c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801d74e:	4313      	orrs	r3, r2
 801d750:	b25b      	sxtb	r3, r3
 801d752:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801d754:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801d756:	f107 030f 	add.w	r3, r7, #15
 801d75a:	2201      	movs	r2, #1
 801d75c:	4619      	mov	r1, r3
 801d75e:	2084      	movs	r0, #132	; 0x84
 801d760:	f000 fdd2 	bl	801e308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801d764:	4b03      	ldr	r3, [pc, #12]	; (801d774 <SUBGRF_SetSleep+0x60>)
 801d766:	2200      	movs	r2, #0
 801d768:	701a      	strb	r2, [r3, #0]
}
 801d76a:	bf00      	nop
 801d76c:	3710      	adds	r7, #16
 801d76e:	46bd      	mov	sp, r7
 801d770:	bd80      	pop	{r7, pc}
 801d772:	bf00      	nop
 801d774:	200041e0 	.word	0x200041e0

0801d778 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801d778:	b580      	push	{r7, lr}
 801d77a:	b082      	sub	sp, #8
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	4603      	mov	r3, r0
 801d780:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801d782:	1dfb      	adds	r3, r7, #7
 801d784:	2201      	movs	r2, #1
 801d786:	4619      	mov	r1, r3
 801d788:	2080      	movs	r0, #128	; 0x80
 801d78a:	f000 fdbd 	bl	801e308 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801d78e:	79fb      	ldrb	r3, [r7, #7]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d103      	bne.n	801d79c <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801d794:	4b05      	ldr	r3, [pc, #20]	; (801d7ac <SUBGRF_SetStandby+0x34>)
 801d796:	2201      	movs	r2, #1
 801d798:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801d79a:	e002      	b.n	801d7a2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801d79c:	4b03      	ldr	r3, [pc, #12]	; (801d7ac <SUBGRF_SetStandby+0x34>)
 801d79e:	2202      	movs	r2, #2
 801d7a0:	701a      	strb	r2, [r3, #0]
}
 801d7a2:	bf00      	nop
 801d7a4:	3708      	adds	r7, #8
 801d7a6:	46bd      	mov	sp, r7
 801d7a8:	bd80      	pop	{r7, pc}
 801d7aa:	bf00      	nop
 801d7ac:	200041e0 	.word	0x200041e0

0801d7b0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801d7b0:	b580      	push	{r7, lr}
 801d7b2:	b084      	sub	sp, #16
 801d7b4:	af00      	add	r7, sp, #0
 801d7b6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801d7b8:	4b0c      	ldr	r3, [pc, #48]	; (801d7ec <SUBGRF_SetTx+0x3c>)
 801d7ba:	2204      	movs	r2, #4
 801d7bc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	0c1b      	lsrs	r3, r3, #16
 801d7c2:	b2db      	uxtb	r3, r3
 801d7c4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d7c6:	687b      	ldr	r3, [r7, #4]
 801d7c8:	0a1b      	lsrs	r3, r3, #8
 801d7ca:	b2db      	uxtb	r3, r3
 801d7cc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	b2db      	uxtb	r3, r3
 801d7d2:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801d7d4:	f107 030c 	add.w	r3, r7, #12
 801d7d8:	2203      	movs	r2, #3
 801d7da:	4619      	mov	r1, r3
 801d7dc:	2083      	movs	r0, #131	; 0x83
 801d7de:	f000 fd93 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d7e2:	bf00      	nop
 801d7e4:	3710      	adds	r7, #16
 801d7e6:	46bd      	mov	sp, r7
 801d7e8:	bd80      	pop	{r7, pc}
 801d7ea:	bf00      	nop
 801d7ec:	200041e0 	.word	0x200041e0

0801d7f0 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b084      	sub	sp, #16
 801d7f4:	af00      	add	r7, sp, #0
 801d7f6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d7f8:	4b0c      	ldr	r3, [pc, #48]	; (801d82c <SUBGRF_SetRx+0x3c>)
 801d7fa:	2205      	movs	r2, #5
 801d7fc:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	0c1b      	lsrs	r3, r3, #16
 801d802:	b2db      	uxtb	r3, r3
 801d804:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	0a1b      	lsrs	r3, r3, #8
 801d80a:	b2db      	uxtb	r3, r3
 801d80c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	b2db      	uxtb	r3, r3
 801d812:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d814:	f107 030c 	add.w	r3, r7, #12
 801d818:	2203      	movs	r2, #3
 801d81a:	4619      	mov	r1, r3
 801d81c:	2082      	movs	r0, #130	; 0x82
 801d81e:	f000 fd73 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d822:	bf00      	nop
 801d824:	3710      	adds	r7, #16
 801d826:	46bd      	mov	sp, r7
 801d828:	bd80      	pop	{r7, pc}
 801d82a:	bf00      	nop
 801d82c:	200041e0 	.word	0x200041e0

0801d830 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801d830:	b580      	push	{r7, lr}
 801d832:	b084      	sub	sp, #16
 801d834:	af00      	add	r7, sp, #0
 801d836:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801d838:	4b0e      	ldr	r3, [pc, #56]	; (801d874 <SUBGRF_SetRxBoosted+0x44>)
 801d83a:	2205      	movs	r2, #5
 801d83c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801d83e:	2197      	movs	r1, #151	; 0x97
 801d840:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801d844:	f000 fcb0 	bl	801e1a8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	0c1b      	lsrs	r3, r3, #16
 801d84c:	b2db      	uxtb	r3, r3
 801d84e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801d850:	687b      	ldr	r3, [r7, #4]
 801d852:	0a1b      	lsrs	r3, r3, #8
 801d854:	b2db      	uxtb	r3, r3
 801d856:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	b2db      	uxtb	r3, r3
 801d85c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801d85e:	f107 030c 	add.w	r3, r7, #12
 801d862:	2203      	movs	r2, #3
 801d864:	4619      	mov	r1, r3
 801d866:	2082      	movs	r0, #130	; 0x82
 801d868:	f000 fd4e 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d86c:	bf00      	nop
 801d86e:	3710      	adds	r7, #16
 801d870:	46bd      	mov	sp, r7
 801d872:	bd80      	pop	{r7, pc}
 801d874:	200041e0 	.word	0x200041e0

0801d878 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801d878:	b580      	push	{r7, lr}
 801d87a:	b084      	sub	sp, #16
 801d87c:	af00      	add	r7, sp, #0
 801d87e:	6078      	str	r0, [r7, #4]
 801d880:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	0c1b      	lsrs	r3, r3, #16
 801d886:	b2db      	uxtb	r3, r3
 801d888:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	0a1b      	lsrs	r3, r3, #8
 801d88e:	b2db      	uxtb	r3, r3
 801d890:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	b2db      	uxtb	r3, r3
 801d896:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	0c1b      	lsrs	r3, r3, #16
 801d89c:	b2db      	uxtb	r3, r3
 801d89e:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	0a1b      	lsrs	r3, r3, #8
 801d8a4:	b2db      	uxtb	r3, r3
 801d8a6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801d8a8:	683b      	ldr	r3, [r7, #0]
 801d8aa:	b2db      	uxtb	r3, r3
 801d8ac:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801d8ae:	f107 0308 	add.w	r3, r7, #8
 801d8b2:	2206      	movs	r2, #6
 801d8b4:	4619      	mov	r1, r3
 801d8b6:	2094      	movs	r0, #148	; 0x94
 801d8b8:	f000 fd26 	bl	801e308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801d8bc:	4b03      	ldr	r3, [pc, #12]	; (801d8cc <SUBGRF_SetRxDutyCycle+0x54>)
 801d8be:	2206      	movs	r2, #6
 801d8c0:	701a      	strb	r2, [r3, #0]
}
 801d8c2:	bf00      	nop
 801d8c4:	3710      	adds	r7, #16
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	bd80      	pop	{r7, pc}
 801d8ca:	bf00      	nop
 801d8cc:	200041e0 	.word	0x200041e0

0801d8d0 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801d8d0:	b580      	push	{r7, lr}
 801d8d2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801d8d4:	2200      	movs	r2, #0
 801d8d6:	2100      	movs	r1, #0
 801d8d8:	20c5      	movs	r0, #197	; 0xc5
 801d8da:	f000 fd15 	bl	801e308 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801d8de:	4b02      	ldr	r3, [pc, #8]	; (801d8e8 <SUBGRF_SetCad+0x18>)
 801d8e0:	2207      	movs	r2, #7
 801d8e2:	701a      	strb	r2, [r3, #0]
}
 801d8e4:	bf00      	nop
 801d8e6:	bd80      	pop	{r7, pc}
 801d8e8:	200041e0 	.word	0x200041e0

0801d8ec <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801d8ec:	b580      	push	{r7, lr}
 801d8ee:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801d8f0:	2200      	movs	r2, #0
 801d8f2:	2100      	movs	r1, #0
 801d8f4:	20d1      	movs	r0, #209	; 0xd1
 801d8f6:	f000 fd07 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d8fa:	bf00      	nop
 801d8fc:	bd80      	pop	{r7, pc}

0801d8fe <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801d8fe:	b580      	push	{r7, lr}
 801d900:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801d902:	2200      	movs	r2, #0
 801d904:	2100      	movs	r1, #0
 801d906:	20d2      	movs	r0, #210	; 0xd2
 801d908:	f000 fcfe 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d90c:	bf00      	nop
 801d90e:	bd80      	pop	{r7, pc}

0801d910 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b082      	sub	sp, #8
 801d914:	af00      	add	r7, sp, #0
 801d916:	4603      	mov	r3, r0
 801d918:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801d91a:	1dfb      	adds	r3, r7, #7
 801d91c:	2201      	movs	r2, #1
 801d91e:	4619      	mov	r1, r3
 801d920:	209f      	movs	r0, #159	; 0x9f
 801d922:	f000 fcf1 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d926:	bf00      	nop
 801d928:	3708      	adds	r7, #8
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}

0801d92e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801d92e:	b580      	push	{r7, lr}
 801d930:	b084      	sub	sp, #16
 801d932:	af00      	add	r7, sp, #0
 801d934:	4603      	mov	r3, r0
 801d936:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801d938:	1dfb      	adds	r3, r7, #7
 801d93a:	2201      	movs	r2, #1
 801d93c:	4619      	mov	r1, r3
 801d93e:	20a0      	movs	r0, #160	; 0xa0
 801d940:	f000 fce2 	bl	801e308 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801d944:	79fb      	ldrb	r3, [r7, #7]
 801d946:	2b3f      	cmp	r3, #63	; 0x3f
 801d948:	d91c      	bls.n	801d984 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801d94a:	79fb      	ldrb	r3, [r7, #7]
 801d94c:	085b      	lsrs	r3, r3, #1
 801d94e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801d950:	2300      	movs	r3, #0
 801d952:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801d954:	2300      	movs	r3, #0
 801d956:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801d958:	e005      	b.n	801d966 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801d95a:	7bfb      	ldrb	r3, [r7, #15]
 801d95c:	089b      	lsrs	r3, r3, #2
 801d95e:	73fb      	strb	r3, [r7, #15]
            exp++;
 801d960:	7bbb      	ldrb	r3, [r7, #14]
 801d962:	3301      	adds	r3, #1
 801d964:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801d966:	7bfb      	ldrb	r3, [r7, #15]
 801d968:	2b1f      	cmp	r3, #31
 801d96a:	d8f6      	bhi.n	801d95a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801d96c:	7bfb      	ldrb	r3, [r7, #15]
 801d96e:	00db      	lsls	r3, r3, #3
 801d970:	b2da      	uxtb	r2, r3
 801d972:	7bbb      	ldrb	r3, [r7, #14]
 801d974:	4413      	add	r3, r2
 801d976:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801d978:	7b7b      	ldrb	r3, [r7, #13]
 801d97a:	4619      	mov	r1, r3
 801d97c:	f240 7006 	movw	r0, #1798	; 0x706
 801d980:	f000 fc12 	bl	801e1a8 <SUBGRF_WriteRegister>
    }
}
 801d984:	bf00      	nop
 801d986:	3710      	adds	r7, #16
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}

0801d98c <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801d98c:	b580      	push	{r7, lr}
 801d98e:	b082      	sub	sp, #8
 801d990:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801d992:	f7ee fcf9 	bl	800c388 <RBI_IsDCDC>
 801d996:	4603      	mov	r3, r0
 801d998:	2b01      	cmp	r3, #1
 801d99a:	d102      	bne.n	801d9a2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801d99c:	2301      	movs	r3, #1
 801d99e:	71fb      	strb	r3, [r7, #7]
 801d9a0:	e001      	b.n	801d9a6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801d9a6:	1dfb      	adds	r3, r7, #7
 801d9a8:	2201      	movs	r2, #1
 801d9aa:	4619      	mov	r1, r3
 801d9ac:	2096      	movs	r0, #150	; 0x96
 801d9ae:	f000 fcab 	bl	801e308 <SUBGRF_WriteCommand>
}
 801d9b2:	bf00      	nop
 801d9b4:	3708      	adds	r7, #8
 801d9b6:	46bd      	mov	sp, r7
 801d9b8:	bd80      	pop	{r7, pc}

0801d9ba <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801d9ba:	b580      	push	{r7, lr}
 801d9bc:	b084      	sub	sp, #16
 801d9be:	af00      	add	r7, sp, #0
 801d9c0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801d9c2:	793b      	ldrb	r3, [r7, #4]
 801d9c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801d9c8:	b2db      	uxtb	r3, r3
 801d9ca:	019b      	lsls	r3, r3, #6
 801d9cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801d9ce:	793b      	ldrb	r3, [r7, #4]
 801d9d0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801d9d4:	b2db      	uxtb	r3, r3
 801d9d6:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801d9d8:	b25b      	sxtb	r3, r3
 801d9da:	4313      	orrs	r3, r2
 801d9dc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801d9de:	793b      	ldrb	r3, [r7, #4]
 801d9e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801d9e4:	b2db      	uxtb	r3, r3
 801d9e6:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801d9e8:	b25b      	sxtb	r3, r3
 801d9ea:	4313      	orrs	r3, r2
 801d9ec:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801d9ee:	793b      	ldrb	r3, [r7, #4]
 801d9f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d9f4:	b2db      	uxtb	r3, r3
 801d9f6:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801d9f8:	b25b      	sxtb	r3, r3
 801d9fa:	4313      	orrs	r3, r2
 801d9fc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801d9fe:	793b      	ldrb	r3, [r7, #4]
 801da00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801da04:	b2db      	uxtb	r3, r3
 801da06:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801da08:	b25b      	sxtb	r3, r3
 801da0a:	4313      	orrs	r3, r2
 801da0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801da0e:	793b      	ldrb	r3, [r7, #4]
 801da10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801da14:	b2db      	uxtb	r3, r3
 801da16:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801da18:	b25b      	sxtb	r3, r3
 801da1a:	4313      	orrs	r3, r2
 801da1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801da1e:	793b      	ldrb	r3, [r7, #4]
 801da20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801da24:	b2db      	uxtb	r3, r3
 801da26:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801da28:	4313      	orrs	r3, r2
 801da2a:	b25b      	sxtb	r3, r3
 801da2c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801da2e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801da30:	f107 030f 	add.w	r3, r7, #15
 801da34:	2201      	movs	r2, #1
 801da36:	4619      	mov	r1, r3
 801da38:	2089      	movs	r0, #137	; 0x89
 801da3a:	f000 fc65 	bl	801e308 <SUBGRF_WriteCommand>
}
 801da3e:	bf00      	nop
 801da40:	3710      	adds	r7, #16
 801da42:	46bd      	mov	sp, r7
 801da44:	bd80      	pop	{r7, pc}
	...

0801da48 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801da48:	b580      	push	{r7, lr}
 801da4a:	b084      	sub	sp, #16
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	4a1b      	ldr	r2, [pc, #108]	; (801dac0 <SUBGRF_CalibrateImage+0x78>)
 801da54:	4293      	cmp	r3, r2
 801da56:	d904      	bls.n	801da62 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801da58:	23e1      	movs	r3, #225	; 0xe1
 801da5a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801da5c:	23e9      	movs	r3, #233	; 0xe9
 801da5e:	737b      	strb	r3, [r7, #13]
 801da60:	e022      	b.n	801daa8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801da62:	687b      	ldr	r3, [r7, #4]
 801da64:	4a17      	ldr	r2, [pc, #92]	; (801dac4 <SUBGRF_CalibrateImage+0x7c>)
 801da66:	4293      	cmp	r3, r2
 801da68:	d904      	bls.n	801da74 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801da6a:	23d7      	movs	r3, #215	; 0xd7
 801da6c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801da6e:	23db      	movs	r3, #219	; 0xdb
 801da70:	737b      	strb	r3, [r7, #13]
 801da72:	e019      	b.n	801daa8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	4a14      	ldr	r2, [pc, #80]	; (801dac8 <SUBGRF_CalibrateImage+0x80>)
 801da78:	4293      	cmp	r3, r2
 801da7a:	d904      	bls.n	801da86 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801da7c:	23c1      	movs	r3, #193	; 0xc1
 801da7e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801da80:	23c5      	movs	r3, #197	; 0xc5
 801da82:	737b      	strb	r3, [r7, #13]
 801da84:	e010      	b.n	801daa8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	4a10      	ldr	r2, [pc, #64]	; (801dacc <SUBGRF_CalibrateImage+0x84>)
 801da8a:	4293      	cmp	r3, r2
 801da8c:	d904      	bls.n	801da98 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801da8e:	2375      	movs	r3, #117	; 0x75
 801da90:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801da92:	2381      	movs	r3, #129	; 0x81
 801da94:	737b      	strb	r3, [r7, #13]
 801da96:	e007      	b.n	801daa8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801da98:	687b      	ldr	r3, [r7, #4]
 801da9a:	4a0d      	ldr	r2, [pc, #52]	; (801dad0 <SUBGRF_CalibrateImage+0x88>)
 801da9c:	4293      	cmp	r3, r2
 801da9e:	d903      	bls.n	801daa8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801daa0:	236b      	movs	r3, #107	; 0x6b
 801daa2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801daa4:	236f      	movs	r3, #111	; 0x6f
 801daa6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801daa8:	f107 030c 	add.w	r3, r7, #12
 801daac:	2202      	movs	r2, #2
 801daae:	4619      	mov	r1, r3
 801dab0:	2098      	movs	r0, #152	; 0x98
 801dab2:	f000 fc29 	bl	801e308 <SUBGRF_WriteCommand>
}
 801dab6:	bf00      	nop
 801dab8:	3710      	adds	r7, #16
 801daba:	46bd      	mov	sp, r7
 801dabc:	bd80      	pop	{r7, pc}
 801dabe:	bf00      	nop
 801dac0:	35a4e900 	.word	0x35a4e900
 801dac4:	32a9f880 	.word	0x32a9f880
 801dac8:	2de54480 	.word	0x2de54480
 801dacc:	1b6b0b00 	.word	0x1b6b0b00
 801dad0:	1954fc40 	.word	0x1954fc40

0801dad4 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801dad4:	b590      	push	{r4, r7, lr}
 801dad6:	b085      	sub	sp, #20
 801dad8:	af00      	add	r7, sp, #0
 801dada:	4604      	mov	r4, r0
 801dadc:	4608      	mov	r0, r1
 801dade:	4611      	mov	r1, r2
 801dae0:	461a      	mov	r2, r3
 801dae2:	4623      	mov	r3, r4
 801dae4:	71fb      	strb	r3, [r7, #7]
 801dae6:	4603      	mov	r3, r0
 801dae8:	71bb      	strb	r3, [r7, #6]
 801daea:	460b      	mov	r3, r1
 801daec:	717b      	strb	r3, [r7, #5]
 801daee:	4613      	mov	r3, r2
 801daf0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801daf2:	79fb      	ldrb	r3, [r7, #7]
 801daf4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801daf6:	79bb      	ldrb	r3, [r7, #6]
 801daf8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801dafa:	797b      	ldrb	r3, [r7, #5]
 801dafc:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801dafe:	793b      	ldrb	r3, [r7, #4]
 801db00:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801db02:	f107 030c 	add.w	r3, r7, #12
 801db06:	2204      	movs	r2, #4
 801db08:	4619      	mov	r1, r3
 801db0a:	2095      	movs	r0, #149	; 0x95
 801db0c:	f000 fbfc 	bl	801e308 <SUBGRF_WriteCommand>
}
 801db10:	bf00      	nop
 801db12:	3714      	adds	r7, #20
 801db14:	46bd      	mov	sp, r7
 801db16:	bd90      	pop	{r4, r7, pc}

0801db18 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801db18:	b590      	push	{r4, r7, lr}
 801db1a:	b085      	sub	sp, #20
 801db1c:	af00      	add	r7, sp, #0
 801db1e:	4604      	mov	r4, r0
 801db20:	4608      	mov	r0, r1
 801db22:	4611      	mov	r1, r2
 801db24:	461a      	mov	r2, r3
 801db26:	4623      	mov	r3, r4
 801db28:	80fb      	strh	r3, [r7, #6]
 801db2a:	4603      	mov	r3, r0
 801db2c:	80bb      	strh	r3, [r7, #4]
 801db2e:	460b      	mov	r3, r1
 801db30:	807b      	strh	r3, [r7, #2]
 801db32:	4613      	mov	r3, r2
 801db34:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801db36:	88fb      	ldrh	r3, [r7, #6]
 801db38:	0a1b      	lsrs	r3, r3, #8
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	b2db      	uxtb	r3, r3
 801db3e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801db40:	88fb      	ldrh	r3, [r7, #6]
 801db42:	b2db      	uxtb	r3, r3
 801db44:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801db46:	88bb      	ldrh	r3, [r7, #4]
 801db48:	0a1b      	lsrs	r3, r3, #8
 801db4a:	b29b      	uxth	r3, r3
 801db4c:	b2db      	uxtb	r3, r3
 801db4e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801db50:	88bb      	ldrh	r3, [r7, #4]
 801db52:	b2db      	uxtb	r3, r3
 801db54:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801db56:	887b      	ldrh	r3, [r7, #2]
 801db58:	0a1b      	lsrs	r3, r3, #8
 801db5a:	b29b      	uxth	r3, r3
 801db5c:	b2db      	uxtb	r3, r3
 801db5e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801db60:	887b      	ldrh	r3, [r7, #2]
 801db62:	b2db      	uxtb	r3, r3
 801db64:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801db66:	883b      	ldrh	r3, [r7, #0]
 801db68:	0a1b      	lsrs	r3, r3, #8
 801db6a:	b29b      	uxth	r3, r3
 801db6c:	b2db      	uxtb	r3, r3
 801db6e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801db70:	883b      	ldrh	r3, [r7, #0]
 801db72:	b2db      	uxtb	r3, r3
 801db74:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801db76:	f107 0308 	add.w	r3, r7, #8
 801db7a:	2208      	movs	r2, #8
 801db7c:	4619      	mov	r1, r3
 801db7e:	2008      	movs	r0, #8
 801db80:	f000 fbc2 	bl	801e308 <SUBGRF_WriteCommand>
}
 801db84:	bf00      	nop
 801db86:	3714      	adds	r7, #20
 801db88:	46bd      	mov	sp, r7
 801db8a:	bd90      	pop	{r4, r7, pc}

0801db8c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801db8c:	b580      	push	{r7, lr}
 801db8e:	b084      	sub	sp, #16
 801db90:	af00      	add	r7, sp, #0
 801db92:	4603      	mov	r3, r0
 801db94:	6039      	str	r1, [r7, #0]
 801db96:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801db98:	79fb      	ldrb	r3, [r7, #7]
 801db9a:	f003 0307 	and.w	r3, r3, #7
 801db9e:	b2db      	uxtb	r3, r3
 801dba0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	0c1b      	lsrs	r3, r3, #16
 801dba6:	b2db      	uxtb	r3, r3
 801dba8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801dbaa:	683b      	ldr	r3, [r7, #0]
 801dbac:	0a1b      	lsrs	r3, r3, #8
 801dbae:	b2db      	uxtb	r3, r3
 801dbb0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	b2db      	uxtb	r3, r3
 801dbb6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801dbb8:	f107 030c 	add.w	r3, r7, #12
 801dbbc:	2204      	movs	r2, #4
 801dbbe:	4619      	mov	r1, r3
 801dbc0:	2097      	movs	r0, #151	; 0x97
 801dbc2:	f000 fba1 	bl	801e308 <SUBGRF_WriteCommand>
}
 801dbc6:	bf00      	nop
 801dbc8:	3710      	adds	r7, #16
 801dbca:	46bd      	mov	sp, r7
 801dbcc:	bd80      	pop	{r7, pc}
	...

0801dbd0 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801dbd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dbd4:	b084      	sub	sp, #16
 801dbd6:	af00      	add	r7, sp, #0
 801dbd8:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801dbda:	2300      	movs	r3, #0
 801dbdc:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801dbde:	4b1d      	ldr	r3, [pc, #116]	; (801dc54 <SUBGRF_SetRfFrequency+0x84>)
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	f083 0301 	eor.w	r3, r3, #1
 801dbe6:	b2db      	uxtb	r3, r3
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d005      	beq.n	801dbf8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801dbec:	6878      	ldr	r0, [r7, #4]
 801dbee:	f7ff ff2b 	bl	801da48 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801dbf2:	4b18      	ldr	r3, [pc, #96]	; (801dc54 <SUBGRF_SetRfFrequency+0x84>)
 801dbf4:	2201      	movs	r2, #1
 801dbf6:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	2200      	movs	r2, #0
 801dbfc:	461c      	mov	r4, r3
 801dbfe:	4615      	mov	r5, r2
 801dc00:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801dc04:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801dc08:	4a13      	ldr	r2, [pc, #76]	; (801dc58 <SUBGRF_SetRfFrequency+0x88>)
 801dc0a:	f04f 0300 	mov.w	r3, #0
 801dc0e:	4640      	mov	r0, r8
 801dc10:	4649      	mov	r1, r9
 801dc12:	f7e2 fe37 	bl	8000884 <__aeabi_uldivmod>
 801dc16:	4602      	mov	r2, r0
 801dc18:	460b      	mov	r3, r1
 801dc1a:	4613      	mov	r3, r2
 801dc1c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801dc1e:	68fb      	ldr	r3, [r7, #12]
 801dc20:	0e1b      	lsrs	r3, r3, #24
 801dc22:	b2db      	uxtb	r3, r3
 801dc24:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	0c1b      	lsrs	r3, r3, #16
 801dc2a:	b2db      	uxtb	r3, r3
 801dc2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	0a1b      	lsrs	r3, r3, #8
 801dc32:	b2db      	uxtb	r3, r3
 801dc34:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	b2db      	uxtb	r3, r3
 801dc3a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801dc3c:	f107 0308 	add.w	r3, r7, #8
 801dc40:	2204      	movs	r2, #4
 801dc42:	4619      	mov	r1, r3
 801dc44:	2086      	movs	r0, #134	; 0x86
 801dc46:	f000 fb5f 	bl	801e308 <SUBGRF_WriteCommand>
}
 801dc4a:	bf00      	nop
 801dc4c:	3710      	adds	r7, #16
 801dc4e:	46bd      	mov	sp, r7
 801dc50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801dc54:	200041e8 	.word	0x200041e8
 801dc58:	01e84800 	.word	0x01e84800

0801dc5c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b082      	sub	sp, #8
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	4603      	mov	r3, r0
 801dc64:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801dc66:	79fa      	ldrb	r2, [r7, #7]
 801dc68:	4b09      	ldr	r3, [pc, #36]	; (801dc90 <SUBGRF_SetPacketType+0x34>)
 801dc6a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801dc6c:	79fb      	ldrb	r3, [r7, #7]
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d104      	bne.n	801dc7c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801dc72:	2100      	movs	r1, #0
 801dc74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801dc78:	f000 fa96 	bl	801e1a8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801dc7c:	1dfb      	adds	r3, r7, #7
 801dc7e:	2201      	movs	r2, #1
 801dc80:	4619      	mov	r1, r3
 801dc82:	208a      	movs	r0, #138	; 0x8a
 801dc84:	f000 fb40 	bl	801e308 <SUBGRF_WriteCommand>
}
 801dc88:	bf00      	nop
 801dc8a:	3708      	adds	r7, #8
 801dc8c:	46bd      	mov	sp, r7
 801dc8e:	bd80      	pop	{r7, pc}
 801dc90:	200041e1 	.word	0x200041e1

0801dc94 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801dc94:	b480      	push	{r7}
 801dc96:	af00      	add	r7, sp, #0
    return PacketType;
 801dc98:	4b02      	ldr	r3, [pc, #8]	; (801dca4 <SUBGRF_GetPacketType+0x10>)
 801dc9a:	781b      	ldrb	r3, [r3, #0]
}
 801dc9c:	4618      	mov	r0, r3
 801dc9e:	46bd      	mov	sp, r7
 801dca0:	bc80      	pop	{r7}
 801dca2:	4770      	bx	lr
 801dca4:	200041e1 	.word	0x200041e1

0801dca8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	b084      	sub	sp, #16
 801dcac:	af00      	add	r7, sp, #0
 801dcae:	4603      	mov	r3, r0
 801dcb0:	71fb      	strb	r3, [r7, #7]
 801dcb2:	460b      	mov	r3, r1
 801dcb4:	71bb      	strb	r3, [r7, #6]
 801dcb6:	4613      	mov	r3, r2
 801dcb8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 801dcba:	79fb      	ldrb	r3, [r7, #7]
 801dcbc:	2b01      	cmp	r3, #1
 801dcbe:	d124      	bne.n	801dd0a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 801dcc0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dcc4:	2b0f      	cmp	r3, #15
 801dcc6:	d106      	bne.n	801dcd6 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 801dcc8:	2301      	movs	r3, #1
 801dcca:	2201      	movs	r2, #1
 801dccc:	2100      	movs	r1, #0
 801dcce:	2006      	movs	r0, #6
 801dcd0:	f7ff ff00 	bl	801dad4 <SUBGRF_SetPaConfig>
 801dcd4:	e005      	b.n	801dce2 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 801dcd6:	2301      	movs	r3, #1
 801dcd8:	2201      	movs	r2, #1
 801dcda:	2100      	movs	r1, #0
 801dcdc:	2004      	movs	r0, #4
 801dcde:	f7ff fef9 	bl	801dad4 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 801dce2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dce6:	2b0d      	cmp	r3, #13
 801dce8:	dd02      	ble.n	801dcf0 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 801dcea:	230e      	movs	r3, #14
 801dcec:	71bb      	strb	r3, [r7, #6]
 801dcee:	e006      	b.n	801dcfe <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 801dcf0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dcf4:	f113 0f11 	cmn.w	r3, #17
 801dcf8:	da01      	bge.n	801dcfe <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 801dcfa:	23ef      	movs	r3, #239	; 0xef
 801dcfc:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 801dcfe:	2118      	movs	r1, #24
 801dd00:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dd04:	f000 fa50 	bl	801e1a8 <SUBGRF_WriteRegister>
 801dd08:	e025      	b.n	801dd56 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 801dd0a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801dd0e:	f000 fa5f 	bl	801e1d0 <SUBGRF_ReadRegister>
 801dd12:	4603      	mov	r3, r0
 801dd14:	f043 031e 	orr.w	r3, r3, #30
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	4619      	mov	r1, r3
 801dd1c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801dd20:	f000 fa42 	bl	801e1a8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 801dd24:	2301      	movs	r3, #1
 801dd26:	2200      	movs	r2, #0
 801dd28:	2107      	movs	r1, #7
 801dd2a:	2004      	movs	r0, #4
 801dd2c:	f7ff fed2 	bl	801dad4 <SUBGRF_SetPaConfig>
        if( power > 22 )
 801dd30:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dd34:	2b16      	cmp	r3, #22
 801dd36:	dd02      	ble.n	801dd3e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 801dd38:	2316      	movs	r3, #22
 801dd3a:	71bb      	strb	r3, [r7, #6]
 801dd3c:	e006      	b.n	801dd4c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 801dd3e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801dd42:	f113 0f09 	cmn.w	r3, #9
 801dd46:	da01      	bge.n	801dd4c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 801dd48:	23f7      	movs	r3, #247	; 0xf7
 801dd4a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 801dd4c:	2138      	movs	r1, #56	; 0x38
 801dd4e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801dd52:	f000 fa29 	bl	801e1a8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801dd56:	79bb      	ldrb	r3, [r7, #6]
 801dd58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 801dd5a:	797b      	ldrb	r3, [r7, #5]
 801dd5c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 801dd5e:	f107 030c 	add.w	r3, r7, #12
 801dd62:	2202      	movs	r2, #2
 801dd64:	4619      	mov	r1, r3
 801dd66:	208e      	movs	r0, #142	; 0x8e
 801dd68:	f000 face 	bl	801e308 <SUBGRF_WriteCommand>
}
 801dd6c:	bf00      	nop
 801dd6e:	3710      	adds	r7, #16
 801dd70:	46bd      	mov	sp, r7
 801dd72:	bd80      	pop	{r7, pc}

0801dd74 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801dd74:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801dd78:	b086      	sub	sp, #24
 801dd7a:	af00      	add	r7, sp, #0
 801dd7c:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801dd7e:	2300      	movs	r3, #0
 801dd80:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801dd82:	4a61      	ldr	r2, [pc, #388]	; (801df08 <SUBGRF_SetModulationParams+0x194>)
 801dd84:	f107 0308 	add.w	r3, r7, #8
 801dd88:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd8c:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	781a      	ldrb	r2, [r3, #0]
 801dd94:	4b5d      	ldr	r3, [pc, #372]	; (801df0c <SUBGRF_SetModulationParams+0x198>)
 801dd96:	781b      	ldrb	r3, [r3, #0]
 801dd98:	429a      	cmp	r2, r3
 801dd9a:	d004      	beq.n	801dda6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	781b      	ldrb	r3, [r3, #0]
 801dda0:	4618      	mov	r0, r3
 801dda2:	f7ff ff5b 	bl	801dc5c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801dda6:	687b      	ldr	r3, [r7, #4]
 801dda8:	781b      	ldrb	r3, [r3, #0]
 801ddaa:	2b03      	cmp	r3, #3
 801ddac:	f200 80a5 	bhi.w	801defa <SUBGRF_SetModulationParams+0x186>
 801ddb0:	a201      	add	r2, pc, #4	; (adr r2, 801ddb8 <SUBGRF_SetModulationParams+0x44>)
 801ddb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ddb6:	bf00      	nop
 801ddb8:	0801ddc9 	.word	0x0801ddc9
 801ddbc:	0801de89 	.word	0x0801de89
 801ddc0:	0801de4b 	.word	0x0801de4b
 801ddc4:	0801deb7 	.word	0x0801deb7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801ddc8:	2308      	movs	r3, #8
 801ddca:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	685b      	ldr	r3, [r3, #4]
 801ddd0:	4a4f      	ldr	r2, [pc, #316]	; (801df10 <SUBGRF_SetModulationParams+0x19c>)
 801ddd2:	fbb2 f3f3 	udiv	r3, r2, r3
 801ddd6:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ddd8:	697b      	ldr	r3, [r7, #20]
 801ddda:	0c1b      	lsrs	r3, r3, #16
 801dddc:	b2db      	uxtb	r3, r3
 801ddde:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801dde0:	697b      	ldr	r3, [r7, #20]
 801dde2:	0a1b      	lsrs	r3, r3, #8
 801dde4:	b2db      	uxtb	r3, r3
 801dde6:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801dde8:	697b      	ldr	r3, [r7, #20]
 801ddea:	b2db      	uxtb	r3, r3
 801ddec:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	7b1b      	ldrb	r3, [r3, #12]
 801ddf2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ddf4:	687b      	ldr	r3, [r7, #4]
 801ddf6:	7b5b      	ldrb	r3, [r3, #13]
 801ddf8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	689b      	ldr	r3, [r3, #8]
 801ddfe:	2200      	movs	r2, #0
 801de00:	461c      	mov	r4, r3
 801de02:	4615      	mov	r5, r2
 801de04:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801de08:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801de0c:	4a41      	ldr	r2, [pc, #260]	; (801df14 <SUBGRF_SetModulationParams+0x1a0>)
 801de0e:	f04f 0300 	mov.w	r3, #0
 801de12:	4640      	mov	r0, r8
 801de14:	4649      	mov	r1, r9
 801de16:	f7e2 fd35 	bl	8000884 <__aeabi_uldivmod>
 801de1a:	4602      	mov	r2, r0
 801de1c:	460b      	mov	r3, r1
 801de1e:	4613      	mov	r3, r2
 801de20:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801de22:	697b      	ldr	r3, [r7, #20]
 801de24:	0c1b      	lsrs	r3, r3, #16
 801de26:	b2db      	uxtb	r3, r3
 801de28:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801de2a:	697b      	ldr	r3, [r7, #20]
 801de2c:	0a1b      	lsrs	r3, r3, #8
 801de2e:	b2db      	uxtb	r3, r3
 801de30:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801de32:	697b      	ldr	r3, [r7, #20]
 801de34:	b2db      	uxtb	r3, r3
 801de36:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801de38:	7cfb      	ldrb	r3, [r7, #19]
 801de3a:	b29a      	uxth	r2, r3
 801de3c:	f107 0308 	add.w	r3, r7, #8
 801de40:	4619      	mov	r1, r3
 801de42:	208b      	movs	r0, #139	; 0x8b
 801de44:	f000 fa60 	bl	801e308 <SUBGRF_WriteCommand>
        break;
 801de48:	e058      	b.n	801defc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801de4a:	2304      	movs	r3, #4
 801de4c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	691b      	ldr	r3, [r3, #16]
 801de52:	4a2f      	ldr	r2, [pc, #188]	; (801df10 <SUBGRF_SetModulationParams+0x19c>)
 801de54:	fbb2 f3f3 	udiv	r3, r2, r3
 801de58:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801de5a:	697b      	ldr	r3, [r7, #20]
 801de5c:	0c1b      	lsrs	r3, r3, #16
 801de5e:	b2db      	uxtb	r3, r3
 801de60:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801de62:	697b      	ldr	r3, [r7, #20]
 801de64:	0a1b      	lsrs	r3, r3, #8
 801de66:	b2db      	uxtb	r3, r3
 801de68:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801de6a:	697b      	ldr	r3, [r7, #20]
 801de6c:	b2db      	uxtb	r3, r3
 801de6e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	7d1b      	ldrb	r3, [r3, #20]
 801de74:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801de76:	7cfb      	ldrb	r3, [r7, #19]
 801de78:	b29a      	uxth	r2, r3
 801de7a:	f107 0308 	add.w	r3, r7, #8
 801de7e:	4619      	mov	r1, r3
 801de80:	208b      	movs	r0, #139	; 0x8b
 801de82:	f000 fa41 	bl	801e308 <SUBGRF_WriteCommand>
        break;
 801de86:	e039      	b.n	801defc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801de88:	2304      	movs	r3, #4
 801de8a:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	7e1b      	ldrb	r3, [r3, #24]
 801de90:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801de92:	687b      	ldr	r3, [r7, #4]
 801de94:	7e5b      	ldrb	r3, [r3, #25]
 801de96:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	7e9b      	ldrb	r3, [r3, #26]
 801de9c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	7edb      	ldrb	r3, [r3, #27]
 801dea2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801dea4:	7cfb      	ldrb	r3, [r7, #19]
 801dea6:	b29a      	uxth	r2, r3
 801dea8:	f107 0308 	add.w	r3, r7, #8
 801deac:	4619      	mov	r1, r3
 801deae:	208b      	movs	r0, #139	; 0x8b
 801deb0:	f000 fa2a 	bl	801e308 <SUBGRF_WriteCommand>

        break;
 801deb4:	e022      	b.n	801defc <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801deb6:	2305      	movs	r3, #5
 801deb8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	685b      	ldr	r3, [r3, #4]
 801debe:	4a14      	ldr	r2, [pc, #80]	; (801df10 <SUBGRF_SetModulationParams+0x19c>)
 801dec0:	fbb2 f3f3 	udiv	r3, r2, r3
 801dec4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801dec6:	697b      	ldr	r3, [r7, #20]
 801dec8:	0c1b      	lsrs	r3, r3, #16
 801deca:	b2db      	uxtb	r3, r3
 801decc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801dece:	697b      	ldr	r3, [r7, #20]
 801ded0:	0a1b      	lsrs	r3, r3, #8
 801ded2:	b2db      	uxtb	r3, r3
 801ded4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ded6:	697b      	ldr	r3, [r7, #20]
 801ded8:	b2db      	uxtb	r3, r3
 801deda:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	7b1b      	ldrb	r3, [r3, #12]
 801dee0:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	7b5b      	ldrb	r3, [r3, #13]
 801dee6:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801dee8:	7cfb      	ldrb	r3, [r7, #19]
 801deea:	b29a      	uxth	r2, r3
 801deec:	f107 0308 	add.w	r3, r7, #8
 801def0:	4619      	mov	r1, r3
 801def2:	208b      	movs	r0, #139	; 0x8b
 801def4:	f000 fa08 	bl	801e308 <SUBGRF_WriteCommand>
        break;
 801def8:	e000      	b.n	801defc <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801defa:	bf00      	nop
    }
}
 801defc:	bf00      	nop
 801defe:	3718      	adds	r7, #24
 801df00:	46bd      	mov	sp, r7
 801df02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801df06:	bf00      	nop
 801df08:	08022a1c 	.word	0x08022a1c
 801df0c:	200041e1 	.word	0x200041e1
 801df10:	3d090000 	.word	0x3d090000
 801df14:	01e84800 	.word	0x01e84800

0801df18 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801df18:	b580      	push	{r7, lr}
 801df1a:	b086      	sub	sp, #24
 801df1c:	af00      	add	r7, sp, #0
 801df1e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801df20:	2300      	movs	r3, #0
 801df22:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801df24:	4a48      	ldr	r2, [pc, #288]	; (801e048 <SUBGRF_SetPacketParams+0x130>)
 801df26:	f107 030c 	add.w	r3, r7, #12
 801df2a:	ca07      	ldmia	r2, {r0, r1, r2}
 801df2c:	c303      	stmia	r3!, {r0, r1}
 801df2e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	781a      	ldrb	r2, [r3, #0]
 801df34:	4b45      	ldr	r3, [pc, #276]	; (801e04c <SUBGRF_SetPacketParams+0x134>)
 801df36:	781b      	ldrb	r3, [r3, #0]
 801df38:	429a      	cmp	r2, r3
 801df3a:	d004      	beq.n	801df46 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	781b      	ldrb	r3, [r3, #0]
 801df40:	4618      	mov	r0, r3
 801df42:	f7ff fe8b 	bl	801dc5c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	781b      	ldrb	r3, [r3, #0]
 801df4a:	2b03      	cmp	r3, #3
 801df4c:	d878      	bhi.n	801e040 <SUBGRF_SetPacketParams+0x128>
 801df4e:	a201      	add	r2, pc, #4	; (adr r2, 801df54 <SUBGRF_SetPacketParams+0x3c>)
 801df50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df54:	0801df65 	.word	0x0801df65
 801df58:	0801dff5 	.word	0x0801dff5
 801df5c:	0801dfe9 	.word	0x0801dfe9
 801df60:	0801df65 	.word	0x0801df65
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	7a5b      	ldrb	r3, [r3, #9]
 801df68:	2bf1      	cmp	r3, #241	; 0xf1
 801df6a:	d10a      	bne.n	801df82 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801df6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801df70:	f7ff fb16 	bl	801d5a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801df74:	f248 0005 	movw	r0, #32773	; 0x8005
 801df78:	f7ff fb32 	bl	801d5e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801df7c:	2302      	movs	r3, #2
 801df7e:	75bb      	strb	r3, [r7, #22]
 801df80:	e011      	b.n	801dfa6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801df82:	687b      	ldr	r3, [r7, #4]
 801df84:	7a5b      	ldrb	r3, [r3, #9]
 801df86:	2bf2      	cmp	r3, #242	; 0xf2
 801df88:	d10a      	bne.n	801dfa0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801df8a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801df8e:	f7ff fb07 	bl	801d5a0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801df92:	f241 0021 	movw	r0, #4129	; 0x1021
 801df96:	f7ff fb23 	bl	801d5e0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801df9a:	2306      	movs	r3, #6
 801df9c:	75bb      	strb	r3, [r7, #22]
 801df9e:	e002      	b.n	801dfa6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	7a5b      	ldrb	r3, [r3, #9]
 801dfa4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801dfa6:	2309      	movs	r3, #9
 801dfa8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	885b      	ldrh	r3, [r3, #2]
 801dfae:	0a1b      	lsrs	r3, r3, #8
 801dfb0:	b29b      	uxth	r3, r3
 801dfb2:	b2db      	uxtb	r3, r3
 801dfb4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	885b      	ldrh	r3, [r3, #2]
 801dfba:	b2db      	uxtb	r3, r3
 801dfbc:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	791b      	ldrb	r3, [r3, #4]
 801dfc2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	795b      	ldrb	r3, [r3, #5]
 801dfc8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	799b      	ldrb	r3, [r3, #6]
 801dfce:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	79db      	ldrb	r3, [r3, #7]
 801dfd4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	7a1b      	ldrb	r3, [r3, #8]
 801dfda:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801dfdc:	7dbb      	ldrb	r3, [r7, #22]
 801dfde:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	7a9b      	ldrb	r3, [r3, #10]
 801dfe4:	753b      	strb	r3, [r7, #20]
        break;
 801dfe6:	e022      	b.n	801e02e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801dfe8:	2301      	movs	r3, #1
 801dfea:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	7b1b      	ldrb	r3, [r3, #12]
 801dff0:	733b      	strb	r3, [r7, #12]
        break;
 801dff2:	e01c      	b.n	801e02e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801dff4:	2306      	movs	r3, #6
 801dff6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	89db      	ldrh	r3, [r3, #14]
 801dffc:	0a1b      	lsrs	r3, r3, #8
 801dffe:	b29b      	uxth	r3, r3
 801e000:	b2db      	uxtb	r3, r3
 801e002:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	89db      	ldrh	r3, [r3, #14]
 801e008:	b2db      	uxtb	r3, r3
 801e00a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	7c1a      	ldrb	r2, [r3, #16]
 801e010:	4b0f      	ldr	r3, [pc, #60]	; (801e050 <SUBGRF_SetPacketParams+0x138>)
 801e012:	4611      	mov	r1, r2
 801e014:	7019      	strb	r1, [r3, #0]
 801e016:	4613      	mov	r3, r2
 801e018:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	7c5b      	ldrb	r3, [r3, #17]
 801e01e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	7c9b      	ldrb	r3, [r3, #18]
 801e024:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	7cdb      	ldrb	r3, [r3, #19]
 801e02a:	747b      	strb	r3, [r7, #17]
        break;
 801e02c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801e02e:	7dfb      	ldrb	r3, [r7, #23]
 801e030:	b29a      	uxth	r2, r3
 801e032:	f107 030c 	add.w	r3, r7, #12
 801e036:	4619      	mov	r1, r3
 801e038:	208c      	movs	r0, #140	; 0x8c
 801e03a:	f000 f965 	bl	801e308 <SUBGRF_WriteCommand>
 801e03e:	e000      	b.n	801e042 <SUBGRF_SetPacketParams+0x12a>
        return;
 801e040:	bf00      	nop
}
 801e042:	3718      	adds	r7, #24
 801e044:	46bd      	mov	sp, r7
 801e046:	bd80      	pop	{r7, pc}
 801e048:	08022a24 	.word	0x08022a24
 801e04c:	200041e1 	.word	0x200041e1
 801e050:	200041e2 	.word	0x200041e2

0801e054 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801e054:	b580      	push	{r7, lr}
 801e056:	b084      	sub	sp, #16
 801e058:	af00      	add	r7, sp, #0
 801e05a:	4603      	mov	r3, r0
 801e05c:	460a      	mov	r2, r1
 801e05e:	71fb      	strb	r3, [r7, #7]
 801e060:	4613      	mov	r3, r2
 801e062:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801e064:	79fb      	ldrb	r3, [r7, #7]
 801e066:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801e068:	79bb      	ldrb	r3, [r7, #6]
 801e06a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801e06c:	f107 030c 	add.w	r3, r7, #12
 801e070:	2202      	movs	r2, #2
 801e072:	4619      	mov	r1, r3
 801e074:	208f      	movs	r0, #143	; 0x8f
 801e076:	f000 f947 	bl	801e308 <SUBGRF_WriteCommand>
}
 801e07a:	bf00      	nop
 801e07c:	3710      	adds	r7, #16
 801e07e:	46bd      	mov	sp, r7
 801e080:	bd80      	pop	{r7, pc}

0801e082 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801e082:	b580      	push	{r7, lr}
 801e084:	b082      	sub	sp, #8
 801e086:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801e088:	2300      	movs	r3, #0
 801e08a:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801e08c:	1d3b      	adds	r3, r7, #4
 801e08e:	2201      	movs	r2, #1
 801e090:	4619      	mov	r1, r3
 801e092:	2015      	movs	r0, #21
 801e094:	f000 f95a 	bl	801e34c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801e098:	793b      	ldrb	r3, [r7, #4]
 801e09a:	425b      	negs	r3, r3
 801e09c:	105b      	asrs	r3, r3, #1
 801e09e:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801e0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	3708      	adds	r7, #8
 801e0a8:	46bd      	mov	sp, r7
 801e0aa:	bd80      	pop	{r7, pc}

0801e0ac <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801e0ac:	b580      	push	{r7, lr}
 801e0ae:	b084      	sub	sp, #16
 801e0b0:	af00      	add	r7, sp, #0
 801e0b2:	6078      	str	r0, [r7, #4]
 801e0b4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801e0b6:	f107 030c 	add.w	r3, r7, #12
 801e0ba:	2202      	movs	r2, #2
 801e0bc:	4619      	mov	r1, r3
 801e0be:	2013      	movs	r0, #19
 801e0c0:	f000 f944 	bl	801e34c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801e0c4:	f7ff fde6 	bl	801dc94 <SUBGRF_GetPacketType>
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	2b01      	cmp	r3, #1
 801e0cc:	d10d      	bne.n	801e0ea <SUBGRF_GetRxBufferStatus+0x3e>
 801e0ce:	4b0c      	ldr	r3, [pc, #48]	; (801e100 <SUBGRF_GetRxBufferStatus+0x54>)
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	b2db      	uxtb	r3, r3
 801e0d4:	2b01      	cmp	r3, #1
 801e0d6:	d108      	bne.n	801e0ea <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801e0d8:	f240 7002 	movw	r0, #1794	; 0x702
 801e0dc:	f000 f878 	bl	801e1d0 <SUBGRF_ReadRegister>
 801e0e0:	4603      	mov	r3, r0
 801e0e2:	461a      	mov	r2, r3
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	701a      	strb	r2, [r3, #0]
 801e0e8:	e002      	b.n	801e0f0 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801e0ea:	7b3a      	ldrb	r2, [r7, #12]
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801e0f0:	7b7a      	ldrb	r2, [r7, #13]
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	701a      	strb	r2, [r3, #0]
}
 801e0f6:	bf00      	nop
 801e0f8:	3710      	adds	r7, #16
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	bd80      	pop	{r7, pc}
 801e0fe:	bf00      	nop
 801e100:	200041e2 	.word	0x200041e2

0801e104 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b084      	sub	sp, #16
 801e108:	af00      	add	r7, sp, #0
 801e10a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801e10c:	f107 030c 	add.w	r3, r7, #12
 801e110:	2203      	movs	r2, #3
 801e112:	4619      	mov	r1, r3
 801e114:	2014      	movs	r0, #20
 801e116:	f000 f919 	bl	801e34c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801e11a:	f7ff fdbb 	bl	801dc94 <SUBGRF_GetPacketType>
 801e11e:	4603      	mov	r3, r0
 801e120:	461a      	mov	r2, r3
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801e126:	687b      	ldr	r3, [r7, #4]
 801e128:	781b      	ldrb	r3, [r3, #0]
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	d002      	beq.n	801e134 <SUBGRF_GetPacketStatus+0x30>
 801e12e:	2b01      	cmp	r3, #1
 801e130:	d013      	beq.n	801e15a <SUBGRF_GetPacketStatus+0x56>
 801e132:	e02a      	b.n	801e18a <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801e134:	7b3a      	ldrb	r2, [r7, #12]
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801e13a:	7b7b      	ldrb	r3, [r7, #13]
 801e13c:	425b      	negs	r3, r3
 801e13e:	105b      	asrs	r3, r3, #1
 801e140:	b25a      	sxtb	r2, r3
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801e146:	7bbb      	ldrb	r3, [r7, #14]
 801e148:	425b      	negs	r3, r3
 801e14a:	105b      	asrs	r3, r3, #1
 801e14c:	b25a      	sxtb	r2, r3
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	2200      	movs	r2, #0
 801e156:	609a      	str	r2, [r3, #8]
            break;
 801e158:	e020      	b.n	801e19c <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801e15a:	7b3b      	ldrb	r3, [r7, #12]
 801e15c:	425b      	negs	r3, r3
 801e15e:	105b      	asrs	r3, r3, #1
 801e160:	b25a      	sxtb	r2, r3
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801e166:	7b7b      	ldrb	r3, [r7, #13]
 801e168:	b25b      	sxtb	r3, r3
 801e16a:	3302      	adds	r3, #2
 801e16c:	109b      	asrs	r3, r3, #2
 801e16e:	b25a      	sxtb	r2, r3
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801e174:	7bbb      	ldrb	r3, [r7, #14]
 801e176:	425b      	negs	r3, r3
 801e178:	105b      	asrs	r3, r3, #1
 801e17a:	b25a      	sxtb	r2, r3
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801e180:	4b08      	ldr	r3, [pc, #32]	; (801e1a4 <SUBGRF_GetPacketStatus+0xa0>)
 801e182:	681a      	ldr	r2, [r3, #0]
 801e184:	687b      	ldr	r3, [r7, #4]
 801e186:	611a      	str	r2, [r3, #16]
            break;
 801e188:	e008      	b.n	801e19c <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801e18a:	2214      	movs	r2, #20
 801e18c:	2100      	movs	r1, #0
 801e18e:	6878      	ldr	r0, [r7, #4]
 801e190:	f000 fe7d 	bl	801ee8e <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	220f      	movs	r2, #15
 801e198:	701a      	strb	r2, [r3, #0]
            break;
 801e19a:	bf00      	nop
    }
}
 801e19c:	bf00      	nop
 801e19e:	3710      	adds	r7, #16
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}
 801e1a4:	200041e4 	.word	0x200041e4

0801e1a8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801e1a8:	b580      	push	{r7, lr}
 801e1aa:	b082      	sub	sp, #8
 801e1ac:	af00      	add	r7, sp, #0
 801e1ae:	4603      	mov	r3, r0
 801e1b0:	460a      	mov	r2, r1
 801e1b2:	80fb      	strh	r3, [r7, #6]
 801e1b4:	4613      	mov	r3, r2
 801e1b6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801e1b8:	1d7a      	adds	r2, r7, #5
 801e1ba:	88f9      	ldrh	r1, [r7, #6]
 801e1bc:	2301      	movs	r3, #1
 801e1be:	4803      	ldr	r0, [pc, #12]	; (801e1cc <SUBGRF_WriteRegister+0x24>)
 801e1c0:	f7e8 fdea 	bl	8006d98 <HAL_SUBGHZ_WriteRegisters>
}
 801e1c4:	bf00      	nop
 801e1c6:	3708      	adds	r7, #8
 801e1c8:	46bd      	mov	sp, r7
 801e1ca:	bd80      	pop	{r7, pc}
 801e1cc:	20000a74 	.word	0x20000a74

0801e1d0 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801e1d0:	b580      	push	{r7, lr}
 801e1d2:	b084      	sub	sp, #16
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	4603      	mov	r3, r0
 801e1d8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801e1da:	f107 020f 	add.w	r2, r7, #15
 801e1de:	88f9      	ldrh	r1, [r7, #6]
 801e1e0:	2301      	movs	r3, #1
 801e1e2:	4804      	ldr	r0, [pc, #16]	; (801e1f4 <SUBGRF_ReadRegister+0x24>)
 801e1e4:	f7e8 fe37 	bl	8006e56 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801e1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e1ea:	4618      	mov	r0, r3
 801e1ec:	3710      	adds	r7, #16
 801e1ee:	46bd      	mov	sp, r7
 801e1f0:	bd80      	pop	{r7, pc}
 801e1f2:	bf00      	nop
 801e1f4:	20000a74 	.word	0x20000a74

0801e1f8 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e1f8:	b580      	push	{r7, lr}
 801e1fa:	b086      	sub	sp, #24
 801e1fc:	af00      	add	r7, sp, #0
 801e1fe:	4603      	mov	r3, r0
 801e200:	6039      	str	r1, [r7, #0]
 801e202:	80fb      	strh	r3, [r7, #6]
 801e204:	4613      	mov	r3, r2
 801e206:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e208:	f3ef 8310 	mrs	r3, PRIMASK
 801e20c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e20e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e210:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e212:	b672      	cpsid	i
}
 801e214:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801e216:	88bb      	ldrh	r3, [r7, #4]
 801e218:	88f9      	ldrh	r1, [r7, #6]
 801e21a:	683a      	ldr	r2, [r7, #0]
 801e21c:	4806      	ldr	r0, [pc, #24]	; (801e238 <SUBGRF_WriteRegisters+0x40>)
 801e21e:	f7e8 fdbb 	bl	8006d98 <HAL_SUBGHZ_WriteRegisters>
 801e222:	697b      	ldr	r3, [r7, #20]
 801e224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e226:	693b      	ldr	r3, [r7, #16]
 801e228:	f383 8810 	msr	PRIMASK, r3
}
 801e22c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e22e:	bf00      	nop
 801e230:	3718      	adds	r7, #24
 801e232:	46bd      	mov	sp, r7
 801e234:	bd80      	pop	{r7, pc}
 801e236:	bf00      	nop
 801e238:	20000a74 	.word	0x20000a74

0801e23c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801e23c:	b580      	push	{r7, lr}
 801e23e:	b086      	sub	sp, #24
 801e240:	af00      	add	r7, sp, #0
 801e242:	4603      	mov	r3, r0
 801e244:	6039      	str	r1, [r7, #0]
 801e246:	80fb      	strh	r3, [r7, #6]
 801e248:	4613      	mov	r3, r2
 801e24a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e24c:	f3ef 8310 	mrs	r3, PRIMASK
 801e250:	60fb      	str	r3, [r7, #12]
  return(result);
 801e252:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e256:	b672      	cpsid	i
}
 801e258:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801e25a:	88bb      	ldrh	r3, [r7, #4]
 801e25c:	88f9      	ldrh	r1, [r7, #6]
 801e25e:	683a      	ldr	r2, [r7, #0]
 801e260:	4806      	ldr	r0, [pc, #24]	; (801e27c <SUBGRF_ReadRegisters+0x40>)
 801e262:	f7e8 fdf8 	bl	8006e56 <HAL_SUBGHZ_ReadRegisters>
 801e266:	697b      	ldr	r3, [r7, #20]
 801e268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e26a:	693b      	ldr	r3, [r7, #16]
 801e26c:	f383 8810 	msr	PRIMASK, r3
}
 801e270:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e272:	bf00      	nop
 801e274:	3718      	adds	r7, #24
 801e276:	46bd      	mov	sp, r7
 801e278:	bd80      	pop	{r7, pc}
 801e27a:	bf00      	nop
 801e27c:	20000a74 	.word	0x20000a74

0801e280 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e280:	b580      	push	{r7, lr}
 801e282:	b086      	sub	sp, #24
 801e284:	af00      	add	r7, sp, #0
 801e286:	4603      	mov	r3, r0
 801e288:	6039      	str	r1, [r7, #0]
 801e28a:	71fb      	strb	r3, [r7, #7]
 801e28c:	4613      	mov	r3, r2
 801e28e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e290:	f3ef 8310 	mrs	r3, PRIMASK
 801e294:	60fb      	str	r3, [r7, #12]
  return(result);
 801e296:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e29a:	b672      	cpsid	i
}
 801e29c:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801e29e:	79bb      	ldrb	r3, [r7, #6]
 801e2a0:	b29b      	uxth	r3, r3
 801e2a2:	79f9      	ldrb	r1, [r7, #7]
 801e2a4:	683a      	ldr	r2, [r7, #0]
 801e2a6:	4806      	ldr	r0, [pc, #24]	; (801e2c0 <SUBGRF_WriteBuffer+0x40>)
 801e2a8:	f7e8 fee9 	bl	800707e <HAL_SUBGHZ_WriteBuffer>
 801e2ac:	697b      	ldr	r3, [r7, #20]
 801e2ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2b0:	693b      	ldr	r3, [r7, #16]
 801e2b2:	f383 8810 	msr	PRIMASK, r3
}
 801e2b6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e2b8:	bf00      	nop
 801e2ba:	3718      	adds	r7, #24
 801e2bc:	46bd      	mov	sp, r7
 801e2be:	bd80      	pop	{r7, pc}
 801e2c0:	20000a74 	.word	0x20000a74

0801e2c4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801e2c4:	b580      	push	{r7, lr}
 801e2c6:	b086      	sub	sp, #24
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	6039      	str	r1, [r7, #0]
 801e2ce:	71fb      	strb	r3, [r7, #7]
 801e2d0:	4613      	mov	r3, r2
 801e2d2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e2d4:	f3ef 8310 	mrs	r3, PRIMASK
 801e2d8:	60fb      	str	r3, [r7, #12]
  return(result);
 801e2da:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e2dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e2de:	b672      	cpsid	i
}
 801e2e0:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801e2e2:	79bb      	ldrb	r3, [r7, #6]
 801e2e4:	b29b      	uxth	r3, r3
 801e2e6:	79f9      	ldrb	r1, [r7, #7]
 801e2e8:	683a      	ldr	r2, [r7, #0]
 801e2ea:	4806      	ldr	r0, [pc, #24]	; (801e304 <SUBGRF_ReadBuffer+0x40>)
 801e2ec:	f7e8 ff1a 	bl	8007124 <HAL_SUBGHZ_ReadBuffer>
 801e2f0:	697b      	ldr	r3, [r7, #20]
 801e2f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e2f4:	693b      	ldr	r3, [r7, #16]
 801e2f6:	f383 8810 	msr	PRIMASK, r3
}
 801e2fa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e2fc:	bf00      	nop
 801e2fe:	3718      	adds	r7, #24
 801e300:	46bd      	mov	sp, r7
 801e302:	bd80      	pop	{r7, pc}
 801e304:	20000a74 	.word	0x20000a74

0801e308 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b086      	sub	sp, #24
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	4603      	mov	r3, r0
 801e310:	6039      	str	r1, [r7, #0]
 801e312:	71fb      	strb	r3, [r7, #7]
 801e314:	4613      	mov	r3, r2
 801e316:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e318:	f3ef 8310 	mrs	r3, PRIMASK
 801e31c:	60fb      	str	r3, [r7, #12]
  return(result);
 801e31e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e322:	b672      	cpsid	i
}
 801e324:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801e326:	88bb      	ldrh	r3, [r7, #4]
 801e328:	79f9      	ldrb	r1, [r7, #7]
 801e32a:	683a      	ldr	r2, [r7, #0]
 801e32c:	4806      	ldr	r0, [pc, #24]	; (801e348 <SUBGRF_WriteCommand+0x40>)
 801e32e:	f7e8 fdf3 	bl	8006f18 <HAL_SUBGHZ_ExecSetCmd>
 801e332:	697b      	ldr	r3, [r7, #20]
 801e334:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e336:	693b      	ldr	r3, [r7, #16]
 801e338:	f383 8810 	msr	PRIMASK, r3
}
 801e33c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e33e:	bf00      	nop
 801e340:	3718      	adds	r7, #24
 801e342:	46bd      	mov	sp, r7
 801e344:	bd80      	pop	{r7, pc}
 801e346:	bf00      	nop
 801e348:	20000a74 	.word	0x20000a74

0801e34c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801e34c:	b580      	push	{r7, lr}
 801e34e:	b086      	sub	sp, #24
 801e350:	af00      	add	r7, sp, #0
 801e352:	4603      	mov	r3, r0
 801e354:	6039      	str	r1, [r7, #0]
 801e356:	71fb      	strb	r3, [r7, #7]
 801e358:	4613      	mov	r3, r2
 801e35a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e35c:	f3ef 8310 	mrs	r3, PRIMASK
 801e360:	60fb      	str	r3, [r7, #12]
  return(result);
 801e362:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801e364:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e366:	b672      	cpsid	i
}
 801e368:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801e36a:	88bb      	ldrh	r3, [r7, #4]
 801e36c:	79f9      	ldrb	r1, [r7, #7]
 801e36e:	683a      	ldr	r2, [r7, #0]
 801e370:	4806      	ldr	r0, [pc, #24]	; (801e38c <SUBGRF_ReadCommand+0x40>)
 801e372:	f7e8 fe30 	bl	8006fd6 <HAL_SUBGHZ_ExecGetCmd>
 801e376:	697b      	ldr	r3, [r7, #20]
 801e378:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e37a:	693b      	ldr	r3, [r7, #16]
 801e37c:	f383 8810 	msr	PRIMASK, r3
}
 801e380:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801e382:	bf00      	nop
 801e384:	3718      	adds	r7, #24
 801e386:	46bd      	mov	sp, r7
 801e388:	bd80      	pop	{r7, pc}
 801e38a:	bf00      	nop
 801e38c:	20000a74 	.word	0x20000a74

0801e390 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801e390:	b580      	push	{r7, lr}
 801e392:	b084      	sub	sp, #16
 801e394:	af00      	add	r7, sp, #0
 801e396:	4603      	mov	r3, r0
 801e398:	460a      	mov	r2, r1
 801e39a:	71fb      	strb	r3, [r7, #7]
 801e39c:	4613      	mov	r3, r2
 801e39e:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801e3a0:	2301      	movs	r3, #1
 801e3a2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801e3a4:	79bb      	ldrb	r3, [r7, #6]
 801e3a6:	2b01      	cmp	r3, #1
 801e3a8:	d10d      	bne.n	801e3c6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801e3aa:	79fb      	ldrb	r3, [r7, #7]
 801e3ac:	2b01      	cmp	r3, #1
 801e3ae:	d104      	bne.n	801e3ba <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801e3b0:	2302      	movs	r3, #2
 801e3b2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801e3b4:	2004      	movs	r0, #4
 801e3b6:	f000 f8df 	bl	801e578 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801e3ba:	79fb      	ldrb	r3, [r7, #7]
 801e3bc:	2b02      	cmp	r3, #2
 801e3be:	d107      	bne.n	801e3d0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801e3c0:	2303      	movs	r3, #3
 801e3c2:	73fb      	strb	r3, [r7, #15]
 801e3c4:	e004      	b.n	801e3d0 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801e3c6:	79bb      	ldrb	r3, [r7, #6]
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d101      	bne.n	801e3d0 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801e3cc:	2301      	movs	r3, #1
 801e3ce:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801e3d0:	7bfb      	ldrb	r3, [r7, #15]
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f7ed ffbc 	bl	800c350 <RBI_ConfigRFSwitch>
}
 801e3d8:	bf00      	nop
 801e3da:	3710      	adds	r7, #16
 801e3dc:	46bd      	mov	sp, r7
 801e3de:	bd80      	pop	{r7, pc}

0801e3e0 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 801e3e0:	b580      	push	{r7, lr}
 801e3e2:	b084      	sub	sp, #16
 801e3e4:	af00      	add	r7, sp, #0
 801e3e6:	4603      	mov	r3, r0
 801e3e8:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801e3ea:	2301      	movs	r3, #1
 801e3ec:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801e3ee:	f7ed ffbd 	bl	800c36c <RBI_GetTxConfig>
 801e3f2:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801e3f4:	68bb      	ldr	r3, [r7, #8]
 801e3f6:	2b02      	cmp	r3, #2
 801e3f8:	d016      	beq.n	801e428 <SUBGRF_SetRfTxPower+0x48>
 801e3fa:	68bb      	ldr	r3, [r7, #8]
 801e3fc:	2b02      	cmp	r3, #2
 801e3fe:	dc16      	bgt.n	801e42e <SUBGRF_SetRfTxPower+0x4e>
 801e400:	68bb      	ldr	r3, [r7, #8]
 801e402:	2b00      	cmp	r3, #0
 801e404:	d003      	beq.n	801e40e <SUBGRF_SetRfTxPower+0x2e>
 801e406:	68bb      	ldr	r3, [r7, #8]
 801e408:	2b01      	cmp	r3, #1
 801e40a:	d00a      	beq.n	801e422 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801e40c:	e00f      	b.n	801e42e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801e40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e412:	2b0f      	cmp	r3, #15
 801e414:	dd02      	ble.n	801e41c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801e416:	2302      	movs	r3, #2
 801e418:	73fb      	strb	r3, [r7, #15]
            break;
 801e41a:	e009      	b.n	801e430 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801e41c:	2301      	movs	r3, #1
 801e41e:	73fb      	strb	r3, [r7, #15]
            break;
 801e420:	e006      	b.n	801e430 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801e422:	2301      	movs	r3, #1
 801e424:	73fb      	strb	r3, [r7, #15]
            break;
 801e426:	e003      	b.n	801e430 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801e428:	2302      	movs	r3, #2
 801e42a:	73fb      	strb	r3, [r7, #15]
            break;
 801e42c:	e000      	b.n	801e430 <SUBGRF_SetRfTxPower+0x50>
            break;
 801e42e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801e430:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e434:	7bfb      	ldrb	r3, [r7, #15]
 801e436:	2202      	movs	r2, #2
 801e438:	4618      	mov	r0, r3
 801e43a:	f7ff fc35 	bl	801dca8 <SUBGRF_SetTxParams>

    return paSelect;
 801e43e:	7bfb      	ldrb	r3, [r7, #15]
}
 801e440:	4618      	mov	r0, r3
 801e442:	3710      	adds	r7, #16
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}

0801e448 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801e448:	b480      	push	{r7}
 801e44a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801e44c:	2301      	movs	r3, #1
}
 801e44e:	4618      	mov	r0, r3
 801e450:	46bd      	mov	sp, r7
 801e452:	bc80      	pop	{r7}
 801e454:	4770      	bx	lr
	...

0801e458 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e458:	b580      	push	{r7, lr}
 801e45a:	b082      	sub	sp, #8
 801e45c:	af00      	add	r7, sp, #0
 801e45e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801e460:	4b03      	ldr	r3, [pc, #12]	; (801e470 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	2001      	movs	r0, #1
 801e466:	4798      	blx	r3
}
 801e468:	bf00      	nop
 801e46a:	3708      	adds	r7, #8
 801e46c:	46bd      	mov	sp, r7
 801e46e:	bd80      	pop	{r7, pc}
 801e470:	200041ec 	.word	0x200041ec

0801e474 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e474:	b580      	push	{r7, lr}
 801e476:	b082      	sub	sp, #8
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801e47c:	4b03      	ldr	r3, [pc, #12]	; (801e48c <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	2002      	movs	r0, #2
 801e482:	4798      	blx	r3
}
 801e484:	bf00      	nop
 801e486:	3708      	adds	r7, #8
 801e488:	46bd      	mov	sp, r7
 801e48a:	bd80      	pop	{r7, pc}
 801e48c:	200041ec 	.word	0x200041ec

0801e490 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801e490:	b580      	push	{r7, lr}
 801e492:	b082      	sub	sp, #8
 801e494:	af00      	add	r7, sp, #0
 801e496:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801e498:	4b03      	ldr	r3, [pc, #12]	; (801e4a8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	2040      	movs	r0, #64	; 0x40
 801e49e:	4798      	blx	r3
}
 801e4a0:	bf00      	nop
 801e4a2:	3708      	adds	r7, #8
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bd80      	pop	{r7, pc}
 801e4a8:	200041ec 	.word	0x200041ec

0801e4ac <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801e4ac:	b580      	push	{r7, lr}
 801e4ae:	b082      	sub	sp, #8
 801e4b0:	af00      	add	r7, sp, #0
 801e4b2:	6078      	str	r0, [r7, #4]
 801e4b4:	460b      	mov	r3, r1
 801e4b6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801e4b8:	78fb      	ldrb	r3, [r7, #3]
 801e4ba:	2b00      	cmp	r3, #0
 801e4bc:	d002      	beq.n	801e4c4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801e4be:	2b01      	cmp	r3, #1
 801e4c0:	d005      	beq.n	801e4ce <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801e4c2:	e00a      	b.n	801e4da <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801e4c4:	4b07      	ldr	r3, [pc, #28]	; (801e4e4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	2080      	movs	r0, #128	; 0x80
 801e4ca:	4798      	blx	r3
            break;
 801e4cc:	e005      	b.n	801e4da <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801e4ce:	4b05      	ldr	r3, [pc, #20]	; (801e4e4 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801e4d6:	4798      	blx	r3
            break;
 801e4d8:	bf00      	nop
    }
}
 801e4da:	bf00      	nop
 801e4dc:	3708      	adds	r7, #8
 801e4de:	46bd      	mov	sp, r7
 801e4e0:	bd80      	pop	{r7, pc}
 801e4e2:	bf00      	nop
 801e4e4:	200041ec 	.word	0x200041ec

0801e4e8 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e4e8:	b580      	push	{r7, lr}
 801e4ea:	b082      	sub	sp, #8
 801e4ec:	af00      	add	r7, sp, #0
 801e4ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801e4f0:	4b04      	ldr	r3, [pc, #16]	; (801e504 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 801e4f8:	4798      	blx	r3
}
 801e4fa:	bf00      	nop
 801e4fc:	3708      	adds	r7, #8
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd80      	pop	{r7, pc}
 801e502:	bf00      	nop
 801e504:	200041ec 	.word	0x200041ec

0801e508 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b082      	sub	sp, #8
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801e510:	4b03      	ldr	r3, [pc, #12]	; (801e520 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	2020      	movs	r0, #32
 801e516:	4798      	blx	r3
}
 801e518:	bf00      	nop
 801e51a:	3708      	adds	r7, #8
 801e51c:	46bd      	mov	sp, r7
 801e51e:	bd80      	pop	{r7, pc}
 801e520:	200041ec 	.word	0x200041ec

0801e524 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e524:	b580      	push	{r7, lr}
 801e526:	b082      	sub	sp, #8
 801e528:	af00      	add	r7, sp, #0
 801e52a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801e52c:	4b03      	ldr	r3, [pc, #12]	; (801e53c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	2004      	movs	r0, #4
 801e532:	4798      	blx	r3
}
 801e534:	bf00      	nop
 801e536:	3708      	adds	r7, #8
 801e538:	46bd      	mov	sp, r7
 801e53a:	bd80      	pop	{r7, pc}
 801e53c:	200041ec 	.word	0x200041ec

0801e540 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e540:	b580      	push	{r7, lr}
 801e542:	b082      	sub	sp, #8
 801e544:	af00      	add	r7, sp, #0
 801e546:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801e548:	4b03      	ldr	r3, [pc, #12]	; (801e558 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801e54a:	681b      	ldr	r3, [r3, #0]
 801e54c:	2008      	movs	r0, #8
 801e54e:	4798      	blx	r3
}
 801e550:	bf00      	nop
 801e552:	3708      	adds	r7, #8
 801e554:	46bd      	mov	sp, r7
 801e556:	bd80      	pop	{r7, pc}
 801e558:	200041ec 	.word	0x200041ec

0801e55c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801e55c:	b580      	push	{r7, lr}
 801e55e:	b082      	sub	sp, #8
 801e560:	af00      	add	r7, sp, #0
 801e562:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801e564:	4b03      	ldr	r3, [pc, #12]	; (801e574 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	2010      	movs	r0, #16
 801e56a:	4798      	blx	r3
}
 801e56c:	bf00      	nop
 801e56e:	3708      	adds	r7, #8
 801e570:	46bd      	mov	sp, r7
 801e572:	bd80      	pop	{r7, pc}
 801e574:	200041ec 	.word	0x200041ec

0801e578 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801e578:	b580      	push	{r7, lr}
 801e57a:	b084      	sub	sp, #16
 801e57c:	af00      	add	r7, sp, #0
 801e57e:	4603      	mov	r3, r0
 801e580:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801e582:	f7ed ff01 	bl	800c388 <RBI_IsDCDC>
 801e586:	4603      	mov	r3, r0
 801e588:	2b01      	cmp	r3, #1
 801e58a:	d112      	bne.n	801e5b2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801e58c:	f640 1023 	movw	r0, #2339	; 0x923
 801e590:	f7ff fe1e 	bl	801e1d0 <SUBGRF_ReadRegister>
 801e594:	4603      	mov	r3, r0
 801e596:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801e598:	7bfb      	ldrb	r3, [r7, #15]
 801e59a:	f023 0306 	bic.w	r3, r3, #6
 801e59e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801e5a0:	7bfa      	ldrb	r2, [r7, #15]
 801e5a2:	79fb      	ldrb	r3, [r7, #7]
 801e5a4:	4313      	orrs	r3, r2
 801e5a6:	b2db      	uxtb	r3, r3
 801e5a8:	4619      	mov	r1, r3
 801e5aa:	f640 1023 	movw	r0, #2339	; 0x923
 801e5ae:	f7ff fdfb 	bl	801e1a8 <SUBGRF_WriteRegister>
  }
}
 801e5b2:	bf00      	nop
 801e5b4:	3710      	adds	r7, #16
 801e5b6:	46bd      	mov	sp, r7
 801e5b8:	bd80      	pop	{r7, pc}
	...

0801e5bc <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801e5bc:	b480      	push	{r7}
 801e5be:	b085      	sub	sp, #20
 801e5c0:	af00      	add	r7, sp, #0
 801e5c2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	2b00      	cmp	r3, #0
 801e5c8:	d101      	bne.n	801e5ce <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801e5ca:	231f      	movs	r3, #31
 801e5cc:	e016      	b.n	801e5fc <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e5ce:	2300      	movs	r3, #0
 801e5d0:	73fb      	strb	r3, [r7, #15]
 801e5d2:	e00f      	b.n	801e5f4 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801e5d4:	7bfb      	ldrb	r3, [r7, #15]
 801e5d6:	4a0c      	ldr	r2, [pc, #48]	; (801e608 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e5d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801e5dc:	687a      	ldr	r2, [r7, #4]
 801e5de:	429a      	cmp	r2, r3
 801e5e0:	d205      	bcs.n	801e5ee <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801e5e2:	7bfb      	ldrb	r3, [r7, #15]
 801e5e4:	4a08      	ldr	r2, [pc, #32]	; (801e608 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801e5e6:	00db      	lsls	r3, r3, #3
 801e5e8:	4413      	add	r3, r2
 801e5ea:	791b      	ldrb	r3, [r3, #4]
 801e5ec:	e006      	b.n	801e5fc <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801e5ee:	7bfb      	ldrb	r3, [r7, #15]
 801e5f0:	3301      	adds	r3, #1
 801e5f2:	73fb      	strb	r3, [r7, #15]
 801e5f4:	7bfb      	ldrb	r3, [r7, #15]
 801e5f6:	2b15      	cmp	r3, #21
 801e5f8:	d9ec      	bls.n	801e5d4 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801e5fa:	e7fe      	b.n	801e5fa <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801e5fc:	4618      	mov	r0, r3
 801e5fe:	3714      	adds	r7, #20
 801e600:	46bd      	mov	sp, r7
 801e602:	bc80      	pop	{r7}
 801e604:	4770      	bx	lr
 801e606:	bf00      	nop
 801e608:	080233c4 	.word	0x080233c4

0801e60c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801e60c:	b580      	push	{r7, lr}
 801e60e:	b08a      	sub	sp, #40	; 0x28
 801e610:	af00      	add	r7, sp, #0
 801e612:	6078      	str	r0, [r7, #4]
 801e614:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801e616:	4b35      	ldr	r3, [pc, #212]	; (801e6ec <SUBGRF_GetCFO+0xe0>)
 801e618:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 801e61a:	f640 0007 	movw	r0, #2055	; 0x807
 801e61e:	f7ff fdd7 	bl	801e1d0 <SUBGRF_ReadRegister>
 801e622:	4603      	mov	r3, r0
 801e624:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801e626:	7ffb      	ldrb	r3, [r7, #31]
 801e628:	08db      	lsrs	r3, r3, #3
 801e62a:	b2db      	uxtb	r3, r3
 801e62c:	f003 0303 	and.w	r3, r3, #3
 801e630:	3328      	adds	r3, #40	; 0x28
 801e632:	443b      	add	r3, r7
 801e634:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801e638:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801e63a:	7ffb      	ldrb	r3, [r7, #31]
 801e63c:	f003 0307 	and.w	r3, r3, #7
 801e640:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801e642:	7fba      	ldrb	r2, [r7, #30]
 801e644:	7f7b      	ldrb	r3, [r7, #29]
 801e646:	3b01      	subs	r3, #1
 801e648:	fa02 f303 	lsl.w	r3, r2, r3
 801e64c:	461a      	mov	r2, r3
 801e64e:	4b28      	ldr	r3, [pc, #160]	; (801e6f0 <SUBGRF_GetCFO+0xe4>)
 801e650:	fbb3 f3f2 	udiv	r3, r3, r2
 801e654:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801e656:	69ba      	ldr	r2, [r7, #24]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	fbb2 f3f3 	udiv	r3, r2, r3
 801e65e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801e660:	2301      	movs	r3, #1
 801e662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801e666:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e66a:	697a      	ldr	r2, [r7, #20]
 801e66c:	fb02 f303 	mul.w	r3, r2, r3
 801e670:	2b07      	cmp	r3, #7
 801e672:	d802      	bhi.n	801e67a <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801e674:	2302      	movs	r3, #2
 801e676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801e67a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e67e:	697a      	ldr	r2, [r7, #20]
 801e680:	fb02 f303 	mul.w	r3, r2, r3
 801e684:	2b03      	cmp	r3, #3
 801e686:	d802      	bhi.n	801e68e <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801e688:	2304      	movs	r3, #4
 801e68a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801e68e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801e692:	69bb      	ldr	r3, [r7, #24]
 801e694:	fb02 f303 	mul.w	r3, r2, r3
 801e698:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 801e69a:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801e69e:	f7ff fd97 	bl	801e1d0 <SUBGRF_ReadRegister>
 801e6a2:	4603      	mov	r3, r0
 801e6a4:	021b      	lsls	r3, r3, #8
 801e6a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801e6aa:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 801e6ac:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801e6b0:	f7ff fd8e 	bl	801e1d0 <SUBGRF_ReadRegister>
 801e6b4:	4603      	mov	r3, r0
 801e6b6:	461a      	mov	r2, r3
 801e6b8:	6a3b      	ldr	r3, [r7, #32]
 801e6ba:	4313      	orrs	r3, r2
 801e6bc:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801e6be:	6a3b      	ldr	r3, [r7, #32]
 801e6c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d005      	beq.n	801e6d4 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801e6c8:	6a3b      	ldr	r3, [r7, #32]
 801e6ca:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801e6ce:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801e6d2:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801e6d4:	693b      	ldr	r3, [r7, #16]
 801e6d6:	095b      	lsrs	r3, r3, #5
 801e6d8:	6a3a      	ldr	r2, [r7, #32]
 801e6da:	fb02 f303 	mul.w	r3, r2, r3
 801e6de:	11da      	asrs	r2, r3, #7
 801e6e0:	683b      	ldr	r3, [r7, #0]
 801e6e2:	601a      	str	r2, [r3, #0]
}
 801e6e4:	bf00      	nop
 801e6e6:	3728      	adds	r7, #40	; 0x28
 801e6e8:	46bd      	mov	sp, r7
 801e6ea:	bd80      	pop	{r7, pc}
 801e6ec:	0c0a0804 	.word	0x0c0a0804
 801e6f0:	01e84800 	.word	0x01e84800

0801e6f4 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801e6f4:	b480      	push	{r7}
 801e6f6:	b087      	sub	sp, #28
 801e6f8:	af00      	add	r7, sp, #0
 801e6fa:	4603      	mov	r3, r0
 801e6fc:	60b9      	str	r1, [r7, #8]
 801e6fe:	607a      	str	r2, [r7, #4]
 801e700:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801e702:	2300      	movs	r3, #0
 801e704:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801e706:	f04f 33ff 	mov.w	r3, #4294967295
 801e70a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801e70c:	697b      	ldr	r3, [r7, #20]
}
 801e70e:	4618      	mov	r0, r3
 801e710:	371c      	adds	r7, #28
 801e712:	46bd      	mov	sp, r7
 801e714:	bc80      	pop	{r7}
 801e716:	4770      	bx	lr

0801e718 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801e718:	b480      	push	{r7}
 801e71a:	b087      	sub	sp, #28
 801e71c:	af00      	add	r7, sp, #0
 801e71e:	4603      	mov	r3, r0
 801e720:	60b9      	str	r1, [r7, #8]
 801e722:	607a      	str	r2, [r7, #4]
 801e724:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801e726:	2300      	movs	r3, #0
 801e728:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801e72a:	f04f 33ff 	mov.w	r3, #4294967295
 801e72e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801e730:	697b      	ldr	r3, [r7, #20]
}
 801e732:	4618      	mov	r0, r3
 801e734:	371c      	adds	r7, #28
 801e736:	46bd      	mov	sp, r7
 801e738:	bc80      	pop	{r7}
 801e73a:	4770      	bx	lr

0801e73c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801e73c:	b480      	push	{r7}
 801e73e:	b085      	sub	sp, #20
 801e740:	af00      	add	r7, sp, #0
 801e742:	60f8      	str	r0, [r7, #12]
 801e744:	60b9      	str	r1, [r7, #8]
 801e746:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801e748:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801e74c:	4618      	mov	r0, r3
 801e74e:	3714      	adds	r7, #20
 801e750:	46bd      	mov	sp, r7
 801e752:	bc80      	pop	{r7}
 801e754:	4770      	bx	lr

0801e756 <RFW_DeInit>:

void RFW_DeInit( void)
{
 801e756:	b480      	push	{r7}
 801e758:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801e75a:	bf00      	nop
 801e75c:	46bd      	mov	sp, r7
 801e75e:	bc80      	pop	{r7}
 801e760:	4770      	bx	lr

0801e762 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801e762:	b480      	push	{r7}
 801e764:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801e766:	2300      	movs	r3, #0
#endif
}
 801e768:	4618      	mov	r0, r3
 801e76a:	46bd      	mov	sp, r7
 801e76c:	bc80      	pop	{r7}
 801e76e:	4770      	bx	lr

0801e770 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801e770:	b480      	push	{r7}
 801e772:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801e774:	2300      	movs	r3, #0
#endif
}
 801e776:	4618      	mov	r0, r3
 801e778:	46bd      	mov	sp, r7
 801e77a:	bc80      	pop	{r7}
 801e77c:	4770      	bx	lr

0801e77e <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801e77e:	b480      	push	{r7}
 801e780:	b083      	sub	sp, #12
 801e782:	af00      	add	r7, sp, #0
 801e784:	4603      	mov	r3, r0
 801e786:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801e788:	bf00      	nop
 801e78a:	370c      	adds	r7, #12
 801e78c:	46bd      	mov	sp, r7
 801e78e:	bc80      	pop	{r7}
 801e790:	4770      	bx	lr

0801e792 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801e792:	b480      	push	{r7}
 801e794:	b087      	sub	sp, #28
 801e796:	af00      	add	r7, sp, #0
 801e798:	60f8      	str	r0, [r7, #12]
 801e79a:	460b      	mov	r3, r1
 801e79c:	607a      	str	r2, [r7, #4]
 801e79e:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801e7a0:	f04f 33ff 	mov.w	r3, #4294967295
 801e7a4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 801e7a6:	697b      	ldr	r3, [r7, #20]
}
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	371c      	adds	r7, #28
 801e7ac:	46bd      	mov	sp, r7
 801e7ae:	bc80      	pop	{r7}
 801e7b0:	4770      	bx	lr

0801e7b2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801e7b2:	b480      	push	{r7}
 801e7b4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801e7b6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	46bd      	mov	sp, r7
 801e7be:	bc80      	pop	{r7}
 801e7c0:	4770      	bx	lr

0801e7c2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801e7c2:	b480      	push	{r7}
 801e7c4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801e7c6:	bf00      	nop
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	bc80      	pop	{r7}
 801e7cc:	4770      	bx	lr

0801e7ce <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801e7ce:	b480      	push	{r7}
 801e7d0:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801e7d2:	bf00      	nop
 801e7d4:	46bd      	mov	sp, r7
 801e7d6:	bc80      	pop	{r7}
 801e7d8:	4770      	bx	lr

0801e7da <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801e7da:	b480      	push	{r7}
 801e7dc:	b083      	sub	sp, #12
 801e7de:	af00      	add	r7, sp, #0
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801e7e4:	bf00      	nop
 801e7e6:	370c      	adds	r7, #12
 801e7e8:	46bd      	mov	sp, r7
 801e7ea:	bc80      	pop	{r7}
 801e7ec:	4770      	bx	lr
	...

0801e7f0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e7f0:	b580      	push	{r7, lr}
 801e7f2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e7f4:	2218      	movs	r2, #24
 801e7f6:	2100      	movs	r1, #0
 801e7f8:	4807      	ldr	r0, [pc, #28]	; (801e818 <UTIL_ADV_TRACE_Init+0x28>)
 801e7fa:	f000 fb48 	bl	801ee8e <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e7fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e802:	2100      	movs	r1, #0
 801e804:	4805      	ldr	r0, [pc, #20]	; (801e81c <UTIL_ADV_TRACE_Init+0x2c>)
 801e806:	f000 fb42 	bl	801ee8e <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e80a:	4b05      	ldr	r3, [pc, #20]	; (801e820 <UTIL_ADV_TRACE_Init+0x30>)
 801e80c:	681b      	ldr	r3, [r3, #0]
 801e80e:	4805      	ldr	r0, [pc, #20]	; (801e824 <UTIL_ADV_TRACE_Init+0x34>)
 801e810:	4798      	blx	r3
 801e812:	4603      	mov	r3, r0
}
 801e814:	4618      	mov	r0, r3
 801e816:	bd80      	pop	{r7, pc}
 801e818:	200041f0 	.word	0x200041f0
 801e81c:	20004208 	.word	0x20004208
 801e820:	08022b94 	.word	0x08022b94
 801e824:	0801eac5 	.word	0x0801eac5

0801e828 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e828:	b480      	push	{r7}
 801e82a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e82c:	4b06      	ldr	r3, [pc, #24]	; (801e848 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e82e:	8a5a      	ldrh	r2, [r3, #18]
 801e830:	4b05      	ldr	r3, [pc, #20]	; (801e848 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e832:	8a1b      	ldrh	r3, [r3, #16]
 801e834:	429a      	cmp	r2, r3
 801e836:	d101      	bne.n	801e83c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e838:	2301      	movs	r3, #1
 801e83a:	e000      	b.n	801e83e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e83c:	2300      	movs	r3, #0
}
 801e83e:	4618      	mov	r0, r3
 801e840:	46bd      	mov	sp, r7
 801e842:	bc80      	pop	{r7}
 801e844:	4770      	bx	lr
 801e846:	bf00      	nop
 801e848:	200041f0 	.word	0x200041f0

0801e84c <UTIL_ADV_TRACE_StartRxProcess>:

UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_StartRxProcess(void (*UserCallback)(uint8_t *PData, uint16_t Size, uint8_t Error))
{
 801e84c:	b580      	push	{r7, lr}
 801e84e:	b082      	sub	sp, #8
 801e850:	af00      	add	r7, sp, #0
 801e852:	6078      	str	r0, [r7, #4]
  /* start the RX process */
  return UTIL_TraceDriver.StartRx(UserCallback);
 801e854:	4b04      	ldr	r3, [pc, #16]	; (801e868 <UTIL_ADV_TRACE_StartRxProcess+0x1c>)
 801e856:	689b      	ldr	r3, [r3, #8]
 801e858:	6878      	ldr	r0, [r7, #4]
 801e85a:	4798      	blx	r3
 801e85c:	4603      	mov	r3, r0
}
 801e85e:	4618      	mov	r0, r3
 801e860:	3708      	adds	r7, #8
 801e862:	46bd      	mov	sp, r7
 801e864:	bd80      	pop	{r7, pc}
 801e866:	bf00      	nop
 801e868:	08022b94 	.word	0x08022b94

0801e86c <UTIL_ADV_TRACE_COND_FSend>:

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e86c:	b408      	push	{r3}
 801e86e:	b580      	push	{r7, lr}
 801e870:	b08d      	sub	sp, #52	; 0x34
 801e872:	af00      	add	r7, sp, #0
 801e874:	60f8      	str	r0, [r7, #12]
 801e876:	60b9      	str	r1, [r7, #8]
 801e878:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e87a:	2300      	movs	r3, #0
 801e87c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e87e:	2300      	movs	r3, #0
 801e880:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e882:	4b37      	ldr	r3, [pc, #220]	; (801e960 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e884:	7a1b      	ldrb	r3, [r3, #8]
 801e886:	461a      	mov	r2, r3
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	4293      	cmp	r3, r2
 801e88c:	d902      	bls.n	801e894 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e88e:	f06f 0304 	mvn.w	r3, #4
 801e892:	e05e      	b.n	801e952 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e894:	4b32      	ldr	r3, [pc, #200]	; (801e960 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e896:	68da      	ldr	r2, [r3, #12]
 801e898:	68bb      	ldr	r3, [r7, #8]
 801e89a:	4013      	ands	r3, r2
 801e89c:	68ba      	ldr	r2, [r7, #8]
 801e89e:	429a      	cmp	r2, r3
 801e8a0:	d002      	beq.n	801e8a8 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e8a2:	f06f 0305 	mvn.w	r3, #5
 801e8a6:	e054      	b.n	801e952 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e8a8:	4b2d      	ldr	r3, [pc, #180]	; (801e960 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e8aa:	685b      	ldr	r3, [r3, #4]
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d00a      	beq.n	801e8c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d007      	beq.n	801e8c6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e8b6:	4b2a      	ldr	r3, [pc, #168]	; (801e960 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e8b8:	685b      	ldr	r3, [r3, #4]
 801e8ba:	f107 0116 	add.w	r1, r7, #22
 801e8be:	f107 0218 	add.w	r2, r7, #24
 801e8c2:	4610      	mov	r0, r2
 801e8c4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e8c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e8ca:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e8ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e8d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e8d4:	4823      	ldr	r0, [pc, #140]	; (801e964 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e8d6:	f001 ff79 	bl	80207cc <tiny_vsnprintf_like>
 801e8da:	4603      	mov	r3, r0
 801e8dc:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e8de:	f000 f9fb 	bl	801ecd8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e8e2:	8afa      	ldrh	r2, [r7, #22]
 801e8e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e8e6:	4413      	add	r3, r2
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	f107 0214 	add.w	r2, r7, #20
 801e8ee:	4611      	mov	r1, r2
 801e8f0:	4618      	mov	r0, r3
 801e8f2:	f000 f973 	bl	801ebdc <TRACE_AllocateBufer>
 801e8f6:	4603      	mov	r3, r0
 801e8f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e8fc:	d025      	beq.n	801e94a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e8fe:	2300      	movs	r3, #0
 801e900:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e902:	e00e      	b.n	801e922 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e904:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e906:	8aba      	ldrh	r2, [r7, #20]
 801e908:	3330      	adds	r3, #48	; 0x30
 801e90a:	443b      	add	r3, r7
 801e90c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e910:	4b15      	ldr	r3, [pc, #84]	; (801e968 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e912:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e914:	8abb      	ldrh	r3, [r7, #20]
 801e916:	3301      	adds	r3, #1
 801e918:	b29b      	uxth	r3, r3
 801e91a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e91c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e91e:	3301      	adds	r3, #1
 801e920:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e922:	8afb      	ldrh	r3, [r7, #22]
 801e924:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e926:	429a      	cmp	r2, r3
 801e928:	d3ec      	bcc.n	801e904 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e92a:	8abb      	ldrh	r3, [r7, #20]
 801e92c:	461a      	mov	r2, r3
 801e92e:	4b0e      	ldr	r3, [pc, #56]	; (801e968 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e930:	18d0      	adds	r0, r2, r3
 801e932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e936:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e93a:	f001 ff47 	bl	80207cc <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e93e:	f000 f9e9 	bl	801ed14 <TRACE_UnLock>

    return TRACE_Send();
 801e942:	f000 f83b 	bl	801e9bc <TRACE_Send>
 801e946:	4603      	mov	r3, r0
 801e948:	e003      	b.n	801e952 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e94a:	f000 f9e3 	bl	801ed14 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e94e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e952:	4618      	mov	r0, r3
 801e954:	3734      	adds	r7, #52	; 0x34
 801e956:	46bd      	mov	sp, r7
 801e958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e95c:	b001      	add	sp, #4
 801e95e:	4770      	bx	lr
 801e960:	200041f0 	.word	0x200041f0
 801e964:	20004608 	.word	0x20004608
 801e968:	20004208 	.word	0x20004208

0801e96c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e96c:	b480      	push	{r7}
 801e96e:	b083      	sub	sp, #12
 801e970:	af00      	add	r7, sp, #0
 801e972:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e974:	4a03      	ldr	r2, [pc, #12]	; (801e984 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e976:	687b      	ldr	r3, [r7, #4]
 801e978:	6053      	str	r3, [r2, #4]
}
 801e97a:	bf00      	nop
 801e97c:	370c      	adds	r7, #12
 801e97e:	46bd      	mov	sp, r7
 801e980:	bc80      	pop	{r7}
 801e982:	4770      	bx	lr
 801e984:	200041f0 	.word	0x200041f0

0801e988 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e988:	b480      	push	{r7}
 801e98a:	b083      	sub	sp, #12
 801e98c:	af00      	add	r7, sp, #0
 801e98e:	4603      	mov	r3, r0
 801e990:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e992:	4a04      	ldr	r2, [pc, #16]	; (801e9a4 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e994:	79fb      	ldrb	r3, [r7, #7]
 801e996:	7213      	strb	r3, [r2, #8]
}
 801e998:	bf00      	nop
 801e99a:	370c      	adds	r7, #12
 801e99c:	46bd      	mov	sp, r7
 801e99e:	bc80      	pop	{r7}
 801e9a0:	4770      	bx	lr
 801e9a2:	bf00      	nop
 801e9a4:	200041f0 	.word	0x200041f0

0801e9a8 <UTIL_ADV_TRACE_GetVerboseLevel>:

uint8_t UTIL_ADV_TRACE_GetVerboseLevel(void)
{
 801e9a8:	b480      	push	{r7}
 801e9aa:	af00      	add	r7, sp, #0
  return ADV_TRACE_Ctx.CurrentVerboseLevel;
 801e9ac:	4b02      	ldr	r3, [pc, #8]	; (801e9b8 <UTIL_ADV_TRACE_GetVerboseLevel+0x10>)
 801e9ae:	7a1b      	ldrb	r3, [r3, #8]
}
 801e9b0:	4618      	mov	r0, r3
 801e9b2:	46bd      	mov	sp, r7
 801e9b4:	bc80      	pop	{r7}
 801e9b6:	4770      	bx	lr
 801e9b8:	200041f0 	.word	0x200041f0

0801e9bc <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b088      	sub	sp, #32
 801e9c0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e9c2:	2300      	movs	r3, #0
 801e9c4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9ca:	f3ef 8310 	mrs	r3, PRIMASK
 801e9ce:	613b      	str	r3, [r7, #16]
  return(result);
 801e9d0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9d4:	b672      	cpsid	i
}
 801e9d6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e9d8:	f000 f9ba 	bl	801ed50 <TRACE_IsLocked>
 801e9dc:	4603      	mov	r3, r0
 801e9de:	2b00      	cmp	r3, #0
 801e9e0:	d15d      	bne.n	801ea9e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e9e2:	f000 f979 	bl	801ecd8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e9e6:	4b34      	ldr	r3, [pc, #208]	; (801eab8 <TRACE_Send+0xfc>)
 801e9e8:	8a1a      	ldrh	r2, [r3, #16]
 801e9ea:	4b33      	ldr	r3, [pc, #204]	; (801eab8 <TRACE_Send+0xfc>)
 801e9ec:	8a5b      	ldrh	r3, [r3, #18]
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	d04d      	beq.n	801ea8e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e9f2:	4b31      	ldr	r3, [pc, #196]	; (801eab8 <TRACE_Send+0xfc>)
 801e9f4:	789b      	ldrb	r3, [r3, #2]
 801e9f6:	2b01      	cmp	r3, #1
 801e9f8:	d117      	bne.n	801ea2a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e9fa:	4b2f      	ldr	r3, [pc, #188]	; (801eab8 <TRACE_Send+0xfc>)
 801e9fc:	881a      	ldrh	r2, [r3, #0]
 801e9fe:	4b2e      	ldr	r3, [pc, #184]	; (801eab8 <TRACE_Send+0xfc>)
 801ea00:	8a1b      	ldrh	r3, [r3, #16]
 801ea02:	1ad3      	subs	r3, r2, r3
 801ea04:	b29a      	uxth	r2, r3
 801ea06:	4b2c      	ldr	r3, [pc, #176]	; (801eab8 <TRACE_Send+0xfc>)
 801ea08:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ea0a:	4b2b      	ldr	r3, [pc, #172]	; (801eab8 <TRACE_Send+0xfc>)
 801ea0c:	2202      	movs	r2, #2
 801ea0e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ea10:	4b29      	ldr	r3, [pc, #164]	; (801eab8 <TRACE_Send+0xfc>)
 801ea12:	2200      	movs	r2, #0
 801ea14:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ea16:	4b28      	ldr	r3, [pc, #160]	; (801eab8 <TRACE_Send+0xfc>)
 801ea18:	8a9b      	ldrh	r3, [r3, #20]
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d105      	bne.n	801ea2a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ea1e:	4b26      	ldr	r3, [pc, #152]	; (801eab8 <TRACE_Send+0xfc>)
 801ea20:	2200      	movs	r2, #0
 801ea22:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ea24:	4b24      	ldr	r3, [pc, #144]	; (801eab8 <TRACE_Send+0xfc>)
 801ea26:	2200      	movs	r2, #0
 801ea28:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ea2a:	4b23      	ldr	r3, [pc, #140]	; (801eab8 <TRACE_Send+0xfc>)
 801ea2c:	789b      	ldrb	r3, [r3, #2]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d115      	bne.n	801ea5e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ea32:	4b21      	ldr	r3, [pc, #132]	; (801eab8 <TRACE_Send+0xfc>)
 801ea34:	8a5a      	ldrh	r2, [r3, #18]
 801ea36:	4b20      	ldr	r3, [pc, #128]	; (801eab8 <TRACE_Send+0xfc>)
 801ea38:	8a1b      	ldrh	r3, [r3, #16]
 801ea3a:	429a      	cmp	r2, r3
 801ea3c:	d908      	bls.n	801ea50 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ea3e:	4b1e      	ldr	r3, [pc, #120]	; (801eab8 <TRACE_Send+0xfc>)
 801ea40:	8a5a      	ldrh	r2, [r3, #18]
 801ea42:	4b1d      	ldr	r3, [pc, #116]	; (801eab8 <TRACE_Send+0xfc>)
 801ea44:	8a1b      	ldrh	r3, [r3, #16]
 801ea46:	1ad3      	subs	r3, r2, r3
 801ea48:	b29a      	uxth	r2, r3
 801ea4a:	4b1b      	ldr	r3, [pc, #108]	; (801eab8 <TRACE_Send+0xfc>)
 801ea4c:	829a      	strh	r2, [r3, #20]
 801ea4e:	e006      	b.n	801ea5e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ea50:	4b19      	ldr	r3, [pc, #100]	; (801eab8 <TRACE_Send+0xfc>)
 801ea52:	8a1b      	ldrh	r3, [r3, #16]
 801ea54:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ea58:	b29a      	uxth	r2, r3
 801ea5a:	4b17      	ldr	r3, [pc, #92]	; (801eab8 <TRACE_Send+0xfc>)
 801ea5c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801ea5e:	4b16      	ldr	r3, [pc, #88]	; (801eab8 <TRACE_Send+0xfc>)
 801ea60:	8a1b      	ldrh	r3, [r3, #16]
 801ea62:	461a      	mov	r2, r3
 801ea64:	4b15      	ldr	r3, [pc, #84]	; (801eabc <TRACE_Send+0x100>)
 801ea66:	4413      	add	r3, r2
 801ea68:	61bb      	str	r3, [r7, #24]
 801ea6a:	697b      	ldr	r3, [r7, #20]
 801ea6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	f383 8810 	msr	PRIMASK, r3
}
 801ea74:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801ea76:	f7e2 ff05 	bl	8001884 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801ea7a:	4b11      	ldr	r3, [pc, #68]	; (801eac0 <TRACE_Send+0x104>)
 801ea7c:	68db      	ldr	r3, [r3, #12]
 801ea7e:	4a0e      	ldr	r2, [pc, #56]	; (801eab8 <TRACE_Send+0xfc>)
 801ea80:	8a92      	ldrh	r2, [r2, #20]
 801ea82:	4611      	mov	r1, r2
 801ea84:	69b8      	ldr	r0, [r7, #24]
 801ea86:	4798      	blx	r3
 801ea88:	4603      	mov	r3, r0
 801ea8a:	77fb      	strb	r3, [r7, #31]
 801ea8c:	e00d      	b.n	801eaaa <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801ea8e:	f000 f941 	bl	801ed14 <TRACE_UnLock>
 801ea92:	697b      	ldr	r3, [r7, #20]
 801ea94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea96:	68bb      	ldr	r3, [r7, #8]
 801ea98:	f383 8810 	msr	PRIMASK, r3
}
 801ea9c:	e005      	b.n	801eaaa <TRACE_Send+0xee>
 801ea9e:	697b      	ldr	r3, [r7, #20]
 801eaa0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	f383 8810 	msr	PRIMASK, r3
}
 801eaa8:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801eaaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801eaae:	4618      	mov	r0, r3
 801eab0:	3720      	adds	r7, #32
 801eab2:	46bd      	mov	sp, r7
 801eab4:	bd80      	pop	{r7, pc}
 801eab6:	bf00      	nop
 801eab8:	200041f0 	.word	0x200041f0
 801eabc:	20004208 	.word	0x20004208
 801eac0:	08022b94 	.word	0x08022b94

0801eac4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b088      	sub	sp, #32
 801eac8:	af00      	add	r7, sp, #0
 801eaca:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801eacc:	2300      	movs	r3, #0
 801eace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ead0:	f3ef 8310 	mrs	r3, PRIMASK
 801ead4:	617b      	str	r3, [r7, #20]
  return(result);
 801ead6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ead8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801eada:	b672      	cpsid	i
}
 801eadc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801eade:	4b3c      	ldr	r3, [pc, #240]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eae0:	789b      	ldrb	r3, [r3, #2]
 801eae2:	2b02      	cmp	r3, #2
 801eae4:	d106      	bne.n	801eaf4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eae6:	4b3a      	ldr	r3, [pc, #232]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eae8:	2200      	movs	r2, #0
 801eaea:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eaec:	4b38      	ldr	r3, [pc, #224]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eaee:	2200      	movs	r2, #0
 801eaf0:	821a      	strh	r2, [r3, #16]
 801eaf2:	e00a      	b.n	801eb0a <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801eaf4:	4b36      	ldr	r3, [pc, #216]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eaf6:	8a1a      	ldrh	r2, [r3, #16]
 801eaf8:	4b35      	ldr	r3, [pc, #212]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eafa:	8a9b      	ldrh	r3, [r3, #20]
 801eafc:	4413      	add	r3, r2
 801eafe:	b29b      	uxth	r3, r3
 801eb00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801eb04:	b29a      	uxth	r2, r3
 801eb06:	4b32      	ldr	r3, [pc, #200]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb08:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801eb0a:	4b31      	ldr	r3, [pc, #196]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb0c:	8a1a      	ldrh	r2, [r3, #16]
 801eb0e:	4b30      	ldr	r3, [pc, #192]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb10:	8a5b      	ldrh	r3, [r3, #18]
 801eb12:	429a      	cmp	r2, r3
 801eb14:	d04d      	beq.n	801ebb2 <TRACE_TxCpltCallback+0xee>
 801eb16:	4b2e      	ldr	r3, [pc, #184]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb18:	8adb      	ldrh	r3, [r3, #22]
 801eb1a:	2b01      	cmp	r3, #1
 801eb1c:	d149      	bne.n	801ebb2 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801eb1e:	4b2c      	ldr	r3, [pc, #176]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb20:	789b      	ldrb	r3, [r3, #2]
 801eb22:	2b01      	cmp	r3, #1
 801eb24:	d117      	bne.n	801eb56 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801eb26:	4b2a      	ldr	r3, [pc, #168]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb28:	881a      	ldrh	r2, [r3, #0]
 801eb2a:	4b29      	ldr	r3, [pc, #164]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb2c:	8a1b      	ldrh	r3, [r3, #16]
 801eb2e:	1ad3      	subs	r3, r2, r3
 801eb30:	b29a      	uxth	r2, r3
 801eb32:	4b27      	ldr	r3, [pc, #156]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb34:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801eb36:	4b26      	ldr	r3, [pc, #152]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb38:	2202      	movs	r2, #2
 801eb3a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801eb3c:	4b24      	ldr	r3, [pc, #144]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb3e:	2200      	movs	r2, #0
 801eb40:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801eb42:	4b23      	ldr	r3, [pc, #140]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb44:	8a9b      	ldrh	r3, [r3, #20]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	d105      	bne.n	801eb56 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801eb4a:	4b21      	ldr	r3, [pc, #132]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb4c:	2200      	movs	r2, #0
 801eb4e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801eb50:	4b1f      	ldr	r3, [pc, #124]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb52:	2200      	movs	r2, #0
 801eb54:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801eb56:	4b1e      	ldr	r3, [pc, #120]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb58:	789b      	ldrb	r3, [r3, #2]
 801eb5a:	2b00      	cmp	r3, #0
 801eb5c:	d115      	bne.n	801eb8a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801eb5e:	4b1c      	ldr	r3, [pc, #112]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb60:	8a5a      	ldrh	r2, [r3, #18]
 801eb62:	4b1b      	ldr	r3, [pc, #108]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb64:	8a1b      	ldrh	r3, [r3, #16]
 801eb66:	429a      	cmp	r2, r3
 801eb68:	d908      	bls.n	801eb7c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801eb6a:	4b19      	ldr	r3, [pc, #100]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb6c:	8a5a      	ldrh	r2, [r3, #18]
 801eb6e:	4b18      	ldr	r3, [pc, #96]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb70:	8a1b      	ldrh	r3, [r3, #16]
 801eb72:	1ad3      	subs	r3, r2, r3
 801eb74:	b29a      	uxth	r2, r3
 801eb76:	4b16      	ldr	r3, [pc, #88]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb78:	829a      	strh	r2, [r3, #20]
 801eb7a:	e006      	b.n	801eb8a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801eb7c:	4b14      	ldr	r3, [pc, #80]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb7e:	8a1b      	ldrh	r3, [r3, #16]
 801eb80:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801eb84:	b29a      	uxth	r2, r3
 801eb86:	4b12      	ldr	r3, [pc, #72]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb88:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801eb8a:	4b11      	ldr	r3, [pc, #68]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eb8c:	8a1b      	ldrh	r3, [r3, #16]
 801eb8e:	461a      	mov	r2, r3
 801eb90:	4b10      	ldr	r3, [pc, #64]	; (801ebd4 <TRACE_TxCpltCallback+0x110>)
 801eb92:	4413      	add	r3, r2
 801eb94:	61fb      	str	r3, [r7, #28]
 801eb96:	69bb      	ldr	r3, [r7, #24]
 801eb98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801eb9a:	693b      	ldr	r3, [r7, #16]
 801eb9c:	f383 8810 	msr	PRIMASK, r3
}
 801eba0:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801eba2:	4b0d      	ldr	r3, [pc, #52]	; (801ebd8 <TRACE_TxCpltCallback+0x114>)
 801eba4:	68db      	ldr	r3, [r3, #12]
 801eba6:	4a0a      	ldr	r2, [pc, #40]	; (801ebd0 <TRACE_TxCpltCallback+0x10c>)
 801eba8:	8a92      	ldrh	r2, [r2, #20]
 801ebaa:	4611      	mov	r1, r2
 801ebac:	69f8      	ldr	r0, [r7, #28]
 801ebae:	4798      	blx	r3
 801ebb0:	e00a      	b.n	801ebc8 <TRACE_TxCpltCallback+0x104>
 801ebb2:	69bb      	ldr	r3, [r7, #24]
 801ebb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ebb6:	68fb      	ldr	r3, [r7, #12]
 801ebb8:	f383 8810 	msr	PRIMASK, r3
}
 801ebbc:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801ebbe:	f7e2 fe69 	bl	8001894 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801ebc2:	f000 f8a7 	bl	801ed14 <TRACE_UnLock>
  }
}
 801ebc6:	bf00      	nop
 801ebc8:	bf00      	nop
 801ebca:	3720      	adds	r7, #32
 801ebcc:	46bd      	mov	sp, r7
 801ebce:	bd80      	pop	{r7, pc}
 801ebd0:	200041f0 	.word	0x200041f0
 801ebd4:	20004208 	.word	0x20004208
 801ebd8:	08022b94 	.word	0x08022b94

0801ebdc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801ebdc:	b480      	push	{r7}
 801ebde:	b087      	sub	sp, #28
 801ebe0:	af00      	add	r7, sp, #0
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	6039      	str	r1, [r7, #0]
 801ebe6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801ebe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ebec:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ebee:	f3ef 8310 	mrs	r3, PRIMASK
 801ebf2:	60fb      	str	r3, [r7, #12]
  return(result);
 801ebf4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ebf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ebf8:	b672      	cpsid	i
}
 801ebfa:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801ebfc:	4b35      	ldr	r3, [pc, #212]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ebfe:	8a5a      	ldrh	r2, [r3, #18]
 801ec00:	4b34      	ldr	r3, [pc, #208]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec02:	8a1b      	ldrh	r3, [r3, #16]
 801ec04:	429a      	cmp	r2, r3
 801ec06:	d11b      	bne.n	801ec40 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ec08:	4b32      	ldr	r3, [pc, #200]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec0a:	8a5b      	ldrh	r3, [r3, #18]
 801ec0c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ec10:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801ec12:	88fa      	ldrh	r2, [r7, #6]
 801ec14:	8afb      	ldrh	r3, [r7, #22]
 801ec16:	429a      	cmp	r2, r3
 801ec18:	d33a      	bcc.n	801ec90 <TRACE_AllocateBufer+0xb4>
 801ec1a:	4b2e      	ldr	r3, [pc, #184]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec1c:	8a1b      	ldrh	r3, [r3, #16]
 801ec1e:	88fa      	ldrh	r2, [r7, #6]
 801ec20:	429a      	cmp	r2, r3
 801ec22:	d235      	bcs.n	801ec90 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ec24:	4b2b      	ldr	r3, [pc, #172]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec26:	2201      	movs	r2, #1
 801ec28:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ec2a:	4b2a      	ldr	r3, [pc, #168]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec2c:	8a5a      	ldrh	r2, [r3, #18]
 801ec2e:	4b29      	ldr	r3, [pc, #164]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec30:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ec32:	4b28      	ldr	r3, [pc, #160]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec34:	8a1b      	ldrh	r3, [r3, #16]
 801ec36:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ec38:	4b26      	ldr	r3, [pc, #152]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec3a:	2200      	movs	r2, #0
 801ec3c:	825a      	strh	r2, [r3, #18]
 801ec3e:	e027      	b.n	801ec90 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ec40:	4b24      	ldr	r3, [pc, #144]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec42:	8a5a      	ldrh	r2, [r3, #18]
 801ec44:	4b23      	ldr	r3, [pc, #140]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec46:	8a1b      	ldrh	r3, [r3, #16]
 801ec48:	429a      	cmp	r2, r3
 801ec4a:	d91b      	bls.n	801ec84 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801ec4c:	4b21      	ldr	r3, [pc, #132]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec4e:	8a5b      	ldrh	r3, [r3, #18]
 801ec50:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ec54:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801ec56:	88fa      	ldrh	r2, [r7, #6]
 801ec58:	8afb      	ldrh	r3, [r7, #22]
 801ec5a:	429a      	cmp	r2, r3
 801ec5c:	d318      	bcc.n	801ec90 <TRACE_AllocateBufer+0xb4>
 801ec5e:	4b1d      	ldr	r3, [pc, #116]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec60:	8a1b      	ldrh	r3, [r3, #16]
 801ec62:	88fa      	ldrh	r2, [r7, #6]
 801ec64:	429a      	cmp	r2, r3
 801ec66:	d213      	bcs.n	801ec90 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ec68:	4b1a      	ldr	r3, [pc, #104]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec6a:	2201      	movs	r2, #1
 801ec6c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ec6e:	4b19      	ldr	r3, [pc, #100]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec70:	8a5a      	ldrh	r2, [r3, #18]
 801ec72:	4b18      	ldr	r3, [pc, #96]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec74:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ec76:	4b17      	ldr	r3, [pc, #92]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec78:	8a1b      	ldrh	r3, [r3, #16]
 801ec7a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ec7c:	4b15      	ldr	r3, [pc, #84]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec7e:	2200      	movs	r2, #0
 801ec80:	825a      	strh	r2, [r3, #18]
 801ec82:	e005      	b.n	801ec90 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ec84:	4b13      	ldr	r3, [pc, #76]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec86:	8a1a      	ldrh	r2, [r3, #16]
 801ec88:	4b12      	ldr	r3, [pc, #72]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec8a:	8a5b      	ldrh	r3, [r3, #18]
 801ec8c:	1ad3      	subs	r3, r2, r3
 801ec8e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ec90:	8afa      	ldrh	r2, [r7, #22]
 801ec92:	88fb      	ldrh	r3, [r7, #6]
 801ec94:	429a      	cmp	r2, r3
 801ec96:	d90f      	bls.n	801ecb8 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ec98:	4b0e      	ldr	r3, [pc, #56]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ec9a:	8a5a      	ldrh	r2, [r3, #18]
 801ec9c:	683b      	ldr	r3, [r7, #0]
 801ec9e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801eca0:	4b0c      	ldr	r3, [pc, #48]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801eca2:	8a5a      	ldrh	r2, [r3, #18]
 801eca4:	88fb      	ldrh	r3, [r7, #6]
 801eca6:	4413      	add	r3, r2
 801eca8:	b29b      	uxth	r3, r3
 801ecaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ecae:	b29a      	uxth	r2, r3
 801ecb0:	4b08      	ldr	r3, [pc, #32]	; (801ecd4 <TRACE_AllocateBufer+0xf8>)
 801ecb2:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ecb4:	2300      	movs	r3, #0
 801ecb6:	82bb      	strh	r3, [r7, #20]
 801ecb8:	693b      	ldr	r3, [r7, #16]
 801ecba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecbc:	68bb      	ldr	r3, [r7, #8]
 801ecbe:	f383 8810 	msr	PRIMASK, r3
}
 801ecc2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801ecc4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801ecc8:	4618      	mov	r0, r3
 801ecca:	371c      	adds	r7, #28
 801eccc:	46bd      	mov	sp, r7
 801ecce:	bc80      	pop	{r7}
 801ecd0:	4770      	bx	lr
 801ecd2:	bf00      	nop
 801ecd4:	200041f0 	.word	0x200041f0

0801ecd8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801ecd8:	b480      	push	{r7}
 801ecda:	b085      	sub	sp, #20
 801ecdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ecde:	f3ef 8310 	mrs	r3, PRIMASK
 801ece2:	607b      	str	r3, [r7, #4]
  return(result);
 801ece4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ece6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ece8:	b672      	cpsid	i
}
 801ecea:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801ecec:	4b08      	ldr	r3, [pc, #32]	; (801ed10 <TRACE_Lock+0x38>)
 801ecee:	8adb      	ldrh	r3, [r3, #22]
 801ecf0:	3301      	adds	r3, #1
 801ecf2:	b29a      	uxth	r2, r3
 801ecf4:	4b06      	ldr	r3, [pc, #24]	; (801ed10 <TRACE_Lock+0x38>)
 801ecf6:	82da      	strh	r2, [r3, #22]
 801ecf8:	68fb      	ldr	r3, [r7, #12]
 801ecfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ecfc:	68bb      	ldr	r3, [r7, #8]
 801ecfe:	f383 8810 	msr	PRIMASK, r3
}
 801ed02:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ed04:	bf00      	nop
 801ed06:	3714      	adds	r7, #20
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	bc80      	pop	{r7}
 801ed0c:	4770      	bx	lr
 801ed0e:	bf00      	nop
 801ed10:	200041f0 	.word	0x200041f0

0801ed14 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801ed14:	b480      	push	{r7}
 801ed16:	b085      	sub	sp, #20
 801ed18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed1a:	f3ef 8310 	mrs	r3, PRIMASK
 801ed1e:	607b      	str	r3, [r7, #4]
  return(result);
 801ed20:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ed22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ed24:	b672      	cpsid	i
}
 801ed26:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ed28:	4b08      	ldr	r3, [pc, #32]	; (801ed4c <TRACE_UnLock+0x38>)
 801ed2a:	8adb      	ldrh	r3, [r3, #22]
 801ed2c:	3b01      	subs	r3, #1
 801ed2e:	b29a      	uxth	r2, r3
 801ed30:	4b06      	ldr	r3, [pc, #24]	; (801ed4c <TRACE_UnLock+0x38>)
 801ed32:	82da      	strh	r2, [r3, #22]
 801ed34:	68fb      	ldr	r3, [r7, #12]
 801ed36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ed38:	68bb      	ldr	r3, [r7, #8]
 801ed3a:	f383 8810 	msr	PRIMASK, r3
}
 801ed3e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ed40:	bf00      	nop
 801ed42:	3714      	adds	r7, #20
 801ed44:	46bd      	mov	sp, r7
 801ed46:	bc80      	pop	{r7}
 801ed48:	4770      	bx	lr
 801ed4a:	bf00      	nop
 801ed4c:	200041f0 	.word	0x200041f0

0801ed50 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ed50:	b480      	push	{r7}
 801ed52:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ed54:	4b05      	ldr	r3, [pc, #20]	; (801ed6c <TRACE_IsLocked+0x1c>)
 801ed56:	8adb      	ldrh	r3, [r3, #22]
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	bf14      	ite	ne
 801ed5c:	2301      	movne	r3, #1
 801ed5e:	2300      	moveq	r3, #0
 801ed60:	b2db      	uxtb	r3, r3
}
 801ed62:	4618      	mov	r0, r3
 801ed64:	46bd      	mov	sp, r7
 801ed66:	bc80      	pop	{r7}
 801ed68:	4770      	bx	lr
 801ed6a:	bf00      	nop
 801ed6c:	200041f0 	.word	0x200041f0

0801ed70 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ed70:	b480      	push	{r7}
 801ed72:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed74:	4b04      	ldr	r3, [pc, #16]	; (801ed88 <UTIL_LPM_Init+0x18>)
 801ed76:	2200      	movs	r2, #0
 801ed78:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ed7a:	4b04      	ldr	r3, [pc, #16]	; (801ed8c <UTIL_LPM_Init+0x1c>)
 801ed7c:	2200      	movs	r2, #0
 801ed7e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ed80:	bf00      	nop
 801ed82:	46bd      	mov	sp, r7
 801ed84:	bc80      	pop	{r7}
 801ed86:	4770      	bx	lr
 801ed88:	20004808 	.word	0x20004808
 801ed8c:	2000480c 	.word	0x2000480c

0801ed90 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ed90:	b480      	push	{r7}
 801ed92:	b087      	sub	sp, #28
 801ed94:	af00      	add	r7, sp, #0
 801ed96:	6078      	str	r0, [r7, #4]
 801ed98:	460b      	mov	r3, r1
 801ed9a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ed9c:	f3ef 8310 	mrs	r3, PRIMASK
 801eda0:	613b      	str	r3, [r7, #16]
  return(result);
 801eda2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801eda4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801eda6:	b672      	cpsid	i
}
 801eda8:	bf00      	nop
  
  switch( state )
 801edaa:	78fb      	ldrb	r3, [r7, #3]
 801edac:	2b00      	cmp	r3, #0
 801edae:	d008      	beq.n	801edc2 <UTIL_LPM_SetStopMode+0x32>
 801edb0:	2b01      	cmp	r3, #1
 801edb2:	d10e      	bne.n	801edd2 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801edb4:	4b0d      	ldr	r3, [pc, #52]	; (801edec <UTIL_LPM_SetStopMode+0x5c>)
 801edb6:	681a      	ldr	r2, [r3, #0]
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	4313      	orrs	r3, r2
 801edbc:	4a0b      	ldr	r2, [pc, #44]	; (801edec <UTIL_LPM_SetStopMode+0x5c>)
 801edbe:	6013      	str	r3, [r2, #0]
      break;
 801edc0:	e008      	b.n	801edd4 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	43da      	mvns	r2, r3
 801edc6:	4b09      	ldr	r3, [pc, #36]	; (801edec <UTIL_LPM_SetStopMode+0x5c>)
 801edc8:	681b      	ldr	r3, [r3, #0]
 801edca:	4013      	ands	r3, r2
 801edcc:	4a07      	ldr	r2, [pc, #28]	; (801edec <UTIL_LPM_SetStopMode+0x5c>)
 801edce:	6013      	str	r3, [r2, #0]
      break;
 801edd0:	e000      	b.n	801edd4 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801edd2:	bf00      	nop
 801edd4:	697b      	ldr	r3, [r7, #20]
 801edd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	f383 8810 	msr	PRIMASK, r3
}
 801edde:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ede0:	bf00      	nop
 801ede2:	371c      	adds	r7, #28
 801ede4:	46bd      	mov	sp, r7
 801ede6:	bc80      	pop	{r7}
 801ede8:	4770      	bx	lr
 801edea:	bf00      	nop
 801edec:	20004808 	.word	0x20004808

0801edf0 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801edf0:	b480      	push	{r7}
 801edf2:	b087      	sub	sp, #28
 801edf4:	af00      	add	r7, sp, #0
 801edf6:	6078      	str	r0, [r7, #4]
 801edf8:	460b      	mov	r3, r1
 801edfa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801edfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ee00:	613b      	str	r3, [r7, #16]
  return(result);
 801ee02:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ee04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ee06:	b672      	cpsid	i
}
 801ee08:	bf00      	nop
  
  switch(state)
 801ee0a:	78fb      	ldrb	r3, [r7, #3]
 801ee0c:	2b00      	cmp	r3, #0
 801ee0e:	d008      	beq.n	801ee22 <UTIL_LPM_SetOffMode+0x32>
 801ee10:	2b01      	cmp	r3, #1
 801ee12:	d10e      	bne.n	801ee32 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ee14:	4b0d      	ldr	r3, [pc, #52]	; (801ee4c <UTIL_LPM_SetOffMode+0x5c>)
 801ee16:	681a      	ldr	r2, [r3, #0]
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	4313      	orrs	r3, r2
 801ee1c:	4a0b      	ldr	r2, [pc, #44]	; (801ee4c <UTIL_LPM_SetOffMode+0x5c>)
 801ee1e:	6013      	str	r3, [r2, #0]
      break;
 801ee20:	e008      	b.n	801ee34 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	43da      	mvns	r2, r3
 801ee26:	4b09      	ldr	r3, [pc, #36]	; (801ee4c <UTIL_LPM_SetOffMode+0x5c>)
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	4013      	ands	r3, r2
 801ee2c:	4a07      	ldr	r2, [pc, #28]	; (801ee4c <UTIL_LPM_SetOffMode+0x5c>)
 801ee2e:	6013      	str	r3, [r2, #0]
      break;
 801ee30:	e000      	b.n	801ee34 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ee32:	bf00      	nop
 801ee34:	697b      	ldr	r3, [r7, #20]
 801ee36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ee38:	68fb      	ldr	r3, [r7, #12]
 801ee3a:	f383 8810 	msr	PRIMASK, r3
}
 801ee3e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ee40:	bf00      	nop
 801ee42:	371c      	adds	r7, #28
 801ee44:	46bd      	mov	sp, r7
 801ee46:	bc80      	pop	{r7}
 801ee48:	4770      	bx	lr
 801ee4a:	bf00      	nop
 801ee4c:	2000480c 	.word	0x2000480c

0801ee50 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801ee50:	b480      	push	{r7}
 801ee52:	b087      	sub	sp, #28
 801ee54:	af00      	add	r7, sp, #0
 801ee56:	60f8      	str	r0, [r7, #12]
 801ee58:	60b9      	str	r1, [r7, #8]
 801ee5a:	4613      	mov	r3, r2
 801ee5c:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801ee5e:	68fb      	ldr	r3, [r7, #12]
 801ee60:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801ee62:	68bb      	ldr	r3, [r7, #8]
 801ee64:	613b      	str	r3, [r7, #16]

  while( size-- )
 801ee66:	e007      	b.n	801ee78 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801ee68:	693a      	ldr	r2, [r7, #16]
 801ee6a:	1c53      	adds	r3, r2, #1
 801ee6c:	613b      	str	r3, [r7, #16]
 801ee6e:	697b      	ldr	r3, [r7, #20]
 801ee70:	1c59      	adds	r1, r3, #1
 801ee72:	6179      	str	r1, [r7, #20]
 801ee74:	7812      	ldrb	r2, [r2, #0]
 801ee76:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801ee78:	88fb      	ldrh	r3, [r7, #6]
 801ee7a:	1e5a      	subs	r2, r3, #1
 801ee7c:	80fa      	strh	r2, [r7, #6]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d1f2      	bne.n	801ee68 <UTIL_MEM_cpy_8+0x18>
    }
}
 801ee82:	bf00      	nop
 801ee84:	bf00      	nop
 801ee86:	371c      	adds	r7, #28
 801ee88:	46bd      	mov	sp, r7
 801ee8a:	bc80      	pop	{r7}
 801ee8c:	4770      	bx	lr

0801ee8e <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801ee8e:	b480      	push	{r7}
 801ee90:	b085      	sub	sp, #20
 801ee92:	af00      	add	r7, sp, #0
 801ee94:	6078      	str	r0, [r7, #4]
 801ee96:	460b      	mov	r3, r1
 801ee98:	70fb      	strb	r3, [r7, #3]
 801ee9a:	4613      	mov	r3, r2
 801ee9c:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801eea2:	e004      	b.n	801eeae <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	1c5a      	adds	r2, r3, #1
 801eea8:	60fa      	str	r2, [r7, #12]
 801eeaa:	78fa      	ldrb	r2, [r7, #3]
 801eeac:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801eeae:	883b      	ldrh	r3, [r7, #0]
 801eeb0:	1e5a      	subs	r2, r3, #1
 801eeb2:	803a      	strh	r2, [r7, #0]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d1f5      	bne.n	801eea4 <UTIL_MEM_set_8+0x16>
  }
}
 801eeb8:	bf00      	nop
 801eeba:	bf00      	nop
 801eebc:	3714      	adds	r7, #20
 801eebe:	46bd      	mov	sp, r7
 801eec0:	bc80      	pop	{r7}
 801eec2:	4770      	bx	lr

0801eec4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801eec4:	b580      	push	{r7, lr}
 801eec6:	b08c      	sub	sp, #48	; 0x30
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801eecc:	4b67      	ldr	r3, [pc, #412]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801eece:	681b      	ldr	r3, [r3, #0]
 801eed0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801eed2:	4b66      	ldr	r3, [pc, #408]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801eed4:	681a      	ldr	r2, [r3, #0]
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	4013      	ands	r3, r2
 801eeda:	4a64      	ldr	r2, [pc, #400]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801eedc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801eede:	e083      	b.n	801efe8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 801eee0:	2300      	movs	r3, #0
 801eee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801eee4:	e002      	b.n	801eeec <UTIL_SEQ_Run+0x28>
    {
      counter++;
 801eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eee8:	3301      	adds	r3, #1
 801eeea:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 801eeec:	4a60      	ldr	r2, [pc, #384]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801eeee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eef0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801eef4:	4b5f      	ldr	r3, [pc, #380]	; (801f074 <UTIL_SEQ_Run+0x1b0>)
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	401a      	ands	r2, r3
 801eefa:	4b5c      	ldr	r3, [pc, #368]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	4013      	ands	r3, r2
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d0f0      	beq.n	801eee6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 801ef04:	4a5a      	ldr	r2, [pc, #360]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801ef0c:	4b59      	ldr	r3, [pc, #356]	; (801f074 <UTIL_SEQ_Run+0x1b0>)
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	401a      	ands	r2, r3
 801ef12:	4b56      	ldr	r3, [pc, #344]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	4013      	ands	r3, r2
 801ef18:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801ef1a:	4a55      	ldr	r2, [pc, #340]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef1e:	00db      	lsls	r3, r3, #3
 801ef20:	4413      	add	r3, r2
 801ef22:	685a      	ldr	r2, [r3, #4]
 801ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef26:	4013      	ands	r3, r2
 801ef28:	2b00      	cmp	r3, #0
 801ef2a:	d106      	bne.n	801ef3a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801ef2c:	4a50      	ldr	r2, [pc, #320]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef30:	00db      	lsls	r3, r3, #3
 801ef32:	4413      	add	r3, r2
 801ef34:	f04f 32ff 	mov.w	r2, #4294967295
 801ef38:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801ef3a:	4a4d      	ldr	r2, [pc, #308]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef3e:	00db      	lsls	r3, r3, #3
 801ef40:	4413      	add	r3, r2
 801ef42:	685a      	ldr	r2, [r3, #4]
 801ef44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef46:	4013      	ands	r3, r2
 801ef48:	4618      	mov	r0, r3
 801ef4a:	f000 f967 	bl	801f21c <SEQ_BitPosition>
 801ef4e:	4603      	mov	r3, r0
 801ef50:	461a      	mov	r2, r3
 801ef52:	4b49      	ldr	r3, [pc, #292]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801ef54:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801ef56:	4a46      	ldr	r2, [pc, #280]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef5a:	00db      	lsls	r3, r3, #3
 801ef5c:	4413      	add	r3, r2
 801ef5e:	685a      	ldr	r2, [r3, #4]
 801ef60:	4b45      	ldr	r3, [pc, #276]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	2101      	movs	r1, #1
 801ef66:	fa01 f303 	lsl.w	r3, r1, r3
 801ef6a:	43db      	mvns	r3, r3
 801ef6c:	401a      	ands	r2, r3
 801ef6e:	4940      	ldr	r1, [pc, #256]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801ef70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef72:	00db      	lsls	r3, r3, #3
 801ef74:	440b      	add	r3, r1
 801ef76:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ef78:	f3ef 8310 	mrs	r3, PRIMASK
 801ef7c:	61bb      	str	r3, [r7, #24]
  return(result);
 801ef7e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801ef80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801ef82:	b672      	cpsid	i
}
 801ef84:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801ef86:	4b3c      	ldr	r3, [pc, #240]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	2201      	movs	r2, #1
 801ef8c:	fa02 f303 	lsl.w	r3, r2, r3
 801ef90:	43da      	mvns	r2, r3
 801ef92:	4b3a      	ldr	r3, [pc, #232]	; (801f07c <UTIL_SEQ_Run+0x1b8>)
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	4013      	ands	r3, r2
 801ef98:	4a38      	ldr	r2, [pc, #224]	; (801f07c <UTIL_SEQ_Run+0x1b8>)
 801ef9a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ef9c:	2302      	movs	r3, #2
 801ef9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801efa0:	e013      	b.n	801efca <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801efa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efa4:	3b01      	subs	r3, #1
 801efa6:	4a32      	ldr	r2, [pc, #200]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801efa8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801efac:	4b32      	ldr	r3, [pc, #200]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	2201      	movs	r2, #1
 801efb2:	fa02 f303 	lsl.w	r3, r2, r3
 801efb6:	43da      	mvns	r2, r3
 801efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efba:	3b01      	subs	r3, #1
 801efbc:	400a      	ands	r2, r1
 801efbe:	492c      	ldr	r1, [pc, #176]	; (801f070 <UTIL_SEQ_Run+0x1ac>)
 801efc0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efc6:	3b01      	subs	r3, #1
 801efc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801efca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d1e8      	bne.n	801efa2 <UTIL_SEQ_Run+0xde>
 801efd0:	6a3b      	ldr	r3, [r7, #32]
 801efd2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801efd4:	697b      	ldr	r3, [r7, #20]
 801efd6:	f383 8810 	msr	PRIMASK, r3
}
 801efda:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801efdc:	4b26      	ldr	r3, [pc, #152]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	4a27      	ldr	r2, [pc, #156]	; (801f080 <UTIL_SEQ_Run+0x1bc>)
 801efe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801efe6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 801efe8:	4b24      	ldr	r3, [pc, #144]	; (801f07c <UTIL_SEQ_Run+0x1b8>)
 801efea:	681a      	ldr	r2, [r3, #0]
 801efec:	4b21      	ldr	r3, [pc, #132]	; (801f074 <UTIL_SEQ_Run+0x1b0>)
 801efee:	681b      	ldr	r3, [r3, #0]
 801eff0:	401a      	ands	r2, r3
 801eff2:	4b1e      	ldr	r3, [pc, #120]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	4013      	ands	r3, r2
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d007      	beq.n	801f00c <UTIL_SEQ_Run+0x148>
 801effc:	4b21      	ldr	r3, [pc, #132]	; (801f084 <UTIL_SEQ_Run+0x1c0>)
 801effe:	681a      	ldr	r2, [r3, #0]
 801f000:	4b21      	ldr	r3, [pc, #132]	; (801f088 <UTIL_SEQ_Run+0x1c4>)
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	4013      	ands	r3, r2
 801f006:	2b00      	cmp	r3, #0
 801f008:	f43f af6a 	beq.w	801eee0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801f00c:	4b1a      	ldr	r3, [pc, #104]	; (801f078 <UTIL_SEQ_Run+0x1b4>)
 801f00e:	f04f 32ff 	mov.w	r2, #4294967295
 801f012:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801f014:	f000 f8f6 	bl	801f204 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f018:	f3ef 8310 	mrs	r3, PRIMASK
 801f01c:	613b      	str	r3, [r7, #16]
  return(result);
 801f01e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801f020:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f022:	b672      	cpsid	i
}
 801f024:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 801f026:	4b15      	ldr	r3, [pc, #84]	; (801f07c <UTIL_SEQ_Run+0x1b8>)
 801f028:	681a      	ldr	r2, [r3, #0]
 801f02a:	4b12      	ldr	r3, [pc, #72]	; (801f074 <UTIL_SEQ_Run+0x1b0>)
 801f02c:	681b      	ldr	r3, [r3, #0]
 801f02e:	401a      	ands	r2, r3
 801f030:	4b0e      	ldr	r3, [pc, #56]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	4013      	ands	r3, r2
 801f036:	2b00      	cmp	r3, #0
 801f038:	d108      	bne.n	801f04c <UTIL_SEQ_Run+0x188>
 801f03a:	4b12      	ldr	r3, [pc, #72]	; (801f084 <UTIL_SEQ_Run+0x1c0>)
 801f03c:	681a      	ldr	r2, [r3, #0]
 801f03e:	4b12      	ldr	r3, [pc, #72]	; (801f088 <UTIL_SEQ_Run+0x1c4>)
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	4013      	ands	r3, r2
 801f044:	2b00      	cmp	r3, #0
 801f046:	d101      	bne.n	801f04c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 801f048:	f7e2 fb12 	bl	8001670 <UTIL_SEQ_Idle>
 801f04c:	69fb      	ldr	r3, [r7, #28]
 801f04e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f050:	68fb      	ldr	r3, [r7, #12]
 801f052:	f383 8810 	msr	PRIMASK, r3
}
 801f056:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 801f058:	f000 f8da 	bl	801f210 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801f05c:	4a03      	ldr	r2, [pc, #12]	; (801f06c <UTIL_SEQ_Run+0x1a8>)
 801f05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f060:	6013      	str	r3, [r2, #0]

  return;
 801f062:	bf00      	nop
}
 801f064:	3730      	adds	r7, #48	; 0x30
 801f066:	46bd      	mov	sp, r7
 801f068:	bd80      	pop	{r7, pc}
 801f06a:	bf00      	nop
 801f06c:	20000118 	.word	0x20000118
 801f070:	200048a0 	.word	0x200048a0
 801f074:	20000114 	.word	0x20000114
 801f078:	2000481c 	.word	0x2000481c
 801f07c:	20004810 	.word	0x20004810
 801f080:	20004820 	.word	0x20004820
 801f084:	20004814 	.word	0x20004814
 801f088:	20004818 	.word	0x20004818

0801f08c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b088      	sub	sp, #32
 801f090:	af00      	add	r7, sp, #0
 801f092:	60f8      	str	r0, [r7, #12]
 801f094:	60b9      	str	r1, [r7, #8]
 801f096:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f098:	f3ef 8310 	mrs	r3, PRIMASK
 801f09c:	617b      	str	r3, [r7, #20]
  return(result);
 801f09e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801f0a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0a2:	b672      	cpsid	i
}
 801f0a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801f0a6:	68f8      	ldr	r0, [r7, #12]
 801f0a8:	f000 f8b8 	bl	801f21c <SEQ_BitPosition>
 801f0ac:	4603      	mov	r3, r0
 801f0ae:	4619      	mov	r1, r3
 801f0b0:	4a06      	ldr	r2, [pc, #24]	; (801f0cc <UTIL_SEQ_RegTask+0x40>)
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f0b8:	69fb      	ldr	r3, [r7, #28]
 801f0ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f0bc:	69bb      	ldr	r3, [r7, #24]
 801f0be:	f383 8810 	msr	PRIMASK, r3
}
 801f0c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801f0c4:	bf00      	nop
}
 801f0c6:	3720      	adds	r7, #32
 801f0c8:	46bd      	mov	sp, r7
 801f0ca:	bd80      	pop	{r7, pc}
 801f0cc:	20004820 	.word	0x20004820

0801f0d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801f0d0:	b480      	push	{r7}
 801f0d2:	b087      	sub	sp, #28
 801f0d4:	af00      	add	r7, sp, #0
 801f0d6:	6078      	str	r0, [r7, #4]
 801f0d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f0da:	f3ef 8310 	mrs	r3, PRIMASK
 801f0de:	60fb      	str	r3, [r7, #12]
  return(result);
 801f0e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f0e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f0e4:	b672      	cpsid	i
}
 801f0e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801f0e8:	4b0d      	ldr	r3, [pc, #52]	; (801f120 <UTIL_SEQ_SetTask+0x50>)
 801f0ea:	681a      	ldr	r2, [r3, #0]
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	4313      	orrs	r3, r2
 801f0f0:	4a0b      	ldr	r2, [pc, #44]	; (801f120 <UTIL_SEQ_SetTask+0x50>)
 801f0f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801f0f4:	4a0b      	ldr	r2, [pc, #44]	; (801f124 <UTIL_SEQ_SetTask+0x54>)
 801f0f6:	683b      	ldr	r3, [r7, #0]
 801f0f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	431a      	orrs	r2, r3
 801f100:	4908      	ldr	r1, [pc, #32]	; (801f124 <UTIL_SEQ_SetTask+0x54>)
 801f102:	683b      	ldr	r3, [r7, #0]
 801f104:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801f108:	697b      	ldr	r3, [r7, #20]
 801f10a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f10c:	693b      	ldr	r3, [r7, #16]
 801f10e:	f383 8810 	msr	PRIMASK, r3
}
 801f112:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f114:	bf00      	nop
}
 801f116:	371c      	adds	r7, #28
 801f118:	46bd      	mov	sp, r7
 801f11a:	bc80      	pop	{r7}
 801f11c:	4770      	bx	lr
 801f11e:	bf00      	nop
 801f120:	20004810 	.word	0x20004810
 801f124:	200048a0 	.word	0x200048a0

0801f128 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801f128:	b480      	push	{r7}
 801f12a:	b087      	sub	sp, #28
 801f12c:	af00      	add	r7, sp, #0
 801f12e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f130:	f3ef 8310 	mrs	r3, PRIMASK
 801f134:	60fb      	str	r3, [r7, #12]
  return(result);
 801f136:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801f138:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801f13a:	b672      	cpsid	i
}
 801f13c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801f13e:	4b08      	ldr	r3, [pc, #32]	; (801f160 <UTIL_SEQ_SetEvt+0x38>)
 801f140:	681a      	ldr	r2, [r3, #0]
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	4313      	orrs	r3, r2
 801f146:	4a06      	ldr	r2, [pc, #24]	; (801f160 <UTIL_SEQ_SetEvt+0x38>)
 801f148:	6013      	str	r3, [r2, #0]
 801f14a:	697b      	ldr	r3, [r7, #20]
 801f14c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f14e:	693b      	ldr	r3, [r7, #16]
 801f150:	f383 8810 	msr	PRIMASK, r3
}
 801f154:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801f156:	bf00      	nop
}
 801f158:	371c      	adds	r7, #28
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bc80      	pop	{r7}
 801f15e:	4770      	bx	lr
 801f160:	20004814 	.word	0x20004814

0801f164 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801f164:	b580      	push	{r7, lr}
 801f166:	b086      	sub	sp, #24
 801f168:	af00      	add	r7, sp, #0
 801f16a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801f16c:	4b1b      	ldr	r3, [pc, #108]	; (801f1dc <UTIL_SEQ_WaitEvt+0x78>)
 801f16e:	681b      	ldr	r3, [r3, #0]
 801f170:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801f172:	4b1a      	ldr	r3, [pc, #104]	; (801f1dc <UTIL_SEQ_WaitEvt+0x78>)
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f17a:	d102      	bne.n	801f182 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 801f17c:	2300      	movs	r3, #0
 801f17e:	617b      	str	r3, [r7, #20]
 801f180:	e005      	b.n	801f18e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 801f182:	4b16      	ldr	r3, [pc, #88]	; (801f1dc <UTIL_SEQ_WaitEvt+0x78>)
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	2201      	movs	r2, #1
 801f188:	fa02 f303 	lsl.w	r3, r2, r3
 801f18c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801f18e:	4b14      	ldr	r3, [pc, #80]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 801f194:	4a12      	ldr	r2, [pc, #72]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f196:	687b      	ldr	r3, [r7, #4]
 801f198:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 801f19a:	e005      	b.n	801f1a8 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 801f19c:	4b10      	ldr	r3, [pc, #64]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f19e:	681b      	ldr	r3, [r3, #0]
 801f1a0:	4619      	mov	r1, r3
 801f1a2:	6978      	ldr	r0, [r7, #20]
 801f1a4:	f000 f820 	bl	801f1e8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 801f1a8:	4b0e      	ldr	r3, [pc, #56]	; (801f1e4 <UTIL_SEQ_WaitEvt+0x80>)
 801f1aa:	681a      	ldr	r2, [r3, #0]
 801f1ac:	4b0c      	ldr	r3, [pc, #48]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	4013      	ands	r3, r2
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d0f2      	beq.n	801f19c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801f1b6:	4a09      	ldr	r2, [pc, #36]	; (801f1dc <UTIL_SEQ_WaitEvt+0x78>)
 801f1b8:	693b      	ldr	r3, [r7, #16]
 801f1ba:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 801f1bc:	4b08      	ldr	r3, [pc, #32]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	43da      	mvns	r2, r3
 801f1c2:	4b08      	ldr	r3, [pc, #32]	; (801f1e4 <UTIL_SEQ_WaitEvt+0x80>)
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	4013      	ands	r3, r2
 801f1c8:	4a06      	ldr	r2, [pc, #24]	; (801f1e4 <UTIL_SEQ_WaitEvt+0x80>)
 801f1ca:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 801f1cc:	4a04      	ldr	r2, [pc, #16]	; (801f1e0 <UTIL_SEQ_WaitEvt+0x7c>)
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	6013      	str	r3, [r2, #0]

  return;
 801f1d2:	bf00      	nop
}
 801f1d4:	3718      	adds	r7, #24
 801f1d6:	46bd      	mov	sp, r7
 801f1d8:	bd80      	pop	{r7, pc}
 801f1da:	bf00      	nop
 801f1dc:	2000481c 	.word	0x2000481c
 801f1e0:	20004818 	.word	0x20004818
 801f1e4:	20004814 	.word	0x20004814

0801f1e8 <UTIL_SEQ_EvtIdle>:
{
  return (EvtSet & EvtWaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 801f1e8:	b580      	push	{r7, lr}
 801f1ea:	b082      	sub	sp, #8
 801f1ec:	af00      	add	r7, sp, #0
 801f1ee:	6078      	str	r0, [r7, #4]
 801f1f0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(~TaskId_bm);
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	43db      	mvns	r3, r3
 801f1f6:	4618      	mov	r0, r3
 801f1f8:	f7ff fe64 	bl	801eec4 <UTIL_SEQ_Run>
  return;
 801f1fc:	bf00      	nop
}
 801f1fe:	3708      	adds	r7, #8
 801f200:	46bd      	mov	sp, r7
 801f202:	bd80      	pop	{r7, pc}

0801f204 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801f204:	b480      	push	{r7}
 801f206:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f208:	bf00      	nop
}
 801f20a:	46bd      	mov	sp, r7
 801f20c:	bc80      	pop	{r7}
 801f20e:	4770      	bx	lr

0801f210 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801f210:	b480      	push	{r7}
 801f212:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801f214:	bf00      	nop
}
 801f216:	46bd      	mov	sp, r7
 801f218:	bc80      	pop	{r7}
 801f21a:	4770      	bx	lr

0801f21c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801f21c:	b480      	push	{r7}
 801f21e:	b085      	sub	sp, #20
 801f220:	af00      	add	r7, sp, #0
 801f222:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 801f224:	2300      	movs	r3, #0
 801f226:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 801f228:	687b      	ldr	r3, [r7, #4]
 801f22a:	0c1b      	lsrs	r3, r3, #16
 801f22c:	041b      	lsls	r3, r3, #16
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d104      	bne.n	801f23c <SEQ_BitPosition+0x20>
 801f232:	2310      	movs	r3, #16
 801f234:	73fb      	strb	r3, [r7, #15]
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	041b      	lsls	r3, r3, #16
 801f23a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 801f23c:	687b      	ldr	r3, [r7, #4]
 801f23e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801f242:	2b00      	cmp	r3, #0
 801f244:	d105      	bne.n	801f252 <SEQ_BitPosition+0x36>
 801f246:	7bfb      	ldrb	r3, [r7, #15]
 801f248:	3308      	adds	r3, #8
 801f24a:	73fb      	strb	r3, [r7, #15]
 801f24c:	687b      	ldr	r3, [r7, #4]
 801f24e:	021b      	lsls	r3, r3, #8
 801f250:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d105      	bne.n	801f268 <SEQ_BitPosition+0x4c>
 801f25c:	7bfb      	ldrb	r3, [r7, #15]
 801f25e:	3304      	adds	r3, #4
 801f260:	73fb      	strb	r3, [r7, #15]
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	011b      	lsls	r3, r3, #4
 801f266:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	0f1b      	lsrs	r3, r3, #28
 801f26c:	4a06      	ldr	r2, [pc, #24]	; (801f288 <SEQ_BitPosition+0x6c>)
 801f26e:	5cd2      	ldrb	r2, [r2, r3]
 801f270:	7bfb      	ldrb	r3, [r7, #15]
 801f272:	4413      	add	r3, r2
 801f274:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801f276:	7bfb      	ldrb	r3, [r7, #15]
 801f278:	f1c3 031f 	rsb	r3, r3, #31
 801f27c:	b2db      	uxtb	r3, r3
}
 801f27e:	4618      	mov	r0, r3
 801f280:	3714      	adds	r7, #20
 801f282:	46bd      	mov	sp, r7
 801f284:	bc80      	pop	{r7}
 801f286:	4770      	bx	lr
 801f288:	08023474 	.word	0x08023474

0801f28c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801f28c:	b082      	sub	sp, #8
 801f28e:	b480      	push	{r7}
 801f290:	b087      	sub	sp, #28
 801f292:	af00      	add	r7, sp, #0
 801f294:	60f8      	str	r0, [r7, #12]
 801f296:	1d38      	adds	r0, r7, #4
 801f298:	e880 0006 	stmia.w	r0, {r1, r2}
 801f29c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801f29e:	2300      	movs	r3, #0
 801f2a0:	613b      	str	r3, [r7, #16]
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801f2a6:	687a      	ldr	r2, [r7, #4]
 801f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2aa:	4413      	add	r3, r2
 801f2ac:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801f2ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f2b2:	b29a      	uxth	r2, r3
 801f2b4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f2b8:	b29b      	uxth	r3, r3
 801f2ba:	4413      	add	r3, r2
 801f2bc:	b29b      	uxth	r3, r3
 801f2be:	b21b      	sxth	r3, r3
 801f2c0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801f2c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f2c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801f2ca:	db0a      	blt.n	801f2e2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801f2cc:	693b      	ldr	r3, [r7, #16]
 801f2ce:	3301      	adds	r3, #1
 801f2d0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801f2d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f2d6:	b29b      	uxth	r3, r3
 801f2d8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801f2dc:	b29b      	uxth	r3, r3
 801f2de:	b21b      	sxth	r3, r3
 801f2e0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f2e2:	68fb      	ldr	r3, [r7, #12]
 801f2e4:	461a      	mov	r2, r3
 801f2e6:	f107 0310 	add.w	r3, r7, #16
 801f2ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f2ee:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f2f2:	68f8      	ldr	r0, [r7, #12]
 801f2f4:	371c      	adds	r7, #28
 801f2f6:	46bd      	mov	sp, r7
 801f2f8:	bc80      	pop	{r7}
 801f2fa:	b002      	add	sp, #8
 801f2fc:	4770      	bx	lr

0801f2fe <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801f2fe:	b082      	sub	sp, #8
 801f300:	b480      	push	{r7}
 801f302:	b087      	sub	sp, #28
 801f304:	af00      	add	r7, sp, #0
 801f306:	60f8      	str	r0, [r7, #12]
 801f308:	1d38      	adds	r0, r7, #4
 801f30a:	e880 0006 	stmia.w	r0, {r1, r2}
 801f30e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801f310:	2300      	movs	r3, #0
 801f312:	613b      	str	r3, [r7, #16]
 801f314:	2300      	movs	r3, #0
 801f316:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801f318:	687a      	ldr	r2, [r7, #4]
 801f31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f31c:	1ad3      	subs	r3, r2, r3
 801f31e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801f320:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801f324:	b29a      	uxth	r2, r3
 801f326:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801f32a:	b29b      	uxth	r3, r3
 801f32c:	1ad3      	subs	r3, r2, r3
 801f32e:	b29b      	uxth	r3, r3
 801f330:	b21b      	sxth	r3, r3
 801f332:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801f334:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f338:	2b00      	cmp	r3, #0
 801f33a:	da0a      	bge.n	801f352 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801f33c:	693b      	ldr	r3, [r7, #16]
 801f33e:	3b01      	subs	r3, #1
 801f340:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801f342:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f346:	b29b      	uxth	r3, r3
 801f348:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801f34c:	b29b      	uxth	r3, r3
 801f34e:	b21b      	sxth	r3, r3
 801f350:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	461a      	mov	r2, r3
 801f356:	f107 0310 	add.w	r3, r7, #16
 801f35a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f35e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f362:	68f8      	ldr	r0, [r7, #12]
 801f364:	371c      	adds	r7, #28
 801f366:	46bd      	mov	sp, r7
 801f368:	bc80      	pop	{r7}
 801f36a:	b002      	add	sp, #8
 801f36c:	4770      	bx	lr
	...

0801f370 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801f370:	b580      	push	{r7, lr}
 801f372:	b088      	sub	sp, #32
 801f374:	af02      	add	r7, sp, #8
 801f376:	463b      	mov	r3, r7
 801f378:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f37c:	2300      	movs	r3, #0
 801f37e:	60bb      	str	r3, [r7, #8]
 801f380:	2300      	movs	r3, #0
 801f382:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f384:	4b10      	ldr	r3, [pc, #64]	; (801f3c8 <SysTimeSet+0x58>)
 801f386:	691b      	ldr	r3, [r3, #16]
 801f388:	f107 0208 	add.w	r2, r7, #8
 801f38c:	3204      	adds	r2, #4
 801f38e:	4610      	mov	r0, r2
 801f390:	4798      	blx	r3
 801f392:	4603      	mov	r3, r0
 801f394:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801f396:	f107 0010 	add.w	r0, r7, #16
 801f39a:	68fb      	ldr	r3, [r7, #12]
 801f39c:	9300      	str	r3, [sp, #0]
 801f39e:	68bb      	ldr	r3, [r7, #8]
 801f3a0:	463a      	mov	r2, r7
 801f3a2:	ca06      	ldmia	r2, {r1, r2}
 801f3a4:	f7ff ffab 	bl	801f2fe <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801f3a8:	4b07      	ldr	r3, [pc, #28]	; (801f3c8 <SysTimeSet+0x58>)
 801f3aa:	681b      	ldr	r3, [r3, #0]
 801f3ac:	693a      	ldr	r2, [r7, #16]
 801f3ae:	4610      	mov	r0, r2
 801f3b0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801f3b2:	4b05      	ldr	r3, [pc, #20]	; (801f3c8 <SysTimeSet+0x58>)
 801f3b4:	689b      	ldr	r3, [r3, #8]
 801f3b6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f3ba:	4610      	mov	r0, r2
 801f3bc:	4798      	blx	r3
}
 801f3be:	bf00      	nop
 801f3c0:	3718      	adds	r7, #24
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	bd80      	pop	{r7, pc}
 801f3c6:	bf00      	nop
 801f3c8:	08022b80 	.word	0x08022b80

0801f3cc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801f3cc:	b580      	push	{r7, lr}
 801f3ce:	b08a      	sub	sp, #40	; 0x28
 801f3d0:	af02      	add	r7, sp, #8
 801f3d2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f3d4:	2300      	movs	r3, #0
 801f3d6:	61bb      	str	r3, [r7, #24]
 801f3d8:	2300      	movs	r3, #0
 801f3da:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801f3dc:	2300      	movs	r3, #0
 801f3de:	613b      	str	r3, [r7, #16]
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f3e4:	4b14      	ldr	r3, [pc, #80]	; (801f438 <SysTimeGet+0x6c>)
 801f3e6:	691b      	ldr	r3, [r3, #16]
 801f3e8:	f107 0218 	add.w	r2, r7, #24
 801f3ec:	3204      	adds	r2, #4
 801f3ee:	4610      	mov	r0, r2
 801f3f0:	4798      	blx	r3
 801f3f2:	4603      	mov	r3, r0
 801f3f4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f3f6:	4b10      	ldr	r3, [pc, #64]	; (801f438 <SysTimeGet+0x6c>)
 801f3f8:	68db      	ldr	r3, [r3, #12]
 801f3fa:	4798      	blx	r3
 801f3fc:	4603      	mov	r3, r0
 801f3fe:	b21b      	sxth	r3, r3
 801f400:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f402:	4b0d      	ldr	r3, [pc, #52]	; (801f438 <SysTimeGet+0x6c>)
 801f404:	685b      	ldr	r3, [r3, #4]
 801f406:	4798      	blx	r3
 801f408:	4603      	mov	r3, r0
 801f40a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801f40c:	f107 0010 	add.w	r0, r7, #16
 801f410:	69fb      	ldr	r3, [r7, #28]
 801f412:	9300      	str	r3, [sp, #0]
 801f414:	69bb      	ldr	r3, [r7, #24]
 801f416:	f107 0208 	add.w	r2, r7, #8
 801f41a:	ca06      	ldmia	r2, {r1, r2}
 801f41c:	f7ff ff36 	bl	801f28c <SysTimeAdd>

  return sysTime;
 801f420:	687b      	ldr	r3, [r7, #4]
 801f422:	461a      	mov	r2, r3
 801f424:	f107 0310 	add.w	r3, r7, #16
 801f428:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f42c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f430:	6878      	ldr	r0, [r7, #4]
 801f432:	3720      	adds	r7, #32
 801f434:	46bd      	mov	sp, r7
 801f436:	bd80      	pop	{r7, pc}
 801f438:	08022b80 	.word	0x08022b80

0801f43c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801f43c:	b580      	push	{r7, lr}
 801f43e:	b084      	sub	sp, #16
 801f440:	af00      	add	r7, sp, #0
 801f442:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801f444:	2300      	movs	r3, #0
 801f446:	60bb      	str	r3, [r7, #8]
 801f448:	2300      	movs	r3, #0
 801f44a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801f44c:	4b0a      	ldr	r3, [pc, #40]	; (801f478 <SysTimeGetMcuTime+0x3c>)
 801f44e:	691b      	ldr	r3, [r3, #16]
 801f450:	f107 0208 	add.w	r2, r7, #8
 801f454:	3204      	adds	r2, #4
 801f456:	4610      	mov	r0, r2
 801f458:	4798      	blx	r3
 801f45a:	4603      	mov	r3, r0
 801f45c:	60bb      	str	r3, [r7, #8]
  
  return calendarTime;
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	461a      	mov	r2, r3
 801f462:	f107 0308 	add.w	r3, r7, #8
 801f466:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f46a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f46e:	6878      	ldr	r0, [r7, #4]
 801f470:	3710      	adds	r7, #16
 801f472:	46bd      	mov	sp, r7
 801f474:	bd80      	pop	{r7, pc}
 801f476:	bf00      	nop
 801f478:	08022b80 	.word	0x08022b80

0801f47c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801f47c:	b580      	push	{r7, lr}
 801f47e:	b088      	sub	sp, #32
 801f480:	af02      	add	r7, sp, #8
 801f482:	463b      	mov	r3, r7
 801f484:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f488:	4b0f      	ldr	r3, [pc, #60]	; (801f4c8 <SysTimeToMs+0x4c>)
 801f48a:	68db      	ldr	r3, [r3, #12]
 801f48c:	4798      	blx	r3
 801f48e:	4603      	mov	r3, r0
 801f490:	b21b      	sxth	r3, r3
 801f492:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f494:	4b0c      	ldr	r3, [pc, #48]	; (801f4c8 <SysTimeToMs+0x4c>)
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	4798      	blx	r3
 801f49a:	4603      	mov	r3, r0
 801f49c:	613b      	str	r3, [r7, #16]
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801f49e:	f107 0008 	add.w	r0, r7, #8
 801f4a2:	697b      	ldr	r3, [r7, #20]
 801f4a4:	9300      	str	r3, [sp, #0]
 801f4a6:	693b      	ldr	r3, [r7, #16]
 801f4a8:	463a      	mov	r2, r7
 801f4aa:	ca06      	ldmia	r2, {r1, r2}
 801f4ac:	f7ff ff27 	bl	801f2fe <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801f4b0:	68bb      	ldr	r3, [r7, #8]
 801f4b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f4b6:	fb02 f303 	mul.w	r3, r2, r3
 801f4ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801f4be:	4413      	add	r3, r2
}
 801f4c0:	4618      	mov	r0, r3
 801f4c2:	3718      	adds	r7, #24
 801f4c4:	46bd      	mov	sp, r7
 801f4c6:	bd80      	pop	{r7, pc}
 801f4c8:	08022b80 	.word	0x08022b80

0801f4cc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801f4cc:	b580      	push	{r7, lr}
 801f4ce:	b08a      	sub	sp, #40	; 0x28
 801f4d0:	af02      	add	r7, sp, #8
 801f4d2:	6078      	str	r0, [r7, #4]
 801f4d4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801f4d6:	683b      	ldr	r3, [r7, #0]
 801f4d8:	4a19      	ldr	r2, [pc, #100]	; (801f540 <SysTimeFromMs+0x74>)
 801f4da:	fba2 2303 	umull	r2, r3, r2, r3
 801f4de:	099b      	lsrs	r3, r3, #6
 801f4e0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801f4e2:	69fb      	ldr	r3, [r7, #28]
 801f4e4:	617b      	str	r3, [r7, #20]
 801f4e6:	683b      	ldr	r3, [r7, #0]
 801f4e8:	b29a      	uxth	r2, r3
 801f4ea:	69fb      	ldr	r3, [r7, #28]
 801f4ec:	b29b      	uxth	r3, r3
 801f4ee:	4619      	mov	r1, r3
 801f4f0:	0149      	lsls	r1, r1, #5
 801f4f2:	1ac9      	subs	r1, r1, r3
 801f4f4:	0089      	lsls	r1, r1, #2
 801f4f6:	440b      	add	r3, r1
 801f4f8:	00db      	lsls	r3, r3, #3
 801f4fa:	b29b      	uxth	r3, r3
 801f4fc:	1ad3      	subs	r3, r2, r3
 801f4fe:	b29b      	uxth	r3, r3
 801f500:	b21b      	sxth	r3, r3
 801f502:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801f504:	f107 030c 	add.w	r3, r7, #12
 801f508:	2200      	movs	r2, #0
 801f50a:	601a      	str	r2, [r3, #0]
 801f50c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801f50e:	4b0d      	ldr	r3, [pc, #52]	; (801f544 <SysTimeFromMs+0x78>)
 801f510:	68db      	ldr	r3, [r3, #12]
 801f512:	4798      	blx	r3
 801f514:	4603      	mov	r3, r0
 801f516:	b21b      	sxth	r3, r3
 801f518:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801f51a:	4b0a      	ldr	r3, [pc, #40]	; (801f544 <SysTimeFromMs+0x78>)
 801f51c:	685b      	ldr	r3, [r3, #4]
 801f51e:	4798      	blx	r3
 801f520:	4603      	mov	r3, r0
 801f522:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801f524:	6878      	ldr	r0, [r7, #4]
 801f526:	693b      	ldr	r3, [r7, #16]
 801f528:	9300      	str	r3, [sp, #0]
 801f52a:	68fb      	ldr	r3, [r7, #12]
 801f52c:	f107 0214 	add.w	r2, r7, #20
 801f530:	ca06      	ldmia	r2, {r1, r2}
 801f532:	f7ff feab 	bl	801f28c <SysTimeAdd>
}
 801f536:	6878      	ldr	r0, [r7, #4]
 801f538:	3720      	adds	r7, #32
 801f53a:	46bd      	mov	sp, r7
 801f53c:	bd80      	pop	{r7, pc}
 801f53e:	bf00      	nop
 801f540:	10624dd3 	.word	0x10624dd3
 801f544:	08022b80 	.word	0x08022b80

0801f548 <SysTimeLocalTime>:
        ( ( uint32_t )localtime->tm_hour * TM_SECONDS_IN_1HOUR ) );
  return nbsecs - CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS;
}

void SysTimeLocalTime( const uint32_t timestamp, struct tm *localtime )
{
 801f548:	b590      	push	{r4, r7, lr}
 801f54a:	b08d      	sub	sp, #52	; 0x34
 801f54c:	af00      	add	r7, sp, #0
 801f54e:	6078      	str	r0, [r7, #4]
 801f550:	6039      	str	r1, [r7, #0]
  uint32_t correctionMonth[4] =
 801f552:	4b54      	ldr	r3, [pc, #336]	; (801f6a4 <SysTimeLocalTime+0x15c>)
 801f554:	f107 041c 	add.w	r4, r7, #28
 801f558:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f55a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    DAYS_IN_MONTH_CORRECTION_LEAP,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM,
    DAYS_IN_MONTH_CORRECTION_NORM
  };
  uint32_t weekDays = 1; // Monday 1st January 1968
 801f55e:	2301      	movs	r3, #1
 801f560:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t minutes;
  uint32_t days;
  uint32_t divOut;
  uint32_t divReminder;

  CalendarDiv86400( timestamp + CALC_REF_YEAR_TO_UNIX_REF_YEAR_COMPENSATION_IN_SECONDS, &days, &seconds );
 801f562:	687a      	ldr	r2, [r7, #4]
 801f564:	4b50      	ldr	r3, [pc, #320]	; (801f6a8 <SysTimeLocalTime+0x160>)
 801f566:	4413      	add	r3, r2
 801f568:	f107 0218 	add.w	r2, r7, #24
 801f56c:	f107 0110 	add.w	r1, r7, #16
 801f570:	4618      	mov	r0, r3
 801f572:	f000 f8ef 	bl	801f754 <CalendarDiv86400>

  // Calculates seconds
  CalendarDiv60( seconds, &minutes, &divReminder );
 801f576:	69bb      	ldr	r3, [r7, #24]
 801f578:	f107 0208 	add.w	r2, r7, #8
 801f57c:	f107 0114 	add.w	r1, r7, #20
 801f580:	4618      	mov	r0, r3
 801f582:	f000 f95b 	bl	801f83c <CalendarDiv60>
  localtime->tm_sec = ( uint8_t )divReminder;
 801f586:	68bb      	ldr	r3, [r7, #8]
 801f588:	b2db      	uxtb	r3, r3
 801f58a:	461a      	mov	r2, r3
 801f58c:	683b      	ldr	r3, [r7, #0]
 801f58e:	601a      	str	r2, [r3, #0]

  // Calculates minutes and hours
  CalendarDiv60( minutes, &divOut, &divReminder);
 801f590:	697b      	ldr	r3, [r7, #20]
 801f592:	f107 0208 	add.w	r2, r7, #8
 801f596:	f107 010c 	add.w	r1, r7, #12
 801f59a:	4618      	mov	r0, r3
 801f59c:	f000 f94e 	bl	801f83c <CalendarDiv60>
  localtime->tm_min = ( uint8_t )divReminder;
 801f5a0:	68bb      	ldr	r3, [r7, #8]
 801f5a2:	b2db      	uxtb	r3, r3
 801f5a4:	461a      	mov	r2, r3
 801f5a6:	683b      	ldr	r3, [r7, #0]
 801f5a8:	605a      	str	r2, [r3, #4]
  localtime->tm_hour = ( uint8_t )divOut;
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	b2db      	uxtb	r3, r3
 801f5ae:	461a      	mov	r2, r3
 801f5b0:	683b      	ldr	r3, [r7, #0]
 801f5b2:	609a      	str	r2, [r3, #8]

  // Calculates year
  localtime->tm_year = DIV_365_25( days );
 801f5b4:	693b      	ldr	r3, [r7, #16]
 801f5b6:	4a3d      	ldr	r2, [pc, #244]	; (801f6ac <SysTimeLocalTime+0x164>)
 801f5b8:	fb02 f303 	mul.w	r3, r2, r3
 801f5bc:	f503 43b1 	add.w	r3, r3, #22656	; 0x5880
 801f5c0:	335e      	adds	r3, #94	; 0x5e
 801f5c2:	0e5b      	lsrs	r3, r3, #25
 801f5c4:	461a      	mov	r2, r3
 801f5c6:	683b      	ldr	r3, [r7, #0]
 801f5c8:	615a      	str	r2, [r3, #20]
  days-= DIVC_BY_4( ( TM_DAYS_IN_YEAR * 3 + TM_DAYS_IN_LEAP_YEAR ) * localtime->tm_year );
 801f5ca:	693a      	ldr	r2, [r7, #16]
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	695b      	ldr	r3, [r3, #20]
 801f5d0:	4619      	mov	r1, r3
 801f5d2:	f240 53b5 	movw	r3, #1461	; 0x5b5
 801f5d6:	fb01 f303 	mul.w	r3, r1, r3
 801f5da:	3303      	adds	r3, #3
 801f5dc:	089b      	lsrs	r3, r3, #2
 801f5de:	1ad3      	subs	r3, r2, r3
 801f5e0:	613b      	str	r3, [r7, #16]

  localtime->tm_yday = days;
 801f5e2:	693b      	ldr	r3, [r7, #16]
 801f5e4:	461a      	mov	r2, r3
 801f5e6:	683b      	ldr	r3, [r7, #0]
 801f5e8:	61da      	str	r2, [r3, #28]

  // Calculates month
  localtime->tm_mon = CalendarGetMonth( days, localtime->tm_year );
 801f5ea:	693a      	ldr	r2, [r7, #16]
 801f5ec:	683b      	ldr	r3, [r7, #0]
 801f5ee:	695b      	ldr	r3, [r3, #20]
 801f5f0:	4619      	mov	r1, r3
 801f5f2:	4610      	mov	r0, r2
 801f5f4:	f000 f85e 	bl	801f6b4 <CalendarGetMonth>
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	461a      	mov	r2, r3
 801f5fc:	683b      	ldr	r3, [r7, #0]
 801f5fe:	611a      	str	r2, [r3, #16]

  // calculates weekdays
  weekDays += DIVC_BY_4( ( localtime->tm_year * 5 ) );
 801f600:	683b      	ldr	r3, [r7, #0]
 801f602:	695a      	ldr	r2, [r3, #20]
 801f604:	4613      	mov	r3, r2
 801f606:	009b      	lsls	r3, r3, #2
 801f608:	4413      	add	r3, r2
 801f60a:	3303      	adds	r3, #3
 801f60c:	109b      	asrs	r3, r3, #2
 801f60e:	461a      	mov	r2, r3
 801f610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f612:	4413      	add	r3, r2
 801f614:	62fb      	str	r3, [r7, #44]	; 0x2c
  weekDays += days;
 801f616:	693b      	ldr	r3, [r7, #16]
 801f618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f61a:	4413      	add	r3, r2
 801f61c:	62fb      	str	r3, [r7, #44]	; 0x2c
  localtime->tm_wday = MODULO_7( weekDays );
 801f61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f620:	3301      	adds	r3, #1
 801f622:	4a23      	ldr	r2, [pc, #140]	; (801f6b0 <SysTimeLocalTime+0x168>)
 801f624:	fb02 f303 	mul.w	r3, r2, r3
 801f628:	0d5a      	lsrs	r2, r3, #21
 801f62a:	4613      	mov	r3, r2
 801f62c:	00db      	lsls	r3, r3, #3
 801f62e:	1a9b      	subs	r3, r3, r2
 801f630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f632:	1ad3      	subs	r3, r2, r3
 801f634:	461a      	mov	r2, r3
 801f636:	683b      	ldr	r3, [r7, #0]
 801f638:	619a      	str	r2, [r3, #24]

  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
        ( ( ( correctionMonth[localtime->tm_year % 4] >> ( ( localtime->tm_mon ) * 2 ) ) & 0x03 ) ) );
 801f63a:	683b      	ldr	r3, [r7, #0]
 801f63c:	695b      	ldr	r3, [r3, #20]
 801f63e:	425a      	negs	r2, r3
 801f640:	f003 0303 	and.w	r3, r3, #3
 801f644:	f002 0203 	and.w	r2, r2, #3
 801f648:	bf58      	it	pl
 801f64a:	4253      	negpl	r3, r2
 801f64c:	009b      	lsls	r3, r3, #2
 801f64e:	3330      	adds	r3, #48	; 0x30
 801f650:	443b      	add	r3, r7
 801f652:	f853 2c14 	ldr.w	r2, [r3, #-20]
 801f656:	683b      	ldr	r3, [r7, #0]
 801f658:	691b      	ldr	r3, [r3, #16]
 801f65a:	005b      	lsls	r3, r3, #1
 801f65c:	fa22 f303 	lsr.w	r3, r2, r3
 801f660:	f003 0103 	and.w	r1, r3, #3
  days -= ( DIVC_BY_2( ( localtime->tm_mon ) * ( 30 + 31 ) ) -
 801f664:	683b      	ldr	r3, [r7, #0]
 801f666:	691a      	ldr	r2, [r3, #16]
 801f668:	4613      	mov	r3, r2
 801f66a:	011b      	lsls	r3, r3, #4
 801f66c:	1a9b      	subs	r3, r3, r2
 801f66e:	009b      	lsls	r3, r3, #2
 801f670:	4413      	add	r3, r2
 801f672:	3301      	adds	r3, #1
 801f674:	105b      	asrs	r3, r3, #1
 801f676:	1aca      	subs	r2, r1, r3
 801f678:	693b      	ldr	r3, [r7, #16]
 801f67a:	4413      	add	r3, r2
 801f67c:	613b      	str	r3, [r7, #16]

  // Convert 0 to 1 indexed.
  localtime->tm_mday = days + 1;
 801f67e:	693b      	ldr	r3, [r7, #16]
 801f680:	3301      	adds	r3, #1
 801f682:	461a      	mov	r2, r3
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	60da      	str	r2, [r3, #12]

  localtime->tm_year += CALC_REF_YEAR;
 801f688:	683b      	ldr	r3, [r7, #0]
 801f68a:	695b      	ldr	r3, [r3, #20]
 801f68c:	f103 0244 	add.w	r2, r3, #68	; 0x44
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	615a      	str	r2, [r3, #20]

  localtime->tm_isdst = -1;
 801f694:	683b      	ldr	r3, [r7, #0]
 801f696:	f04f 32ff 	mov.w	r2, #4294967295
 801f69a:	621a      	str	r2, [r3, #32]
}
 801f69c:	bf00      	nop
 801f69e:	3734      	adds	r7, #52	; 0x34
 801f6a0:	46bd      	mov	sp, r7
 801f6a2:	bd90      	pop	{r4, r7, pc}
 801f6a4:	08022a4c 	.word	0x08022a4c
 801f6a8:	03c3b880 	.word	0x03c3b880
 801f6ac:	000166db 	.word	0x000166db
 801f6b0:	00049249 	.word	0x00049249

0801f6b4 <CalendarGetMonth>:
  *  @addtogroup SYSTIME_private_function
  *
  *  @{
  */
static uint32_t CalendarGetMonth( uint32_t days, uint32_t year )
{
 801f6b4:	b580      	push	{r7, lr}
 801f6b6:	b084      	sub	sp, #16
 801f6b8:	af00      	add	r7, sp, #0
 801f6ba:	6078      	str	r0, [r7, #4]
 801f6bc:	6039      	str	r1, [r7, #0]
  uint32_t month;
  if( ( year % 4 ) == 0 )
 801f6be:	683b      	ldr	r3, [r7, #0]
 801f6c0:	f003 0303 	and.w	r3, r3, #3
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d120      	bne.n	801f70a <CalendarGetMonth+0x56>
  {   /*leap year*/
    if( days < END_OF_FEBRUARY_LEAP )
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	2b3b      	cmp	r3, #59	; 0x3b
 801f6cc:	d806      	bhi.n	801f6dc <CalendarGetMonth+0x28>
    {   // January or February
      // month =  days * 2 / ( 30 + 31 );
      month = CalendarDiv61( days * 2 );
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	005b      	lsls	r3, r3, #1
 801f6d2:	4618      	mov	r0, r3
 801f6d4:	f000 f87e 	bl	801f7d4 <CalendarDiv61>
 801f6d8:	60f8      	str	r0, [r7, #12]
 801f6da:	e036      	b.n	801f74a <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_LEAP )
 801f6dc:	687b      	ldr	r3, [r7, #4]
 801f6de:	2bd4      	cmp	r3, #212	; 0xd4
 801f6e0:	d809      	bhi.n	801f6f6 <CalendarGetMonth+0x42>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_LEAP ) * 2 ) + 2;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	3b3c      	subs	r3, #60	; 0x3c
 801f6e6:	005b      	lsls	r3, r3, #1
 801f6e8:	4618      	mov	r0, r3
 801f6ea:	f000 f873 	bl	801f7d4 <CalendarDiv61>
 801f6ee:	4603      	mov	r3, r0
 801f6f0:	3302      	adds	r3, #2
 801f6f2:	60fb      	str	r3, [r7, #12]
 801f6f4:	e029      	b.n	801f74a <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_LEAP ) * 2 ) + 7;
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	3bd5      	subs	r3, #213	; 0xd5
 801f6fa:	005b      	lsls	r3, r3, #1
 801f6fc:	4618      	mov	r0, r3
 801f6fe:	f000 f869 	bl	801f7d4 <CalendarDiv61>
 801f702:	4603      	mov	r3, r0
 801f704:	3307      	adds	r3, #7
 801f706:	60fb      	str	r3, [r7, #12]
 801f708:	e01f      	b.n	801f74a <CalendarGetMonth+0x96>
    }
  }
  else
  {
    if( days < END_OF_FEBRUARY_NORM )
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	2b3a      	cmp	r3, #58	; 0x3a
 801f70e:	d806      	bhi.n	801f71e <CalendarGetMonth+0x6a>
    {   // January or February
      month = CalendarDiv61( days * 2 );
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	005b      	lsls	r3, r3, #1
 801f714:	4618      	mov	r0, r3
 801f716:	f000 f85d 	bl	801f7d4 <CalendarDiv61>
 801f71a:	60f8      	str	r0, [r7, #12]
 801f71c:	e015      	b.n	801f74a <CalendarGetMonth+0x96>
    }
    else if( days < END_OF_JULY_NORM )
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	2bd3      	cmp	r3, #211	; 0xd3
 801f722:	d809      	bhi.n	801f738 <CalendarGetMonth+0x84>
    {
      month = CalendarDiv61( ( days - END_OF_FEBRUARY_NORM ) * 2 ) + 2;
 801f724:	687b      	ldr	r3, [r7, #4]
 801f726:	3b3b      	subs	r3, #59	; 0x3b
 801f728:	005b      	lsls	r3, r3, #1
 801f72a:	4618      	mov	r0, r3
 801f72c:	f000 f852 	bl	801f7d4 <CalendarDiv61>
 801f730:	4603      	mov	r3, r0
 801f732:	3302      	adds	r3, #2
 801f734:	60fb      	str	r3, [r7, #12]
 801f736:	e008      	b.n	801f74a <CalendarGetMonth+0x96>
    }
    else
    {
      month = CalendarDiv61( ( days - END_OF_JULY_NORM ) * 2 ) + 7;
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	3bd4      	subs	r3, #212	; 0xd4
 801f73c:	005b      	lsls	r3, r3, #1
 801f73e:	4618      	mov	r0, r3
 801f740:	f000 f848 	bl	801f7d4 <CalendarDiv61>
 801f744:	4603      	mov	r3, r0
 801f746:	3307      	adds	r3, #7
 801f748:	60fb      	str	r3, [r7, #12]
    }
  }
  return month;
 801f74a:	68fb      	ldr	r3, [r7, #12]
}
 801f74c:	4618      	mov	r0, r3
 801f74e:	3710      	adds	r7, #16
 801f750:	46bd      	mov	sp, r7
 801f752:	bd80      	pop	{r7, pc}

0801f754 <CalendarDiv86400>:

static void CalendarDiv86400( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801f754:	b480      	push	{r7}
 801f756:	b087      	sub	sp, #28
 801f758:	af00      	add	r7, sp, #0
 801f75a:	60f8      	str	r0, [r7, #12]
 801f75c:	60b9      	str	r1, [r7, #8]
 801f75e:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % SECONDS_IN_1DAY;
  *out     = in / SECONDS_IN_1DAY;
#else
  uint32_t outTemp = 0;
 801f760:	2300      	movs	r3, #0
 801f762:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_86400( in );
 801f764:	68fb      	ldr	r3, [r7, #12]
 801f766:	0c9a      	lsrs	r2, r3, #18
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	0c5b      	lsrs	r3, r3, #17
 801f76c:	4413      	add	r3, r2
 801f76e:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801f770:	e010      	b.n	801f794 <CalendarDiv86400+0x40>
  {
    outTemp += divResult;
 801f772:	697a      	ldr	r2, [r7, #20]
 801f774:	693b      	ldr	r3, [r7, #16]
 801f776:	4413      	add	r3, r2
 801f778:	617b      	str	r3, [r7, #20]
    in -= divResult * 86400;
 801f77a:	693b      	ldr	r3, [r7, #16]
 801f77c:	4a13      	ldr	r2, [pc, #76]	; (801f7cc <CalendarDiv86400+0x78>)
 801f77e:	fb02 f303 	mul.w	r3, r2, r3
 801f782:	68fa      	ldr	r2, [r7, #12]
 801f784:	1ad3      	subs	r3, r2, r3
 801f786:	60fb      	str	r3, [r7, #12]
    divResult= DIV_APPROX_86400( in );
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	0c9a      	lsrs	r2, r3, #18
 801f78c:	68fb      	ldr	r3, [r7, #12]
 801f78e:	0c5b      	lsrs	r3, r3, #17
 801f790:	4413      	add	r3, r2
 801f792:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801f794:	693b      	ldr	r3, [r7, #16]
 801f796:	2b00      	cmp	r3, #0
 801f798:	d1eb      	bne.n	801f772 <CalendarDiv86400+0x1e>
  }
  if( in >= 86400 )
 801f79a:	68fb      	ldr	r3, [r7, #12]
 801f79c:	4a0c      	ldr	r2, [pc, #48]	; (801f7d0 <CalendarDiv86400+0x7c>)
 801f79e:	4293      	cmp	r3, r2
 801f7a0:	d908      	bls.n	801f7b4 <CalendarDiv86400+0x60>
  {
    outTemp += 1;
 801f7a2:	697b      	ldr	r3, [r7, #20]
 801f7a4:	3301      	adds	r3, #1
 801f7a6:	617b      	str	r3, [r7, #20]
    in -= 86400;
 801f7a8:	68fb      	ldr	r3, [r7, #12]
 801f7aa:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 801f7ae:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 801f7b2:	60fb      	str	r3, [r7, #12]
  }

  *remainder = in;
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	68fa      	ldr	r2, [r7, #12]
 801f7b8:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801f7ba:	68bb      	ldr	r3, [r7, #8]
 801f7bc:	697a      	ldr	r2, [r7, #20]
 801f7be:	601a      	str	r2, [r3, #0]
#endif
}
 801f7c0:	bf00      	nop
 801f7c2:	371c      	adds	r7, #28
 801f7c4:	46bd      	mov	sp, r7
 801f7c6:	bc80      	pop	{r7}
 801f7c8:	4770      	bx	lr
 801f7ca:	bf00      	nop
 801f7cc:	00015180 	.word	0x00015180
 801f7d0:	0001517f 	.word	0x0001517f

0801f7d4 <CalendarDiv61>:

static uint32_t CalendarDiv61( uint32_t in )
{
 801f7d4:	b480      	push	{r7}
 801f7d6:	b085      	sub	sp, #20
 801f7d8:	af00      	add	r7, sp, #0
 801f7da:	6078      	str	r0, [r7, #4]
#if 0
  return( in / 61 );
#else
  uint32_t outTemp = 0;
 801f7dc:	2300      	movs	r3, #0
 801f7de:	60fb      	str	r3, [r7, #12]
  uint32_t divResult = DIV_APPROX_61( in );
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	4a15      	ldr	r2, [pc, #84]	; (801f838 <CalendarDiv61+0x64>)
 801f7e4:	fb02 f303 	mul.w	r3, r2, r3
 801f7e8:	0d9b      	lsrs	r3, r3, #22
 801f7ea:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801f7ec:	e012      	b.n	801f814 <CalendarDiv61+0x40>
  {
    outTemp += divResult;
 801f7ee:	68fa      	ldr	r2, [r7, #12]
 801f7f0:	68bb      	ldr	r3, [r7, #8]
 801f7f2:	4413      	add	r3, r2
 801f7f4:	60fb      	str	r3, [r7, #12]
    in -= divResult * 61;
 801f7f6:	68ba      	ldr	r2, [r7, #8]
 801f7f8:	4613      	mov	r3, r2
 801f7fa:	011b      	lsls	r3, r3, #4
 801f7fc:	1a9b      	subs	r3, r3, r2
 801f7fe:	009b      	lsls	r3, r3, #2
 801f800:	4413      	add	r3, r2
 801f802:	687a      	ldr	r2, [r7, #4]
 801f804:	1ad3      	subs	r3, r2, r3
 801f806:	607b      	str	r3, [r7, #4]
    divResult = DIV_APPROX_61( in );
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	4a0b      	ldr	r2, [pc, #44]	; (801f838 <CalendarDiv61+0x64>)
 801f80c:	fb02 f303 	mul.w	r3, r2, r3
 801f810:	0d9b      	lsrs	r3, r3, #22
 801f812:	60bb      	str	r3, [r7, #8]
  while( divResult >=1 )
 801f814:	68bb      	ldr	r3, [r7, #8]
 801f816:	2b00      	cmp	r3, #0
 801f818:	d1e9      	bne.n	801f7ee <CalendarDiv61+0x1a>
  }
  if( in >= 61 )
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	2b3c      	cmp	r3, #60	; 0x3c
 801f81e:	d905      	bls.n	801f82c <CalendarDiv61+0x58>
  {
    outTemp += 1;
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	3301      	adds	r3, #1
 801f824:	60fb      	str	r3, [r7, #12]
    in -= 61;
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	3b3d      	subs	r3, #61	; 0x3d
 801f82a:	607b      	str	r3, [r7, #4]
  }
  return outTemp;
 801f82c:	68fb      	ldr	r3, [r7, #12]
#endif
}
 801f82e:	4618      	mov	r0, r3
 801f830:	3714      	adds	r7, #20
 801f832:	46bd      	mov	sp, r7
 801f834:	bc80      	pop	{r7}
 801f836:	4770      	bx	lr
 801f838:	00010c97 	.word	0x00010c97

0801f83c <CalendarDiv60>:

static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder )
{
 801f83c:	b480      	push	{r7}
 801f83e:	b087      	sub	sp, #28
 801f840:	af00      	add	r7, sp, #0
 801f842:	60f8      	str	r0, [r7, #12]
 801f844:	60b9      	str	r1, [r7, #8]
 801f846:	607a      	str	r2, [r7, #4]
#if 0
  *remainder = in % 60;
  *out     = in / 60;
#else
  uint32_t outTemp = 0;
 801f848:	2300      	movs	r3, #0
 801f84a:	617b      	str	r3, [r7, #20]
  uint32_t divResult = DIV_APPROX_60( in );
 801f84c:	68fb      	ldr	r3, [r7, #12]
 801f84e:	f244 4244 	movw	r2, #17476	; 0x4444
 801f852:	fb02 f303 	mul.w	r3, r2, r3
 801f856:	0d1b      	lsrs	r3, r3, #20
 801f858:	613b      	str	r3, [r7, #16]

  while( divResult >=1 )
 801f85a:	e013      	b.n	801f884 <CalendarDiv60+0x48>
  {
    outTemp += divResult;
 801f85c:	697a      	ldr	r2, [r7, #20]
 801f85e:	693b      	ldr	r3, [r7, #16]
 801f860:	4413      	add	r3, r2
 801f862:	617b      	str	r3, [r7, #20]
    in -= divResult * 60;
 801f864:	693a      	ldr	r2, [r7, #16]
 801f866:	4613      	mov	r3, r2
 801f868:	011b      	lsls	r3, r3, #4
 801f86a:	1a9b      	subs	r3, r3, r2
 801f86c:	009b      	lsls	r3, r3, #2
 801f86e:	461a      	mov	r2, r3
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	1a9b      	subs	r3, r3, r2
 801f874:	60fb      	str	r3, [r7, #12]
    divResult = DIV_APPROX_60( in );
 801f876:	68fb      	ldr	r3, [r7, #12]
 801f878:	f244 4244 	movw	r2, #17476	; 0x4444
 801f87c:	fb02 f303 	mul.w	r3, r2, r3
 801f880:	0d1b      	lsrs	r3, r3, #20
 801f882:	613b      	str	r3, [r7, #16]
  while( divResult >=1 )
 801f884:	693b      	ldr	r3, [r7, #16]
 801f886:	2b00      	cmp	r3, #0
 801f888:	d1e8      	bne.n	801f85c <CalendarDiv60+0x20>
  }
  if( in >= 60 )
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	2b3b      	cmp	r3, #59	; 0x3b
 801f88e:	d905      	bls.n	801f89c <CalendarDiv60+0x60>
  {
    outTemp += 1;
 801f890:	697b      	ldr	r3, [r7, #20]
 801f892:	3301      	adds	r3, #1
 801f894:	617b      	str	r3, [r7, #20]
    in -= 60;
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	3b3c      	subs	r3, #60	; 0x3c
 801f89a:	60fb      	str	r3, [r7, #12]
  }
  *remainder = in;
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	68fa      	ldr	r2, [r7, #12]
 801f8a0:	601a      	str	r2, [r3, #0]
  *out = outTemp;
 801f8a2:	68bb      	ldr	r3, [r7, #8]
 801f8a4:	697a      	ldr	r2, [r7, #20]
 801f8a6:	601a      	str	r2, [r3, #0]
#endif
}
 801f8a8:	bf00      	nop
 801f8aa:	371c      	adds	r7, #28
 801f8ac:	46bd      	mov	sp, r7
 801f8ae:	bc80      	pop	{r7}
 801f8b0:	4770      	bx	lr
	...

0801f8b4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801f8b4:	b580      	push	{r7, lr}
 801f8b6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801f8b8:	4b04      	ldr	r3, [pc, #16]	; (801f8cc <UTIL_TIMER_Init+0x18>)
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801f8be:	4b04      	ldr	r3, [pc, #16]	; (801f8d0 <UTIL_TIMER_Init+0x1c>)
 801f8c0:	681b      	ldr	r3, [r3, #0]
 801f8c2:	4798      	blx	r3
 801f8c4:	4603      	mov	r3, r0
}
 801f8c6:	4618      	mov	r0, r3
 801f8c8:	bd80      	pop	{r7, pc}
 801f8ca:	bf00      	nop
 801f8cc:	200048b0 	.word	0x200048b0
 801f8d0:	08022b54 	.word	0x08022b54

0801f8d4 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801f8d4:	b580      	push	{r7, lr}
 801f8d6:	b084      	sub	sp, #16
 801f8d8:	af00      	add	r7, sp, #0
 801f8da:	60f8      	str	r0, [r7, #12]
 801f8dc:	60b9      	str	r1, [r7, #8]
 801f8de:	603b      	str	r3, [r7, #0]
 801f8e0:	4613      	mov	r3, r2
 801f8e2:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801f8e4:	68fb      	ldr	r3, [r7, #12]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d023      	beq.n	801f932 <UTIL_TIMER_Create+0x5e>
 801f8ea:	683b      	ldr	r3, [r7, #0]
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d020      	beq.n	801f932 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801f8f0:	68fb      	ldr	r3, [r7, #12]
 801f8f2:	2200      	movs	r2, #0
 801f8f4:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801f8f6:	4b11      	ldr	r3, [pc, #68]	; (801f93c <UTIL_TIMER_Create+0x68>)
 801f8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8fa:	68b8      	ldr	r0, [r7, #8]
 801f8fc:	4798      	blx	r3
 801f8fe:	4602      	mov	r2, r0
 801f900:	68fb      	ldr	r3, [r7, #12]
 801f902:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801f904:	68fb      	ldr	r3, [r7, #12]
 801f906:	2200      	movs	r2, #0
 801f908:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801f90a:	68fb      	ldr	r3, [r7, #12]
 801f90c:	2200      	movs	r2, #0
 801f90e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f910:	68fb      	ldr	r3, [r7, #12]
 801f912:	2200      	movs	r2, #0
 801f914:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	683a      	ldr	r2, [r7, #0]
 801f91a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801f91c:	68fb      	ldr	r3, [r7, #12]
 801f91e:	69ba      	ldr	r2, [r7, #24]
 801f920:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801f922:	68fb      	ldr	r3, [r7, #12]
 801f924:	79fa      	ldrb	r2, [r7, #7]
 801f926:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801f928:	68fb      	ldr	r3, [r7, #12]
 801f92a:	2200      	movs	r2, #0
 801f92c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801f92e:	2300      	movs	r3, #0
 801f930:	e000      	b.n	801f934 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801f932:	2301      	movs	r3, #1
  }
}
 801f934:	4618      	mov	r0, r3
 801f936:	3710      	adds	r7, #16
 801f938:	46bd      	mov	sp, r7
 801f93a:	bd80      	pop	{r7, pc}
 801f93c:	08022b54 	.word	0x08022b54

0801f940 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801f940:	b580      	push	{r7, lr}
 801f942:	b08a      	sub	sp, #40	; 0x28
 801f944:	af00      	add	r7, sp, #0
 801f946:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801f948:	2300      	movs	r3, #0
 801f94a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d056      	beq.n	801fa02 <UTIL_TIMER_Start+0xc2>
 801f954:	6878      	ldr	r0, [r7, #4]
 801f956:	f000 f9a9 	bl	801fcac <TimerExists>
 801f95a:	4603      	mov	r3, r0
 801f95c:	f083 0301 	eor.w	r3, r3, #1
 801f960:	b2db      	uxtb	r3, r3
 801f962:	2b00      	cmp	r3, #0
 801f964:	d04d      	beq.n	801fa02 <UTIL_TIMER_Start+0xc2>
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	7a5b      	ldrb	r3, [r3, #9]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d149      	bne.n	801fa02 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801f96e:	f3ef 8310 	mrs	r3, PRIMASK
 801f972:	613b      	str	r3, [r7, #16]
  return(result);
 801f974:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801f976:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801f978:	b672      	cpsid	i
}
 801f97a:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	685b      	ldr	r3, [r3, #4]
 801f980:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801f982:	4b24      	ldr	r3, [pc, #144]	; (801fa14 <UTIL_TIMER_Start+0xd4>)
 801f984:	6a1b      	ldr	r3, [r3, #32]
 801f986:	4798      	blx	r3
 801f988:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801f98a:	6a3a      	ldr	r2, [r7, #32]
 801f98c:	69bb      	ldr	r3, [r7, #24]
 801f98e:	429a      	cmp	r2, r3
 801f990:	d201      	bcs.n	801f996 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801f992:	69bb      	ldr	r3, [r7, #24]
 801f994:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	6a3a      	ldr	r2, [r7, #32]
 801f99a:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801f99c:	687b      	ldr	r3, [r7, #4]
 801f99e:	2200      	movs	r2, #0
 801f9a0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801f9a2:	687b      	ldr	r3, [r7, #4]
 801f9a4:	2201      	movs	r2, #1
 801f9a6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801f9a8:	687b      	ldr	r3, [r7, #4]
 801f9aa:	2200      	movs	r2, #0
 801f9ac:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801f9ae:	4b1a      	ldr	r3, [pc, #104]	; (801fa18 <UTIL_TIMER_Start+0xd8>)
 801f9b0:	681b      	ldr	r3, [r3, #0]
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d106      	bne.n	801f9c4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801f9b6:	4b17      	ldr	r3, [pc, #92]	; (801fa14 <UTIL_TIMER_Start+0xd4>)
 801f9b8:	691b      	ldr	r3, [r3, #16]
 801f9ba:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801f9bc:	6878      	ldr	r0, [r7, #4]
 801f9be:	f000 f9eb 	bl	801fd98 <TimerInsertNewHeadTimer>
 801f9c2:	e017      	b.n	801f9f4 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801f9c4:	4b13      	ldr	r3, [pc, #76]	; (801fa14 <UTIL_TIMER_Start+0xd4>)
 801f9c6:	699b      	ldr	r3, [r3, #24]
 801f9c8:	4798      	blx	r3
 801f9ca:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801f9cc:	687b      	ldr	r3, [r7, #4]
 801f9ce:	681a      	ldr	r2, [r3, #0]
 801f9d0:	697b      	ldr	r3, [r7, #20]
 801f9d2:	441a      	add	r2, r3
 801f9d4:	687b      	ldr	r3, [r7, #4]
 801f9d6:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	681a      	ldr	r2, [r3, #0]
 801f9dc:	4b0e      	ldr	r3, [pc, #56]	; (801fa18 <UTIL_TIMER_Start+0xd8>)
 801f9de:	681b      	ldr	r3, [r3, #0]
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	429a      	cmp	r2, r3
 801f9e4:	d203      	bcs.n	801f9ee <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801f9e6:	6878      	ldr	r0, [r7, #4]
 801f9e8:	f000 f9d6 	bl	801fd98 <TimerInsertNewHeadTimer>
 801f9ec:	e002      	b.n	801f9f4 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801f9ee:	6878      	ldr	r0, [r7, #4]
 801f9f0:	f000 f9a2 	bl	801fd38 <TimerInsertTimer>
 801f9f4:	69fb      	ldr	r3, [r7, #28]
 801f9f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	f383 8810 	msr	PRIMASK, r3
}
 801f9fe:	bf00      	nop
  {
 801fa00:	e002      	b.n	801fa08 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801fa02:	2301      	movs	r3, #1
 801fa04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801fa08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801fa0c:	4618      	mov	r0, r3
 801fa0e:	3728      	adds	r7, #40	; 0x28
 801fa10:	46bd      	mov	sp, r7
 801fa12:	bd80      	pop	{r7, pc}
 801fa14:	08022b54 	.word	0x08022b54
 801fa18:	200048b0 	.word	0x200048b0

0801fa1c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801fa1c:	b580      	push	{r7, lr}
 801fa1e:	b088      	sub	sp, #32
 801fa20:	af00      	add	r7, sp, #0
 801fa22:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fa24:	2300      	movs	r3, #0
 801fa26:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	d05b      	beq.n	801fae6 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fa2e:	f3ef 8310 	mrs	r3, PRIMASK
 801fa32:	60fb      	str	r3, [r7, #12]
  return(result);
 801fa34:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fa36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801fa38:	b672      	cpsid	i
}
 801fa3a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801fa3c:	4b2d      	ldr	r3, [pc, #180]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa3e:	681b      	ldr	r3, [r3, #0]
 801fa40:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801fa42:	4b2c      	ldr	r3, [pc, #176]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	2201      	movs	r2, #1
 801fa4c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801fa4e:	4b29      	ldr	r3, [pc, #164]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d041      	beq.n	801fada <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	2200      	movs	r2, #0
 801fa5a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801fa5c:	4b25      	ldr	r3, [pc, #148]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	687a      	ldr	r2, [r7, #4]
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d134      	bne.n	801fad0 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801fa66:	4b23      	ldr	r3, [pc, #140]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa68:	681b      	ldr	r3, [r3, #0]
 801fa6a:	2200      	movs	r2, #0
 801fa6c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801fa6e:	4b21      	ldr	r3, [pc, #132]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	695b      	ldr	r3, [r3, #20]
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d00a      	beq.n	801fa8e <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801fa78:	4b1e      	ldr	r3, [pc, #120]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa7a:	681b      	ldr	r3, [r3, #0]
 801fa7c:	695b      	ldr	r3, [r3, #20]
 801fa7e:	4a1d      	ldr	r2, [pc, #116]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa80:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801fa82:	4b1c      	ldr	r3, [pc, #112]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	4618      	mov	r0, r3
 801fa88:	f000 f92c 	bl	801fce4 <TimerSetTimeout>
 801fa8c:	e023      	b.n	801fad6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801fa8e:	4b1a      	ldr	r3, [pc, #104]	; (801faf8 <UTIL_TIMER_Stop+0xdc>)
 801fa90:	68db      	ldr	r3, [r3, #12]
 801fa92:	4798      	blx	r3
            TimerListHead = NULL;
 801fa94:	4b17      	ldr	r3, [pc, #92]	; (801faf4 <UTIL_TIMER_Stop+0xd8>)
 801fa96:	2200      	movs	r2, #0
 801fa98:	601a      	str	r2, [r3, #0]
 801fa9a:	e01c      	b.n	801fad6 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801fa9c:	697a      	ldr	r2, [r7, #20]
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	429a      	cmp	r2, r3
 801faa2:	d110      	bne.n	801fac6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801faa4:	697b      	ldr	r3, [r7, #20]
 801faa6:	695b      	ldr	r3, [r3, #20]
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d006      	beq.n	801faba <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801faac:	697b      	ldr	r3, [r7, #20]
 801faae:	695b      	ldr	r3, [r3, #20]
 801fab0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fab2:	69bb      	ldr	r3, [r7, #24]
 801fab4:	697a      	ldr	r2, [r7, #20]
 801fab6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801fab8:	e00d      	b.n	801fad6 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801faba:	2300      	movs	r3, #0
 801fabc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801fabe:	69bb      	ldr	r3, [r7, #24]
 801fac0:	697a      	ldr	r2, [r7, #20]
 801fac2:	615a      	str	r2, [r3, #20]
            break;
 801fac4:	e007      	b.n	801fad6 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801fac6:	697b      	ldr	r3, [r7, #20]
 801fac8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801faca:	697b      	ldr	r3, [r7, #20]
 801facc:	695b      	ldr	r3, [r3, #20]
 801face:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801fad0:	697b      	ldr	r3, [r7, #20]
 801fad2:	2b00      	cmp	r3, #0
 801fad4:	d1e2      	bne.n	801fa9c <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801fad6:	2300      	movs	r3, #0
 801fad8:	77fb      	strb	r3, [r7, #31]
 801fada:	693b      	ldr	r3, [r7, #16]
 801fadc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fade:	68bb      	ldr	r3, [r7, #8]
 801fae0:	f383 8810 	msr	PRIMASK, r3
}
 801fae4:	e001      	b.n	801faea <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801fae6:	2301      	movs	r3, #1
 801fae8:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801faea:	7ffb      	ldrb	r3, [r7, #31]
}
 801faec:	4618      	mov	r0, r3
 801faee:	3720      	adds	r7, #32
 801faf0:	46bd      	mov	sp, r7
 801faf2:	bd80      	pop	{r7, pc}
 801faf4:	200048b0 	.word	0x200048b0
 801faf8:	08022b54 	.word	0x08022b54

0801fafc <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801fafc:	b580      	push	{r7, lr}
 801fafe:	b084      	sub	sp, #16
 801fb00:	af00      	add	r7, sp, #0
 801fb02:	6078      	str	r0, [r7, #4]
 801fb04:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801fb06:	2300      	movs	r3, #0
 801fb08:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801fb0a:	687b      	ldr	r3, [r7, #4]
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d102      	bne.n	801fb16 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801fb10:	2301      	movs	r3, #1
 801fb12:	73fb      	strb	r3, [r7, #15]
 801fb14:	e014      	b.n	801fb40 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801fb16:	4b0d      	ldr	r3, [pc, #52]	; (801fb4c <UTIL_TIMER_SetPeriod+0x50>)
 801fb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb1a:	6838      	ldr	r0, [r7, #0]
 801fb1c:	4798      	blx	r3
 801fb1e:	4602      	mov	r2, r0
 801fb20:	687b      	ldr	r3, [r7, #4]
 801fb22:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801fb24:	6878      	ldr	r0, [r7, #4]
 801fb26:	f000 f8c1 	bl	801fcac <TimerExists>
 801fb2a:	4603      	mov	r3, r0
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d007      	beq.n	801fb40 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801fb30:	6878      	ldr	r0, [r7, #4]
 801fb32:	f7ff ff73 	bl	801fa1c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801fb36:	6878      	ldr	r0, [r7, #4]
 801fb38:	f7ff ff02 	bl	801f940 <UTIL_TIMER_Start>
 801fb3c:	4603      	mov	r3, r0
 801fb3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801fb40:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb42:	4618      	mov	r0, r3
 801fb44:	3710      	adds	r7, #16
 801fb46:	46bd      	mov	sp, r7
 801fb48:	bd80      	pop	{r7, pc}
 801fb4a:	bf00      	nop
 801fb4c:	08022b54 	.word	0x08022b54

0801fb50 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801fb50:	b590      	push	{r4, r7, lr}
 801fb52:	b089      	sub	sp, #36	; 0x24
 801fb54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801fb56:	f3ef 8310 	mrs	r3, PRIMASK
 801fb5a:	60bb      	str	r3, [r7, #8]
  return(result);
 801fb5c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801fb5e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801fb60:	b672      	cpsid	i
}
 801fb62:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801fb64:	4b38      	ldr	r3, [pc, #224]	; (801fc48 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fb66:	695b      	ldr	r3, [r3, #20]
 801fb68:	4798      	blx	r3
 801fb6a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801fb6c:	4b36      	ldr	r3, [pc, #216]	; (801fc48 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fb6e:	691b      	ldr	r3, [r3, #16]
 801fb70:	4798      	blx	r3
 801fb72:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801fb74:	693a      	ldr	r2, [r7, #16]
 801fb76:	697b      	ldr	r3, [r7, #20]
 801fb78:	1ad3      	subs	r3, r2, r3
 801fb7a:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801fb7c:	4b33      	ldr	r3, [pc, #204]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb7e:	681b      	ldr	r3, [r3, #0]
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d037      	beq.n	801fbf4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801fb84:	4b31      	ldr	r3, [pc, #196]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801fb8a:	69fb      	ldr	r3, [r7, #28]
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	68fa      	ldr	r2, [r7, #12]
 801fb90:	429a      	cmp	r2, r3
 801fb92:	d206      	bcs.n	801fba2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801fb94:	69fb      	ldr	r3, [r7, #28]
 801fb96:	681a      	ldr	r2, [r3, #0]
 801fb98:	68fb      	ldr	r3, [r7, #12]
 801fb9a:	1ad2      	subs	r2, r2, r3
 801fb9c:	69fb      	ldr	r3, [r7, #28]
 801fb9e:	601a      	str	r2, [r3, #0]
 801fba0:	e002      	b.n	801fba8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801fba2:	69fb      	ldr	r3, [r7, #28]
 801fba4:	2200      	movs	r2, #0
 801fba6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801fba8:	69fb      	ldr	r3, [r7, #28]
 801fbaa:	695b      	ldr	r3, [r3, #20]
 801fbac:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801fbae:	69fb      	ldr	r3, [r7, #28]
 801fbb0:	2b00      	cmp	r3, #0
 801fbb2:	d1ea      	bne.n	801fb8a <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fbb4:	e01e      	b.n	801fbf4 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801fbb6:	4b25      	ldr	r3, [pc, #148]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbb8:	681b      	ldr	r3, [r3, #0]
 801fbba:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801fbbc:	4b23      	ldr	r3, [pc, #140]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	695b      	ldr	r3, [r3, #20]
 801fbc2:	4a22      	ldr	r2, [pc, #136]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbc4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801fbc6:	69fb      	ldr	r3, [r7, #28]
 801fbc8:	2200      	movs	r2, #0
 801fbca:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801fbcc:	69fb      	ldr	r3, [r7, #28]
 801fbce:	2200      	movs	r2, #0
 801fbd0:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801fbd2:	69fb      	ldr	r3, [r7, #28]
 801fbd4:	68db      	ldr	r3, [r3, #12]
 801fbd6:	69fa      	ldr	r2, [r7, #28]
 801fbd8:	6912      	ldr	r2, [r2, #16]
 801fbda:	4610      	mov	r0, r2
 801fbdc:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801fbde:	69fb      	ldr	r3, [r7, #28]
 801fbe0:	7adb      	ldrb	r3, [r3, #11]
 801fbe2:	2b01      	cmp	r3, #1
 801fbe4:	d106      	bne.n	801fbf4 <UTIL_TIMER_IRQ_Handler+0xa4>
 801fbe6:	69fb      	ldr	r3, [r7, #28]
 801fbe8:	7a9b      	ldrb	r3, [r3, #10]
 801fbea:	2b00      	cmp	r3, #0
 801fbec:	d102      	bne.n	801fbf4 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801fbee:	69f8      	ldr	r0, [r7, #28]
 801fbf0:	f7ff fea6 	bl	801f940 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801fbf4:	4b15      	ldr	r3, [pc, #84]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbf6:	681b      	ldr	r3, [r3, #0]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d00d      	beq.n	801fc18 <UTIL_TIMER_IRQ_Handler+0xc8>
 801fbfc:	4b13      	ldr	r3, [pc, #76]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	681b      	ldr	r3, [r3, #0]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d0d7      	beq.n	801fbb6 <UTIL_TIMER_IRQ_Handler+0x66>
 801fc06:	4b11      	ldr	r3, [pc, #68]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	681c      	ldr	r4, [r3, #0]
 801fc0c:	4b0e      	ldr	r3, [pc, #56]	; (801fc48 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801fc0e:	699b      	ldr	r3, [r3, #24]
 801fc10:	4798      	blx	r3
 801fc12:	4603      	mov	r3, r0
 801fc14:	429c      	cmp	r4, r3
 801fc16:	d3ce      	bcc.n	801fbb6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801fc18:	4b0c      	ldr	r3, [pc, #48]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fc1a:	681b      	ldr	r3, [r3, #0]
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d009      	beq.n	801fc34 <UTIL_TIMER_IRQ_Handler+0xe4>
 801fc20:	4b0a      	ldr	r3, [pc, #40]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fc22:	681b      	ldr	r3, [r3, #0]
 801fc24:	7a1b      	ldrb	r3, [r3, #8]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d104      	bne.n	801fc34 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801fc2a:	4b08      	ldr	r3, [pc, #32]	; (801fc4c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	4618      	mov	r0, r3
 801fc30:	f000 f858 	bl	801fce4 <TimerSetTimeout>
 801fc34:	69bb      	ldr	r3, [r7, #24]
 801fc36:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	f383 8810 	msr	PRIMASK, r3
}
 801fc3e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801fc40:	bf00      	nop
 801fc42:	3724      	adds	r7, #36	; 0x24
 801fc44:	46bd      	mov	sp, r7
 801fc46:	bd90      	pop	{r4, r7, pc}
 801fc48:	08022b54 	.word	0x08022b54
 801fc4c:	200048b0 	.word	0x200048b0

0801fc50 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801fc50:	b580      	push	{r7, lr}
 801fc52:	b082      	sub	sp, #8
 801fc54:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801fc56:	4b06      	ldr	r3, [pc, #24]	; (801fc70 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fc58:	69db      	ldr	r3, [r3, #28]
 801fc5a:	4798      	blx	r3
 801fc5c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801fc5e:	4b04      	ldr	r3, [pc, #16]	; (801fc70 <UTIL_TIMER_GetCurrentTime+0x20>)
 801fc60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc62:	6878      	ldr	r0, [r7, #4]
 801fc64:	4798      	blx	r3
 801fc66:	4603      	mov	r3, r0
}
 801fc68:	4618      	mov	r0, r3
 801fc6a:	3708      	adds	r7, #8
 801fc6c:	46bd      	mov	sp, r7
 801fc6e:	bd80      	pop	{r7, pc}
 801fc70:	08022b54 	.word	0x08022b54

0801fc74 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801fc74:	b580      	push	{r7, lr}
 801fc76:	b084      	sub	sp, #16
 801fc78:	af00      	add	r7, sp, #0
 801fc7a:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801fc7c:	4b0a      	ldr	r3, [pc, #40]	; (801fca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc7e:	69db      	ldr	r3, [r3, #28]
 801fc80:	4798      	blx	r3
 801fc82:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801fc84:	4b08      	ldr	r3, [pc, #32]	; (801fca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc88:	6878      	ldr	r0, [r7, #4]
 801fc8a:	4798      	blx	r3
 801fc8c:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801fc8e:	4b06      	ldr	r3, [pc, #24]	; (801fca8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801fc90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc92:	68f9      	ldr	r1, [r7, #12]
 801fc94:	68ba      	ldr	r2, [r7, #8]
 801fc96:	1a8a      	subs	r2, r1, r2
 801fc98:	4610      	mov	r0, r2
 801fc9a:	4798      	blx	r3
 801fc9c:	4603      	mov	r3, r0
}
 801fc9e:	4618      	mov	r0, r3
 801fca0:	3710      	adds	r7, #16
 801fca2:	46bd      	mov	sp, r7
 801fca4:	bd80      	pop	{r7, pc}
 801fca6:	bf00      	nop
 801fca8:	08022b54 	.word	0x08022b54

0801fcac <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801fcac:	b480      	push	{r7}
 801fcae:	b085      	sub	sp, #20
 801fcb0:	af00      	add	r7, sp, #0
 801fcb2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fcb4:	4b0a      	ldr	r3, [pc, #40]	; (801fce0 <TimerExists+0x34>)
 801fcb6:	681b      	ldr	r3, [r3, #0]
 801fcb8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801fcba:	e008      	b.n	801fcce <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801fcbc:	68fa      	ldr	r2, [r7, #12]
 801fcbe:	687b      	ldr	r3, [r7, #4]
 801fcc0:	429a      	cmp	r2, r3
 801fcc2:	d101      	bne.n	801fcc8 <TimerExists+0x1c>
    {
      return true;
 801fcc4:	2301      	movs	r3, #1
 801fcc6:	e006      	b.n	801fcd6 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801fcc8:	68fb      	ldr	r3, [r7, #12]
 801fcca:	695b      	ldr	r3, [r3, #20]
 801fccc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d1f3      	bne.n	801fcbc <TimerExists+0x10>
  }
  return false;
 801fcd4:	2300      	movs	r3, #0
}
 801fcd6:	4618      	mov	r0, r3
 801fcd8:	3714      	adds	r7, #20
 801fcda:	46bd      	mov	sp, r7
 801fcdc:	bc80      	pop	{r7}
 801fcde:	4770      	bx	lr
 801fce0:	200048b0 	.word	0x200048b0

0801fce4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801fce4:	b590      	push	{r4, r7, lr}
 801fce6:	b085      	sub	sp, #20
 801fce8:	af00      	add	r7, sp, #0
 801fcea:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801fcec:	4b11      	ldr	r3, [pc, #68]	; (801fd34 <TimerSetTimeout+0x50>)
 801fcee:	6a1b      	ldr	r3, [r3, #32]
 801fcf0:	4798      	blx	r3
 801fcf2:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	2201      	movs	r2, #1
 801fcf8:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801fcfa:	687b      	ldr	r3, [r7, #4]
 801fcfc:	681c      	ldr	r4, [r3, #0]
 801fcfe:	4b0d      	ldr	r3, [pc, #52]	; (801fd34 <TimerSetTimeout+0x50>)
 801fd00:	699b      	ldr	r3, [r3, #24]
 801fd02:	4798      	blx	r3
 801fd04:	4602      	mov	r2, r0
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	4413      	add	r3, r2
 801fd0a:	429c      	cmp	r4, r3
 801fd0c:	d207      	bcs.n	801fd1e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801fd0e:	4b09      	ldr	r3, [pc, #36]	; (801fd34 <TimerSetTimeout+0x50>)
 801fd10:	699b      	ldr	r3, [r3, #24]
 801fd12:	4798      	blx	r3
 801fd14:	4602      	mov	r2, r0
 801fd16:	68fb      	ldr	r3, [r7, #12]
 801fd18:	441a      	add	r2, r3
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801fd1e:	4b05      	ldr	r3, [pc, #20]	; (801fd34 <TimerSetTimeout+0x50>)
 801fd20:	689b      	ldr	r3, [r3, #8]
 801fd22:	687a      	ldr	r2, [r7, #4]
 801fd24:	6812      	ldr	r2, [r2, #0]
 801fd26:	4610      	mov	r0, r2
 801fd28:	4798      	blx	r3
}
 801fd2a:	bf00      	nop
 801fd2c:	3714      	adds	r7, #20
 801fd2e:	46bd      	mov	sp, r7
 801fd30:	bd90      	pop	{r4, r7, pc}
 801fd32:	bf00      	nop
 801fd34:	08022b54 	.word	0x08022b54

0801fd38 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801fd38:	b480      	push	{r7}
 801fd3a:	b085      	sub	sp, #20
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fd40:	4b14      	ldr	r3, [pc, #80]	; (801fd94 <TimerInsertTimer+0x5c>)
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801fd46:	4b13      	ldr	r3, [pc, #76]	; (801fd94 <TimerInsertTimer+0x5c>)
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	695b      	ldr	r3, [r3, #20]
 801fd4c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801fd4e:	e012      	b.n	801fd76 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	681a      	ldr	r2, [r3, #0]
 801fd54:	68bb      	ldr	r3, [r7, #8]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	429a      	cmp	r2, r3
 801fd5a:	d905      	bls.n	801fd68 <TimerInsertTimer+0x30>
    {
        cur = next;
 801fd5c:	68bb      	ldr	r3, [r7, #8]
 801fd5e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801fd60:	68bb      	ldr	r3, [r7, #8]
 801fd62:	695b      	ldr	r3, [r3, #20]
 801fd64:	60bb      	str	r3, [r7, #8]
 801fd66:	e006      	b.n	801fd76 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801fd68:	68fb      	ldr	r3, [r7, #12]
 801fd6a:	687a      	ldr	r2, [r7, #4]
 801fd6c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	68ba      	ldr	r2, [r7, #8]
 801fd72:	615a      	str	r2, [r3, #20]
        return;
 801fd74:	e009      	b.n	801fd8a <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	695b      	ldr	r3, [r3, #20]
 801fd7a:	2b00      	cmp	r3, #0
 801fd7c:	d1e8      	bne.n	801fd50 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801fd7e:	68fb      	ldr	r3, [r7, #12]
 801fd80:	687a      	ldr	r2, [r7, #4]
 801fd82:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801fd84:	687b      	ldr	r3, [r7, #4]
 801fd86:	2200      	movs	r2, #0
 801fd88:	615a      	str	r2, [r3, #20]
}
 801fd8a:	3714      	adds	r7, #20
 801fd8c:	46bd      	mov	sp, r7
 801fd8e:	bc80      	pop	{r7}
 801fd90:	4770      	bx	lr
 801fd92:	bf00      	nop
 801fd94:	200048b0 	.word	0x200048b0

0801fd98 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801fd98:	b580      	push	{r7, lr}
 801fd9a:	b084      	sub	sp, #16
 801fd9c:	af00      	add	r7, sp, #0
 801fd9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801fda0:	4b0b      	ldr	r3, [pc, #44]	; (801fdd0 <TimerInsertNewHeadTimer+0x38>)
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d002      	beq.n	801fdb2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801fdac:	68fb      	ldr	r3, [r7, #12]
 801fdae:	2200      	movs	r2, #0
 801fdb0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	68fa      	ldr	r2, [r7, #12]
 801fdb6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801fdb8:	4a05      	ldr	r2, [pc, #20]	; (801fdd0 <TimerInsertNewHeadTimer+0x38>)
 801fdba:	687b      	ldr	r3, [r7, #4]
 801fdbc:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801fdbe:	4b04      	ldr	r3, [pc, #16]	; (801fdd0 <TimerInsertNewHeadTimer+0x38>)
 801fdc0:	681b      	ldr	r3, [r3, #0]
 801fdc2:	4618      	mov	r0, r3
 801fdc4:	f7ff ff8e 	bl	801fce4 <TimerSetTimeout>
}
 801fdc8:	bf00      	nop
 801fdca:	3710      	adds	r7, #16
 801fdcc:	46bd      	mov	sp, r7
 801fdce:	bd80      	pop	{r7, pc}
 801fdd0:	200048b0 	.word	0x200048b0

0801fdd4 <tiny_vfscanf>:
 * vfscanf
 */

static inline int
VFSCANF(const char *str, const char *fmt0, va_list ap)
{
 801fdd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801fdd8:	f5ad 7d2c 	sub.w	sp, sp, #688	; 0x2b0
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fde2:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fde6:	6018      	str	r0, [r3, #0]
 801fde8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801fdf0:	6019      	str	r1, [r3, #0]
 801fdf2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fdf6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 801fdfa:	601a      	str	r2, [r3, #0]
  u_char *fmt = (u_char *)fmt0;
 801fdfc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fe00:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
#else  
  static short basefix[17] =
    { 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };
#endif
    
   fp_p = str;
 801fe0a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fe0e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fe12:	681b      	ldr	r3, [r3, #0]
 801fe14:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
  fp_r = strlen(str);
 801fe18:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 801fe1c:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 801fe20:	6818      	ldr	r0, [r3, #0]
 801fe22:	f7e0 f9ad 	bl	8000180 <strlen>
 801fe26:	4603      	mov	r3, r0
 801fe28:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

  nassigned = 0;
 801fe2c:	2300      	movs	r3, #0
 801fe2e:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
  nread = 0;
 801fe32:	2300      	movs	r3, #0
 801fe34:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
  base = 0;    /* XXX just to keep gcc happy */
 801fe38:	2300      	movs	r3, #0
 801fe3a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
  for (;;) {
    c = *fmt++;
 801fe3e:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 801fe42:	1c53      	adds	r3, r2, #1
 801fe44:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801fe48:	7813      	ldrb	r3, [r2, #0]
 801fe4a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    if (c == 0)
 801fe4e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d102      	bne.n	801fe5c <tiny_vfscanf+0x88>
      return (nassigned);
 801fe56:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 801fe5a:	e386      	b.n	802056a <tiny_vfscanf+0x796>
          isspace(*fp_p))
        nread++, fp_r--, fp_p++;
      continue;
    }
#endif
    if (c != '%')
 801fe5c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe60:	2b25      	cmp	r3, #37	; 0x25
 801fe62:	f040 809f 	bne.w	801ffa4 <tiny_vfscanf+0x1d0>
      goto literal;
    width = 0;
 801fe66:	2300      	movs	r3, #0
 801fe68:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
    flags = 0;
 801fe6c:	2300      	movs	r3, #0
 801fe6e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
    /*
     * switch on the format.  continue if done;
     * break once format type is derived.
     */
again:    c = *fmt++;
 801fe72:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 801fe76:	1c53      	adds	r3, r2, #1
 801fe78:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 801fe7c:	7813      	ldrb	r3, [r2, #0]
 801fe7e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    switch (c) {
 801fe82:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe86:	2b78      	cmp	r3, #120	; 0x78
 801fe88:	f300 8102 	bgt.w	8020090 <tiny_vfscanf+0x2bc>
 801fe8c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe90:	2b44      	cmp	r3, #68	; 0x44
 801fe92:	da13      	bge.n	801febc <tiny_vfscanf+0xe8>
 801fe94:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fe98:	2b39      	cmp	r3, #57	; 0x39
 801fe9a:	f300 80f9 	bgt.w	8020090 <tiny_vfscanf+0x2bc>
 801fe9e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fea2:	2b30      	cmp	r3, #48	; 0x30
 801fea4:	f280 80bc 	bge.w	8020020 <tiny_vfscanf+0x24c>
 801fea8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801feac:	2b00      	cmp	r3, #0
 801feae:	f000 80ec 	beq.w	802008a <tiny_vfscanf+0x2b6>
 801feb2:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801feb6:	2b25      	cmp	r3, #37	; 0x25
 801feb8:	d075      	beq.n	801ffa6 <tiny_vfscanf+0x1d2>
      if (isupper(c))
        flags |= LONG;
      c = CT_INT;
      base = 10;
#endif
      break;
 801feba:	e0e9      	b.n	8020090 <tiny_vfscanf+0x2bc>
    switch (c) {
 801febc:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801fec0:	3b44      	subs	r3, #68	; 0x44
 801fec2:	2b34      	cmp	r3, #52	; 0x34
 801fec4:	f200 80e4 	bhi.w	8020090 <tiny_vfscanf+0x2bc>
 801fec8:	a201      	add	r2, pc, #4	; (adr r2, 801fed0 <tiny_vfscanf+0xfc>)
 801feca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fece:	bf00      	nop
 801fed0:	0802003d 	.word	0x0802003d
 801fed4:	08020091 	.word	0x08020091
 801fed8:	08020091 	.word	0x08020091
 801fedc:	08020091 	.word	0x08020091
 801fee0:	08020091 	.word	0x08020091
 801fee4:	08020091 	.word	0x08020091
 801fee8:	08020091 	.word	0x08020091
 801feec:	08020091 	.word	0x08020091
 801fef0:	08020091 	.word	0x08020091
 801fef4:	08020091 	.word	0x08020091
 801fef8:	08020091 	.word	0x08020091
 801fefc:	08020091 	.word	0x08020091
 801ff00:	08020091 	.word	0x08020091
 801ff04:	08020091 	.word	0x08020091
 801ff08:	08020091 	.word	0x08020091
 801ff0c:	08020091 	.word	0x08020091
 801ff10:	08020091 	.word	0x08020091
 801ff14:	08020091 	.word	0x08020091
 801ff18:	08020091 	.word	0x08020091
 801ff1c:	08020091 	.word	0x08020091
 801ff20:	08020071 	.word	0x08020071
 801ff24:	08020091 	.word	0x08020091
 801ff28:	08020091 	.word	0x08020091
 801ff2c:	08020091 	.word	0x08020091
 801ff30:	08020091 	.word	0x08020091
 801ff34:	08020091 	.word	0x08020091
 801ff38:	08020091 	.word	0x08020091
 801ff3c:	08020091 	.word	0x08020091
 801ff40:	08020091 	.word	0x08020091
 801ff44:	08020091 	.word	0x08020091
 801ff48:	08020091 	.word	0x08020091
 801ff4c:	08020091 	.word	0x08020091
 801ff50:	08020049 	.word	0x08020049
 801ff54:	08020091 	.word	0x08020091
 801ff58:	08020091 	.word	0x08020091
 801ff5c:	08020091 	.word	0x08020091
 801ff60:	0801ffe3 	.word	0x0801ffe3
 801ff64:	08020091 	.word	0x08020091
 801ff68:	08020091 	.word	0x08020091
 801ff6c:	08020091 	.word	0x08020091
 801ff70:	08020013 	.word	0x08020013
 801ff74:	08020091 	.word	0x08020091
 801ff78:	08020091 	.word	0x08020091
 801ff7c:	08020091 	.word	0x08020091
 801ff80:	08020091 	.word	0x08020091
 801ff84:	08020091 	.word	0x08020091
 801ff88:	08020091 	.word	0x08020091
 801ff8c:	08020091 	.word	0x08020091
 801ff90:	08020091 	.word	0x08020091
 801ff94:	08020057 	.word	0x08020057
 801ff98:	08020091 	.word	0x08020091
 801ff9c:	08020091 	.word	0x08020091
 801ffa0:	08020071 	.word	0x08020071
      goto literal;
 801ffa4:	bf00      	nop
      if (fp_r <= 0 && __srefill(fp))
 801ffa6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 801ffaa:	2b00      	cmp	r3, #0
 801ffac:	f340 82cb 	ble.w	8020546 <tiny_vfscanf+0x772>
      if (*fp_p != c)
 801ffb0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ffb4:	781b      	ldrb	r3, [r3, #0]
 801ffb6:	461a      	mov	r2, r3
 801ffb8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 801ffbc:	4293      	cmp	r3, r2
 801ffbe:	f040 82cf 	bne.w	8020560 <tiny_vfscanf+0x78c>
      fp_r--, fp_p++;
 801ffc2:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 801ffc6:	3b01      	subs	r3, #1
 801ffc8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 801ffcc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 801ffd0:	3301      	adds	r3, #1
 801ffd2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      nread++;
 801ffd6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 801ffda:	3301      	adds	r3, #1
 801ffdc:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
      continue;
 801ffe0:	e2b0      	b.n	8020544 <tiny_vfscanf+0x770>
      if (*fmt == 'h') {
 801ffe2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801ffe6:	781b      	ldrb	r3, [r3, #0]
 801ffe8:	2b68      	cmp	r3, #104	; 0x68
 801ffea:	d10b      	bne.n	8020004 <tiny_vfscanf+0x230>
        fmt++;
 801ffec:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 801fff0:	3301      	adds	r3, #1
 801fff2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
        flags |= SHORTSHORT;
 801fff6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 801fffa:	f043 0308 	orr.w	r3, r3, #8
 801fffe:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 8020002:	e736      	b.n	801fe72 <tiny_vfscanf+0x9e>
        flags |= SHORT;
 8020004:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020008:	f043 0304 	orr.w	r3, r3, #4
 802000c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      goto again;
 8020010:	e72f      	b.n	801fe72 <tiny_vfscanf+0x9e>
      flags |= LONG;
 8020012:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020016:	f043 0301 	orr.w	r3, r3, #1
 802001a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      goto again;
 802001e:	e728      	b.n	801fe72 <tiny_vfscanf+0x9e>
      width = width * 10 + c - '0';
 8020020:	f8d7 22a4 	ldr.w	r2, [r7, #676]	; 0x2a4
 8020024:	4613      	mov	r3, r2
 8020026:	009b      	lsls	r3, r3, #2
 8020028:	4413      	add	r3, r2
 802002a:	005b      	lsls	r3, r3, #1
 802002c:	461a      	mov	r2, r3
 802002e:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020032:	4413      	add	r3, r2
 8020034:	3b30      	subs	r3, #48	; 0x30
 8020036:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      goto again;
 802003a:	e71a      	b.n	801fe72 <tiny_vfscanf+0x9e>
      flags |= LONG;
 802003c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020040:	f043 0301 	orr.w	r3, r3, #1
 8020044:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      c = CT_INT;
 8020048:	2303      	movs	r3, #3
 802004a:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      base = 10;
 802004e:	230a      	movs	r3, #10
 8020050:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 8020054:	e01d      	b.n	8020092 <tiny_vfscanf+0x2be>
      c = CT_INT;
 8020056:	2303      	movs	r3, #3
 8020058:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      flags |= UNSIGNED;
 802005c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020060:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020064:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      base = 10;
 8020068:	230a      	movs	r3, #10
 802006a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 802006e:	e010      	b.n	8020092 <tiny_vfscanf+0x2be>
      c = CT_INT;
 8020070:	2303      	movs	r3, #3
 8020072:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
      flags |= UNSIGNED;
 8020076:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 802007a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 802007e:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
      base = 16;
 8020082:	2310      	movs	r3, #16
 8020084:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
      break;
 8020088:	e003      	b.n	8020092 <tiny_vfscanf+0x2be>
      return (EOF);
 802008a:	f04f 33ff 	mov.w	r3, #4294967295
 802008e:	e26c      	b.n	802056a <tiny_vfscanf+0x796>
      break;
 8020090:	bf00      	nop
    }

    /*
     * We have a conversion that requires input.
     */
    if (fp_r <= 0 && __srefill(fp))
 8020092:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8020096:	2b00      	cmp	r3, #0
 8020098:	f340 8257 	ble.w	802054a <tiny_vfscanf+0x776>
#endif
    
    /*
     * Do the conversion.
     */
    switch (c) {
 802009c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80200a0:	2b03      	cmp	r3, #3
 80200a2:	f47f aecc 	bne.w	801fe3e <tiny_vfscanf+0x6a>
#ifdef hardway
      if (width == 0 || width > sizeof(buf) - 1)
        width = sizeof(buf) - 1;
#else
      /* size_t is unsigned, hence this optimisation */
      if (--width > sizeof(buf) - 2)
 80200a6:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80200aa:	3b01      	subs	r3, #1
 80200ac:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80200b0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80200b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80200b8:	d303      	bcc.n	80200c2 <tiny_vfscanf+0x2ee>
        width = sizeof(buf) - 2;
 80200ba:	f240 13ff 	movw	r3, #511	; 0x1ff
 80200be:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
      width++;
 80200c2:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80200c6:	3301      	adds	r3, #1
 80200c8:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
#endif

#ifdef TINY_NO_OX
      flags |= SIGNOK | NDIGITS;
 80200cc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80200d0:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 80200d4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
      flags |= SIGNOK | NDIGITS | NZDIGITS;
#endif
      
      sign_minus = 0;
 80200d8:	2300      	movs	r3, #0
 80200da:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
      value = 0;
 80200de:	f04f 0200 	mov.w	r2, #0
 80200e2:	f04f 0300 	mov.w	r3, #0
 80200e6:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
      for (p = buf; width; width--) {
 80200ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80200ee:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80200f2:	e182      	b.n	80203fa <tiny_vfscanf+0x626>
        c = *fp_p;
 80200f4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80200f8:	781b      	ldrb	r3, [r3, #0]
 80200fa:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 80200fe:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020102:	3b2b      	subs	r3, #43	; 0x2b
 8020104:	2b3b      	cmp	r3, #59	; 0x3b
 8020106:	f200 817e 	bhi.w	8020406 <tiny_vfscanf+0x632>
 802010a:	a201      	add	r2, pc, #4	; (adr r2, 8020110 <tiny_vfscanf+0x33c>)
 802010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020110:	08020391 	.word	0x08020391
 8020114:	08020407 	.word	0x08020407
 8020118:	0802037f 	.word	0x0802037f
 802011c:	08020407 	.word	0x08020407
 8020120:	08020407 	.word	0x08020407
 8020124:	08020201 	.word	0x08020201
 8020128:	08020201 	.word	0x08020201
 802012c:	08020201 	.word	0x08020201
 8020130:	08020201 	.word	0x08020201
 8020134:	08020201 	.word	0x08020201
 8020138:	08020201 	.word	0x08020201
 802013c:	08020201 	.word	0x08020201
 8020140:	08020201 	.word	0x08020201
 8020144:	08020201 	.word	0x08020201
 8020148:	08020201 	.word	0x08020201
 802014c:	08020407 	.word	0x08020407
 8020150:	08020407 	.word	0x08020407
 8020154:	08020407 	.word	0x08020407
 8020158:	08020407 	.word	0x08020407
 802015c:	08020407 	.word	0x08020407
 8020160:	08020407 	.word	0x08020407
 8020164:	08020407 	.word	0x08020407
 8020168:	08020279 	.word	0x08020279
 802016c:	08020279 	.word	0x08020279
 8020170:	08020279 	.word	0x08020279
 8020174:	08020279 	.word	0x08020279
 8020178:	08020279 	.word	0x08020279
 802017c:	08020279 	.word	0x08020279
 8020180:	08020407 	.word	0x08020407
 8020184:	08020407 	.word	0x08020407
 8020188:	08020407 	.word	0x08020407
 802018c:	08020407 	.word	0x08020407
 8020190:	08020407 	.word	0x08020407
 8020194:	08020407 	.word	0x08020407
 8020198:	08020407 	.word	0x08020407
 802019c:	08020407 	.word	0x08020407
 80201a0:	08020407 	.word	0x08020407
 80201a4:	08020407 	.word	0x08020407
 80201a8:	08020407 	.word	0x08020407
 80201ac:	08020407 	.word	0x08020407
 80201b0:	08020407 	.word	0x08020407
 80201b4:	08020407 	.word	0x08020407
 80201b8:	08020407 	.word	0x08020407
 80201bc:	08020407 	.word	0x08020407
 80201c0:	08020407 	.word	0x08020407
 80201c4:	08020407 	.word	0x08020407
 80201c8:	08020407 	.word	0x08020407
 80201cc:	08020407 	.word	0x08020407
 80201d0:	08020407 	.word	0x08020407
 80201d4:	08020407 	.word	0x08020407
 80201d8:	08020407 	.word	0x08020407
 80201dc:	08020407 	.word	0x08020407
 80201e0:	08020407 	.word	0x08020407
 80201e4:	08020407 	.word	0x08020407
 80201e8:	080202fd 	.word	0x080202fd
 80201ec:	080202fd 	.word	0x080202fd
 80201f0:	080202fd 	.word	0x080202fd
 80201f4:	080202fd 	.word	0x080202fd
 80201f8:	080202fd 	.word	0x080202fd
 80201fc:	080202fd 	.word	0x080202fd
        /* we only support base 10 and 16 */
        case '1': case '2': case '3':
        case '4': case '5': case '6': case '7':
        case '8': case '9':
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 8020200:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020204:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 8020208:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - '0';
 802020c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020210:	17da      	asrs	r2, r3, #31
 8020212:	663b      	str	r3, [r7, #96]	; 0x60
 8020214:	667a      	str	r2, [r7, #100]	; 0x64
 8020216:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802021a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 802021e:	460a      	mov	r2, r1
 8020220:	fb02 f203 	mul.w	r2, r2, r3
 8020224:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8020228:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 802022c:	4601      	mov	r1, r0
 802022e:	fb01 f303 	mul.w	r3, r1, r3
 8020232:	441a      	add	r2, r3
 8020234:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8020238:	6e39      	ldr	r1, [r7, #96]	; 0x60
 802023a:	fba3 4501 	umull	r4, r5, r3, r1
 802023e:	1953      	adds	r3, r2, r5
 8020240:	461d      	mov	r5, r3
 8020242:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8020246:	17da      	asrs	r2, r3, #31
 8020248:	64bb      	str	r3, [r7, #72]	; 0x48
 802024a:	64fa      	str	r2, [r7, #76]	; 0x4c
 802024c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8020250:	460b      	mov	r3, r1
 8020252:	18e3      	adds	r3, r4, r3
 8020254:	643b      	str	r3, [r7, #64]	; 0x40
 8020256:	4613      	mov	r3, r2
 8020258:	eb45 0303 	adc.w	r3, r5, r3
 802025c:	647b      	str	r3, [r7, #68]	; 0x44
 802025e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8020262:	4611      	mov	r1, r2
 8020264:	3930      	subs	r1, #48	; 0x30
 8020266:	61b9      	str	r1, [r7, #24]
 8020268:	f143 33ff 	adc.w	r3, r3, #4294967295
 802026c:	61fb      	str	r3, [r7, #28]
 802026e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020272:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;
 8020276:	e0a4      	b.n	80203c2 <tiny_vfscanf+0x5ee>
          
        /* letters ok iff hex */
        case 'A': case 'B': case 'C':
        case 'D': case 'E': case 'F':
          /* no need to fix base here */
          if (base <= 10)
 8020278:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 802027c:	2b0a      	cmp	r3, #10
 802027e:	f340 809a 	ble.w	80203b6 <tiny_vfscanf+0x5e2>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 8020282:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020286:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 802028a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'A' + 10;
 802028e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020292:	17da      	asrs	r2, r3, #31
 8020294:	65bb      	str	r3, [r7, #88]	; 0x58
 8020296:	65fa      	str	r2, [r7, #92]	; 0x5c
 8020298:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802029c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80202a0:	460a      	mov	r2, r1
 80202a2:	fb02 f203 	mul.w	r2, r2, r3
 80202a6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80202aa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80202ae:	4601      	mov	r1, r0
 80202b0:	fb01 f303 	mul.w	r3, r1, r3
 80202b4:	441a      	add	r2, r3
 80202b6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80202ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80202bc:	fba3 8901 	umull	r8, r9, r3, r1
 80202c0:	eb02 0309 	add.w	r3, r2, r9
 80202c4:	4699      	mov	r9, r3
 80202c6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80202ca:	17da      	asrs	r2, r3, #31
 80202cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80202ce:	63fa      	str	r2, [r7, #60]	; 0x3c
 80202d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80202d4:	4611      	mov	r1, r2
 80202d6:	eb18 0101 	adds.w	r1, r8, r1
 80202da:	6339      	str	r1, [r7, #48]	; 0x30
 80202dc:	eb49 0303 	adc.w	r3, r9, r3
 80202e0:	637b      	str	r3, [r7, #52]	; 0x34
 80202e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80202e6:	4611      	mov	r1, r2
 80202e8:	3937      	subs	r1, #55	; 0x37
 80202ea:	6139      	str	r1, [r7, #16]
 80202ec:	f143 33ff 	adc.w	r3, r3, #4294967295
 80202f0:	617b      	str	r3, [r7, #20]
 80202f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80202f6:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;          
 80202fa:	e062      	b.n	80203c2 <tiny_vfscanf+0x5ee>
        
        case 'a': case 'b': case 'c':
        case 'd': case 'e': case 'f':
          /* no need to fix base here */
          if (base <= 10)
 80202fc:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020300:	2b0a      	cmp	r3, #10
 8020302:	dd5a      	ble.n	80203ba <tiny_vfscanf+0x5e6>
            break;  /* not legal here */
#ifdef TINY_NO_OX 
          flags &= ~(SIGNOK | NDIGITS);
 8020304:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020308:	f423 43a0 	bic.w	r3, r3, #20480	; 0x5000
 802030c:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
#else
          flags &= ~(SIGNOK | PFXOK | NDIGITS);
#endif
          value = value * base + c - 'a' + 10;
 8020310:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8020314:	17da      	asrs	r2, r3, #31
 8020316:	653b      	str	r3, [r7, #80]	; 0x50
 8020318:	657a      	str	r2, [r7, #84]	; 0x54
 802031a:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802031e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8020322:	460a      	mov	r2, r1
 8020324:	fb02 f203 	mul.w	r2, r2, r3
 8020328:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 802032c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 8020330:	4601      	mov	r1, r0
 8020332:	fb01 f303 	mul.w	r3, r1, r3
 8020336:	441a      	add	r2, r3
 8020338:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 802033c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 802033e:	fba3 ab01 	umull	sl, fp, r3, r1
 8020342:	eb02 030b 	add.w	r3, r2, fp
 8020346:	469b      	mov	fp, r3
 8020348:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 802034c:	17da      	asrs	r2, r3, #31
 802034e:	62bb      	str	r3, [r7, #40]	; 0x28
 8020350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8020356:	4611      	mov	r1, r2
 8020358:	eb1a 0101 	adds.w	r1, sl, r1
 802035c:	6239      	str	r1, [r7, #32]
 802035e:	eb4b 0303 	adc.w	r3, fp, r3
 8020362:	627b      	str	r3, [r7, #36]	; 0x24
 8020364:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8020368:	4611      	mov	r1, r2
 802036a:	3957      	subs	r1, #87	; 0x57
 802036c:	60b9      	str	r1, [r7, #8]
 802036e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8020372:	60fb      	str	r3, [r7, #12]
 8020374:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8020378:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          goto ok;
 802037c:	e021      	b.n	80203c2 <tiny_vfscanf+0x5ee>

        /* sign ok only as first character */
        case '-':
          if (!(flags & HAVESIGN)) {
 802037e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8020386:	2b00      	cmp	r3, #0
 8020388:	d102      	bne.n	8020390 <tiny_vfscanf+0x5bc>
            sign_minus = 1;
 802038a:	2301      	movs	r3, #1
 802038c:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
          }
          /* FALLTHROUGH */
        case '+':
          if (flags & SIGNOK) {
 8020390:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8020398:	2b00      	cmp	r3, #0
 802039a:	d010      	beq.n	80203be <tiny_vfscanf+0x5ea>
            flags &= ~SIGNOK;
 802039c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80203a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80203a4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
            flags |= HAVESIGN;
 80203a8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80203ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80203b0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
            goto ok;
 80203b4:	e005      	b.n	80203c2 <tiny_vfscanf+0x5ee>
            break;  /* not legal here */
 80203b6:	bf00      	nop
 80203b8:	e025      	b.n	8020406 <tiny_vfscanf+0x632>
            break;  /* not legal here */
 80203ba:	bf00      	nop
 80203bc:	e023      	b.n	8020406 <tiny_vfscanf+0x632>
          }
          break;
 80203be:	bf00      	nop

        /*
         * If we got here, c is not a legal character
         * for a number.  Stop accumulating digits.
         */
        break;
 80203c0:	e021      	b.n	8020406 <tiny_vfscanf+0x632>
    ok:
        /*
         * c is legal: store it and look at the next.
         */
        *p++ = c;
 80203c2:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 80203c6:	1c53      	adds	r3, r2, #1
 80203c8:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80203cc:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 80203d0:	b2db      	uxtb	r3, r3
 80203d2:	7013      	strb	r3, [r2, #0]
        if (--fp_r > 0)
 80203d4:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80203d8:	3b01      	subs	r3, #1
 80203da:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80203de:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	dd11      	ble.n	802040a <tiny_vfscanf+0x636>
          fp_p++;
 80203e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80203ea:	3301      	adds	r3, #1
 80203ec:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
      for (p = buf; width; width--) {
 80203f0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80203f4:	3b01      	subs	r3, #1
 80203f6:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80203fa:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 80203fe:	2b00      	cmp	r3, #0
 8020400:	f47f ae78 	bne.w	80200f4 <tiny_vfscanf+0x320>
 8020404:	e002      	b.n	802040c <tiny_vfscanf+0x638>
        break;
 8020406:	bf00      	nop
 8020408:	e000      	b.n	802040c <tiny_vfscanf+0x638>
        else if (__srefill(fp))
          break;    /* EOF */
 802040a:	bf00      	nop
       * If we had only a sign, it is no good; push
       * back the sign.  If the number ends in `x',
       * it was [sign] '0' 'x', so push back the x
       * and treat it as [sign] '0'.
       */
      if (flags & NDIGITS) {
 802040c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020414:	2b00      	cmp	r3, #0
 8020416:	d020      	beq.n	802045a <tiny_vfscanf+0x686>
        if (p > buf)
 8020418:	f107 0378 	add.w	r3, r7, #120	; 0x78
 802041c:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 8020420:	429a      	cmp	r2, r3
 8020422:	f240 809f 	bls.w	8020564 <tiny_vfscanf+0x790>
        {
          --c;
 8020426:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 802042a:	3b01      	subs	r3, #1
 802042c:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
          --p;
 8020430:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8020434:	3b01      	subs	r3, #1
 8020436:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
          ungetc(c++, fp);
 802043a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 802043e:	3301      	adds	r3, #1
 8020440:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8020444:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8020448:	3b01      	subs	r3, #1
 802044a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 802044e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8020452:	3301      	adds	r3, #1
 8020454:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
          /* There is a dummy post-increment to 
             avoid an unused value warning */
        }
        goto match_failure;
 8020458:	e084      	b.n	8020564 <tiny_vfscanf+0x790>
      {
#else
      if ((flags & SUPPRESS) == 0) {
#endif

        *p = '\0';
 802045a:	f8d7 22a0 	ldr.w	r2, [r7, #672]	; 0x2a0
 802045e:	2300      	movs	r3, #0
 8020460:	7013      	strb	r3, [r2, #0]
        if (sign_minus)
 8020462:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8020466:	2b00      	cmp	r3, #0
 8020468:	d00b      	beq.n	8020482 <tiny_vfscanf+0x6ae>
          value = -value;
 802046a:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 802046e:	2100      	movs	r1, #0
 8020470:	4250      	negs	r0, r2
 8020472:	6038      	str	r0, [r7, #0]
 8020474:	eb61 0303 	sbc.w	r3, r1, r3
 8020478:	607b      	str	r3, [r7, #4]
 802047a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802047e:	e9c7 23a0 	strd	r2, r3, [r7, #640]	; 0x280
          *va_arg(ap, size_t *) = value;
        else if (flags & PTRINT)
          *va_arg(ap, ptrdiff_t *) = value;
        else 
#endif
        if (flags & LONG)
 8020482:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8020486:	f003 0301 	and.w	r3, r3, #1
 802048a:	2b00      	cmp	r3, #0
 802048c:	d00f      	beq.n	80204ae <tiny_vfscanf+0x6da>
          *va_arg(ap, long *) = value;
 802048e:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020492:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8020496:	6819      	ldr	r1, [r3, #0]
 8020498:	1d0a      	adds	r2, r1, #4
 802049a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 802049e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204a2:	601a      	str	r2, [r3, #0]
 80204a4:	680a      	ldr	r2, [r1, #0]
 80204a6:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 80204aa:	6013      	str	r3, [r2, #0]
 80204ac:	e03a      	b.n	8020524 <tiny_vfscanf+0x750>
        else if (flags & SHORT)
 80204ae:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80204b2:	f003 0304 	and.w	r3, r3, #4
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	d00f      	beq.n	80204da <tiny_vfscanf+0x706>
          *va_arg(ap, short *) = value;
 80204ba:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204be:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204c2:	6819      	ldr	r1, [r3, #0]
 80204c4:	1d0a      	adds	r2, r1, #4
 80204c6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204ca:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204ce:	601a      	str	r2, [r3, #0]
 80204d0:	680a      	ldr	r2, [r1, #0]
 80204d2:	f9b7 3280 	ldrsh.w	r3, [r7, #640]	; 0x280
 80204d6:	8013      	strh	r3, [r2, #0]
 80204d8:	e024      	b.n	8020524 <tiny_vfscanf+0x750>
        else if (flags & SHORTSHORT)
 80204da:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 80204de:	f003 0308 	and.w	r3, r3, #8
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d00f      	beq.n	8020506 <tiny_vfscanf+0x732>
          *va_arg(ap, char *) = value;
 80204e6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204ea:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204ee:	6819      	ldr	r1, [r3, #0]
 80204f0:	1d0a      	adds	r2, r1, #4
 80204f2:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80204f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80204fa:	601a      	str	r2, [r3, #0]
 80204fc:	680a      	ldr	r2, [r1, #0]
 80204fe:	f897 3280 	ldrb.w	r3, [r7, #640]	; 0x280
 8020502:	7013      	strb	r3, [r2, #0]
 8020504:	e00e      	b.n	8020524 <tiny_vfscanf+0x750>
        else
          *va_arg(ap, int *) = value;
 8020506:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 802050a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 802050e:	6819      	ldr	r1, [r3, #0]
 8020510:	1d0a      	adds	r2, r1, #4
 8020512:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8020516:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 802051a:	601a      	str	r2, [r3, #0]
 802051c:	680a      	ldr	r2, [r1, #0]
 802051e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8020522:	6013      	str	r3, [r2, #0]
        nassigned++;
 8020524:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8020528:	3301      	adds	r3, #1
 802052a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
      }
      nread += p - buf;
 802052e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8020532:	f8d7 32a0 	ldr.w	r3, [r7, #672]	; 0x2a0
 8020536:	1a9a      	subs	r2, r3, r2
 8020538:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 802053c:	4413      	add	r3, r2
 802053e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
      break;
 8020542:	bf00      	nop
    c = *fmt++;
 8020544:	e47b      	b.n	801fe3e <tiny_vfscanf+0x6a>
        goto input_failure;
 8020546:	bf00      	nop
 8020548:	e000      	b.n	802054c <tiny_vfscanf+0x778>
      goto input_failure;
 802054a:	bf00      	nop
      break;
#endif /* FLOATING_POINT */
    }
  }
input_failure:
  return (nassigned ? nassigned : -1);
 802054c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8020550:	2b00      	cmp	r3, #0
 8020552:	d002      	beq.n	802055a <tiny_vfscanf+0x786>
 8020554:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8020558:	e007      	b.n	802056a <tiny_vfscanf+0x796>
 802055a:	f04f 33ff 	mov.w	r3, #4294967295
 802055e:	e004      	b.n	802056a <tiny_vfscanf+0x796>
        goto match_failure;
 8020560:	bf00      	nop
 8020562:	e000      	b.n	8020566 <tiny_vfscanf+0x792>
        goto match_failure;
 8020564:	bf00      	nop
match_failure:
  return (nassigned);
 8020566:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
}
 802056a:	4618      	mov	r0, r3
 802056c:	f507 772c 	add.w	r7, r7, #688	; 0x2b0
 8020570:	46bd      	mov	sp, r7
 8020572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8020576:	bf00      	nop

08020578 <tiny_sscanf>:
}
#endif

int
tiny_sscanf(const char *str, const char *fmt, ...)
{
 8020578:	b40e      	push	{r1, r2, r3}
 802057a:	b580      	push	{r7, lr}
 802057c:	b085      	sub	sp, #20
 802057e:	af00      	add	r7, sp, #0
 8020580:	6078      	str	r0, [r7, #4]
  int ret;
  va_list ap;
  
  va_start(ap, fmt);
 8020582:	f107 0320 	add.w	r3, r7, #32
 8020586:	60bb      	str	r3, [r7, #8]
  ret = tiny_vfscanf(str, fmt, ap);
 8020588:	68ba      	ldr	r2, [r7, #8]
 802058a:	69f9      	ldr	r1, [r7, #28]
 802058c:	6878      	ldr	r0, [r7, #4]
 802058e:	f7ff fc21 	bl	801fdd4 <tiny_vfscanf>
 8020592:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return (ret);
 8020594:	68fb      	ldr	r3, [r7, #12]
}
 8020596:	4618      	mov	r0, r3
 8020598:	3714      	adds	r7, #20
 802059a:	46bd      	mov	sp, r7
 802059c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80205a0:	b003      	add	sp, #12
 80205a2:	4770      	bx	lr

080205a4 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80205a4:	b480      	push	{r7}
 80205a6:	b085      	sub	sp, #20
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	6078      	str	r0, [r7, #4]
  int i = 0;
 80205ac:	2300      	movs	r3, #0
 80205ae:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80205b0:	e00e      	b.n	80205d0 <ee_skip_atoi+0x2c>
 80205b2:	68fa      	ldr	r2, [r7, #12]
 80205b4:	4613      	mov	r3, r2
 80205b6:	009b      	lsls	r3, r3, #2
 80205b8:	4413      	add	r3, r2
 80205ba:	005b      	lsls	r3, r3, #1
 80205bc:	4618      	mov	r0, r3
 80205be:	687b      	ldr	r3, [r7, #4]
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	1c59      	adds	r1, r3, #1
 80205c4:	687a      	ldr	r2, [r7, #4]
 80205c6:	6011      	str	r1, [r2, #0]
 80205c8:	781b      	ldrb	r3, [r3, #0]
 80205ca:	4403      	add	r3, r0
 80205cc:	3b30      	subs	r3, #48	; 0x30
 80205ce:	60fb      	str	r3, [r7, #12]
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	781b      	ldrb	r3, [r3, #0]
 80205d6:	2b2f      	cmp	r3, #47	; 0x2f
 80205d8:	d904      	bls.n	80205e4 <ee_skip_atoi+0x40>
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	781b      	ldrb	r3, [r3, #0]
 80205e0:	2b39      	cmp	r3, #57	; 0x39
 80205e2:	d9e6      	bls.n	80205b2 <ee_skip_atoi+0xe>
  return i;
 80205e4:	68fb      	ldr	r3, [r7, #12]
}
 80205e6:	4618      	mov	r0, r3
 80205e8:	3714      	adds	r7, #20
 80205ea:	46bd      	mov	sp, r7
 80205ec:	bc80      	pop	{r7}
 80205ee:	4770      	bx	lr

080205f0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 80205f0:	b480      	push	{r7}
 80205f2:	b099      	sub	sp, #100	; 0x64
 80205f4:	af00      	add	r7, sp, #0
 80205f6:	60f8      	str	r0, [r7, #12]
 80205f8:	60b9      	str	r1, [r7, #8]
 80205fa:	607a      	str	r2, [r7, #4]
 80205fc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 80205fe:	4b71      	ldr	r3, [pc, #452]	; (80207c4 <ee_number+0x1d4>)
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8020604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802060a:	2b00      	cmp	r3, #0
 802060c:	d002      	beq.n	8020614 <ee_number+0x24>
 802060e:	4b6e      	ldr	r3, [pc, #440]	; (80207c8 <ee_number+0x1d8>)
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8020614:	683b      	ldr	r3, [r7, #0]
 8020616:	2b01      	cmp	r3, #1
 8020618:	dd02      	ble.n	8020620 <ee_number+0x30>
 802061a:	683b      	ldr	r3, [r7, #0]
 802061c:	2b24      	cmp	r3, #36	; 0x24
 802061e:	dd01      	ble.n	8020624 <ee_number+0x34>
 8020620:	2300      	movs	r3, #0
 8020622:	e0ca      	b.n	80207ba <ee_number+0x1ca>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 8020624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020626:	f003 0301 	and.w	r3, r3, #1
 802062a:	2b00      	cmp	r3, #0
 802062c:	d001      	beq.n	8020632 <ee_number+0x42>
 802062e:	2330      	movs	r3, #48	; 0x30
 8020630:	e000      	b.n	8020634 <ee_number+0x44>
 8020632:	2320      	movs	r3, #32
 8020634:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8020638:	2300      	movs	r3, #0
 802063a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 802063e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020640:	f003 0302 	and.w	r3, r3, #2
 8020644:	2b00      	cmp	r3, #0
 8020646:	d00b      	beq.n	8020660 <ee_number+0x70>
  {
    if (num < 0)
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	2b00      	cmp	r3, #0
 802064c:	da08      	bge.n	8020660 <ee_number+0x70>
    {
      sign = '-';
 802064e:	232d      	movs	r3, #45	; 0x2d
 8020650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	425b      	negs	r3, r3
 8020658:	607b      	str	r3, [r7, #4]
      size--;
 802065a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802065c:	3b01      	subs	r3, #1
 802065e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 8020660:	2300      	movs	r3, #0
 8020662:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	2b00      	cmp	r3, #0
 8020668:	d11e      	bne.n	80206a8 <ee_number+0xb8>
    tmp[i++] = '0';
 802066a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802066c:	1c5a      	adds	r2, r3, #1
 802066e:	657a      	str	r2, [r7, #84]	; 0x54
 8020670:	3360      	adds	r3, #96	; 0x60
 8020672:	443b      	add	r3, r7
 8020674:	2230      	movs	r2, #48	; 0x30
 8020676:	f803 2c50 	strb.w	r2, [r3, #-80]
 802067a:	e018      	b.n	80206ae <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 802067c:	687b      	ldr	r3, [r7, #4]
 802067e:	683a      	ldr	r2, [r7, #0]
 8020680:	fbb3 f1f2 	udiv	r1, r3, r2
 8020684:	fb01 f202 	mul.w	r2, r1, r2
 8020688:	1a9b      	subs	r3, r3, r2
 802068a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 802068c:	441a      	add	r2, r3
 802068e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8020690:	1c59      	adds	r1, r3, #1
 8020692:	6579      	str	r1, [r7, #84]	; 0x54
 8020694:	7812      	ldrb	r2, [r2, #0]
 8020696:	3360      	adds	r3, #96	; 0x60
 8020698:	443b      	add	r3, r7
 802069a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 802069e:	687a      	ldr	r2, [r7, #4]
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80206a6:	607b      	str	r3, [r7, #4]
    while (num != 0)
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	d1e6      	bne.n	802067c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 80206ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80206b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80206b2:	429a      	cmp	r2, r3
 80206b4:	dd01      	ble.n	80206ba <ee_number+0xca>
 80206b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80206b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 80206ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80206bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80206be:	1ad3      	subs	r3, r2, r3
 80206c0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80206c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80206c4:	f003 0301 	and.w	r3, r3, #1
 80206c8:	2b00      	cmp	r3, #0
 80206ca:	d112      	bne.n	80206f2 <ee_number+0x102>
 80206cc:	e00c      	b.n	80206e8 <ee_number+0xf8>
 80206ce:	68fb      	ldr	r3, [r7, #12]
 80206d0:	1c5a      	adds	r2, r3, #1
 80206d2:	60fa      	str	r2, [r7, #12]
 80206d4:	2220      	movs	r2, #32
 80206d6:	701a      	strb	r2, [r3, #0]
 80206d8:	68bb      	ldr	r3, [r7, #8]
 80206da:	3b01      	subs	r3, #1
 80206dc:	60bb      	str	r3, [r7, #8]
 80206de:	68bb      	ldr	r3, [r7, #8]
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d101      	bne.n	80206e8 <ee_number+0xf8>
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	e068      	b.n	80207ba <ee_number+0x1ca>
 80206e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80206ea:	1e5a      	subs	r2, r3, #1
 80206ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80206ee:	2b00      	cmp	r3, #0
 80206f0:	dced      	bgt.n	80206ce <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 80206f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d01b      	beq.n	8020732 <ee_number+0x142>
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	1c5a      	adds	r2, r3, #1
 80206fe:	60fa      	str	r2, [r7, #12]
 8020700:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8020704:	701a      	strb	r2, [r3, #0]
 8020706:	68bb      	ldr	r3, [r7, #8]
 8020708:	3b01      	subs	r3, #1
 802070a:	60bb      	str	r3, [r7, #8]
 802070c:	68bb      	ldr	r3, [r7, #8]
 802070e:	2b00      	cmp	r3, #0
 8020710:	d10f      	bne.n	8020732 <ee_number+0x142>
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	e051      	b.n	80207ba <ee_number+0x1ca>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8020716:	68fb      	ldr	r3, [r7, #12]
 8020718:	1c5a      	adds	r2, r3, #1
 802071a:	60fa      	str	r2, [r7, #12]
 802071c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8020720:	701a      	strb	r2, [r3, #0]
 8020722:	68bb      	ldr	r3, [r7, #8]
 8020724:	3b01      	subs	r3, #1
 8020726:	60bb      	str	r3, [r7, #8]
 8020728:	68bb      	ldr	r3, [r7, #8]
 802072a:	2b00      	cmp	r3, #0
 802072c:	d101      	bne.n	8020732 <ee_number+0x142>
 802072e:	68fb      	ldr	r3, [r7, #12]
 8020730:	e043      	b.n	80207ba <ee_number+0x1ca>
 8020732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8020734:	1e5a      	subs	r2, r3, #1
 8020736:	66ba      	str	r2, [r7, #104]	; 0x68
 8020738:	2b00      	cmp	r3, #0
 802073a:	dcec      	bgt.n	8020716 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 802073c:	e00c      	b.n	8020758 <ee_number+0x168>
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	1c5a      	adds	r2, r3, #1
 8020742:	60fa      	str	r2, [r7, #12]
 8020744:	2230      	movs	r2, #48	; 0x30
 8020746:	701a      	strb	r2, [r3, #0]
 8020748:	68bb      	ldr	r3, [r7, #8]
 802074a:	3b01      	subs	r3, #1
 802074c:	60bb      	str	r3, [r7, #8]
 802074e:	68bb      	ldr	r3, [r7, #8]
 8020750:	2b00      	cmp	r3, #0
 8020752:	d101      	bne.n	8020758 <ee_number+0x168>
 8020754:	68fb      	ldr	r3, [r7, #12]
 8020756:	e030      	b.n	80207ba <ee_number+0x1ca>
 8020758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802075a:	1e5a      	subs	r2, r3, #1
 802075c:	66fa      	str	r2, [r7, #108]	; 0x6c
 802075e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020760:	429a      	cmp	r2, r3
 8020762:	dbec      	blt.n	802073e <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8020764:	e010      	b.n	8020788 <ee_number+0x198>
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	1c5a      	adds	r2, r3, #1
 802076a:	60fa      	str	r2, [r7, #12]
 802076c:	f107 0110 	add.w	r1, r7, #16
 8020770:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8020772:	440a      	add	r2, r1
 8020774:	7812      	ldrb	r2, [r2, #0]
 8020776:	701a      	strb	r2, [r3, #0]
 8020778:	68bb      	ldr	r3, [r7, #8]
 802077a:	3b01      	subs	r3, #1
 802077c:	60bb      	str	r3, [r7, #8]
 802077e:	68bb      	ldr	r3, [r7, #8]
 8020780:	2b00      	cmp	r3, #0
 8020782:	d101      	bne.n	8020788 <ee_number+0x198>
 8020784:	68fb      	ldr	r3, [r7, #12]
 8020786:	e018      	b.n	80207ba <ee_number+0x1ca>
 8020788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802078a:	1e5a      	subs	r2, r3, #1
 802078c:	657a      	str	r2, [r7, #84]	; 0x54
 802078e:	2b00      	cmp	r3, #0
 8020790:	dce9      	bgt.n	8020766 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8020792:	e00c      	b.n	80207ae <ee_number+0x1be>
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	1c5a      	adds	r2, r3, #1
 8020798:	60fa      	str	r2, [r7, #12]
 802079a:	2220      	movs	r2, #32
 802079c:	701a      	strb	r2, [r3, #0]
 802079e:	68bb      	ldr	r3, [r7, #8]
 80207a0:	3b01      	subs	r3, #1
 80207a2:	60bb      	str	r3, [r7, #8]
 80207a4:	68bb      	ldr	r3, [r7, #8]
 80207a6:	2b00      	cmp	r3, #0
 80207a8:	d101      	bne.n	80207ae <ee_number+0x1be>
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	e005      	b.n	80207ba <ee_number+0x1ca>
 80207ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80207b0:	1e5a      	subs	r2, r3, #1
 80207b2:	66ba      	str	r2, [r7, #104]	; 0x68
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	dced      	bgt.n	8020794 <ee_number+0x1a4>

  return str;
 80207b8:	68fb      	ldr	r3, [r7, #12]
}
 80207ba:	4618      	mov	r0, r3
 80207bc:	3764      	adds	r7, #100	; 0x64
 80207be:	46bd      	mov	sp, r7
 80207c0:	bc80      	pop	{r7}
 80207c2:	4770      	bx	lr
 80207c4:	2000011c 	.word	0x2000011c
 80207c8:	20000120 	.word	0x20000120

080207cc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80207cc:	b580      	push	{r7, lr}
 80207ce:	b092      	sub	sp, #72	; 0x48
 80207d0:	af04      	add	r7, sp, #16
 80207d2:	60f8      	str	r0, [r7, #12]
 80207d4:	60b9      	str	r1, [r7, #8]
 80207d6:	607a      	str	r2, [r7, #4]
 80207d8:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 80207da:	68bb      	ldr	r3, [r7, #8]
 80207dc:	2b00      	cmp	r3, #0
 80207de:	dc01      	bgt.n	80207e4 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 80207e0:	2300      	movs	r3, #0
 80207e2:	e142      	b.n	8020a6a <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80207e4:	68fb      	ldr	r3, [r7, #12]
 80207e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80207e8:	e12a      	b.n	8020a40 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 80207ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	1ad2      	subs	r2, r2, r3
 80207f0:	68bb      	ldr	r3, [r7, #8]
 80207f2:	3b01      	subs	r3, #1
 80207f4:	429a      	cmp	r2, r3
 80207f6:	f280 8131 	bge.w	8020a5c <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 80207fa:	687b      	ldr	r3, [r7, #4]
 80207fc:	781b      	ldrb	r3, [r3, #0]
 80207fe:	2b25      	cmp	r3, #37	; 0x25
 8020800:	d006      	beq.n	8020810 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8020802:	687a      	ldr	r2, [r7, #4]
 8020804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020806:	1c59      	adds	r1, r3, #1
 8020808:	62f9      	str	r1, [r7, #44]	; 0x2c
 802080a:	7812      	ldrb	r2, [r2, #0]
 802080c:	701a      	strb	r2, [r3, #0]
      continue;
 802080e:	e114      	b.n	8020a3a <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 8020810:	2300      	movs	r3, #0
 8020812:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	3301      	adds	r3, #1
 8020818:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	781b      	ldrb	r3, [r3, #0]
 802081e:	2b30      	cmp	r3, #48	; 0x30
 8020820:	d103      	bne.n	802082a <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8020822:	6a3b      	ldr	r3, [r7, #32]
 8020824:	f043 0301 	orr.w	r3, r3, #1
 8020828:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 802082a:	f04f 33ff 	mov.w	r3, #4294967295
 802082e:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	781b      	ldrb	r3, [r3, #0]
 8020834:	2b2f      	cmp	r3, #47	; 0x2f
 8020836:	d908      	bls.n	802084a <tiny_vsnprintf_like+0x7e>
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	781b      	ldrb	r3, [r3, #0]
 802083c:	2b39      	cmp	r3, #57	; 0x39
 802083e:	d804      	bhi.n	802084a <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8020840:	1d3b      	adds	r3, r7, #4
 8020842:	4618      	mov	r0, r3
 8020844:	f7ff feae 	bl	80205a4 <ee_skip_atoi>
 8020848:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 802084a:	f04f 33ff 	mov.w	r3, #4294967295
 802084e:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 8020850:	f04f 33ff 	mov.w	r3, #4294967295
 8020854:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 8020856:	230a      	movs	r3, #10
 8020858:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 802085a:	687b      	ldr	r3, [r7, #4]
 802085c:	781b      	ldrb	r3, [r3, #0]
 802085e:	3b58      	subs	r3, #88	; 0x58
 8020860:	2b20      	cmp	r3, #32
 8020862:	f200 8094 	bhi.w	802098e <tiny_vsnprintf_like+0x1c2>
 8020866:	a201      	add	r2, pc, #4	; (adr r2, 802086c <tiny_vsnprintf_like+0xa0>)
 8020868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802086c:	08020977 	.word	0x08020977
 8020870:	0802098f 	.word	0x0802098f
 8020874:	0802098f 	.word	0x0802098f
 8020878:	0802098f 	.word	0x0802098f
 802087c:	0802098f 	.word	0x0802098f
 8020880:	0802098f 	.word	0x0802098f
 8020884:	0802098f 	.word	0x0802098f
 8020888:	0802098f 	.word	0x0802098f
 802088c:	0802098f 	.word	0x0802098f
 8020890:	0802098f 	.word	0x0802098f
 8020894:	0802098f 	.word	0x0802098f
 8020898:	080208fb 	.word	0x080208fb
 802089c:	08020985 	.word	0x08020985
 80208a0:	0802098f 	.word	0x0802098f
 80208a4:	0802098f 	.word	0x0802098f
 80208a8:	0802098f 	.word	0x0802098f
 80208ac:	0802098f 	.word	0x0802098f
 80208b0:	08020985 	.word	0x08020985
 80208b4:	0802098f 	.word	0x0802098f
 80208b8:	0802098f 	.word	0x0802098f
 80208bc:	0802098f 	.word	0x0802098f
 80208c0:	0802098f 	.word	0x0802098f
 80208c4:	0802098f 	.word	0x0802098f
 80208c8:	0802098f 	.word	0x0802098f
 80208cc:	0802098f 	.word	0x0802098f
 80208d0:	0802098f 	.word	0x0802098f
 80208d4:	0802098f 	.word	0x0802098f
 80208d8:	0802091b 	.word	0x0802091b
 80208dc:	0802098f 	.word	0x0802098f
 80208e0:	080209db 	.word	0x080209db
 80208e4:	0802098f 	.word	0x0802098f
 80208e8:	0802098f 	.word	0x0802098f
 80208ec:	0802097f 	.word	0x0802097f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 80208f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208f2:	1c5a      	adds	r2, r3, #1
 80208f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80208f6:	2220      	movs	r2, #32
 80208f8:	701a      	strb	r2, [r3, #0]
 80208fa:	69fb      	ldr	r3, [r7, #28]
 80208fc:	3b01      	subs	r3, #1
 80208fe:	61fb      	str	r3, [r7, #28]
 8020900:	69fb      	ldr	r3, [r7, #28]
 8020902:	2b00      	cmp	r3, #0
 8020904:	dcf4      	bgt.n	80208f0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	1d1a      	adds	r2, r3, #4
 802090a:	603a      	str	r2, [r7, #0]
 802090c:	6819      	ldr	r1, [r3, #0]
 802090e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020910:	1c5a      	adds	r2, r3, #1
 8020912:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020914:	b2ca      	uxtb	r2, r1
 8020916:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8020918:	e08f      	b.n	8020a3a <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 802091a:	683b      	ldr	r3, [r7, #0]
 802091c:	1d1a      	adds	r2, r3, #4
 802091e:	603a      	str	r2, [r7, #0]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8020924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020926:	2b00      	cmp	r3, #0
 8020928:	d101      	bne.n	802092e <tiny_vsnprintf_like+0x162>
 802092a:	4b52      	ldr	r3, [pc, #328]	; (8020a74 <tiny_vsnprintf_like+0x2a8>)
 802092c:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 802092e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020930:	f7df fc26 	bl	8000180 <strlen>
 8020934:	4603      	mov	r3, r0
 8020936:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8020938:	e004      	b.n	8020944 <tiny_vsnprintf_like+0x178>
 802093a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802093c:	1c5a      	adds	r2, r3, #1
 802093e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020940:	2220      	movs	r2, #32
 8020942:	701a      	strb	r2, [r3, #0]
 8020944:	69fb      	ldr	r3, [r7, #28]
 8020946:	1e5a      	subs	r2, r3, #1
 8020948:	61fa      	str	r2, [r7, #28]
 802094a:	693a      	ldr	r2, [r7, #16]
 802094c:	429a      	cmp	r2, r3
 802094e:	dbf4      	blt.n	802093a <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8020950:	2300      	movs	r3, #0
 8020952:	62bb      	str	r3, [r7, #40]	; 0x28
 8020954:	e00a      	b.n	802096c <tiny_vsnprintf_like+0x1a0>
 8020956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8020958:	1c53      	adds	r3, r2, #1
 802095a:	627b      	str	r3, [r7, #36]	; 0x24
 802095c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802095e:	1c59      	adds	r1, r3, #1
 8020960:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020962:	7812      	ldrb	r2, [r2, #0]
 8020964:	701a      	strb	r2, [r3, #0]
 8020966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020968:	3301      	adds	r3, #1
 802096a:	62bb      	str	r3, [r7, #40]	; 0x28
 802096c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802096e:	693b      	ldr	r3, [r7, #16]
 8020970:	429a      	cmp	r2, r3
 8020972:	dbf0      	blt.n	8020956 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8020974:	e061      	b.n	8020a3a <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 8020976:	6a3b      	ldr	r3, [r7, #32]
 8020978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802097c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 802097e:	2310      	movs	r3, #16
 8020980:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8020982:	e02d      	b.n	80209e0 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8020984:	6a3b      	ldr	r3, [r7, #32]
 8020986:	f043 0302 	orr.w	r3, r3, #2
 802098a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 802098c:	e025      	b.n	80209da <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	781b      	ldrb	r3, [r3, #0]
 8020992:	2b25      	cmp	r3, #37	; 0x25
 8020994:	d004      	beq.n	80209a0 <tiny_vsnprintf_like+0x1d4>
 8020996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020998:	1c5a      	adds	r2, r3, #1
 802099a:	62fa      	str	r2, [r7, #44]	; 0x2c
 802099c:	2225      	movs	r2, #37	; 0x25
 802099e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 80209a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80209a2:	68fb      	ldr	r3, [r7, #12]
 80209a4:	1ad2      	subs	r2, r2, r3
 80209a6:	68bb      	ldr	r3, [r7, #8]
 80209a8:	3b01      	subs	r3, #1
 80209aa:	429a      	cmp	r2, r3
 80209ac:	da17      	bge.n	80209de <tiny_vsnprintf_like+0x212>
        if (*fmt)
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	781b      	ldrb	r3, [r3, #0]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d006      	beq.n	80209c4 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 80209b6:	687a      	ldr	r2, [r7, #4]
 80209b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209ba:	1c59      	adds	r1, r3, #1
 80209bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80209be:	7812      	ldrb	r2, [r2, #0]
 80209c0:	701a      	strb	r2, [r3, #0]
 80209c2:	e002      	b.n	80209ca <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	3b01      	subs	r3, #1
 80209c8:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 80209ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	1ad2      	subs	r2, r2, r3
 80209d0:	68bb      	ldr	r3, [r7, #8]
 80209d2:	3b01      	subs	r3, #1
 80209d4:	429a      	cmp	r2, r3
 80209d6:	db2f      	blt.n	8020a38 <tiny_vsnprintf_like+0x26c>
 80209d8:	e002      	b.n	80209e0 <tiny_vsnprintf_like+0x214>
        break;
 80209da:	bf00      	nop
 80209dc:	e000      	b.n	80209e0 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 80209de:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 80209e0:	697b      	ldr	r3, [r7, #20]
 80209e2:	2b6c      	cmp	r3, #108	; 0x6c
 80209e4:	d105      	bne.n	80209f2 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 80209e6:	683b      	ldr	r3, [r7, #0]
 80209e8:	1d1a      	adds	r2, r3, #4
 80209ea:	603a      	str	r2, [r7, #0]
 80209ec:	681b      	ldr	r3, [r3, #0]
 80209ee:	637b      	str	r3, [r7, #52]	; 0x34
 80209f0:	e00f      	b.n	8020a12 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 80209f2:	6a3b      	ldr	r3, [r7, #32]
 80209f4:	f003 0302 	and.w	r3, r3, #2
 80209f8:	2b00      	cmp	r3, #0
 80209fa:	d005      	beq.n	8020a08 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 80209fc:	683b      	ldr	r3, [r7, #0]
 80209fe:	1d1a      	adds	r2, r3, #4
 8020a00:	603a      	str	r2, [r7, #0]
 8020a02:	681b      	ldr	r3, [r3, #0]
 8020a04:	637b      	str	r3, [r7, #52]	; 0x34
 8020a06:	e004      	b.n	8020a12 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8020a08:	683b      	ldr	r3, [r7, #0]
 8020a0a:	1d1a      	adds	r2, r3, #4
 8020a0c:	603a      	str	r2, [r7, #0]
 8020a0e:	681b      	ldr	r3, [r3, #0]
 8020a10:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8020a12:	68bb      	ldr	r3, [r7, #8]
 8020a14:	1e5a      	subs	r2, r3, #1
 8020a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	1acb      	subs	r3, r1, r3
 8020a1c:	1ad1      	subs	r1, r2, r3
 8020a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020a20:	6a3b      	ldr	r3, [r7, #32]
 8020a22:	9302      	str	r3, [sp, #8]
 8020a24:	69bb      	ldr	r3, [r7, #24]
 8020a26:	9301      	str	r3, [sp, #4]
 8020a28:	69fb      	ldr	r3, [r7, #28]
 8020a2a:	9300      	str	r3, [sp, #0]
 8020a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8020a30:	f7ff fdde 	bl	80205f0 <ee_number>
 8020a34:	62f8      	str	r0, [r7, #44]	; 0x2c
 8020a36:	e000      	b.n	8020a3a <tiny_vsnprintf_like+0x26e>
        continue;
 8020a38:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8020a3a:	687b      	ldr	r3, [r7, #4]
 8020a3c:	3301      	adds	r3, #1
 8020a3e:	607b      	str	r3, [r7, #4]
 8020a40:	687b      	ldr	r3, [r7, #4]
 8020a42:	781b      	ldrb	r3, [r3, #0]
 8020a44:	2b00      	cmp	r3, #0
 8020a46:	f47f aed0 	bne.w	80207ea <tiny_vsnprintf_like+0x1e>
 8020a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a4c:	68fb      	ldr	r3, [r7, #12]
 8020a4e:	1ad2      	subs	r2, r2, r3
 8020a50:	68bb      	ldr	r3, [r7, #8]
 8020a52:	3b01      	subs	r3, #1
 8020a54:	429a      	cmp	r2, r3
 8020a56:	f6bf aec8 	bge.w	80207ea <tiny_vsnprintf_like+0x1e>
 8020a5a:	e000      	b.n	8020a5e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8020a5c:	bf00      	nop
  }

  *str = '\0';
 8020a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a60:	2200      	movs	r2, #0
 8020a62:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8020a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020a66:	68fb      	ldr	r3, [r7, #12]
 8020a68:	1ad3      	subs	r3, r2, r3
}
 8020a6a:	4618      	mov	r0, r3
 8020a6c:	3738      	adds	r7, #56	; 0x38
 8020a6e:	46bd      	mov	sp, r7
 8020a70:	bd80      	pop	{r7, pc}
 8020a72:	bf00      	nop
 8020a74:	08022aac 	.word	0x08022aac

08020a78 <__libc_init_array>:
 8020a78:	b570      	push	{r4, r5, r6, lr}
 8020a7a:	4d0d      	ldr	r5, [pc, #52]	; (8020ab0 <__libc_init_array+0x38>)
 8020a7c:	4c0d      	ldr	r4, [pc, #52]	; (8020ab4 <__libc_init_array+0x3c>)
 8020a7e:	1b64      	subs	r4, r4, r5
 8020a80:	10a4      	asrs	r4, r4, #2
 8020a82:	2600      	movs	r6, #0
 8020a84:	42a6      	cmp	r6, r4
 8020a86:	d109      	bne.n	8020a9c <__libc_init_array+0x24>
 8020a88:	4d0b      	ldr	r5, [pc, #44]	; (8020ab8 <__libc_init_array+0x40>)
 8020a8a:	4c0c      	ldr	r4, [pc, #48]	; (8020abc <__libc_init_array+0x44>)
 8020a8c:	f000 f8b4 	bl	8020bf8 <_init>
 8020a90:	1b64      	subs	r4, r4, r5
 8020a92:	10a4      	asrs	r4, r4, #2
 8020a94:	2600      	movs	r6, #0
 8020a96:	42a6      	cmp	r6, r4
 8020a98:	d105      	bne.n	8020aa6 <__libc_init_array+0x2e>
 8020a9a:	bd70      	pop	{r4, r5, r6, pc}
 8020a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020aa0:	4798      	blx	r3
 8020aa2:	3601      	adds	r6, #1
 8020aa4:	e7ee      	b.n	8020a84 <__libc_init_array+0xc>
 8020aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8020aaa:	4798      	blx	r3
 8020aac:	3601      	adds	r6, #1
 8020aae:	e7f2      	b.n	8020a96 <__libc_init_array+0x1e>
 8020ab0:	0802348c 	.word	0x0802348c
 8020ab4:	0802348c 	.word	0x0802348c
 8020ab8:	0802348c 	.word	0x0802348c
 8020abc:	08023490 	.word	0x08023490

08020ac0 <memset>:
 8020ac0:	4402      	add	r2, r0
 8020ac2:	4603      	mov	r3, r0
 8020ac4:	4293      	cmp	r3, r2
 8020ac6:	d100      	bne.n	8020aca <memset+0xa>
 8020ac8:	4770      	bx	lr
 8020aca:	f803 1b01 	strb.w	r1, [r3], #1
 8020ace:	e7f9      	b.n	8020ac4 <memset+0x4>

08020ad0 <strncmp>:
 8020ad0:	b510      	push	{r4, lr}
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	b172      	cbz	r2, 8020af4 <strncmp+0x24>
 8020ad6:	3901      	subs	r1, #1
 8020ad8:	1884      	adds	r4, r0, r2
 8020ada:	f813 0b01 	ldrb.w	r0, [r3], #1
 8020ade:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8020ae2:	4290      	cmp	r0, r2
 8020ae4:	d101      	bne.n	8020aea <strncmp+0x1a>
 8020ae6:	42a3      	cmp	r3, r4
 8020ae8:	d101      	bne.n	8020aee <strncmp+0x1e>
 8020aea:	1a80      	subs	r0, r0, r2
 8020aec:	bd10      	pop	{r4, pc}
 8020aee:	2800      	cmp	r0, #0
 8020af0:	d1f3      	bne.n	8020ada <strncmp+0xa>
 8020af2:	e7fa      	b.n	8020aea <strncmp+0x1a>
 8020af4:	4610      	mov	r0, r2
 8020af6:	e7f9      	b.n	8020aec <strncmp+0x1c>

08020af8 <floor>:
 8020af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020afc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8020b00:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8020b04:	2e13      	cmp	r6, #19
 8020b06:	4602      	mov	r2, r0
 8020b08:	460b      	mov	r3, r1
 8020b0a:	4607      	mov	r7, r0
 8020b0c:	460c      	mov	r4, r1
 8020b0e:	4605      	mov	r5, r0
 8020b10:	dc33      	bgt.n	8020b7a <floor+0x82>
 8020b12:	2e00      	cmp	r6, #0
 8020b14:	da14      	bge.n	8020b40 <floor+0x48>
 8020b16:	a334      	add	r3, pc, #208	; (adr r3, 8020be8 <floor+0xf0>)
 8020b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b1c:	f7df fb3e 	bl	800019c <__adddf3>
 8020b20:	2200      	movs	r2, #0
 8020b22:	2300      	movs	r3, #0
 8020b24:	f7df fd6e 	bl	8000604 <__aeabi_dcmpgt>
 8020b28:	b138      	cbz	r0, 8020b3a <floor+0x42>
 8020b2a:	2c00      	cmp	r4, #0
 8020b2c:	da58      	bge.n	8020be0 <floor+0xe8>
 8020b2e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8020b32:	431d      	orrs	r5, r3
 8020b34:	d001      	beq.n	8020b3a <floor+0x42>
 8020b36:	4c2e      	ldr	r4, [pc, #184]	; (8020bf0 <floor+0xf8>)
 8020b38:	2500      	movs	r5, #0
 8020b3a:	4623      	mov	r3, r4
 8020b3c:	462f      	mov	r7, r5
 8020b3e:	e025      	b.n	8020b8c <floor+0x94>
 8020b40:	4a2c      	ldr	r2, [pc, #176]	; (8020bf4 <floor+0xfc>)
 8020b42:	fa42 f806 	asr.w	r8, r2, r6
 8020b46:	ea01 0208 	and.w	r2, r1, r8
 8020b4a:	4302      	orrs	r2, r0
 8020b4c:	d01e      	beq.n	8020b8c <floor+0x94>
 8020b4e:	a326      	add	r3, pc, #152	; (adr r3, 8020be8 <floor+0xf0>)
 8020b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020b54:	f7df fb22 	bl	800019c <__adddf3>
 8020b58:	2200      	movs	r2, #0
 8020b5a:	2300      	movs	r3, #0
 8020b5c:	f7df fd52 	bl	8000604 <__aeabi_dcmpgt>
 8020b60:	2800      	cmp	r0, #0
 8020b62:	d0ea      	beq.n	8020b3a <floor+0x42>
 8020b64:	2c00      	cmp	r4, #0
 8020b66:	bfbe      	ittt	lt
 8020b68:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8020b6c:	fa43 f606 	asrlt.w	r6, r3, r6
 8020b70:	19a4      	addlt	r4, r4, r6
 8020b72:	ea24 0408 	bic.w	r4, r4, r8
 8020b76:	2500      	movs	r5, #0
 8020b78:	e7df      	b.n	8020b3a <floor+0x42>
 8020b7a:	2e33      	cmp	r6, #51	; 0x33
 8020b7c:	dd0a      	ble.n	8020b94 <floor+0x9c>
 8020b7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8020b82:	d103      	bne.n	8020b8c <floor+0x94>
 8020b84:	f7df fb0a 	bl	800019c <__adddf3>
 8020b88:	4607      	mov	r7, r0
 8020b8a:	460b      	mov	r3, r1
 8020b8c:	4638      	mov	r0, r7
 8020b8e:	4619      	mov	r1, r3
 8020b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b94:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8020b98:	f04f 32ff 	mov.w	r2, #4294967295
 8020b9c:	fa22 f808 	lsr.w	r8, r2, r8
 8020ba0:	ea18 0f00 	tst.w	r8, r0
 8020ba4:	d0f2      	beq.n	8020b8c <floor+0x94>
 8020ba6:	a310      	add	r3, pc, #64	; (adr r3, 8020be8 <floor+0xf0>)
 8020ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020bac:	f7df faf6 	bl	800019c <__adddf3>
 8020bb0:	2200      	movs	r2, #0
 8020bb2:	2300      	movs	r3, #0
 8020bb4:	f7df fd26 	bl	8000604 <__aeabi_dcmpgt>
 8020bb8:	2800      	cmp	r0, #0
 8020bba:	d0be      	beq.n	8020b3a <floor+0x42>
 8020bbc:	2c00      	cmp	r4, #0
 8020bbe:	da02      	bge.n	8020bc6 <floor+0xce>
 8020bc0:	2e14      	cmp	r6, #20
 8020bc2:	d103      	bne.n	8020bcc <floor+0xd4>
 8020bc4:	3401      	adds	r4, #1
 8020bc6:	ea25 0508 	bic.w	r5, r5, r8
 8020bca:	e7b6      	b.n	8020b3a <floor+0x42>
 8020bcc:	2301      	movs	r3, #1
 8020bce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8020bd2:	fa03 f606 	lsl.w	r6, r3, r6
 8020bd6:	4435      	add	r5, r6
 8020bd8:	42bd      	cmp	r5, r7
 8020bda:	bf38      	it	cc
 8020bdc:	18e4      	addcc	r4, r4, r3
 8020bde:	e7f2      	b.n	8020bc6 <floor+0xce>
 8020be0:	2500      	movs	r5, #0
 8020be2:	462c      	mov	r4, r5
 8020be4:	e7a9      	b.n	8020b3a <floor+0x42>
 8020be6:	bf00      	nop
 8020be8:	8800759c 	.word	0x8800759c
 8020bec:	7e37e43c 	.word	0x7e37e43c
 8020bf0:	bff00000 	.word	0xbff00000
 8020bf4:	000fffff 	.word	0x000fffff

08020bf8 <_init>:
 8020bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bfa:	bf00      	nop
 8020bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020bfe:	bc08      	pop	{r3}
 8020c00:	469e      	mov	lr, r3
 8020c02:	4770      	bx	lr

08020c04 <_fini>:
 8020c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c06:	bf00      	nop
 8020c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020c0a:	bc08      	pop	{r3}
 8020c0c:	469e      	mov	lr, r3
 8020c0e:	4770      	bx	lr
